(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
// https://d3js.org/d3-array/ v1.2.4 Copyright 2018 Mike Bostock
(function (global, factory) {
typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
typeof define === 'function' && define.amd ? define(['exports'], factory) :
(factory((global.d3 = global.d3 || {})));
}(this, (function (exports) { 'use strict';

function ascending(a, b) {
  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
}

function bisector(compare) {
  if (compare.length === 1) compare = ascendingComparator(compare);
  return {
    left: function(a, x, lo, hi) {
      if (lo == null) lo = 0;
      if (hi == null) hi = a.length;
      while (lo < hi) {
        var mid = lo + hi >>> 1;
        if (compare(a[mid], x) < 0) lo = mid + 1;
        else hi = mid;
      }
      return lo;
    },
    right: function(a, x, lo, hi) {
      if (lo == null) lo = 0;
      if (hi == null) hi = a.length;
      while (lo < hi) {
        var mid = lo + hi >>> 1;
        if (compare(a[mid], x) > 0) hi = mid;
        else lo = mid + 1;
      }
      return lo;
    }
  };
}

function ascendingComparator(f) {
  return function(d, x) {
    return ascending(f(d), x);
  };
}

var ascendingBisect = bisector(ascending);
var bisectRight = ascendingBisect.right;
var bisectLeft = ascendingBisect.left;

function pairs(array, f) {
  if (f == null) f = pair;
  var i = 0, n = array.length - 1, p = array[0], pairs = new Array(n < 0 ? 0 : n);
  while (i < n) pairs[i] = f(p, p = array[++i]);
  return pairs;
}

function pair(a, b) {
  return [a, b];
}

function cross(values0, values1, reduce) {
  var n0 = values0.length,
      n1 = values1.length,
      values = new Array(n0 * n1),
      i0,
      i1,
      i,
      value0;

  if (reduce == null) reduce = pair;

  for (i0 = i = 0; i0 < n0; ++i0) {
    for (value0 = values0[i0], i1 = 0; i1 < n1; ++i1, ++i) {
      values[i] = reduce(value0, values1[i1]);
    }
  }

  return values;
}

function descending(a, b) {
  return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;
}

function number(x) {
  return x === null ? NaN : +x;
}

function variance(values, valueof) {
  var n = values.length,
      m = 0,
      i = -1,
      mean = 0,
      value,
      delta,
      sum = 0;

  if (valueof == null) {
    while (++i < n) {
      if (!isNaN(value = number(values[i]))) {
        delta = value - mean;
        mean += delta / ++m;
        sum += delta * (value - mean);
      }
    }
  }

  else {
    while (++i < n) {
      if (!isNaN(value = number(valueof(values[i], i, values)))) {
        delta = value - mean;
        mean += delta / ++m;
        sum += delta * (value - mean);
      }
    }
  }

  if (m > 1) return sum / (m - 1);
}

function deviation(array, f) {
  var v = variance(array, f);
  return v ? Math.sqrt(v) : v;
}

function extent(values, valueof) {
  var n = values.length,
      i = -1,
      value,
      min,
      max;

  if (valueof == null) {
    while (++i < n) { // Find the first comparable value.
      if ((value = values[i]) != null && value >= value) {
        min = max = value;
        while (++i < n) { // Compare the remaining values.
          if ((value = values[i]) != null) {
            if (min > value) min = value;
            if (max < value) max = value;
          }
        }
      }
    }
  }

  else {
    while (++i < n) { // Find the first comparable value.
      if ((value = valueof(values[i], i, values)) != null && value >= value) {
        min = max = value;
        while (++i < n) { // Compare the remaining values.
          if ((value = valueof(values[i], i, values)) != null) {
            if (min > value) min = value;
            if (max < value) max = value;
          }
        }
      }
    }
  }

  return [min, max];
}

var array = Array.prototype;

var slice = array.slice;
var map = array.map;

function constant(x) {
  return function() {
    return x;
  };
}

function identity(x) {
  return x;
}

function range(start, stop, step) {
  start = +start, stop = +stop, step = (n = arguments.length) < 2 ? (stop = start, start = 0, 1) : n < 3 ? 1 : +step;

  var i = -1,
      n = Math.max(0, Math.ceil((stop - start) / step)) | 0,
      range = new Array(n);

  while (++i < n) {
    range[i] = start + i * step;
  }

  return range;
}

var e10 = Math.sqrt(50),
    e5 = Math.sqrt(10),
    e2 = Math.sqrt(2);

function ticks(start, stop, count) {
  var reverse,
      i = -1,
      n,
      ticks,
      step;

  stop = +stop, start = +start, count = +count;
  if (start === stop && count > 0) return [start];
  if (reverse = stop < start) n = start, start = stop, stop = n;
  if ((step = tickIncrement(start, stop, count)) === 0 || !isFinite(step)) return [];

  if (step > 0) {
    start = Math.ceil(start / step);
    stop = Math.floor(stop / step);
    ticks = new Array(n = Math.ceil(stop - start + 1));
    while (++i < n) ticks[i] = (start + i) * step;
  } else {
    start = Math.floor(start * step);
    stop = Math.ceil(stop * step);
    ticks = new Array(n = Math.ceil(start - stop + 1));
    while (++i < n) ticks[i] = (start - i) / step;
  }

  if (reverse) ticks.reverse();

  return ticks;
}

function tickIncrement(start, stop, count) {
  var step = (stop - start) / Math.max(0, count),
      power = Math.floor(Math.log(step) / Math.LN10),
      error = step / Math.pow(10, power);
  return power >= 0
      ? (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1) * Math.pow(10, power)
      : -Math.pow(10, -power) / (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1);
}

function tickStep(start, stop, count) {
  var step0 = Math.abs(stop - start) / Math.max(0, count),
      step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)),
      error = step0 / step1;
  if (error >= e10) step1 *= 10;
  else if (error >= e5) step1 *= 5;
  else if (error >= e2) step1 *= 2;
  return stop < start ? -step1 : step1;
}

function sturges(values) {
  return Math.ceil(Math.log(values.length) / Math.LN2) + 1;
}

function histogram() {
  var value = identity,
      domain = extent,
      threshold = sturges;

  function histogram(data) {
    var i,
        n = data.length,
        x,
        values = new Array(n);

    for (i = 0; i < n; ++i) {
      values[i] = value(data[i], i, data);
    }

    var xz = domain(values),
        x0 = xz[0],
        x1 = xz[1],
        tz = threshold(values, x0, x1);

    // Convert number of thresholds into uniform thresholds.
    if (!Array.isArray(tz)) {
      tz = tickStep(x0, x1, tz);
      tz = range(Math.ceil(x0 / tz) * tz, x1, tz); // exclusive
    }

    // Remove any thresholds outside the domain.
    var m = tz.length;
    while (tz[0] <= x0) tz.shift(), --m;
    while (tz[m - 1] > x1) tz.pop(), --m;

    var bins = new Array(m + 1),
        bin;

    // Initialize bins.
    for (i = 0; i <= m; ++i) {
      bin = bins[i] = [];
      bin.x0 = i > 0 ? tz[i - 1] : x0;
      bin.x1 = i < m ? tz[i] : x1;
    }

    // Assign data to bins by value, ignoring any outside the domain.
    for (i = 0; i < n; ++i) {
      x = values[i];
      if (x0 <= x && x <= x1) {
        bins[bisectRight(tz, x, 0, m)].push(data[i]);
      }
    }

    return bins;
  }

  histogram.value = function(_) {
    return arguments.length ? (value = typeof _ === "function" ? _ : constant(_), histogram) : value;
  };

  histogram.domain = function(_) {
    return arguments.length ? (domain = typeof _ === "function" ? _ : constant([_[0], _[1]]), histogram) : domain;
  };

  histogram.thresholds = function(_) {
    return arguments.length ? (threshold = typeof _ === "function" ? _ : Array.isArray(_) ? constant(slice.call(_)) : constant(_), histogram) : threshold;
  };

  return histogram;
}

function quantile(values, p, valueof) {
  if (valueof == null) valueof = number;
  if (!(n = values.length)) return;
  if ((p = +p) <= 0 || n < 2) return +valueof(values[0], 0, values);
  if (p >= 1) return +valueof(values[n - 1], n - 1, values);
  var n,
      i = (n - 1) * p,
      i0 = Math.floor(i),
      value0 = +valueof(values[i0], i0, values),
      value1 = +valueof(values[i0 + 1], i0 + 1, values);
  return value0 + (value1 - value0) * (i - i0);
}

function freedmanDiaconis(values, min, max) {
  values = map.call(values, number).sort(ascending);
  return Math.ceil((max - min) / (2 * (quantile(values, 0.75) - quantile(values, 0.25)) * Math.pow(values.length, -1 / 3)));
}

function scott(values, min, max) {
  return Math.ceil((max - min) / (3.5 * deviation(values) * Math.pow(values.length, -1 / 3)));
}

function max(values, valueof) {
  var n = values.length,
      i = -1,
      value,
      max;

  if (valueof == null) {
    while (++i < n) { // Find the first comparable value.
      if ((value = values[i]) != null && value >= value) {
        max = value;
        while (++i < n) { // Compare the remaining values.
          if ((value = values[i]) != null && value > max) {
            max = value;
          }
        }
      }
    }
  }

  else {
    while (++i < n) { // Find the first comparable value.
      if ((value = valueof(values[i], i, values)) != null && value >= value) {
        max = value;
        while (++i < n) { // Compare the remaining values.
          if ((value = valueof(values[i], i, values)) != null && value > max) {
            max = value;
          }
        }
      }
    }
  }

  return max;
}

function mean(values, valueof) {
  var n = values.length,
      m = n,
      i = -1,
      value,
      sum = 0;

  if (valueof == null) {
    while (++i < n) {
      if (!isNaN(value = number(values[i]))) sum += value;
      else --m;
    }
  }

  else {
    while (++i < n) {
      if (!isNaN(value = number(valueof(values[i], i, values)))) sum += value;
      else --m;
    }
  }

  if (m) return sum / m;
}

function median(values, valueof) {
  var n = values.length,
      i = -1,
      value,
      numbers = [];

  if (valueof == null) {
    while (++i < n) {
      if (!isNaN(value = number(values[i]))) {
        numbers.push(value);
      }
    }
  }

  else {
    while (++i < n) {
      if (!isNaN(value = number(valueof(values[i], i, values)))) {
        numbers.push(value);
      }
    }
  }

  return quantile(numbers.sort(ascending), 0.5);
}

function merge(arrays) {
  var n = arrays.length,
      m,
      i = -1,
      j = 0,
      merged,
      array;

  while (++i < n) j += arrays[i].length;
  merged = new Array(j);

  while (--n >= 0) {
    array = arrays[n];
    m = array.length;
    while (--m >= 0) {
      merged[--j] = array[m];
    }
  }

  return merged;
}

function min(values, valueof) {
  var n = values.length,
      i = -1,
      value,
      min;

  if (valueof == null) {
    while (++i < n) { // Find the first comparable value.
      if ((value = values[i]) != null && value >= value) {
        min = value;
        while (++i < n) { // Compare the remaining values.
          if ((value = values[i]) != null && min > value) {
            min = value;
          }
        }
      }
    }
  }

  else {
    while (++i < n) { // Find the first comparable value.
      if ((value = valueof(values[i], i, values)) != null && value >= value) {
        min = value;
        while (++i < n) { // Compare the remaining values.
          if ((value = valueof(values[i], i, values)) != null && min > value) {
            min = value;
          }
        }
      }
    }
  }

  return min;
}

function permute(array, indexes) {
  var i = indexes.length, permutes = new Array(i);
  while (i--) permutes[i] = array[indexes[i]];
  return permutes;
}

function scan(values, compare) {
  if (!(n = values.length)) return;
  var n,
      i = 0,
      j = 0,
      xi,
      xj = values[j];

  if (compare == null) compare = ascending;

  while (++i < n) {
    if (compare(xi = values[i], xj) < 0 || compare(xj, xj) !== 0) {
      xj = xi, j = i;
    }
  }

  if (compare(xj, xj) === 0) return j;
}

function shuffle(array, i0, i1) {
  var m = (i1 == null ? array.length : i1) - (i0 = i0 == null ? 0 : +i0),
      t,
      i;

  while (m) {
    i = Math.random() * m-- | 0;
    t = array[m + i0];
    array[m + i0] = array[i + i0];
    array[i + i0] = t;
  }

  return array;
}

function sum(values, valueof) {
  var n = values.length,
      i = -1,
      value,
      sum = 0;

  if (valueof == null) {
    while (++i < n) {
      if (value = +values[i]) sum += value; // Note: zero and null are equivalent.
    }
  }

  else {
    while (++i < n) {
      if (value = +valueof(values[i], i, values)) sum += value;
    }
  }

  return sum;
}

function transpose(matrix) {
  if (!(n = matrix.length)) return [];
  for (var i = -1, m = min(matrix, length), transpose = new Array(m); ++i < m;) {
    for (var j = -1, n, row = transpose[i] = new Array(n); ++j < n;) {
      row[j] = matrix[j][i];
    }
  }
  return transpose;
}

function length(d) {
  return d.length;
}

function zip() {
  return transpose(arguments);
}

exports.bisect = bisectRight;
exports.bisectRight = bisectRight;
exports.bisectLeft = bisectLeft;
exports.ascending = ascending;
exports.bisector = bisector;
exports.cross = cross;
exports.descending = descending;
exports.deviation = deviation;
exports.extent = extent;
exports.histogram = histogram;
exports.thresholdFreedmanDiaconis = freedmanDiaconis;
exports.thresholdScott = scott;
exports.thresholdSturges = sturges;
exports.max = max;
exports.mean = mean;
exports.median = median;
exports.merge = merge;
exports.min = min;
exports.pairs = pairs;
exports.permute = permute;
exports.quantile = quantile;
exports.range = range;
exports.scan = scan;
exports.shuffle = shuffle;
exports.sum = sum;
exports.ticks = ticks;
exports.tickIncrement = tickIncrement;
exports.tickStep = tickStep;
exports.transpose = transpose;
exports.variance = variance;
exports.zip = zip;

Object.defineProperty(exports, '__esModule', { value: true });

})));

},{}],2:[function(require,module,exports){
// https://d3js.org/d3-axis/ v1.0.12 Copyright 2018 Mike Bostock
(function (global, factory) {
typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
typeof define === 'function' && define.amd ? define(['exports'], factory) :
(factory((global.d3 = global.d3 || {})));
}(this, (function (exports) { 'use strict';

var slice = Array.prototype.slice;

function identity(x) {
  return x;
}

var top = 1,
    right = 2,
    bottom = 3,
    left = 4,
    epsilon = 1e-6;

function translateX(x) {
  return "translate(" + (x + 0.5) + ",0)";
}

function translateY(y) {
  return "translate(0," + (y + 0.5) + ")";
}

function number(scale) {
  return function(d) {
    return +scale(d);
  };
}

function center(scale) {
  var offset = Math.max(0, scale.bandwidth() - 1) / 2; // Adjust for 0.5px offset.
  if (scale.round()) offset = Math.round(offset);
  return function(d) {
    return +scale(d) + offset;
  };
}

function entering() {
  return !this.__axis;
}

function axis(orient, scale) {
  var tickArguments = [],
      tickValues = null,
      tickFormat = null,
      tickSizeInner = 6,
      tickSizeOuter = 6,
      tickPadding = 3,
      k = orient === top || orient === left ? -1 : 1,
      x = orient === left || orient === right ? "x" : "y",
      transform = orient === top || orient === bottom ? translateX : translateY;

  function axis(context) {
    var values = tickValues == null ? (scale.ticks ? scale.ticks.apply(scale, tickArguments) : scale.domain()) : tickValues,
        format = tickFormat == null ? (scale.tickFormat ? scale.tickFormat.apply(scale, tickArguments) : identity) : tickFormat,
        spacing = Math.max(tickSizeInner, 0) + tickPadding,
        range = scale.range(),
        range0 = +range[0] + 0.5,
        range1 = +range[range.length - 1] + 0.5,
        position = (scale.bandwidth ? center : number)(scale.copy()),
        selection = context.selection ? context.selection() : context,
        path = selection.selectAll(".domain").data([null]),
        tick = selection.selectAll(".tick").data(values, scale).order(),
        tickExit = tick.exit(),
        tickEnter = tick.enter().append("g").attr("class", "tick"),
        line = tick.select("line"),
        text = tick.select("text");

    path = path.merge(path.enter().insert("path", ".tick")
        .attr("class", "domain")
        .attr("stroke", "currentColor"));

    tick = tick.merge(tickEnter);

    line = line.merge(tickEnter.append("line")
        .attr("stroke", "currentColor")
        .attr(x + "2", k * tickSizeInner));

    text = text.merge(tickEnter.append("text")
        .attr("fill", "currentColor")
        .attr(x, k * spacing)
        .attr("dy", orient === top ? "0em" : orient === bottom ? "0.71em" : "0.32em"));

    if (context !== selection) {
      path = path.transition(context);
      tick = tick.transition(context);
      line = line.transition(context);
      text = text.transition(context);

      tickExit = tickExit.transition(context)
          .attr("opacity", epsilon)
          .attr("transform", function(d) { return isFinite(d = position(d)) ? transform(d) : this.getAttribute("transform"); });

      tickEnter
          .attr("opacity", epsilon)
          .attr("transform", function(d) { var p = this.parentNode.__axis; return transform(p && isFinite(p = p(d)) ? p : position(d)); });
    }

    tickExit.remove();

    path
        .attr("d", orient === left || orient == right
            ? (tickSizeOuter ? "M" + k * tickSizeOuter + "," + range0 + "H0.5V" + range1 + "H" + k * tickSizeOuter : "M0.5," + range0 + "V" + range1)
            : (tickSizeOuter ? "M" + range0 + "," + k * tickSizeOuter + "V0.5H" + range1 + "V" + k * tickSizeOuter : "M" + range0 + ",0.5H" + range1));

    tick
        .attr("opacity", 1)
        .attr("transform", function(d) { return transform(position(d)); });

    line
        .attr(x + "2", k * tickSizeInner);

    text
        .attr(x, k * spacing)
        .text(format);

    selection.filter(entering)
        .attr("fill", "none")
        .attr("font-size", 10)
        .attr("font-family", "sans-serif")
        .attr("text-anchor", orient === right ? "start" : orient === left ? "end" : "middle");

    selection
        .each(function() { this.__axis = position; });
  }

  axis.scale = function(_) {
    return arguments.length ? (scale = _, axis) : scale;
  };

  axis.ticks = function() {
    return tickArguments = slice.call(arguments), axis;
  };

  axis.tickArguments = function(_) {
    return arguments.length ? (tickArguments = _ == null ? [] : slice.call(_), axis) : tickArguments.slice();
  };

  axis.tickValues = function(_) {
    return arguments.length ? (tickValues = _ == null ? null : slice.call(_), axis) : tickValues && tickValues.slice();
  };

  axis.tickFormat = function(_) {
    return arguments.length ? (tickFormat = _, axis) : tickFormat;
  };

  axis.tickSize = function(_) {
    return arguments.length ? (tickSizeInner = tickSizeOuter = +_, axis) : tickSizeInner;
  };

  axis.tickSizeInner = function(_) {
    return arguments.length ? (tickSizeInner = +_, axis) : tickSizeInner;
  };

  axis.tickSizeOuter = function(_) {
    return arguments.length ? (tickSizeOuter = +_, axis) : tickSizeOuter;
  };

  axis.tickPadding = function(_) {
    return arguments.length ? (tickPadding = +_, axis) : tickPadding;
  };

  return axis;
}

function axisTop(scale) {
  return axis(top, scale);
}

function axisRight(scale) {
  return axis(right, scale);
}

function axisBottom(scale) {
  return axis(bottom, scale);
}

function axisLeft(scale) {
  return axis(left, scale);
}

exports.axisTop = axisTop;
exports.axisRight = axisRight;
exports.axisBottom = axisBottom;
exports.axisLeft = axisLeft;

Object.defineProperty(exports, '__esModule', { value: true });

})));

},{}],3:[function(require,module,exports){
// https://d3js.org/d3-collection/ v1.0.7 Copyright 2018 Mike Bostock
(function (global, factory) {
typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
typeof define === 'function' && define.amd ? define(['exports'], factory) :
(factory((global.d3 = global.d3 || {})));
}(this, (function (exports) { 'use strict';

var prefix = "$";

function Map() {}

Map.prototype = map.prototype = {
  constructor: Map,
  has: function(key) {
    return (prefix + key) in this;
  },
  get: function(key) {
    return this[prefix + key];
  },
  set: function(key, value) {
    this[prefix + key] = value;
    return this;
  },
  remove: function(key) {
    var property = prefix + key;
    return property in this && delete this[property];
  },
  clear: function() {
    for (var property in this) if (property[0] === prefix) delete this[property];
  },
  keys: function() {
    var keys = [];
    for (var property in this) if (property[0] === prefix) keys.push(property.slice(1));
    return keys;
  },
  values: function() {
    var values = [];
    for (var property in this) if (property[0] === prefix) values.push(this[property]);
    return values;
  },
  entries: function() {
    var entries = [];
    for (var property in this) if (property[0] === prefix) entries.push({key: property.slice(1), value: this[property]});
    return entries;
  },
  size: function() {
    var size = 0;
    for (var property in this) if (property[0] === prefix) ++size;
    return size;
  },
  empty: function() {
    for (var property in this) if (property[0] === prefix) return false;
    return true;
  },
  each: function(f) {
    for (var property in this) if (property[0] === prefix) f(this[property], property.slice(1), this);
  }
};

function map(object, f) {
  var map = new Map;

  // Copy constructor.
  if (object instanceof Map) object.each(function(value, key) { map.set(key, value); });

  // Index array by numeric index or specified key function.
  else if (Array.isArray(object)) {
    var i = -1,
        n = object.length,
        o;

    if (f == null) while (++i < n) map.set(i, object[i]);
    else while (++i < n) map.set(f(o = object[i], i, object), o);
  }

  // Convert object to map.
  else if (object) for (var key in object) map.set(key, object[key]);

  return map;
}

function nest() {
  var keys = [],
      sortKeys = [],
      sortValues,
      rollup,
      nest;

  function apply(array, depth, createResult, setResult) {
    if (depth >= keys.length) {
      if (sortValues != null) array.sort(sortValues);
      return rollup != null ? rollup(array) : array;
    }

    var i = -1,
        n = array.length,
        key = keys[depth++],
        keyValue,
        value,
        valuesByKey = map(),
        values,
        result = createResult();

    while (++i < n) {
      if (values = valuesByKey.get(keyValue = key(value = array[i]) + "")) {
        values.push(value);
      } else {
        valuesByKey.set(keyValue, [value]);
      }
    }

    valuesByKey.each(function(values, key) {
      setResult(result, key, apply(values, depth, createResult, setResult));
    });

    return result;
  }

  function entries(map$$1, depth) {
    if (++depth > keys.length) return map$$1;
    var array, sortKey = sortKeys[depth - 1];
    if (rollup != null && depth >= keys.length) array = map$$1.entries();
    else array = [], map$$1.each(function(v, k) { array.push({key: k, values: entries(v, depth)}); });
    return sortKey != null ? array.sort(function(a, b) { return sortKey(a.key, b.key); }) : array;
  }

  return nest = {
    object: function(array) { return apply(array, 0, createObject, setObject); },
    map: function(array) { return apply(array, 0, createMap, setMap); },
    entries: function(array) { return entries(apply(array, 0, createMap, setMap), 0); },
    key: function(d) { keys.push(d); return nest; },
    sortKeys: function(order) { sortKeys[keys.length - 1] = order; return nest; },
    sortValues: function(order) { sortValues = order; return nest; },
    rollup: function(f) { rollup = f; return nest; }
  };
}

function createObject() {
  return {};
}

function setObject(object, key, value) {
  object[key] = value;
}

function createMap() {
  return map();
}

function setMap(map$$1, key, value) {
  map$$1.set(key, value);
}

function Set() {}

var proto = map.prototype;

Set.prototype = set.prototype = {
  constructor: Set,
  has: proto.has,
  add: function(value) {
    value += "";
    this[prefix + value] = value;
    return this;
  },
  remove: proto.remove,
  clear: proto.clear,
  values: proto.keys,
  size: proto.size,
  empty: proto.empty,
  each: proto.each
};

function set(object, f) {
  var set = new Set;

  // Copy constructor.
  if (object instanceof Set) object.each(function(value) { set.add(value); });

  // Otherwise, assume it’s an array.
  else if (object) {
    var i = -1, n = object.length;
    if (f == null) while (++i < n) set.add(object[i]);
    else while (++i < n) set.add(f(object[i], i, object));
  }

  return set;
}

function keys(map) {
  var keys = [];
  for (var key in map) keys.push(key);
  return keys;
}

function values(map) {
  var values = [];
  for (var key in map) values.push(map[key]);
  return values;
}

function entries(map) {
  var entries = [];
  for (var key in map) entries.push({key: key, value: map[key]});
  return entries;
}

exports.nest = nest;
exports.set = set;
exports.map = map;
exports.keys = keys;
exports.values = values;
exports.entries = entries;

Object.defineProperty(exports, '__esModule', { value: true });

})));

},{}],4:[function(require,module,exports){
// https://d3js.org/d3-color/ v1.4.1 Copyright 2020 Mike Bostock
(function (global, factory) {
typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
typeof define === 'function' && define.amd ? define(['exports'], factory) :
(global = global || self, factory(global.d3 = global.d3 || {}));
}(this, function (exports) { 'use strict';

function define(constructor, factory, prototype) {
  constructor.prototype = factory.prototype = prototype;
  prototype.constructor = constructor;
}

function extend(parent, definition) {
  var prototype = Object.create(parent.prototype);
  for (var key in definition) prototype[key] = definition[key];
  return prototype;
}

function Color() {}

var darker = 0.7;
var brighter = 1 / darker;

var reI = "\\s*([+-]?\\d+)\\s*",
    reN = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",
    reP = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",
    reHex = /^#([0-9a-f]{3,8})$/,
    reRgbInteger = new RegExp("^rgb\\(" + [reI, reI, reI] + "\\)$"),
    reRgbPercent = new RegExp("^rgb\\(" + [reP, reP, reP] + "\\)$"),
    reRgbaInteger = new RegExp("^rgba\\(" + [reI, reI, reI, reN] + "\\)$"),
    reRgbaPercent = new RegExp("^rgba\\(" + [reP, reP, reP, reN] + "\\)$"),
    reHslPercent = new RegExp("^hsl\\(" + [reN, reP, reP] + "\\)$"),
    reHslaPercent = new RegExp("^hsla\\(" + [reN, reP, reP, reN] + "\\)$");

var named = {
  aliceblue: 0xf0f8ff,
  antiquewhite: 0xfaebd7,
  aqua: 0x00ffff,
  aquamarine: 0x7fffd4,
  azure: 0xf0ffff,
  beige: 0xf5f5dc,
  bisque: 0xffe4c4,
  black: 0x000000,
  blanchedalmond: 0xffebcd,
  blue: 0x0000ff,
  blueviolet: 0x8a2be2,
  brown: 0xa52a2a,
  burlywood: 0xdeb887,
  cadetblue: 0x5f9ea0,
  chartreuse: 0x7fff00,
  chocolate: 0xd2691e,
  coral: 0xff7f50,
  cornflowerblue: 0x6495ed,
  cornsilk: 0xfff8dc,
  crimson: 0xdc143c,
  cyan: 0x00ffff,
  darkblue: 0x00008b,
  darkcyan: 0x008b8b,
  darkgoldenrod: 0xb8860b,
  darkgray: 0xa9a9a9,
  darkgreen: 0x006400,
  darkgrey: 0xa9a9a9,
  darkkhaki: 0xbdb76b,
  darkmagenta: 0x8b008b,
  darkolivegreen: 0x556b2f,
  darkorange: 0xff8c00,
  darkorchid: 0x9932cc,
  darkred: 0x8b0000,
  darksalmon: 0xe9967a,
  darkseagreen: 0x8fbc8f,
  darkslateblue: 0x483d8b,
  darkslategray: 0x2f4f4f,
  darkslategrey: 0x2f4f4f,
  darkturquoise: 0x00ced1,
  darkviolet: 0x9400d3,
  deeppink: 0xff1493,
  deepskyblue: 0x00bfff,
  dimgray: 0x696969,
  dimgrey: 0x696969,
  dodgerblue: 0x1e90ff,
  firebrick: 0xb22222,
  floralwhite: 0xfffaf0,
  forestgreen: 0x228b22,
  fuchsia: 0xff00ff,
  gainsboro: 0xdcdcdc,
  ghostwhite: 0xf8f8ff,
  gold: 0xffd700,
  goldenrod: 0xdaa520,
  gray: 0x808080,
  green: 0x008000,
  greenyellow: 0xadff2f,
  grey: 0x808080,
  honeydew: 0xf0fff0,
  hotpink: 0xff69b4,
  indianred: 0xcd5c5c,
  indigo: 0x4b0082,
  ivory: 0xfffff0,
  khaki: 0xf0e68c,
  lavender: 0xe6e6fa,
  lavenderblush: 0xfff0f5,
  lawngreen: 0x7cfc00,
  lemonchiffon: 0xfffacd,
  lightblue: 0xadd8e6,
  lightcoral: 0xf08080,
  lightcyan: 0xe0ffff,
  lightgoldenrodyellow: 0xfafad2,
  lightgray: 0xd3d3d3,
  lightgreen: 0x90ee90,
  lightgrey: 0xd3d3d3,
  lightpink: 0xffb6c1,
  lightsalmon: 0xffa07a,
  lightseagreen: 0x20b2aa,
  lightskyblue: 0x87cefa,
  lightslategray: 0x778899,
  lightslategrey: 0x778899,
  lightsteelblue: 0xb0c4de,
  lightyellow: 0xffffe0,
  lime: 0x00ff00,
  limegreen: 0x32cd32,
  linen: 0xfaf0e6,
  magenta: 0xff00ff,
  maroon: 0x800000,
  mediumaquamarine: 0x66cdaa,
  mediumblue: 0x0000cd,
  mediumorchid: 0xba55d3,
  mediumpurple: 0x9370db,
  mediumseagreen: 0x3cb371,
  mediumslateblue: 0x7b68ee,
  mediumspringgreen: 0x00fa9a,
  mediumturquoise: 0x48d1cc,
  mediumvioletred: 0xc71585,
  midnightblue: 0x191970,
  mintcream: 0xf5fffa,
  mistyrose: 0xffe4e1,
  moccasin: 0xffe4b5,
  navajowhite: 0xffdead,
  navy: 0x000080,
  oldlace: 0xfdf5e6,
  olive: 0x808000,
  olivedrab: 0x6b8e23,
  orange: 0xffa500,
  orangered: 0xff4500,
  orchid: 0xda70d6,
  palegoldenrod: 0xeee8aa,
  palegreen: 0x98fb98,
  paleturquoise: 0xafeeee,
  palevioletred: 0xdb7093,
  papayawhip: 0xffefd5,
  peachpuff: 0xffdab9,
  peru: 0xcd853f,
  pink: 0xffc0cb,
  plum: 0xdda0dd,
  powderblue: 0xb0e0e6,
  purple: 0x800080,
  rebeccapurple: 0x663399,
  red: 0xff0000,
  rosybrown: 0xbc8f8f,
  royalblue: 0x4169e1,
  saddlebrown: 0x8b4513,
  salmon: 0xfa8072,
  sandybrown: 0xf4a460,
  seagreen: 0x2e8b57,
  seashell: 0xfff5ee,
  sienna: 0xa0522d,
  silver: 0xc0c0c0,
  skyblue: 0x87ceeb,
  slateblue: 0x6a5acd,
  slategray: 0x708090,
  slategrey: 0x708090,
  snow: 0xfffafa,
  springgreen: 0x00ff7f,
  steelblue: 0x4682b4,
  tan: 0xd2b48c,
  teal: 0x008080,
  thistle: 0xd8bfd8,
  tomato: 0xff6347,
  turquoise: 0x40e0d0,
  violet: 0xee82ee,
  wheat: 0xf5deb3,
  white: 0xffffff,
  whitesmoke: 0xf5f5f5,
  yellow: 0xffff00,
  yellowgreen: 0x9acd32
};

define(Color, color, {
  copy: function(channels) {
    return Object.assign(new this.constructor, this, channels);
  },
  displayable: function() {
    return this.rgb().displayable();
  },
  hex: color_formatHex, // Deprecated! Use color.formatHex.
  formatHex: color_formatHex,
  formatHsl: color_formatHsl,
  formatRgb: color_formatRgb,
  toString: color_formatRgb
});

function color_formatHex() {
  return this.rgb().formatHex();
}

function color_formatHsl() {
  return hslConvert(this).formatHsl();
}

function color_formatRgb() {
  return this.rgb().formatRgb();
}

function color(format) {
  var m, l;
  format = (format + "").trim().toLowerCase();
  return (m = reHex.exec(format)) ? (l = m[1].length, m = parseInt(m[1], 16), l === 6 ? rgbn(m) // #ff0000
      : l === 3 ? new Rgb((m >> 8 & 0xf) | (m >> 4 & 0xf0), (m >> 4 & 0xf) | (m & 0xf0), ((m & 0xf) << 4) | (m & 0xf), 1) // #f00
      : l === 8 ? rgba(m >> 24 & 0xff, m >> 16 & 0xff, m >> 8 & 0xff, (m & 0xff) / 0xff) // #ff000000
      : l === 4 ? rgba((m >> 12 & 0xf) | (m >> 8 & 0xf0), (m >> 8 & 0xf) | (m >> 4 & 0xf0), (m >> 4 & 0xf) | (m & 0xf0), (((m & 0xf) << 4) | (m & 0xf)) / 0xff) // #f000
      : null) // invalid hex
      : (m = reRgbInteger.exec(format)) ? new Rgb(m[1], m[2], m[3], 1) // rgb(255, 0, 0)
      : (m = reRgbPercent.exec(format)) ? new Rgb(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, 1) // rgb(100%, 0%, 0%)
      : (m = reRgbaInteger.exec(format)) ? rgba(m[1], m[2], m[3], m[4]) // rgba(255, 0, 0, 1)
      : (m = reRgbaPercent.exec(format)) ? rgba(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, m[4]) // rgb(100%, 0%, 0%, 1)
      : (m = reHslPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, 1) // hsl(120, 50%, 50%)
      : (m = reHslaPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, m[4]) // hsla(120, 50%, 50%, 1)
      : named.hasOwnProperty(format) ? rgbn(named[format]) // eslint-disable-line no-prototype-builtins
      : format === "transparent" ? new Rgb(NaN, NaN, NaN, 0)
      : null;
}

function rgbn(n) {
  return new Rgb(n >> 16 & 0xff, n >> 8 & 0xff, n & 0xff, 1);
}

function rgba(r, g, b, a) {
  if (a <= 0) r = g = b = NaN;
  return new Rgb(r, g, b, a);
}

function rgbConvert(o) {
  if (!(o instanceof Color)) o = color(o);
  if (!o) return new Rgb;
  o = o.rgb();
  return new Rgb(o.r, o.g, o.b, o.opacity);
}

function rgb(r, g, b, opacity) {
  return arguments.length === 1 ? rgbConvert(r) : new Rgb(r, g, b, opacity == null ? 1 : opacity);
}

function Rgb(r, g, b, opacity) {
  this.r = +r;
  this.g = +g;
  this.b = +b;
  this.opacity = +opacity;
}

define(Rgb, rgb, extend(Color, {
  brighter: function(k) {
    k = k == null ? brighter : Math.pow(brighter, k);
    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
  },
  darker: function(k) {
    k = k == null ? darker : Math.pow(darker, k);
    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
  },
  rgb: function() {
    return this;
  },
  displayable: function() {
    return (-0.5 <= this.r && this.r < 255.5)
        && (-0.5 <= this.g && this.g < 255.5)
        && (-0.5 <= this.b && this.b < 255.5)
        && (0 <= this.opacity && this.opacity <= 1);
  },
  hex: rgb_formatHex, // Deprecated! Use color.formatHex.
  formatHex: rgb_formatHex,
  formatRgb: rgb_formatRgb,
  toString: rgb_formatRgb
}));

function rgb_formatHex() {
  return "#" + hex(this.r) + hex(this.g) + hex(this.b);
}

function rgb_formatRgb() {
  var a = this.opacity; a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));
  return (a === 1 ? "rgb(" : "rgba(")
      + Math.max(0, Math.min(255, Math.round(this.r) || 0)) + ", "
      + Math.max(0, Math.min(255, Math.round(this.g) || 0)) + ", "
      + Math.max(0, Math.min(255, Math.round(this.b) || 0))
      + (a === 1 ? ")" : ", " + a + ")");
}

function hex(value) {
  value = Math.max(0, Math.min(255, Math.round(value) || 0));
  return (value < 16 ? "0" : "") + value.toString(16);
}

function hsla(h, s, l, a) {
  if (a <= 0) h = s = l = NaN;
  else if (l <= 0 || l >= 1) h = s = NaN;
  else if (s <= 0) h = NaN;
  return new Hsl(h, s, l, a);
}

function hslConvert(o) {
  if (o instanceof Hsl) return new Hsl(o.h, o.s, o.l, o.opacity);
  if (!(o instanceof Color)) o = color(o);
  if (!o) return new Hsl;
  if (o instanceof Hsl) return o;
  o = o.rgb();
  var r = o.r / 255,
      g = o.g / 255,
      b = o.b / 255,
      min = Math.min(r, g, b),
      max = Math.max(r, g, b),
      h = NaN,
      s = max - min,
      l = (max + min) / 2;
  if (s) {
    if (r === max) h = (g - b) / s + (g < b) * 6;
    else if (g === max) h = (b - r) / s + 2;
    else h = (r - g) / s + 4;
    s /= l < 0.5 ? max + min : 2 - max - min;
    h *= 60;
  } else {
    s = l > 0 && l < 1 ? 0 : h;
  }
  return new Hsl(h, s, l, o.opacity);
}

function hsl(h, s, l, opacity) {
  return arguments.length === 1 ? hslConvert(h) : new Hsl(h, s, l, opacity == null ? 1 : opacity);
}

function Hsl(h, s, l, opacity) {
  this.h = +h;
  this.s = +s;
  this.l = +l;
  this.opacity = +opacity;
}

define(Hsl, hsl, extend(Color, {
  brighter: function(k) {
    k = k == null ? brighter : Math.pow(brighter, k);
    return new Hsl(this.h, this.s, this.l * k, this.opacity);
  },
  darker: function(k) {
    k = k == null ? darker : Math.pow(darker, k);
    return new Hsl(this.h, this.s, this.l * k, this.opacity);
  },
  rgb: function() {
    var h = this.h % 360 + (this.h < 0) * 360,
        s = isNaN(h) || isNaN(this.s) ? 0 : this.s,
        l = this.l,
        m2 = l + (l < 0.5 ? l : 1 - l) * s,
        m1 = 2 * l - m2;
    return new Rgb(
      hsl2rgb(h >= 240 ? h - 240 : h + 120, m1, m2),
      hsl2rgb(h, m1, m2),
      hsl2rgb(h < 120 ? h + 240 : h - 120, m1, m2),
      this.opacity
    );
  },
  displayable: function() {
    return (0 <= this.s && this.s <= 1 || isNaN(this.s))
        && (0 <= this.l && this.l <= 1)
        && (0 <= this.opacity && this.opacity <= 1);
  },
  formatHsl: function() {
    var a = this.opacity; a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));
    return (a === 1 ? "hsl(" : "hsla(")
        + (this.h || 0) + ", "
        + (this.s || 0) * 100 + "%, "
        + (this.l || 0) * 100 + "%"
        + (a === 1 ? ")" : ", " + a + ")");
  }
}));

/* From FvD 13.37, CSS Color Module Level 3 */
function hsl2rgb(h, m1, m2) {
  return (h < 60 ? m1 + (m2 - m1) * h / 60
      : h < 180 ? m2
      : h < 240 ? m1 + (m2 - m1) * (240 - h) / 60
      : m1) * 255;
}

var deg2rad = Math.PI / 180;
var rad2deg = 180 / Math.PI;

// https://observablehq.com/@mbostock/lab-and-rgb
var K = 18,
    Xn = 0.96422,
    Yn = 1,
    Zn = 0.82521,
    t0 = 4 / 29,
    t1 = 6 / 29,
    t2 = 3 * t1 * t1,
    t3 = t1 * t1 * t1;

function labConvert(o) {
  if (o instanceof Lab) return new Lab(o.l, o.a, o.b, o.opacity);
  if (o instanceof Hcl) return hcl2lab(o);
  if (!(o instanceof Rgb)) o = rgbConvert(o);
  var r = rgb2lrgb(o.r),
      g = rgb2lrgb(o.g),
      b = rgb2lrgb(o.b),
      y = xyz2lab((0.2225045 * r + 0.7168786 * g + 0.0606169 * b) / Yn), x, z;
  if (r === g && g === b) x = z = y; else {
    x = xyz2lab((0.4360747 * r + 0.3850649 * g + 0.1430804 * b) / Xn);
    z = xyz2lab((0.0139322 * r + 0.0971045 * g + 0.7141733 * b) / Zn);
  }
  return new Lab(116 * y - 16, 500 * (x - y), 200 * (y - z), o.opacity);
}

function gray(l, opacity) {
  return new Lab(l, 0, 0, opacity == null ? 1 : opacity);
}

function lab(l, a, b, opacity) {
  return arguments.length === 1 ? labConvert(l) : new Lab(l, a, b, opacity == null ? 1 : opacity);
}

function Lab(l, a, b, opacity) {
  this.l = +l;
  this.a = +a;
  this.b = +b;
  this.opacity = +opacity;
}

define(Lab, lab, extend(Color, {
  brighter: function(k) {
    return new Lab(this.l + K * (k == null ? 1 : k), this.a, this.b, this.opacity);
  },
  darker: function(k) {
    return new Lab(this.l - K * (k == null ? 1 : k), this.a, this.b, this.opacity);
  },
  rgb: function() {
    var y = (this.l + 16) / 116,
        x = isNaN(this.a) ? y : y + this.a / 500,
        z = isNaN(this.b) ? y : y - this.b / 200;
    x = Xn * lab2xyz(x);
    y = Yn * lab2xyz(y);
    z = Zn * lab2xyz(z);
    return new Rgb(
      lrgb2rgb( 3.1338561 * x - 1.6168667 * y - 0.4906146 * z),
      lrgb2rgb(-0.9787684 * x + 1.9161415 * y + 0.0334540 * z),
      lrgb2rgb( 0.0719453 * x - 0.2289914 * y + 1.4052427 * z),
      this.opacity
    );
  }
}));

function xyz2lab(t) {
  return t > t3 ? Math.pow(t, 1 / 3) : t / t2 + t0;
}

function lab2xyz(t) {
  return t > t1 ? t * t * t : t2 * (t - t0);
}

function lrgb2rgb(x) {
  return 255 * (x <= 0.0031308 ? 12.92 * x : 1.055 * Math.pow(x, 1 / 2.4) - 0.055);
}

function rgb2lrgb(x) {
  return (x /= 255) <= 0.04045 ? x / 12.92 : Math.pow((x + 0.055) / 1.055, 2.4);
}

function hclConvert(o) {
  if (o instanceof Hcl) return new Hcl(o.h, o.c, o.l, o.opacity);
  if (!(o instanceof Lab)) o = labConvert(o);
  if (o.a === 0 && o.b === 0) return new Hcl(NaN, 0 < o.l && o.l < 100 ? 0 : NaN, o.l, o.opacity);
  var h = Math.atan2(o.b, o.a) * rad2deg;
  return new Hcl(h < 0 ? h + 360 : h, Math.sqrt(o.a * o.a + o.b * o.b), o.l, o.opacity);
}

function lch(l, c, h, opacity) {
  return arguments.length === 1 ? hclConvert(l) : new Hcl(h, c, l, opacity == null ? 1 : opacity);
}

function hcl(h, c, l, opacity) {
  return arguments.length === 1 ? hclConvert(h) : new Hcl(h, c, l, opacity == null ? 1 : opacity);
}

function Hcl(h, c, l, opacity) {
  this.h = +h;
  this.c = +c;
  this.l = +l;
  this.opacity = +opacity;
}

function hcl2lab(o) {
  if (isNaN(o.h)) return new Lab(o.l, 0, 0, o.opacity);
  var h = o.h * deg2rad;
  return new Lab(o.l, Math.cos(h) * o.c, Math.sin(h) * o.c, o.opacity);
}

define(Hcl, hcl, extend(Color, {
  brighter: function(k) {
    return new Hcl(this.h, this.c, this.l + K * (k == null ? 1 : k), this.opacity);
  },
  darker: function(k) {
    return new Hcl(this.h, this.c, this.l - K * (k == null ? 1 : k), this.opacity);
  },
  rgb: function() {
    return hcl2lab(this).rgb();
  }
}));

var A = -0.14861,
    B = +1.78277,
    C = -0.29227,
    D = -0.90649,
    E = +1.97294,
    ED = E * D,
    EB = E * B,
    BC_DA = B * C - D * A;

function cubehelixConvert(o) {
  if (o instanceof Cubehelix) return new Cubehelix(o.h, o.s, o.l, o.opacity);
  if (!(o instanceof Rgb)) o = rgbConvert(o);
  var r = o.r / 255,
      g = o.g / 255,
      b = o.b / 255,
      l = (BC_DA * b + ED * r - EB * g) / (BC_DA + ED - EB),
      bl = b - l,
      k = (E * (g - l) - C * bl) / D,
      s = Math.sqrt(k * k + bl * bl) / (E * l * (1 - l)), // NaN if l=0 or l=1
      h = s ? Math.atan2(k, bl) * rad2deg - 120 : NaN;
  return new Cubehelix(h < 0 ? h + 360 : h, s, l, o.opacity);
}

function cubehelix(h, s, l, opacity) {
  return arguments.length === 1 ? cubehelixConvert(h) : new Cubehelix(h, s, l, opacity == null ? 1 : opacity);
}

function Cubehelix(h, s, l, opacity) {
  this.h = +h;
  this.s = +s;
  this.l = +l;
  this.opacity = +opacity;
}

define(Cubehelix, cubehelix, extend(Color, {
  brighter: function(k) {
    k = k == null ? brighter : Math.pow(brighter, k);
    return new Cubehelix(this.h, this.s, this.l * k, this.opacity);
  },
  darker: function(k) {
    k = k == null ? darker : Math.pow(darker, k);
    return new Cubehelix(this.h, this.s, this.l * k, this.opacity);
  },
  rgb: function() {
    var h = isNaN(this.h) ? 0 : (this.h + 120) * deg2rad,
        l = +this.l,
        a = isNaN(this.s) ? 0 : this.s * l * (1 - l),
        cosh = Math.cos(h),
        sinh = Math.sin(h);
    return new Rgb(
      255 * (l + a * (A * cosh + B * sinh)),
      255 * (l + a * (C * cosh + D * sinh)),
      255 * (l + a * (E * cosh)),
      this.opacity
    );
  }
}));

exports.color = color;
exports.cubehelix = cubehelix;
exports.gray = gray;
exports.hcl = hcl;
exports.hsl = hsl;
exports.lab = lab;
exports.lch = lch;
exports.rgb = rgb;

Object.defineProperty(exports, '__esModule', { value: true });

}));

},{}],5:[function(require,module,exports){
// https://d3js.org/d3-format/ v1.4.5 Copyright 2020 Mike Bostock
(function (global, factory) {
typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
typeof define === 'function' && define.amd ? define(['exports'], factory) :
(global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.d3 = global.d3 || {}));
}(this, (function (exports) { 'use strict';

function formatDecimal(x) {
  return Math.abs(x = Math.round(x)) >= 1e21
      ? x.toLocaleString("en").replace(/,/g, "")
      : x.toString(10);
}

// Computes the decimal coefficient and exponent of the specified number x with
// significant digits p, where x is positive and p is in [1, 21] or undefined.
// For example, formatDecimalParts(1.23) returns ["123", 0].
function formatDecimalParts(x, p) {
  if ((i = (x = p ? x.toExponential(p - 1) : x.toExponential()).indexOf("e")) < 0) return null; // NaN, ±Infinity
  var i, coefficient = x.slice(0, i);

  // The string returned by toExponential either has the form \d\.\d+e[-+]\d+
  // (e.g., 1.2e+3) or the form \de[-+]\d+ (e.g., 1e+3).
  return [
    coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient,
    +x.slice(i + 1)
  ];
}

function exponent(x) {
  return x = formatDecimalParts(Math.abs(x)), x ? x[1] : NaN;
}

function formatGroup(grouping, thousands) {
  return function(value, width) {
    var i = value.length,
        t = [],
        j = 0,
        g = grouping[0],
        length = 0;

    while (i > 0 && g > 0) {
      if (length + g + 1 > width) g = Math.max(1, width - length);
      t.push(value.substring(i -= g, i + g));
      if ((length += g + 1) > width) break;
      g = grouping[j = (j + 1) % grouping.length];
    }

    return t.reverse().join(thousands);
  };
}

function formatNumerals(numerals) {
  return function(value) {
    return value.replace(/[0-9]/g, function(i) {
      return numerals[+i];
    });
  };
}

// [[fill]align][sign][symbol][0][width][,][.precision][~][type]
var re = /^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;

function formatSpecifier(specifier) {
  if (!(match = re.exec(specifier))) throw new Error("invalid format: " + specifier);
  var match;
  return new FormatSpecifier({
    fill: match[1],
    align: match[2],
    sign: match[3],
    symbol: match[4],
    zero: match[5],
    width: match[6],
    comma: match[7],
    precision: match[8] && match[8].slice(1),
    trim: match[9],
    type: match[10]
  });
}

formatSpecifier.prototype = FormatSpecifier.prototype; // instanceof

function FormatSpecifier(specifier) {
  this.fill = specifier.fill === undefined ? " " : specifier.fill + "";
  this.align = specifier.align === undefined ? ">" : specifier.align + "";
  this.sign = specifier.sign === undefined ? "-" : specifier.sign + "";
  this.symbol = specifier.symbol === undefined ? "" : specifier.symbol + "";
  this.zero = !!specifier.zero;
  this.width = specifier.width === undefined ? undefined : +specifier.width;
  this.comma = !!specifier.comma;
  this.precision = specifier.precision === undefined ? undefined : +specifier.precision;
  this.trim = !!specifier.trim;
  this.type = specifier.type === undefined ? "" : specifier.type + "";
}

FormatSpecifier.prototype.toString = function() {
  return this.fill
      + this.align
      + this.sign
      + this.symbol
      + (this.zero ? "0" : "")
      + (this.width === undefined ? "" : Math.max(1, this.width | 0))
      + (this.comma ? "," : "")
      + (this.precision === undefined ? "" : "." + Math.max(0, this.precision | 0))
      + (this.trim ? "~" : "")
      + this.type;
};

// Trims insignificant zeros, e.g., replaces 1.2000k with 1.2k.
function formatTrim(s) {
  out: for (var n = s.length, i = 1, i0 = -1, i1; i < n; ++i) {
    switch (s[i]) {
      case ".": i0 = i1 = i; break;
      case "0": if (i0 === 0) i0 = i; i1 = i; break;
      default: if (!+s[i]) break out; if (i0 > 0) i0 = 0; break;
    }
  }
  return i0 > 0 ? s.slice(0, i0) + s.slice(i1 + 1) : s;
}

var prefixExponent;

function formatPrefixAuto(x, p) {
  var d = formatDecimalParts(x, p);
  if (!d) return x + "";
  var coefficient = d[0],
      exponent = d[1],
      i = exponent - (prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1,
      n = coefficient.length;
  return i === n ? coefficient
      : i > n ? coefficient + new Array(i - n + 1).join("0")
      : i > 0 ? coefficient.slice(0, i) + "." + coefficient.slice(i)
      : "0." + new Array(1 - i).join("0") + formatDecimalParts(x, Math.max(0, p + i - 1))[0]; // less than 1y!
}

function formatRounded(x, p) {
  var d = formatDecimalParts(x, p);
  if (!d) return x + "";
  var coefficient = d[0],
      exponent = d[1];
  return exponent < 0 ? "0." + new Array(-exponent).join("0") + coefficient
      : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + "." + coefficient.slice(exponent + 1)
      : coefficient + new Array(exponent - coefficient.length + 2).join("0");
}

var formatTypes = {
  "%": function(x, p) { return (x * 100).toFixed(p); },
  "b": function(x) { return Math.round(x).toString(2); },
  "c": function(x) { return x + ""; },
  "d": formatDecimal,
  "e": function(x, p) { return x.toExponential(p); },
  "f": function(x, p) { return x.toFixed(p); },
  "g": function(x, p) { return x.toPrecision(p); },
  "o": function(x) { return Math.round(x).toString(8); },
  "p": function(x, p) { return formatRounded(x * 100, p); },
  "r": formatRounded,
  "s": formatPrefixAuto,
  "X": function(x) { return Math.round(x).toString(16).toUpperCase(); },
  "x": function(x) { return Math.round(x).toString(16); }
};

function identity(x) {
  return x;
}

var map = Array.prototype.map,
    prefixes = ["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];

function formatLocale(locale) {
  var group = locale.grouping === undefined || locale.thousands === undefined ? identity : formatGroup(map.call(locale.grouping, Number), locale.thousands + ""),
      currencyPrefix = locale.currency === undefined ? "" : locale.currency[0] + "",
      currencySuffix = locale.currency === undefined ? "" : locale.currency[1] + "",
      decimal = locale.decimal === undefined ? "." : locale.decimal + "",
      numerals = locale.numerals === undefined ? identity : formatNumerals(map.call(locale.numerals, String)),
      percent = locale.percent === undefined ? "%" : locale.percent + "",
      minus = locale.minus === undefined ? "-" : locale.minus + "",
      nan = locale.nan === undefined ? "NaN" : locale.nan + "";

  function newFormat(specifier) {
    specifier = formatSpecifier(specifier);

    var fill = specifier.fill,
        align = specifier.align,
        sign = specifier.sign,
        symbol = specifier.symbol,
        zero = specifier.zero,
        width = specifier.width,
        comma = specifier.comma,
        precision = specifier.precision,
        trim = specifier.trim,
        type = specifier.type;

    // The "n" type is an alias for ",g".
    if (type === "n") comma = true, type = "g";

    // The "" type, and any invalid type, is an alias for ".12~g".
    else if (!formatTypes[type]) precision === undefined && (precision = 12), trim = true, type = "g";

    // If zero fill is specified, padding goes after sign and before digits.
    if (zero || (fill === "0" && align === "=")) zero = true, fill = "0", align = "=";

    // Compute the prefix and suffix.
    // For SI-prefix, the suffix is lazily computed.
    var prefix = symbol === "$" ? currencyPrefix : symbol === "#" && /[boxX]/.test(type) ? "0" + type.toLowerCase() : "",
        suffix = symbol === "$" ? currencySuffix : /[%p]/.test(type) ? percent : "";

    // What format function should we use?
    // Is this an integer type?
    // Can this type generate exponential notation?
    var formatType = formatTypes[type],
        maybeSuffix = /[defgprs%]/.test(type);

    // Set the default precision if not specified,
    // or clamp the specified precision to the supported range.
    // For significant precision, it must be in [1, 21].
    // For fixed precision, it must be in [0, 20].
    precision = precision === undefined ? 6
        : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision))
        : Math.max(0, Math.min(20, precision));

    function format(value) {
      var valuePrefix = prefix,
          valueSuffix = suffix,
          i, n, c;

      if (type === "c") {
        valueSuffix = formatType(value) + valueSuffix;
        value = "";
      } else {
        value = +value;

        // Determine the sign. -0 is not less than 0, but 1 / -0 is!
        var valueNegative = value < 0 || 1 / value < 0;

        // Perform the initial formatting.
        value = isNaN(value) ? nan : formatType(Math.abs(value), precision);

        // Trim insignificant zeros.
        if (trim) value = formatTrim(value);

        // If a negative value rounds to zero after formatting, and no explicit positive sign is requested, hide the sign.
        if (valueNegative && +value === 0 && sign !== "+") valueNegative = false;

        // Compute the prefix and suffix.
        valuePrefix = (valueNegative ? (sign === "(" ? sign : minus) : sign === "-" || sign === "(" ? "" : sign) + valuePrefix;
        valueSuffix = (type === "s" ? prefixes[8 + prefixExponent / 3] : "") + valueSuffix + (valueNegative && sign === "(" ? ")" : "");

        // Break the formatted value into the integer “value” part that can be
        // grouped, and fractional or exponential “suffix” part that is not.
        if (maybeSuffix) {
          i = -1, n = value.length;
          while (++i < n) {
            if (c = value.charCodeAt(i), 48 > c || c > 57) {
              valueSuffix = (c === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;
              value = value.slice(0, i);
              break;
            }
          }
        }
      }

      // If the fill character is not "0", grouping is applied before padding.
      if (comma && !zero) value = group(value, Infinity);

      // Compute the padding.
      var length = valuePrefix.length + value.length + valueSuffix.length,
          padding = length < width ? new Array(width - length + 1).join(fill) : "";

      // If the fill character is "0", grouping is applied after padding.
      if (comma && zero) value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = "";

      // Reconstruct the final output based on the desired alignment.
      switch (align) {
        case "<": value = valuePrefix + value + valueSuffix + padding; break;
        case "=": value = valuePrefix + padding + value + valueSuffix; break;
        case "^": value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length); break;
        default: value = padding + valuePrefix + value + valueSuffix; break;
      }

      return numerals(value);
    }

    format.toString = function() {
      return specifier + "";
    };

    return format;
  }

  function formatPrefix(specifier, value) {
    var f = newFormat((specifier = formatSpecifier(specifier), specifier.type = "f", specifier)),
        e = Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3,
        k = Math.pow(10, -e),
        prefix = prefixes[8 + e / 3];
    return function(value) {
      return f(k * value) + prefix;
    };
  }

  return {
    format: newFormat,
    formatPrefix: formatPrefix
  };
}

var locale;

defaultLocale({
  decimal: ".",
  thousands: ",",
  grouping: [3],
  currency: ["$", ""],
  minus: "-"
});

function defaultLocale(definition) {
  locale = formatLocale(definition);
  exports.format = locale.format;
  exports.formatPrefix = locale.formatPrefix;
  return locale;
}

function precisionFixed(step) {
  return Math.max(0, -exponent(Math.abs(step)));
}

function precisionPrefix(step, value) {
  return Math.max(0, Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3 - exponent(Math.abs(step)));
}

function precisionRound(step, max) {
  step = Math.abs(step), max = Math.abs(max) - step;
  return Math.max(0, exponent(max) - exponent(step)) + 1;
}

exports.FormatSpecifier = FormatSpecifier;
exports.formatDefaultLocale = defaultLocale;
exports.formatLocale = formatLocale;
exports.formatSpecifier = formatSpecifier;
exports.precisionFixed = precisionFixed;
exports.precisionPrefix = precisionPrefix;
exports.precisionRound = precisionRound;

Object.defineProperty(exports, '__esModule', { value: true });

})));

},{}],6:[function(require,module,exports){
// https://d3js.org/d3-interpolate/ v1.4.0 Copyright 2019 Mike Bostock
(function (global, factory) {
typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('d3-color')) :
typeof define === 'function' && define.amd ? define(['exports', 'd3-color'], factory) :
(global = global || self, factory(global.d3 = global.d3 || {}, global.d3));
}(this, function (exports, d3Color) { 'use strict';

function basis(t1, v0, v1, v2, v3) {
  var t2 = t1 * t1, t3 = t2 * t1;
  return ((1 - 3 * t1 + 3 * t2 - t3) * v0
      + (4 - 6 * t2 + 3 * t3) * v1
      + (1 + 3 * t1 + 3 * t2 - 3 * t3) * v2
      + t3 * v3) / 6;
}

function basis$1(values) {
  var n = values.length - 1;
  return function(t) {
    var i = t <= 0 ? (t = 0) : t >= 1 ? (t = 1, n - 1) : Math.floor(t * n),
        v1 = values[i],
        v2 = values[i + 1],
        v0 = i > 0 ? values[i - 1] : 2 * v1 - v2,
        v3 = i < n - 1 ? values[i + 2] : 2 * v2 - v1;
    return basis((t - i / n) * n, v0, v1, v2, v3);
  };
}

function basisClosed(values) {
  var n = values.length;
  return function(t) {
    var i = Math.floor(((t %= 1) < 0 ? ++t : t) * n),
        v0 = values[(i + n - 1) % n],
        v1 = values[i % n],
        v2 = values[(i + 1) % n],
        v3 = values[(i + 2) % n];
    return basis((t - i / n) * n, v0, v1, v2, v3);
  };
}

function constant(x) {
  return function() {
    return x;
  };
}

function linear(a, d) {
  return function(t) {
    return a + t * d;
  };
}

function exponential(a, b, y) {
  return a = Math.pow(a, y), b = Math.pow(b, y) - a, y = 1 / y, function(t) {
    return Math.pow(a + t * b, y);
  };
}

function hue(a, b) {
  var d = b - a;
  return d ? linear(a, d > 180 || d < -180 ? d - 360 * Math.round(d / 360) : d) : constant(isNaN(a) ? b : a);
}

function gamma(y) {
  return (y = +y) === 1 ? nogamma : function(a, b) {
    return b - a ? exponential(a, b, y) : constant(isNaN(a) ? b : a);
  };
}

function nogamma(a, b) {
  var d = b - a;
  return d ? linear(a, d) : constant(isNaN(a) ? b : a);
}

var rgb = (function rgbGamma(y) {
  var color = gamma(y);

  function rgb(start, end) {
    var r = color((start = d3Color.rgb(start)).r, (end = d3Color.rgb(end)).r),
        g = color(start.g, end.g),
        b = color(start.b, end.b),
        opacity = nogamma(start.opacity, end.opacity);
    return function(t) {
      start.r = r(t);
      start.g = g(t);
      start.b = b(t);
      start.opacity = opacity(t);
      return start + "";
    };
  }

  rgb.gamma = rgbGamma;

  return rgb;
})(1);

function rgbSpline(spline) {
  return function(colors) {
    var n = colors.length,
        r = new Array(n),
        g = new Array(n),
        b = new Array(n),
        i, color;
    for (i = 0; i < n; ++i) {
      color = d3Color.rgb(colors[i]);
      r[i] = color.r || 0;
      g[i] = color.g || 0;
      b[i] = color.b || 0;
    }
    r = spline(r);
    g = spline(g);
    b = spline(b);
    color.opacity = 1;
    return function(t) {
      color.r = r(t);
      color.g = g(t);
      color.b = b(t);
      return color + "";
    };
  };
}

var rgbBasis = rgbSpline(basis$1);
var rgbBasisClosed = rgbSpline(basisClosed);

function numberArray(a, b) {
  if (!b) b = [];
  var n = a ? Math.min(b.length, a.length) : 0,
      c = b.slice(),
      i;
  return function(t) {
    for (i = 0; i < n; ++i) c[i] = a[i] * (1 - t) + b[i] * t;
    return c;
  };
}

function isNumberArray(x) {
  return ArrayBuffer.isView(x) && !(x instanceof DataView);
}

function array(a, b) {
  return (isNumberArray(b) ? numberArray : genericArray)(a, b);
}

function genericArray(a, b) {
  var nb = b ? b.length : 0,
      na = a ? Math.min(nb, a.length) : 0,
      x = new Array(na),
      c = new Array(nb),
      i;

  for (i = 0; i < na; ++i) x[i] = value(a[i], b[i]);
  for (; i < nb; ++i) c[i] = b[i];

  return function(t) {
    for (i = 0; i < na; ++i) c[i] = x[i](t);
    return c;
  };
}

function date(a, b) {
  var d = new Date;
  return a = +a, b = +b, function(t) {
    return d.setTime(a * (1 - t) + b * t), d;
  };
}

function number(a, b) {
  return a = +a, b = +b, function(t) {
    return a * (1 - t) + b * t;
  };
}

function object(a, b) {
  var i = {},
      c = {},
      k;

  if (a === null || typeof a !== "object") a = {};
  if (b === null || typeof b !== "object") b = {};

  for (k in b) {
    if (k in a) {
      i[k] = value(a[k], b[k]);
    } else {
      c[k] = b[k];
    }
  }

  return function(t) {
    for (k in i) c[k] = i[k](t);
    return c;
  };
}

var reA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,
    reB = new RegExp(reA.source, "g");

function zero(b) {
  return function() {
    return b;
  };
}

function one(b) {
  return function(t) {
    return b(t) + "";
  };
}

function string(a, b) {
  var bi = reA.lastIndex = reB.lastIndex = 0, // scan index for next number in b
      am, // current match in a
      bm, // current match in b
      bs, // string preceding current number in b, if any
      i = -1, // index in s
      s = [], // string constants and placeholders
      q = []; // number interpolators

  // Coerce inputs to strings.
  a = a + "", b = b + "";

  // Interpolate pairs of numbers in a & b.
  while ((am = reA.exec(a))
      && (bm = reB.exec(b))) {
    if ((bs = bm.index) > bi) { // a string precedes the next number in b
      bs = b.slice(bi, bs);
      if (s[i]) s[i] += bs; // coalesce with previous string
      else s[++i] = bs;
    }
    if ((am = am[0]) === (bm = bm[0])) { // numbers in a & b match
      if (s[i]) s[i] += bm; // coalesce with previous string
      else s[++i] = bm;
    } else { // interpolate non-matching numbers
      s[++i] = null;
      q.push({i: i, x: number(am, bm)});
    }
    bi = reB.lastIndex;
  }

  // Add remains of b.
  if (bi < b.length) {
    bs = b.slice(bi);
    if (s[i]) s[i] += bs; // coalesce with previous string
    else s[++i] = bs;
  }

  // Special optimization for only a single match.
  // Otherwise, interpolate each of the numbers and rejoin the string.
  return s.length < 2 ? (q[0]
      ? one(q[0].x)
      : zero(b))
      : (b = q.length, function(t) {
          for (var i = 0, o; i < b; ++i) s[(o = q[i]).i] = o.x(t);
          return s.join("");
        });
}

function value(a, b) {
  var t = typeof b, c;
  return b == null || t === "boolean" ? constant(b)
      : (t === "number" ? number
      : t === "string" ? ((c = d3Color.color(b)) ? (b = c, rgb) : string)
      : b instanceof d3Color.color ? rgb
      : b instanceof Date ? date
      : isNumberArray(b) ? numberArray
      : Array.isArray(b) ? genericArray
      : typeof b.valueOf !== "function" && typeof b.toString !== "function" || isNaN(b) ? object
      : number)(a, b);
}

function discrete(range) {
  var n = range.length;
  return function(t) {
    return range[Math.max(0, Math.min(n - 1, Math.floor(t * n)))];
  };
}

function hue$1(a, b) {
  var i = hue(+a, +b);
  return function(t) {
    var x = i(t);
    return x - 360 * Math.floor(x / 360);
  };
}

function round(a, b) {
  return a = +a, b = +b, function(t) {
    return Math.round(a * (1 - t) + b * t);
  };
}

var degrees = 180 / Math.PI;

var identity = {
  translateX: 0,
  translateY: 0,
  rotate: 0,
  skewX: 0,
  scaleX: 1,
  scaleY: 1
};

function decompose(a, b, c, d, e, f) {
  var scaleX, scaleY, skewX;
  if (scaleX = Math.sqrt(a * a + b * b)) a /= scaleX, b /= scaleX;
  if (skewX = a * c + b * d) c -= a * skewX, d -= b * skewX;
  if (scaleY = Math.sqrt(c * c + d * d)) c /= scaleY, d /= scaleY, skewX /= scaleY;
  if (a * d < b * c) a = -a, b = -b, skewX = -skewX, scaleX = -scaleX;
  return {
    translateX: e,
    translateY: f,
    rotate: Math.atan2(b, a) * degrees,
    skewX: Math.atan(skewX) * degrees,
    scaleX: scaleX,
    scaleY: scaleY
  };
}

var cssNode,
    cssRoot,
    cssView,
    svgNode;

function parseCss(value) {
  if (value === "none") return identity;
  if (!cssNode) cssNode = document.createElement("DIV"), cssRoot = document.documentElement, cssView = document.defaultView;
  cssNode.style.transform = value;
  value = cssView.getComputedStyle(cssRoot.appendChild(cssNode), null).getPropertyValue("transform");
  cssRoot.removeChild(cssNode);
  value = value.slice(7, -1).split(",");
  return decompose(+value[0], +value[1], +value[2], +value[3], +value[4], +value[5]);
}

function parseSvg(value) {
  if (value == null) return identity;
  if (!svgNode) svgNode = document.createElementNS("http://www.w3.org/2000/svg", "g");
  svgNode.setAttribute("transform", value);
  if (!(value = svgNode.transform.baseVal.consolidate())) return identity;
  value = value.matrix;
  return decompose(value.a, value.b, value.c, value.d, value.e, value.f);
}

function interpolateTransform(parse, pxComma, pxParen, degParen) {

  function pop(s) {
    return s.length ? s.pop() + " " : "";
  }

  function translate(xa, ya, xb, yb, s, q) {
    if (xa !== xb || ya !== yb) {
      var i = s.push("translate(", null, pxComma, null, pxParen);
      q.push({i: i - 4, x: number(xa, xb)}, {i: i - 2, x: number(ya, yb)});
    } else if (xb || yb) {
      s.push("translate(" + xb + pxComma + yb + pxParen);
    }
  }

  function rotate(a, b, s, q) {
    if (a !== b) {
      if (a - b > 180) b += 360; else if (b - a > 180) a += 360; // shortest path
      q.push({i: s.push(pop(s) + "rotate(", null, degParen) - 2, x: number(a, b)});
    } else if (b) {
      s.push(pop(s) + "rotate(" + b + degParen);
    }
  }

  function skewX(a, b, s, q) {
    if (a !== b) {
      q.push({i: s.push(pop(s) + "skewX(", null, degParen) - 2, x: number(a, b)});
    } else if (b) {
      s.push(pop(s) + "skewX(" + b + degParen);
    }
  }

  function scale(xa, ya, xb, yb, s, q) {
    if (xa !== xb || ya !== yb) {
      var i = s.push(pop(s) + "scale(", null, ",", null, ")");
      q.push({i: i - 4, x: number(xa, xb)}, {i: i - 2, x: number(ya, yb)});
    } else if (xb !== 1 || yb !== 1) {
      s.push(pop(s) + "scale(" + xb + "," + yb + ")");
    }
  }

  return function(a, b) {
    var s = [], // string constants and placeholders
        q = []; // number interpolators
    a = parse(a), b = parse(b);
    translate(a.translateX, a.translateY, b.translateX, b.translateY, s, q);
    rotate(a.rotate, b.rotate, s, q);
    skewX(a.skewX, b.skewX, s, q);
    scale(a.scaleX, a.scaleY, b.scaleX, b.scaleY, s, q);
    a = b = null; // gc
    return function(t) {
      var i = -1, n = q.length, o;
      while (++i < n) s[(o = q[i]).i] = o.x(t);
      return s.join("");
    };
  };
}

var interpolateTransformCss = interpolateTransform(parseCss, "px, ", "px)", "deg)");
var interpolateTransformSvg = interpolateTransform(parseSvg, ", ", ")", ")");

var rho = Math.SQRT2,
    rho2 = 2,
    rho4 = 4,
    epsilon2 = 1e-12;

function cosh(x) {
  return ((x = Math.exp(x)) + 1 / x) / 2;
}

function sinh(x) {
  return ((x = Math.exp(x)) - 1 / x) / 2;
}

function tanh(x) {
  return ((x = Math.exp(2 * x)) - 1) / (x + 1);
}

// p0 = [ux0, uy0, w0]
// p1 = [ux1, uy1, w1]
function zoom(p0, p1) {
  var ux0 = p0[0], uy0 = p0[1], w0 = p0[2],
      ux1 = p1[0], uy1 = p1[1], w1 = p1[2],
      dx = ux1 - ux0,
      dy = uy1 - uy0,
      d2 = dx * dx + dy * dy,
      i,
      S;

  // Special case for u0 ≅ u1.
  if (d2 < epsilon2) {
    S = Math.log(w1 / w0) / rho;
    i = function(t) {
      return [
        ux0 + t * dx,
        uy0 + t * dy,
        w0 * Math.exp(rho * t * S)
      ];
    };
  }

  // General case.
  else {
    var d1 = Math.sqrt(d2),
        b0 = (w1 * w1 - w0 * w0 + rho4 * d2) / (2 * w0 * rho2 * d1),
        b1 = (w1 * w1 - w0 * w0 - rho4 * d2) / (2 * w1 * rho2 * d1),
        r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0),
        r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);
    S = (r1 - r0) / rho;
    i = function(t) {
      var s = t * S,
          coshr0 = cosh(r0),
          u = w0 / (rho2 * d1) * (coshr0 * tanh(rho * s + r0) - sinh(r0));
      return [
        ux0 + u * dx,
        uy0 + u * dy,
        w0 * coshr0 / cosh(rho * s + r0)
      ];
    };
  }

  i.duration = S * 1000;

  return i;
}

function hsl(hue) {
  return function(start, end) {
    var h = hue((start = d3Color.hsl(start)).h, (end = d3Color.hsl(end)).h),
        s = nogamma(start.s, end.s),
        l = nogamma(start.l, end.l),
        opacity = nogamma(start.opacity, end.opacity);
    return function(t) {
      start.h = h(t);
      start.s = s(t);
      start.l = l(t);
      start.opacity = opacity(t);
      return start + "";
    };
  }
}

var hsl$1 = hsl(hue);
var hslLong = hsl(nogamma);

function lab(start, end) {
  var l = nogamma((start = d3Color.lab(start)).l, (end = d3Color.lab(end)).l),
      a = nogamma(start.a, end.a),
      b = nogamma(start.b, end.b),
      opacity = nogamma(start.opacity, end.opacity);
  return function(t) {
    start.l = l(t);
    start.a = a(t);
    start.b = b(t);
    start.opacity = opacity(t);
    return start + "";
  };
}

function hcl(hue) {
  return function(start, end) {
    var h = hue((start = d3Color.hcl(start)).h, (end = d3Color.hcl(end)).h),
        c = nogamma(start.c, end.c),
        l = nogamma(start.l, end.l),
        opacity = nogamma(start.opacity, end.opacity);
    return function(t) {
      start.h = h(t);
      start.c = c(t);
      start.l = l(t);
      start.opacity = opacity(t);
      return start + "";
    };
  }
}

var hcl$1 = hcl(hue);
var hclLong = hcl(nogamma);

function cubehelix(hue) {
  return (function cubehelixGamma(y) {
    y = +y;

    function cubehelix(start, end) {
      var h = hue((start = d3Color.cubehelix(start)).h, (end = d3Color.cubehelix(end)).h),
          s = nogamma(start.s, end.s),
          l = nogamma(start.l, end.l),
          opacity = nogamma(start.opacity, end.opacity);
      return function(t) {
        start.h = h(t);
        start.s = s(t);
        start.l = l(Math.pow(t, y));
        start.opacity = opacity(t);
        return start + "";
      };
    }

    cubehelix.gamma = cubehelixGamma;

    return cubehelix;
  })(1);
}

var cubehelix$1 = cubehelix(hue);
var cubehelixLong = cubehelix(nogamma);

function piecewise(interpolate, values) {
  var i = 0, n = values.length - 1, v = values[0], I = new Array(n < 0 ? 0 : n);
  while (i < n) I[i] = interpolate(v, v = values[++i]);
  return function(t) {
    var i = Math.max(0, Math.min(n - 1, Math.floor(t *= n)));
    return I[i](t - i);
  };
}

function quantize(interpolator, n) {
  var samples = new Array(n);
  for (var i = 0; i < n; ++i) samples[i] = interpolator(i / (n - 1));
  return samples;
}

exports.interpolate = value;
exports.interpolateArray = array;
exports.interpolateBasis = basis$1;
exports.interpolateBasisClosed = basisClosed;
exports.interpolateCubehelix = cubehelix$1;
exports.interpolateCubehelixLong = cubehelixLong;
exports.interpolateDate = date;
exports.interpolateDiscrete = discrete;
exports.interpolateHcl = hcl$1;
exports.interpolateHclLong = hclLong;
exports.interpolateHsl = hsl$1;
exports.interpolateHslLong = hslLong;
exports.interpolateHue = hue$1;
exports.interpolateLab = lab;
exports.interpolateNumber = number;
exports.interpolateNumberArray = numberArray;
exports.interpolateObject = object;
exports.interpolateRgb = rgb;
exports.interpolateRgbBasis = rgbBasis;
exports.interpolateRgbBasisClosed = rgbBasisClosed;
exports.interpolateRound = round;
exports.interpolateString = string;
exports.interpolateTransformCss = interpolateTransformCss;
exports.interpolateTransformSvg = interpolateTransformSvg;
exports.interpolateZoom = zoom;
exports.piecewise = piecewise;
exports.quantize = quantize;

Object.defineProperty(exports, '__esModule', { value: true });

}));

},{"d3-color":4}],7:[function(require,module,exports){
// https://d3js.org/d3-path/ v1.0.9 Copyright 2019 Mike Bostock
(function (global, factory) {
typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
typeof define === 'function' && define.amd ? define(['exports'], factory) :
(global = global || self, factory(global.d3 = global.d3 || {}));
}(this, function (exports) { 'use strict';

var pi = Math.PI,
    tau = 2 * pi,
    epsilon = 1e-6,
    tauEpsilon = tau - epsilon;

function Path() {
  this._x0 = this._y0 = // start of current subpath
  this._x1 = this._y1 = null; // end of current subpath
  this._ = "";
}

function path() {
  return new Path;
}

Path.prototype = path.prototype = {
  constructor: Path,
  moveTo: function(x, y) {
    this._ += "M" + (this._x0 = this._x1 = +x) + "," + (this._y0 = this._y1 = +y);
  },
  closePath: function() {
    if (this._x1 !== null) {
      this._x1 = this._x0, this._y1 = this._y0;
      this._ += "Z";
    }
  },
  lineTo: function(x, y) {
    this._ += "L" + (this._x1 = +x) + "," + (this._y1 = +y);
  },
  quadraticCurveTo: function(x1, y1, x, y) {
    this._ += "Q" + (+x1) + "," + (+y1) + "," + (this._x1 = +x) + "," + (this._y1 = +y);
  },
  bezierCurveTo: function(x1, y1, x2, y2, x, y) {
    this._ += "C" + (+x1) + "," + (+y1) + "," + (+x2) + "," + (+y2) + "," + (this._x1 = +x) + "," + (this._y1 = +y);
  },
  arcTo: function(x1, y1, x2, y2, r) {
    x1 = +x1, y1 = +y1, x2 = +x2, y2 = +y2, r = +r;
    var x0 = this._x1,
        y0 = this._y1,
        x21 = x2 - x1,
        y21 = y2 - y1,
        x01 = x0 - x1,
        y01 = y0 - y1,
        l01_2 = x01 * x01 + y01 * y01;

    // Is the radius negative? Error.
    if (r < 0) throw new Error("negative radius: " + r);

    // Is this path empty? Move to (x1,y1).
    if (this._x1 === null) {
      this._ += "M" + (this._x1 = x1) + "," + (this._y1 = y1);
    }

    // Or, is (x1,y1) coincident with (x0,y0)? Do nothing.
    else if (!(l01_2 > epsilon));

    // Or, are (x0,y0), (x1,y1) and (x2,y2) collinear?
    // Equivalently, is (x1,y1) coincident with (x2,y2)?
    // Or, is the radius zero? Line to (x1,y1).
    else if (!(Math.abs(y01 * x21 - y21 * x01) > epsilon) || !r) {
      this._ += "L" + (this._x1 = x1) + "," + (this._y1 = y1);
    }

    // Otherwise, draw an arc!
    else {
      var x20 = x2 - x0,
          y20 = y2 - y0,
          l21_2 = x21 * x21 + y21 * y21,
          l20_2 = x20 * x20 + y20 * y20,
          l21 = Math.sqrt(l21_2),
          l01 = Math.sqrt(l01_2),
          l = r * Math.tan((pi - Math.acos((l21_2 + l01_2 - l20_2) / (2 * l21 * l01))) / 2),
          t01 = l / l01,
          t21 = l / l21;

      // If the start tangent is not coincident with (x0,y0), line to.
      if (Math.abs(t01 - 1) > epsilon) {
        this._ += "L" + (x1 + t01 * x01) + "," + (y1 + t01 * y01);
      }

      this._ += "A" + r + "," + r + ",0,0," + (+(y01 * x20 > x01 * y20)) + "," + (this._x1 = x1 + t21 * x21) + "," + (this._y1 = y1 + t21 * y21);
    }
  },
  arc: function(x, y, r, a0, a1, ccw) {
    x = +x, y = +y, r = +r, ccw = !!ccw;
    var dx = r * Math.cos(a0),
        dy = r * Math.sin(a0),
        x0 = x + dx,
        y0 = y + dy,
        cw = 1 ^ ccw,
        da = ccw ? a0 - a1 : a1 - a0;

    // Is the radius negative? Error.
    if (r < 0) throw new Error("negative radius: " + r);

    // Is this path empty? Move to (x0,y0).
    if (this._x1 === null) {
      this._ += "M" + x0 + "," + y0;
    }

    // Or, is (x0,y0) not coincident with the previous point? Line to (x0,y0).
    else if (Math.abs(this._x1 - x0) > epsilon || Math.abs(this._y1 - y0) > epsilon) {
      this._ += "L" + x0 + "," + y0;
    }

    // Is this arc empty? We’re done.
    if (!r) return;

    // Does the angle go the wrong way? Flip the direction.
    if (da < 0) da = da % tau + tau;

    // Is this a complete circle? Draw two arcs to complete the circle.
    if (da > tauEpsilon) {
      this._ += "A" + r + "," + r + ",0,1," + cw + "," + (x - dx) + "," + (y - dy) + "A" + r + "," + r + ",0,1," + cw + "," + (this._x1 = x0) + "," + (this._y1 = y0);
    }

    // Is this arc non-empty? Draw an arc!
    else if (da > epsilon) {
      this._ += "A" + r + "," + r + ",0," + (+(da >= pi)) + "," + cw + "," + (this._x1 = x + r * Math.cos(a1)) + "," + (this._y1 = y + r * Math.sin(a1));
    }
  },
  rect: function(x, y, w, h) {
    this._ += "M" + (this._x0 = this._x1 = +x) + "," + (this._y0 = this._y1 = +y) + "h" + (+w) + "v" + (+h) + "h" + (-w) + "Z";
  },
  toString: function() {
    return this._;
  }
};

exports.path = path;

Object.defineProperty(exports, '__esModule', { value: true });

}));

},{}],8:[function(require,module,exports){
// https://d3js.org/d3-scale/ v2.2.2 Copyright 2019 Mike Bostock
(function (global, factory) {
typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('d3-collection'), require('d3-array'), require('d3-interpolate'), require('d3-format'), require('d3-time'), require('d3-time-format')) :
typeof define === 'function' && define.amd ? define(['exports', 'd3-collection', 'd3-array', 'd3-interpolate', 'd3-format', 'd3-time', 'd3-time-format'], factory) :
(factory((global.d3 = global.d3 || {}),global.d3,global.d3,global.d3,global.d3,global.d3,global.d3));
}(this, (function (exports,d3Collection,d3Array,d3Interpolate,d3Format,d3Time,d3TimeFormat) { 'use strict';

function initRange(domain, range) {
  switch (arguments.length) {
    case 0: break;
    case 1: this.range(domain); break;
    default: this.range(range).domain(domain); break;
  }
  return this;
}

function initInterpolator(domain, interpolator) {
  switch (arguments.length) {
    case 0: break;
    case 1: this.interpolator(domain); break;
    default: this.interpolator(interpolator).domain(domain); break;
  }
  return this;
}

var array = Array.prototype;

var map = array.map;
var slice = array.slice;

var implicit = {name: "implicit"};

function ordinal() {
  var index = d3Collection.map(),
      domain = [],
      range = [],
      unknown = implicit;

  function scale(d) {
    var key = d + "", i = index.get(key);
    if (!i) {
      if (unknown !== implicit) return unknown;
      index.set(key, i = domain.push(d));
    }
    return range[(i - 1) % range.length];
  }

  scale.domain = function(_) {
    if (!arguments.length) return domain.slice();
    domain = [], index = d3Collection.map();
    var i = -1, n = _.length, d, key;
    while (++i < n) if (!index.has(key = (d = _[i]) + "")) index.set(key, domain.push(d));
    return scale;
  };

  scale.range = function(_) {
    return arguments.length ? (range = slice.call(_), scale) : range.slice();
  };

  scale.unknown = function(_) {
    return arguments.length ? (unknown = _, scale) : unknown;
  };

  scale.copy = function() {
    return ordinal(domain, range).unknown(unknown);
  };

  initRange.apply(scale, arguments);

  return scale;
}

function band() {
  var scale = ordinal().unknown(undefined),
      domain = scale.domain,
      ordinalRange = scale.range,
      range = [0, 1],
      step,
      bandwidth,
      round = false,
      paddingInner = 0,
      paddingOuter = 0,
      align = 0.5;

  delete scale.unknown;

  function rescale() {
    var n = domain().length,
        reverse = range[1] < range[0],
        start = range[reverse - 0],
        stop = range[1 - reverse];
    step = (stop - start) / Math.max(1, n - paddingInner + paddingOuter * 2);
    if (round) step = Math.floor(step);
    start += (stop - start - step * (n - paddingInner)) * align;
    bandwidth = step * (1 - paddingInner);
    if (round) start = Math.round(start), bandwidth = Math.round(bandwidth);
    var values = d3Array.range(n).map(function(i) { return start + step * i; });
    return ordinalRange(reverse ? values.reverse() : values);
  }

  scale.domain = function(_) {
    return arguments.length ? (domain(_), rescale()) : domain();
  };

  scale.range = function(_) {
    return arguments.length ? (range = [+_[0], +_[1]], rescale()) : range.slice();
  };

  scale.rangeRound = function(_) {
    return range = [+_[0], +_[1]], round = true, rescale();
  };

  scale.bandwidth = function() {
    return bandwidth;
  };

  scale.step = function() {
    return step;
  };

  scale.round = function(_) {
    return arguments.length ? (round = !!_, rescale()) : round;
  };

  scale.padding = function(_) {
    return arguments.length ? (paddingInner = Math.min(1, paddingOuter = +_), rescale()) : paddingInner;
  };

  scale.paddingInner = function(_) {
    return arguments.length ? (paddingInner = Math.min(1, _), rescale()) : paddingInner;
  };

  scale.paddingOuter = function(_) {
    return arguments.length ? (paddingOuter = +_, rescale()) : paddingOuter;
  };

  scale.align = function(_) {
    return arguments.length ? (align = Math.max(0, Math.min(1, _)), rescale()) : align;
  };

  scale.copy = function() {
    return band(domain(), range)
        .round(round)
        .paddingInner(paddingInner)
        .paddingOuter(paddingOuter)
        .align(align);
  };

  return initRange.apply(rescale(), arguments);
}

function pointish(scale) {
  var copy = scale.copy;

  scale.padding = scale.paddingOuter;
  delete scale.paddingInner;
  delete scale.paddingOuter;

  scale.copy = function() {
    return pointish(copy());
  };

  return scale;
}

function point() {
  return pointish(band.apply(null, arguments).paddingInner(1));
}

function constant(x) {
  return function() {
    return x;
  };
}

function number(x) {
  return +x;
}

var unit = [0, 1];

function identity(x) {
  return x;
}

function normalize(a, b) {
  return (b -= (a = +a))
      ? function(x) { return (x - a) / b; }
      : constant(isNaN(b) ? NaN : 0.5);
}

function clamper(domain) {
  var a = domain[0], b = domain[domain.length - 1], t;
  if (a > b) t = a, a = b, b = t;
  return function(x) { return Math.max(a, Math.min(b, x)); };
}

// normalize(a, b)(x) takes a domain value x in [a,b] and returns the corresponding parameter t in [0,1].
// interpolate(a, b)(t) takes a parameter t in [0,1] and returns the corresponding range value x in [a,b].
function bimap(domain, range, interpolate) {
  var d0 = domain[0], d1 = domain[1], r0 = range[0], r1 = range[1];
  if (d1 < d0) d0 = normalize(d1, d0), r0 = interpolate(r1, r0);
  else d0 = normalize(d0, d1), r0 = interpolate(r0, r1);
  return function(x) { return r0(d0(x)); };
}

function polymap(domain, range, interpolate) {
  var j = Math.min(domain.length, range.length) - 1,
      d = new Array(j),
      r = new Array(j),
      i = -1;

  // Reverse descending domains.
  if (domain[j] < domain[0]) {
    domain = domain.slice().reverse();
    range = range.slice().reverse();
  }

  while (++i < j) {
    d[i] = normalize(domain[i], domain[i + 1]);
    r[i] = interpolate(range[i], range[i + 1]);
  }

  return function(x) {
    var i = d3Array.bisect(domain, x, 1, j) - 1;
    return r[i](d[i](x));
  };
}

function copy(source, target) {
  return target
      .domain(source.domain())
      .range(source.range())
      .interpolate(source.interpolate())
      .clamp(source.clamp())
      .unknown(source.unknown());
}

function transformer() {
  var domain = unit,
      range = unit,
      interpolate = d3Interpolate.interpolate,
      transform,
      untransform,
      unknown,
      clamp = identity,
      piecewise,
      output,
      input;

  function rescale() {
    piecewise = Math.min(domain.length, range.length) > 2 ? polymap : bimap;
    output = input = null;
    return scale;
  }

  function scale(x) {
    return isNaN(x = +x) ? unknown : (output || (output = piecewise(domain.map(transform), range, interpolate)))(transform(clamp(x)));
  }

  scale.invert = function(y) {
    return clamp(untransform((input || (input = piecewise(range, domain.map(transform), d3Interpolate.interpolateNumber)))(y)));
  };

  scale.domain = function(_) {
    return arguments.length ? (domain = map.call(_, number), clamp === identity || (clamp = clamper(domain)), rescale()) : domain.slice();
  };

  scale.range = function(_) {
    return arguments.length ? (range = slice.call(_), rescale()) : range.slice();
  };

  scale.rangeRound = function(_) {
    return range = slice.call(_), interpolate = d3Interpolate.interpolateRound, rescale();
  };

  scale.clamp = function(_) {
    return arguments.length ? (clamp = _ ? clamper(domain) : identity, scale) : clamp !== identity;
  };

  scale.interpolate = function(_) {
    return arguments.length ? (interpolate = _, rescale()) : interpolate;
  };

  scale.unknown = function(_) {
    return arguments.length ? (unknown = _, scale) : unknown;
  };

  return function(t, u) {
    transform = t, untransform = u;
    return rescale();
  };
}

function continuous(transform, untransform) {
  return transformer()(transform, untransform);
}

function tickFormat(start, stop, count, specifier) {
  var step = d3Array.tickStep(start, stop, count),
      precision;
  specifier = d3Format.formatSpecifier(specifier == null ? ",f" : specifier);
  switch (specifier.type) {
    case "s": {
      var value = Math.max(Math.abs(start), Math.abs(stop));
      if (specifier.precision == null && !isNaN(precision = d3Format.precisionPrefix(step, value))) specifier.precision = precision;
      return d3Format.formatPrefix(specifier, value);
    }
    case "":
    case "e":
    case "g":
    case "p":
    case "r": {
      if (specifier.precision == null && !isNaN(precision = d3Format.precisionRound(step, Math.max(Math.abs(start), Math.abs(stop))))) specifier.precision = precision - (specifier.type === "e");
      break;
    }
    case "f":
    case "%": {
      if (specifier.precision == null && !isNaN(precision = d3Format.precisionFixed(step))) specifier.precision = precision - (specifier.type === "%") * 2;
      break;
    }
  }
  return d3Format.format(specifier);
}

function linearish(scale) {
  var domain = scale.domain;

  scale.ticks = function(count) {
    var d = domain();
    return d3Array.ticks(d[0], d[d.length - 1], count == null ? 10 : count);
  };

  scale.tickFormat = function(count, specifier) {
    var d = domain();
    return tickFormat(d[0], d[d.length - 1], count == null ? 10 : count, specifier);
  };

  scale.nice = function(count) {
    if (count == null) count = 10;

    var d = domain(),
        i0 = 0,
        i1 = d.length - 1,
        start = d[i0],
        stop = d[i1],
        step;

    if (stop < start) {
      step = start, start = stop, stop = step;
      step = i0, i0 = i1, i1 = step;
    }

    step = d3Array.tickIncrement(start, stop, count);

    if (step > 0) {
      start = Math.floor(start / step) * step;
      stop = Math.ceil(stop / step) * step;
      step = d3Array.tickIncrement(start, stop, count);
    } else if (step < 0) {
      start = Math.ceil(start * step) / step;
      stop = Math.floor(stop * step) / step;
      step = d3Array.tickIncrement(start, stop, count);
    }

    if (step > 0) {
      d[i0] = Math.floor(start / step) * step;
      d[i1] = Math.ceil(stop / step) * step;
      domain(d);
    } else if (step < 0) {
      d[i0] = Math.ceil(start * step) / step;
      d[i1] = Math.floor(stop * step) / step;
      domain(d);
    }

    return scale;
  };

  return scale;
}

function linear() {
  var scale = continuous(identity, identity);

  scale.copy = function() {
    return copy(scale, linear());
  };

  initRange.apply(scale, arguments);

  return linearish(scale);
}

function identity$1(domain) {
  var unknown;

  function scale(x) {
    return isNaN(x = +x) ? unknown : x;
  }

  scale.invert = scale;

  scale.domain = scale.range = function(_) {
    return arguments.length ? (domain = map.call(_, number), scale) : domain.slice();
  };

  scale.unknown = function(_) {
    return arguments.length ? (unknown = _, scale) : unknown;
  };

  scale.copy = function() {
    return identity$1(domain).unknown(unknown);
  };

  domain = arguments.length ? map.call(domain, number) : [0, 1];

  return linearish(scale);
}

function nice(domain, interval) {
  domain = domain.slice();

  var i0 = 0,
      i1 = domain.length - 1,
      x0 = domain[i0],
      x1 = domain[i1],
      t;

  if (x1 < x0) {
    t = i0, i0 = i1, i1 = t;
    t = x0, x0 = x1, x1 = t;
  }

  domain[i0] = interval.floor(x0);
  domain[i1] = interval.ceil(x1);
  return domain;
}

function transformLog(x) {
  return Math.log(x);
}

function transformExp(x) {
  return Math.exp(x);
}

function transformLogn(x) {
  return -Math.log(-x);
}

function transformExpn(x) {
  return -Math.exp(-x);
}

function pow10(x) {
  return isFinite(x) ? +("1e" + x) : x < 0 ? 0 : x;
}

function powp(base) {
  return base === 10 ? pow10
      : base === Math.E ? Math.exp
      : function(x) { return Math.pow(base, x); };
}

function logp(base) {
  return base === Math.E ? Math.log
      : base === 10 && Math.log10
      || base === 2 && Math.log2
      || (base = Math.log(base), function(x) { return Math.log(x) / base; });
}

function reflect(f) {
  return function(x) {
    return -f(-x);
  };
}

function loggish(transform) {
  var scale = transform(transformLog, transformExp),
      domain = scale.domain,
      base = 10,
      logs,
      pows;

  function rescale() {
    logs = logp(base), pows = powp(base);
    if (domain()[0] < 0) {
      logs = reflect(logs), pows = reflect(pows);
      transform(transformLogn, transformExpn);
    } else {
      transform(transformLog, transformExp);
    }
    return scale;
  }

  scale.base = function(_) {
    return arguments.length ? (base = +_, rescale()) : base;
  };

  scale.domain = function(_) {
    return arguments.length ? (domain(_), rescale()) : domain();
  };

  scale.ticks = function(count) {
    var d = domain(),
        u = d[0],
        v = d[d.length - 1],
        r;

    if (r = v < u) i = u, u = v, v = i;

    var i = logs(u),
        j = logs(v),
        p,
        k,
        t,
        n = count == null ? 10 : +count,
        z = [];

    if (!(base % 1) && j - i < n) {
      i = Math.round(i) - 1, j = Math.round(j) + 1;
      if (u > 0) for (; i < j; ++i) {
        for (k = 1, p = pows(i); k < base; ++k) {
          t = p * k;
          if (t < u) continue;
          if (t > v) break;
          z.push(t);
        }
      } else for (; i < j; ++i) {
        for (k = base - 1, p = pows(i); k >= 1; --k) {
          t = p * k;
          if (t < u) continue;
          if (t > v) break;
          z.push(t);
        }
      }
    } else {
      z = d3Array.ticks(i, j, Math.min(j - i, n)).map(pows);
    }

    return r ? z.reverse() : z;
  };

  scale.tickFormat = function(count, specifier) {
    if (specifier == null) specifier = base === 10 ? ".0e" : ",";
    if (typeof specifier !== "function") specifier = d3Format.format(specifier);
    if (count === Infinity) return specifier;
    if (count == null) count = 10;
    var k = Math.max(1, base * count / scale.ticks().length); // TODO fast estimate?
    return function(d) {
      var i = d / pows(Math.round(logs(d)));
      if (i * base < base - 0.5) i *= base;
      return i <= k ? specifier(d) : "";
    };
  };

  scale.nice = function() {
    return domain(nice(domain(), {
      floor: function(x) { return pows(Math.floor(logs(x))); },
      ceil: function(x) { return pows(Math.ceil(logs(x))); }
    }));
  };

  return scale;
}

function log() {
  var scale = loggish(transformer()).domain([1, 10]);

  scale.copy = function() {
    return copy(scale, log()).base(scale.base());
  };

  initRange.apply(scale, arguments);

  return scale;
}

function transformSymlog(c) {
  return function(x) {
    return Math.sign(x) * Math.log1p(Math.abs(x / c));
  };
}

function transformSymexp(c) {
  return function(x) {
    return Math.sign(x) * Math.expm1(Math.abs(x)) * c;
  };
}

function symlogish(transform) {
  var c = 1, scale = transform(transformSymlog(c), transformSymexp(c));

  scale.constant = function(_) {
    return arguments.length ? transform(transformSymlog(c = +_), transformSymexp(c)) : c;
  };

  return linearish(scale);
}

function symlog() {
  var scale = symlogish(transformer());

  scale.copy = function() {
    return copy(scale, symlog()).constant(scale.constant());
  };

  return initRange.apply(scale, arguments);
}

function transformPow(exponent) {
  return function(x) {
    return x < 0 ? -Math.pow(-x, exponent) : Math.pow(x, exponent);
  };
}

function transformSqrt(x) {
  return x < 0 ? -Math.sqrt(-x) : Math.sqrt(x);
}

function transformSquare(x) {
  return x < 0 ? -x * x : x * x;
}

function powish(transform) {
  var scale = transform(identity, identity),
      exponent = 1;

  function rescale() {
    return exponent === 1 ? transform(identity, identity)
        : exponent === 0.5 ? transform(transformSqrt, transformSquare)
        : transform(transformPow(exponent), transformPow(1 / exponent));
  }

  scale.exponent = function(_) {
    return arguments.length ? (exponent = +_, rescale()) : exponent;
  };

  return linearish(scale);
}

function pow() {
  var scale = powish(transformer());

  scale.copy = function() {
    return copy(scale, pow()).exponent(scale.exponent());
  };

  initRange.apply(scale, arguments);

  return scale;
}

function sqrt() {
  return pow.apply(null, arguments).exponent(0.5);
}

function quantile() {
  var domain = [],
      range = [],
      thresholds = [],
      unknown;

  function rescale() {
    var i = 0, n = Math.max(1, range.length);
    thresholds = new Array(n - 1);
    while (++i < n) thresholds[i - 1] = d3Array.quantile(domain, i / n);
    return scale;
  }

  function scale(x) {
    return isNaN(x = +x) ? unknown : range[d3Array.bisect(thresholds, x)];
  }

  scale.invertExtent = function(y) {
    var i = range.indexOf(y);
    return i < 0 ? [NaN, NaN] : [
      i > 0 ? thresholds[i - 1] : domain[0],
      i < thresholds.length ? thresholds[i] : domain[domain.length - 1]
    ];
  };

  scale.domain = function(_) {
    if (!arguments.length) return domain.slice();
    domain = [];
    for (var i = 0, n = _.length, d; i < n; ++i) if (d = _[i], d != null && !isNaN(d = +d)) domain.push(d);
    domain.sort(d3Array.ascending);
    return rescale();
  };

  scale.range = function(_) {
    return arguments.length ? (range = slice.call(_), rescale()) : range.slice();
  };

  scale.unknown = function(_) {
    return arguments.length ? (unknown = _, scale) : unknown;
  };

  scale.quantiles = function() {
    return thresholds.slice();
  };

  scale.copy = function() {
    return quantile()
        .domain(domain)
        .range(range)
        .unknown(unknown);
  };

  return initRange.apply(scale, arguments);
}

function quantize() {
  var x0 = 0,
      x1 = 1,
      n = 1,
      domain = [0.5],
      range = [0, 1],
      unknown;

  function scale(x) {
    return x <= x ? range[d3Array.bisect(domain, x, 0, n)] : unknown;
  }

  function rescale() {
    var i = -1;
    domain = new Array(n);
    while (++i < n) domain[i] = ((i + 1) * x1 - (i - n) * x0) / (n + 1);
    return scale;
  }

  scale.domain = function(_) {
    return arguments.length ? (x0 = +_[0], x1 = +_[1], rescale()) : [x0, x1];
  };

  scale.range = function(_) {
    return arguments.length ? (n = (range = slice.call(_)).length - 1, rescale()) : range.slice();
  };

  scale.invertExtent = function(y) {
    var i = range.indexOf(y);
    return i < 0 ? [NaN, NaN]
        : i < 1 ? [x0, domain[0]]
        : i >= n ? [domain[n - 1], x1]
        : [domain[i - 1], domain[i]];
  };

  scale.unknown = function(_) {
    return arguments.length ? (unknown = _, scale) : scale;
  };

  scale.thresholds = function() {
    return domain.slice();
  };

  scale.copy = function() {
    return quantize()
        .domain([x0, x1])
        .range(range)
        .unknown(unknown);
  };

  return initRange.apply(linearish(scale), arguments);
}

function threshold() {
  var domain = [0.5],
      range = [0, 1],
      unknown,
      n = 1;

  function scale(x) {
    return x <= x ? range[d3Array.bisect(domain, x, 0, n)] : unknown;
  }

  scale.domain = function(_) {
    return arguments.length ? (domain = slice.call(_), n = Math.min(domain.length, range.length - 1), scale) : domain.slice();
  };

  scale.range = function(_) {
    return arguments.length ? (range = slice.call(_), n = Math.min(domain.length, range.length - 1), scale) : range.slice();
  };

  scale.invertExtent = function(y) {
    var i = range.indexOf(y);
    return [domain[i - 1], domain[i]];
  };

  scale.unknown = function(_) {
    return arguments.length ? (unknown = _, scale) : unknown;
  };

  scale.copy = function() {
    return threshold()
        .domain(domain)
        .range(range)
        .unknown(unknown);
  };

  return initRange.apply(scale, arguments);
}

var durationSecond = 1000,
    durationMinute = durationSecond * 60,
    durationHour = durationMinute * 60,
    durationDay = durationHour * 24,
    durationWeek = durationDay * 7,
    durationMonth = durationDay * 30,
    durationYear = durationDay * 365;

function date(t) {
  return new Date(t);
}

function number$1(t) {
  return t instanceof Date ? +t : +new Date(+t);
}

function calendar(year, month, week, day, hour, minute, second, millisecond, format) {
  var scale = continuous(identity, identity),
      invert = scale.invert,
      domain = scale.domain;

  var formatMillisecond = format(".%L"),
      formatSecond = format(":%S"),
      formatMinute = format("%I:%M"),
      formatHour = format("%I %p"),
      formatDay = format("%a %d"),
      formatWeek = format("%b %d"),
      formatMonth = format("%B"),
      formatYear = format("%Y");

  var tickIntervals = [
    [second,  1,      durationSecond],
    [second,  5,  5 * durationSecond],
    [second, 15, 15 * durationSecond],
    [second, 30, 30 * durationSecond],
    [minute,  1,      durationMinute],
    [minute,  5,  5 * durationMinute],
    [minute, 15, 15 * durationMinute],
    [minute, 30, 30 * durationMinute],
    [  hour,  1,      durationHour  ],
    [  hour,  3,  3 * durationHour  ],
    [  hour,  6,  6 * durationHour  ],
    [  hour, 12, 12 * durationHour  ],
    [   day,  1,      durationDay   ],
    [   day,  2,  2 * durationDay   ],
    [  week,  1,      durationWeek  ],
    [ month,  1,      durationMonth ],
    [ month,  3,  3 * durationMonth ],
    [  year,  1,      durationYear  ]
  ];

  function tickFormat(date) {
    return (second(date) < date ? formatMillisecond
        : minute(date) < date ? formatSecond
        : hour(date) < date ? formatMinute
        : day(date) < date ? formatHour
        : month(date) < date ? (week(date) < date ? formatDay : formatWeek)
        : year(date) < date ? formatMonth
        : formatYear)(date);
  }

  function tickInterval(interval, start, stop, step) {
    if (interval == null) interval = 10;

    // If a desired tick count is specified, pick a reasonable tick interval
    // based on the extent of the domain and a rough estimate of tick size.
    // Otherwise, assume interval is already a time interval and use it.
    if (typeof interval === "number") {
      var target = Math.abs(stop - start) / interval,
          i = d3Array.bisector(function(i) { return i[2]; }).right(tickIntervals, target);
      if (i === tickIntervals.length) {
        step = d3Array.tickStep(start / durationYear, stop / durationYear, interval);
        interval = year;
      } else if (i) {
        i = tickIntervals[target / tickIntervals[i - 1][2] < tickIntervals[i][2] / target ? i - 1 : i];
        step = i[1];
        interval = i[0];
      } else {
        step = Math.max(d3Array.tickStep(start, stop, interval), 1);
        interval = millisecond;
      }
    }

    return step == null ? interval : interval.every(step);
  }

  scale.invert = function(y) {
    return new Date(invert(y));
  };

  scale.domain = function(_) {
    return arguments.length ? domain(map.call(_, number$1)) : domain().map(date);
  };

  scale.ticks = function(interval, step) {
    var d = domain(),
        t0 = d[0],
        t1 = d[d.length - 1],
        r = t1 < t0,
        t;
    if (r) t = t0, t0 = t1, t1 = t;
    t = tickInterval(interval, t0, t1, step);
    t = t ? t.range(t0, t1 + 1) : []; // inclusive stop
    return r ? t.reverse() : t;
  };

  scale.tickFormat = function(count, specifier) {
    return specifier == null ? tickFormat : format(specifier);
  };

  scale.nice = function(interval, step) {
    var d = domain();
    return (interval = tickInterval(interval, d[0], d[d.length - 1], step))
        ? domain(nice(d, interval))
        : scale;
  };

  scale.copy = function() {
    return copy(scale, calendar(year, month, week, day, hour, minute, second, millisecond, format));
  };

  return scale;
}

function time() {
  return initRange.apply(calendar(d3Time.timeYear, d3Time.timeMonth, d3Time.timeWeek, d3Time.timeDay, d3Time.timeHour, d3Time.timeMinute, d3Time.timeSecond, d3Time.timeMillisecond, d3TimeFormat.timeFormat).domain([new Date(2000, 0, 1), new Date(2000, 0, 2)]), arguments);
}

function utcTime() {
  return initRange.apply(calendar(d3Time.utcYear, d3Time.utcMonth, d3Time.utcWeek, d3Time.utcDay, d3Time.utcHour, d3Time.utcMinute, d3Time.utcSecond, d3Time.utcMillisecond, d3TimeFormat.utcFormat).domain([Date.UTC(2000, 0, 1), Date.UTC(2000, 0, 2)]), arguments);
}

function transformer$1() {
  var x0 = 0,
      x1 = 1,
      t0,
      t1,
      k10,
      transform,
      interpolator = identity,
      clamp = false,
      unknown;

  function scale(x) {
    return isNaN(x = +x) ? unknown : interpolator(k10 === 0 ? 0.5 : (x = (transform(x) - t0) * k10, clamp ? Math.max(0, Math.min(1, x)) : x));
  }

  scale.domain = function(_) {
    return arguments.length ? (t0 = transform(x0 = +_[0]), t1 = transform(x1 = +_[1]), k10 = t0 === t1 ? 0 : 1 / (t1 - t0), scale) : [x0, x1];
  };

  scale.clamp = function(_) {
    return arguments.length ? (clamp = !!_, scale) : clamp;
  };

  scale.interpolator = function(_) {
    return arguments.length ? (interpolator = _, scale) : interpolator;
  };

  scale.unknown = function(_) {
    return arguments.length ? (unknown = _, scale) : unknown;
  };

  return function(t) {
    transform = t, t0 = t(x0), t1 = t(x1), k10 = t0 === t1 ? 0 : 1 / (t1 - t0);
    return scale;
  };
}

function copy$1(source, target) {
  return target
      .domain(source.domain())
      .interpolator(source.interpolator())
      .clamp(source.clamp())
      .unknown(source.unknown());
}

function sequential() {
  var scale = linearish(transformer$1()(identity));

  scale.copy = function() {
    return copy$1(scale, sequential());
  };

  return initInterpolator.apply(scale, arguments);
}

function sequentialLog() {
  var scale = loggish(transformer$1()).domain([1, 10]);

  scale.copy = function() {
    return copy$1(scale, sequentialLog()).base(scale.base());
  };

  return initInterpolator.apply(scale, arguments);
}

function sequentialSymlog() {
  var scale = symlogish(transformer$1());

  scale.copy = function() {
    return copy$1(scale, sequentialSymlog()).constant(scale.constant());
  };

  return initInterpolator.apply(scale, arguments);
}

function sequentialPow() {
  var scale = powish(transformer$1());

  scale.copy = function() {
    return copy$1(scale, sequentialPow()).exponent(scale.exponent());
  };

  return initInterpolator.apply(scale, arguments);
}

function sequentialSqrt() {
  return sequentialPow.apply(null, arguments).exponent(0.5);
}

function sequentialQuantile() {
  var domain = [],
      interpolator = identity;

  function scale(x) {
    if (!isNaN(x = +x)) return interpolator((d3Array.bisect(domain, x) - 1) / (domain.length - 1));
  }

  scale.domain = function(_) {
    if (!arguments.length) return domain.slice();
    domain = [];
    for (var i = 0, n = _.length, d; i < n; ++i) if (d = _[i], d != null && !isNaN(d = +d)) domain.push(d);
    domain.sort(d3Array.ascending);
    return scale;
  };

  scale.interpolator = function(_) {
    return arguments.length ? (interpolator = _, scale) : interpolator;
  };

  scale.copy = function() {
    return sequentialQuantile(interpolator).domain(domain);
  };

  return initInterpolator.apply(scale, arguments);
}

function transformer$2() {
  var x0 = 0,
      x1 = 0.5,
      x2 = 1,
      t0,
      t1,
      t2,
      k10,
      k21,
      interpolator = identity,
      transform,
      clamp = false,
      unknown;

  function scale(x) {
    return isNaN(x = +x) ? unknown : (x = 0.5 + ((x = +transform(x)) - t1) * (x < t1 ? k10 : k21), interpolator(clamp ? Math.max(0, Math.min(1, x)) : x));
  }

  scale.domain = function(_) {
    return arguments.length ? (t0 = transform(x0 = +_[0]), t1 = transform(x1 = +_[1]), t2 = transform(x2 = +_[2]), k10 = t0 === t1 ? 0 : 0.5 / (t1 - t0), k21 = t1 === t2 ? 0 : 0.5 / (t2 - t1), scale) : [x0, x1, x2];
  };

  scale.clamp = function(_) {
    return arguments.length ? (clamp = !!_, scale) : clamp;
  };

  scale.interpolator = function(_) {
    return arguments.length ? (interpolator = _, scale) : interpolator;
  };

  scale.unknown = function(_) {
    return arguments.length ? (unknown = _, scale) : unknown;
  };

  return function(t) {
    transform = t, t0 = t(x0), t1 = t(x1), t2 = t(x2), k10 = t0 === t1 ? 0 : 0.5 / (t1 - t0), k21 = t1 === t2 ? 0 : 0.5 / (t2 - t1);
    return scale;
  };
}

function diverging() {
  var scale = linearish(transformer$2()(identity));

  scale.copy = function() {
    return copy$1(scale, diverging());
  };

  return initInterpolator.apply(scale, arguments);
}

function divergingLog() {
  var scale = loggish(transformer$2()).domain([0.1, 1, 10]);

  scale.copy = function() {
    return copy$1(scale, divergingLog()).base(scale.base());
  };

  return initInterpolator.apply(scale, arguments);
}

function divergingSymlog() {
  var scale = symlogish(transformer$2());

  scale.copy = function() {
    return copy$1(scale, divergingSymlog()).constant(scale.constant());
  };

  return initInterpolator.apply(scale, arguments);
}

function divergingPow() {
  var scale = powish(transformer$2());

  scale.copy = function() {
    return copy$1(scale, divergingPow()).exponent(scale.exponent());
  };

  return initInterpolator.apply(scale, arguments);
}

function divergingSqrt() {
  return divergingPow.apply(null, arguments).exponent(0.5);
}

exports.scaleBand = band;
exports.scalePoint = point;
exports.scaleIdentity = identity$1;
exports.scaleLinear = linear;
exports.scaleLog = log;
exports.scaleSymlog = symlog;
exports.scaleOrdinal = ordinal;
exports.scaleImplicit = implicit;
exports.scalePow = pow;
exports.scaleSqrt = sqrt;
exports.scaleQuantile = quantile;
exports.scaleQuantize = quantize;
exports.scaleThreshold = threshold;
exports.scaleTime = time;
exports.scaleUtc = utcTime;
exports.scaleSequential = sequential;
exports.scaleSequentialLog = sequentialLog;
exports.scaleSequentialPow = sequentialPow;
exports.scaleSequentialSqrt = sequentialSqrt;
exports.scaleSequentialSymlog = sequentialSymlog;
exports.scaleSequentialQuantile = sequentialQuantile;
exports.scaleDiverging = diverging;
exports.scaleDivergingLog = divergingLog;
exports.scaleDivergingPow = divergingPow;
exports.scaleDivergingSqrt = divergingSqrt;
exports.scaleDivergingSymlog = divergingSymlog;
exports.tickFormat = tickFormat;

Object.defineProperty(exports, '__esModule', { value: true });

})));

},{"d3-array":1,"d3-collection":3,"d3-format":5,"d3-interpolate":6,"d3-time":12,"d3-time-format":11}],9:[function(require,module,exports){
// https://d3js.org/d3-selection/ v1.4.2 Copyright 2020 Mike Bostock
(function (global, factory) {
typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
typeof define === 'function' && define.amd ? define(['exports'], factory) :
(global = global || self, factory(global.d3 = global.d3 || {}));
}(this, function (exports) { 'use strict';

var xhtml = "http://www.w3.org/1999/xhtml";

var namespaces = {
  svg: "http://www.w3.org/2000/svg",
  xhtml: xhtml,
  xlink: "http://www.w3.org/1999/xlink",
  xml: "http://www.w3.org/XML/1998/namespace",
  xmlns: "http://www.w3.org/2000/xmlns/"
};

function namespace(name) {
  var prefix = name += "", i = prefix.indexOf(":");
  if (i >= 0 && (prefix = name.slice(0, i)) !== "xmlns") name = name.slice(i + 1);
  return namespaces.hasOwnProperty(prefix) ? {space: namespaces[prefix], local: name} : name;
}

function creatorInherit(name) {
  return function() {
    var document = this.ownerDocument,
        uri = this.namespaceURI;
    return uri === xhtml && document.documentElement.namespaceURI === xhtml
        ? document.createElement(name)
        : document.createElementNS(uri, name);
  };
}

function creatorFixed(fullname) {
  return function() {
    return this.ownerDocument.createElementNS(fullname.space, fullname.local);
  };
}

function creator(name) {
  var fullname = namespace(name);
  return (fullname.local
      ? creatorFixed
      : creatorInherit)(fullname);
}

function none() {}

function selector(selector) {
  return selector == null ? none : function() {
    return this.querySelector(selector);
  };
}

function selection_select(select) {
  if (typeof select !== "function") select = selector(select);

  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {
      if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {
        if ("__data__" in node) subnode.__data__ = node.__data__;
        subgroup[i] = subnode;
      }
    }
  }

  return new Selection(subgroups, this._parents);
}

function empty() {
  return [];
}

function selectorAll(selector) {
  return selector == null ? empty : function() {
    return this.querySelectorAll(selector);
  };
}

function selection_selectAll(select) {
  if (typeof select !== "function") select = selectorAll(select);

  for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
      if (node = group[i]) {
        subgroups.push(select.call(node, node.__data__, i, group));
        parents.push(node);
      }
    }
  }

  return new Selection(subgroups, parents);
}

function matcher(selector) {
  return function() {
    return this.matches(selector);
  };
}

function selection_filter(match) {
  if (typeof match !== "function") match = matcher(match);

  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {
      if ((node = group[i]) && match.call(node, node.__data__, i, group)) {
        subgroup.push(node);
      }
    }
  }

  return new Selection(subgroups, this._parents);
}

function sparse(update) {
  return new Array(update.length);
}

function selection_enter() {
  return new Selection(this._enter || this._groups.map(sparse), this._parents);
}

function EnterNode(parent, datum) {
  this.ownerDocument = parent.ownerDocument;
  this.namespaceURI = parent.namespaceURI;
  this._next = null;
  this._parent = parent;
  this.__data__ = datum;
}

EnterNode.prototype = {
  constructor: EnterNode,
  appendChild: function(child) { return this._parent.insertBefore(child, this._next); },
  insertBefore: function(child, next) { return this._parent.insertBefore(child, next); },
  querySelector: function(selector) { return this._parent.querySelector(selector); },
  querySelectorAll: function(selector) { return this._parent.querySelectorAll(selector); }
};

function constant(x) {
  return function() {
    return x;
  };
}

var keyPrefix = "$"; // Protect against keys like “__proto__”.

function bindIndex(parent, group, enter, update, exit, data) {
  var i = 0,
      node,
      groupLength = group.length,
      dataLength = data.length;

  // Put any non-null nodes that fit into update.
  // Put any null nodes into enter.
  // Put any remaining data into enter.
  for (; i < dataLength; ++i) {
    if (node = group[i]) {
      node.__data__ = data[i];
      update[i] = node;
    } else {
      enter[i] = new EnterNode(parent, data[i]);
    }
  }

  // Put any non-null nodes that don’t fit into exit.
  for (; i < groupLength; ++i) {
    if (node = group[i]) {
      exit[i] = node;
    }
  }
}

function bindKey(parent, group, enter, update, exit, data, key) {
  var i,
      node,
      nodeByKeyValue = {},
      groupLength = group.length,
      dataLength = data.length,
      keyValues = new Array(groupLength),
      keyValue;

  // Compute the key for each node.
  // If multiple nodes have the same key, the duplicates are added to exit.
  for (i = 0; i < groupLength; ++i) {
    if (node = group[i]) {
      keyValues[i] = keyValue = keyPrefix + key.call(node, node.__data__, i, group);
      if (keyValue in nodeByKeyValue) {
        exit[i] = node;
      } else {
        nodeByKeyValue[keyValue] = node;
      }
    }
  }

  // Compute the key for each datum.
  // If there a node associated with this key, join and add it to update.
  // If there is not (or the key is a duplicate), add it to enter.
  for (i = 0; i < dataLength; ++i) {
    keyValue = keyPrefix + key.call(parent, data[i], i, data);
    if (node = nodeByKeyValue[keyValue]) {
      update[i] = node;
      node.__data__ = data[i];
      nodeByKeyValue[keyValue] = null;
    } else {
      enter[i] = new EnterNode(parent, data[i]);
    }
  }

  // Add any remaining nodes that were not bound to data to exit.
  for (i = 0; i < groupLength; ++i) {
    if ((node = group[i]) && (nodeByKeyValue[keyValues[i]] === node)) {
      exit[i] = node;
    }
  }
}

function selection_data(value, key) {
  if (!value) {
    data = new Array(this.size()), j = -1;
    this.each(function(d) { data[++j] = d; });
    return data;
  }

  var bind = key ? bindKey : bindIndex,
      parents = this._parents,
      groups = this._groups;

  if (typeof value !== "function") value = constant(value);

  for (var m = groups.length, update = new Array(m), enter = new Array(m), exit = new Array(m), j = 0; j < m; ++j) {
    var parent = parents[j],
        group = groups[j],
        groupLength = group.length,
        data = value.call(parent, parent && parent.__data__, j, parents),
        dataLength = data.length,
        enterGroup = enter[j] = new Array(dataLength),
        updateGroup = update[j] = new Array(dataLength),
        exitGroup = exit[j] = new Array(groupLength);

    bind(parent, group, enterGroup, updateGroup, exitGroup, data, key);

    // Now connect the enter nodes to their following update node, such that
    // appendChild can insert the materialized enter node before this node,
    // rather than at the end of the parent node.
    for (var i0 = 0, i1 = 0, previous, next; i0 < dataLength; ++i0) {
      if (previous = enterGroup[i0]) {
        if (i0 >= i1) i1 = i0 + 1;
        while (!(next = updateGroup[i1]) && ++i1 < dataLength);
        previous._next = next || null;
      }
    }
  }

  update = new Selection(update, parents);
  update._enter = enter;
  update._exit = exit;
  return update;
}

function selection_exit() {
  return new Selection(this._exit || this._groups.map(sparse), this._parents);
}

function selection_join(onenter, onupdate, onexit) {
  var enter = this.enter(), update = this, exit = this.exit();
  enter = typeof onenter === "function" ? onenter(enter) : enter.append(onenter + "");
  if (onupdate != null) update = onupdate(update);
  if (onexit == null) exit.remove(); else onexit(exit);
  return enter && update ? enter.merge(update).order() : update;
}

function selection_merge(selection) {

  for (var groups0 = this._groups, groups1 = selection._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {
    for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {
      if (node = group0[i] || group1[i]) {
        merge[i] = node;
      }
    }
  }

  for (; j < m0; ++j) {
    merges[j] = groups0[j];
  }

  return new Selection(merges, this._parents);
}

function selection_order() {

  for (var groups = this._groups, j = -1, m = groups.length; ++j < m;) {
    for (var group = groups[j], i = group.length - 1, next = group[i], node; --i >= 0;) {
      if (node = group[i]) {
        if (next && node.compareDocumentPosition(next) ^ 4) next.parentNode.insertBefore(node, next);
        next = node;
      }
    }
  }

  return this;
}

function selection_sort(compare) {
  if (!compare) compare = ascending;

  function compareNode(a, b) {
    return a && b ? compare(a.__data__, b.__data__) : !a - !b;
  }

  for (var groups = this._groups, m = groups.length, sortgroups = new Array(m), j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, sortgroup = sortgroups[j] = new Array(n), node, i = 0; i < n; ++i) {
      if (node = group[i]) {
        sortgroup[i] = node;
      }
    }
    sortgroup.sort(compareNode);
  }

  return new Selection(sortgroups, this._parents).order();
}

function ascending(a, b) {
  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
}

function selection_call() {
  var callback = arguments[0];
  arguments[0] = this;
  callback.apply(null, arguments);
  return this;
}

function selection_nodes() {
  var nodes = new Array(this.size()), i = -1;
  this.each(function() { nodes[++i] = this; });
  return nodes;
}

function selection_node() {

  for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {
    for (var group = groups[j], i = 0, n = group.length; i < n; ++i) {
      var node = group[i];
      if (node) return node;
    }
  }

  return null;
}

function selection_size() {
  var size = 0;
  this.each(function() { ++size; });
  return size;
}

function selection_empty() {
  return !this.node();
}

function selection_each(callback) {

  for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {
    for (var group = groups[j], i = 0, n = group.length, node; i < n; ++i) {
      if (node = group[i]) callback.call(node, node.__data__, i, group);
    }
  }

  return this;
}

function attrRemove(name) {
  return function() {
    this.removeAttribute(name);
  };
}

function attrRemoveNS(fullname) {
  return function() {
    this.removeAttributeNS(fullname.space, fullname.local);
  };
}

function attrConstant(name, value) {
  return function() {
    this.setAttribute(name, value);
  };
}

function attrConstantNS(fullname, value) {
  return function() {
    this.setAttributeNS(fullname.space, fullname.local, value);
  };
}

function attrFunction(name, value) {
  return function() {
    var v = value.apply(this, arguments);
    if (v == null) this.removeAttribute(name);
    else this.setAttribute(name, v);
  };
}

function attrFunctionNS(fullname, value) {
  return function() {
    var v = value.apply(this, arguments);
    if (v == null) this.removeAttributeNS(fullname.space, fullname.local);
    else this.setAttributeNS(fullname.space, fullname.local, v);
  };
}

function selection_attr(name, value) {
  var fullname = namespace(name);

  if (arguments.length < 2) {
    var node = this.node();
    return fullname.local
        ? node.getAttributeNS(fullname.space, fullname.local)
        : node.getAttribute(fullname);
  }

  return this.each((value == null
      ? (fullname.local ? attrRemoveNS : attrRemove) : (typeof value === "function"
      ? (fullname.local ? attrFunctionNS : attrFunction)
      : (fullname.local ? attrConstantNS : attrConstant)))(fullname, value));
}

function defaultView(node) {
  return (node.ownerDocument && node.ownerDocument.defaultView) // node is a Node
      || (node.document && node) // node is a Window
      || node.defaultView; // node is a Document
}

function styleRemove(name) {
  return function() {
    this.style.removeProperty(name);
  };
}

function styleConstant(name, value, priority) {
  return function() {
    this.style.setProperty(name, value, priority);
  };
}

function styleFunction(name, value, priority) {
  return function() {
    var v = value.apply(this, arguments);
    if (v == null) this.style.removeProperty(name);
    else this.style.setProperty(name, v, priority);
  };
}

function selection_style(name, value, priority) {
  return arguments.length > 1
      ? this.each((value == null
            ? styleRemove : typeof value === "function"
            ? styleFunction
            : styleConstant)(name, value, priority == null ? "" : priority))
      : styleValue(this.node(), name);
}

function styleValue(node, name) {
  return node.style.getPropertyValue(name)
      || defaultView(node).getComputedStyle(node, null).getPropertyValue(name);
}

function propertyRemove(name) {
  return function() {
    delete this[name];
  };
}

function propertyConstant(name, value) {
  return function() {
    this[name] = value;
  };
}

function propertyFunction(name, value) {
  return function() {
    var v = value.apply(this, arguments);
    if (v == null) delete this[name];
    else this[name] = v;
  };
}

function selection_property(name, value) {
  return arguments.length > 1
      ? this.each((value == null
          ? propertyRemove : typeof value === "function"
          ? propertyFunction
          : propertyConstant)(name, value))
      : this.node()[name];
}

function classArray(string) {
  return string.trim().split(/^|\s+/);
}

function classList(node) {
  return node.classList || new ClassList(node);
}

function ClassList(node) {
  this._node = node;
  this._names = classArray(node.getAttribute("class") || "");
}

ClassList.prototype = {
  add: function(name) {
    var i = this._names.indexOf(name);
    if (i < 0) {
      this._names.push(name);
      this._node.setAttribute("class", this._names.join(" "));
    }
  },
  remove: function(name) {
    var i = this._names.indexOf(name);
    if (i >= 0) {
      this._names.splice(i, 1);
      this._node.setAttribute("class", this._names.join(" "));
    }
  },
  contains: function(name) {
    return this._names.indexOf(name) >= 0;
  }
};

function classedAdd(node, names) {
  var list = classList(node), i = -1, n = names.length;
  while (++i < n) list.add(names[i]);
}

function classedRemove(node, names) {
  var list = classList(node), i = -1, n = names.length;
  while (++i < n) list.remove(names[i]);
}

function classedTrue(names) {
  return function() {
    classedAdd(this, names);
  };
}

function classedFalse(names) {
  return function() {
    classedRemove(this, names);
  };
}

function classedFunction(names, value) {
  return function() {
    (value.apply(this, arguments) ? classedAdd : classedRemove)(this, names);
  };
}

function selection_classed(name, value) {
  var names = classArray(name + "");

  if (arguments.length < 2) {
    var list = classList(this.node()), i = -1, n = names.length;
    while (++i < n) if (!list.contains(names[i])) return false;
    return true;
  }

  return this.each((typeof value === "function"
      ? classedFunction : value
      ? classedTrue
      : classedFalse)(names, value));
}

function textRemove() {
  this.textContent = "";
}

function textConstant(value) {
  return function() {
    this.textContent = value;
  };
}

function textFunction(value) {
  return function() {
    var v = value.apply(this, arguments);
    this.textContent = v == null ? "" : v;
  };
}

function selection_text(value) {
  return arguments.length
      ? this.each(value == null
          ? textRemove : (typeof value === "function"
          ? textFunction
          : textConstant)(value))
      : this.node().textContent;
}

function htmlRemove() {
  this.innerHTML = "";
}

function htmlConstant(value) {
  return function() {
    this.innerHTML = value;
  };
}

function htmlFunction(value) {
  return function() {
    var v = value.apply(this, arguments);
    this.innerHTML = v == null ? "" : v;
  };
}

function selection_html(value) {
  return arguments.length
      ? this.each(value == null
          ? htmlRemove : (typeof value === "function"
          ? htmlFunction
          : htmlConstant)(value))
      : this.node().innerHTML;
}

function raise() {
  if (this.nextSibling) this.parentNode.appendChild(this);
}

function selection_raise() {
  return this.each(raise);
}

function lower() {
  if (this.previousSibling) this.parentNode.insertBefore(this, this.parentNode.firstChild);
}

function selection_lower() {
  return this.each(lower);
}

function selection_append(name) {
  var create = typeof name === "function" ? name : creator(name);
  return this.select(function() {
    return this.appendChild(create.apply(this, arguments));
  });
}

function constantNull() {
  return null;
}

function selection_insert(name, before) {
  var create = typeof name === "function" ? name : creator(name),
      select = before == null ? constantNull : typeof before === "function" ? before : selector(before);
  return this.select(function() {
    return this.insertBefore(create.apply(this, arguments), select.apply(this, arguments) || null);
  });
}

function remove() {
  var parent = this.parentNode;
  if (parent) parent.removeChild(this);
}

function selection_remove() {
  return this.each(remove);
}

function selection_cloneShallow() {
  var clone = this.cloneNode(false), parent = this.parentNode;
  return parent ? parent.insertBefore(clone, this.nextSibling) : clone;
}

function selection_cloneDeep() {
  var clone = this.cloneNode(true), parent = this.parentNode;
  return parent ? parent.insertBefore(clone, this.nextSibling) : clone;
}

function selection_clone(deep) {
  return this.select(deep ? selection_cloneDeep : selection_cloneShallow);
}

function selection_datum(value) {
  return arguments.length
      ? this.property("__data__", value)
      : this.node().__data__;
}

var filterEvents = {};

exports.event = null;

if (typeof document !== "undefined") {
  var element = document.documentElement;
  if (!("onmouseenter" in element)) {
    filterEvents = {mouseenter: "mouseover", mouseleave: "mouseout"};
  }
}

function filterContextListener(listener, index, group) {
  listener = contextListener(listener, index, group);
  return function(event) {
    var related = event.relatedTarget;
    if (!related || (related !== this && !(related.compareDocumentPosition(this) & 8))) {
      listener.call(this, event);
    }
  };
}

function contextListener(listener, index, group) {
  return function(event1) {
    var event0 = exports.event; // Events can be reentrant (e.g., focus).
    exports.event = event1;
    try {
      listener.call(this, this.__data__, index, group);
    } finally {
      exports.event = event0;
    }
  };
}

function parseTypenames(typenames) {
  return typenames.trim().split(/^|\s+/).map(function(t) {
    var name = "", i = t.indexOf(".");
    if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);
    return {type: t, name: name};
  });
}

function onRemove(typename) {
  return function() {
    var on = this.__on;
    if (!on) return;
    for (var j = 0, i = -1, m = on.length, o; j < m; ++j) {
      if (o = on[j], (!typename.type || o.type === typename.type) && o.name === typename.name) {
        this.removeEventListener(o.type, o.listener, o.capture);
      } else {
        on[++i] = o;
      }
    }
    if (++i) on.length = i;
    else delete this.__on;
  };
}

function onAdd(typename, value, capture) {
  var wrap = filterEvents.hasOwnProperty(typename.type) ? filterContextListener : contextListener;
  return function(d, i, group) {
    var on = this.__on, o, listener = wrap(value, i, group);
    if (on) for (var j = 0, m = on.length; j < m; ++j) {
      if ((o = on[j]).type === typename.type && o.name === typename.name) {
        this.removeEventListener(o.type, o.listener, o.capture);
        this.addEventListener(o.type, o.listener = listener, o.capture = capture);
        o.value = value;
        return;
      }
    }
    this.addEventListener(typename.type, listener, capture);
    o = {type: typename.type, name: typename.name, value: value, listener: listener, capture: capture};
    if (!on) this.__on = [o];
    else on.push(o);
  };
}

function selection_on(typename, value, capture) {
  var typenames = parseTypenames(typename + ""), i, n = typenames.length, t;

  if (arguments.length < 2) {
    var on = this.node().__on;
    if (on) for (var j = 0, m = on.length, o; j < m; ++j) {
      for (i = 0, o = on[j]; i < n; ++i) {
        if ((t = typenames[i]).type === o.type && t.name === o.name) {
          return o.value;
        }
      }
    }
    return;
  }

  on = value ? onAdd : onRemove;
  if (capture == null) capture = false;
  for (i = 0; i < n; ++i) this.each(on(typenames[i], value, capture));
  return this;
}

function customEvent(event1, listener, that, args) {
  var event0 = exports.event;
  event1.sourceEvent = exports.event;
  exports.event = event1;
  try {
    return listener.apply(that, args);
  } finally {
    exports.event = event0;
  }
}

function dispatchEvent(node, type, params) {
  var window = defaultView(node),
      event = window.CustomEvent;

  if (typeof event === "function") {
    event = new event(type, params);
  } else {
    event = window.document.createEvent("Event");
    if (params) event.initEvent(type, params.bubbles, params.cancelable), event.detail = params.detail;
    else event.initEvent(type, false, false);
  }

  node.dispatchEvent(event);
}

function dispatchConstant(type, params) {
  return function() {
    return dispatchEvent(this, type, params);
  };
}

function dispatchFunction(type, params) {
  return function() {
    return dispatchEvent(this, type, params.apply(this, arguments));
  };
}

function selection_dispatch(type, params) {
  return this.each((typeof params === "function"
      ? dispatchFunction
      : dispatchConstant)(type, params));
}

var root = [null];

function Selection(groups, parents) {
  this._groups = groups;
  this._parents = parents;
}

function selection() {
  return new Selection([[document.documentElement]], root);
}

Selection.prototype = selection.prototype = {
  constructor: Selection,
  select: selection_select,
  selectAll: selection_selectAll,
  filter: selection_filter,
  data: selection_data,
  enter: selection_enter,
  exit: selection_exit,
  join: selection_join,
  merge: selection_merge,
  order: selection_order,
  sort: selection_sort,
  call: selection_call,
  nodes: selection_nodes,
  node: selection_node,
  size: selection_size,
  empty: selection_empty,
  each: selection_each,
  attr: selection_attr,
  style: selection_style,
  property: selection_property,
  classed: selection_classed,
  text: selection_text,
  html: selection_html,
  raise: selection_raise,
  lower: selection_lower,
  append: selection_append,
  insert: selection_insert,
  remove: selection_remove,
  clone: selection_clone,
  datum: selection_datum,
  on: selection_on,
  dispatch: selection_dispatch
};

function select(selector) {
  return typeof selector === "string"
      ? new Selection([[document.querySelector(selector)]], [document.documentElement])
      : new Selection([[selector]], root);
}

function create(name) {
  return select(creator(name).call(document.documentElement));
}

var nextId = 0;

function local() {
  return new Local;
}

function Local() {
  this._ = "@" + (++nextId).toString(36);
}

Local.prototype = local.prototype = {
  constructor: Local,
  get: function(node) {
    var id = this._;
    while (!(id in node)) if (!(node = node.parentNode)) return;
    return node[id];
  },
  set: function(node, value) {
    return node[this._] = value;
  },
  remove: function(node) {
    return this._ in node && delete node[this._];
  },
  toString: function() {
    return this._;
  }
};

function sourceEvent() {
  var current = exports.event, source;
  while (source = current.sourceEvent) current = source;
  return current;
}

function point(node, event) {
  var svg = node.ownerSVGElement || node;

  if (svg.createSVGPoint) {
    var point = svg.createSVGPoint();
    point.x = event.clientX, point.y = event.clientY;
    point = point.matrixTransform(node.getScreenCTM().inverse());
    return [point.x, point.y];
  }

  var rect = node.getBoundingClientRect();
  return [event.clientX - rect.left - node.clientLeft, event.clientY - rect.top - node.clientTop];
}

function mouse(node) {
  var event = sourceEvent();
  if (event.changedTouches) event = event.changedTouches[0];
  return point(node, event);
}

function selectAll(selector) {
  return typeof selector === "string"
      ? new Selection([document.querySelectorAll(selector)], [document.documentElement])
      : new Selection([selector == null ? [] : selector], root);
}

function touch(node, touches, identifier) {
  if (arguments.length < 3) identifier = touches, touches = sourceEvent().changedTouches;

  for (var i = 0, n = touches ? touches.length : 0, touch; i < n; ++i) {
    if ((touch = touches[i]).identifier === identifier) {
      return point(node, touch);
    }
  }

  return null;
}

function touches(node, touches) {
  if (touches == null) touches = sourceEvent().touches;

  for (var i = 0, n = touches ? touches.length : 0, points = new Array(n); i < n; ++i) {
    points[i] = point(node, touches[i]);
  }

  return points;
}

exports.clientPoint = point;
exports.create = create;
exports.creator = creator;
exports.customEvent = customEvent;
exports.local = local;
exports.matcher = matcher;
exports.mouse = mouse;
exports.namespace = namespace;
exports.namespaces = namespaces;
exports.select = select;
exports.selectAll = selectAll;
exports.selection = selection;
exports.selector = selector;
exports.selectorAll = selectorAll;
exports.style = styleValue;
exports.touch = touch;
exports.touches = touches;
exports.window = defaultView;

Object.defineProperty(exports, '__esModule', { value: true });

}));

},{}],10:[function(require,module,exports){
// https://d3js.org/d3-shape/ v1.3.7 Copyright 2019 Mike Bostock
(function (global, factory) {
typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('d3-path')) :
typeof define === 'function' && define.amd ? define(['exports', 'd3-path'], factory) :
(global = global || self, factory(global.d3 = global.d3 || {}, global.d3));
}(this, function (exports, d3Path) { 'use strict';

function constant(x) {
  return function constant() {
    return x;
  };
}

var abs = Math.abs;
var atan2 = Math.atan2;
var cos = Math.cos;
var max = Math.max;
var min = Math.min;
var sin = Math.sin;
var sqrt = Math.sqrt;

var epsilon = 1e-12;
var pi = Math.PI;
var halfPi = pi / 2;
var tau = 2 * pi;

function acos(x) {
  return x > 1 ? 0 : x < -1 ? pi : Math.acos(x);
}

function asin(x) {
  return x >= 1 ? halfPi : x <= -1 ? -halfPi : Math.asin(x);
}

function arcInnerRadius(d) {
  return d.innerRadius;
}

function arcOuterRadius(d) {
  return d.outerRadius;
}

function arcStartAngle(d) {
  return d.startAngle;
}

function arcEndAngle(d) {
  return d.endAngle;
}

function arcPadAngle(d) {
  return d && d.padAngle; // Note: optional!
}

function intersect(x0, y0, x1, y1, x2, y2, x3, y3) {
  var x10 = x1 - x0, y10 = y1 - y0,
      x32 = x3 - x2, y32 = y3 - y2,
      t = y32 * x10 - x32 * y10;
  if (t * t < epsilon) return;
  t = (x32 * (y0 - y2) - y32 * (x0 - x2)) / t;
  return [x0 + t * x10, y0 + t * y10];
}

// Compute perpendicular offset line of length rc.
// http://mathworld.wolfram.com/Circle-LineIntersection.html
function cornerTangents(x0, y0, x1, y1, r1, rc, cw) {
  var x01 = x0 - x1,
      y01 = y0 - y1,
      lo = (cw ? rc : -rc) / sqrt(x01 * x01 + y01 * y01),
      ox = lo * y01,
      oy = -lo * x01,
      x11 = x0 + ox,
      y11 = y0 + oy,
      x10 = x1 + ox,
      y10 = y1 + oy,
      x00 = (x11 + x10) / 2,
      y00 = (y11 + y10) / 2,
      dx = x10 - x11,
      dy = y10 - y11,
      d2 = dx * dx + dy * dy,
      r = r1 - rc,
      D = x11 * y10 - x10 * y11,
      d = (dy < 0 ? -1 : 1) * sqrt(max(0, r * r * d2 - D * D)),
      cx0 = (D * dy - dx * d) / d2,
      cy0 = (-D * dx - dy * d) / d2,
      cx1 = (D * dy + dx * d) / d2,
      cy1 = (-D * dx + dy * d) / d2,
      dx0 = cx0 - x00,
      dy0 = cy0 - y00,
      dx1 = cx1 - x00,
      dy1 = cy1 - y00;

  // Pick the closer of the two intersection points.
  // TODO Is there a faster way to determine which intersection to use?
  if (dx0 * dx0 + dy0 * dy0 > dx1 * dx1 + dy1 * dy1) cx0 = cx1, cy0 = cy1;

  return {
    cx: cx0,
    cy: cy0,
    x01: -ox,
    y01: -oy,
    x11: cx0 * (r1 / r - 1),
    y11: cy0 * (r1 / r - 1)
  };
}

function arc() {
  var innerRadius = arcInnerRadius,
      outerRadius = arcOuterRadius,
      cornerRadius = constant(0),
      padRadius = null,
      startAngle = arcStartAngle,
      endAngle = arcEndAngle,
      padAngle = arcPadAngle,
      context = null;

  function arc() {
    var buffer,
        r,
        r0 = +innerRadius.apply(this, arguments),
        r1 = +outerRadius.apply(this, arguments),
        a0 = startAngle.apply(this, arguments) - halfPi,
        a1 = endAngle.apply(this, arguments) - halfPi,
        da = abs(a1 - a0),
        cw = a1 > a0;

    if (!context) context = buffer = d3Path.path();

    // Ensure that the outer radius is always larger than the inner radius.
    if (r1 < r0) r = r1, r1 = r0, r0 = r;

    // Is it a point?
    if (!(r1 > epsilon)) context.moveTo(0, 0);

    // Or is it a circle or annulus?
    else if (da > tau - epsilon) {
      context.moveTo(r1 * cos(a0), r1 * sin(a0));
      context.arc(0, 0, r1, a0, a1, !cw);
      if (r0 > epsilon) {
        context.moveTo(r0 * cos(a1), r0 * sin(a1));
        context.arc(0, 0, r0, a1, a0, cw);
      }
    }

    // Or is it a circular or annular sector?
    else {
      var a01 = a0,
          a11 = a1,
          a00 = a0,
          a10 = a1,
          da0 = da,
          da1 = da,
          ap = padAngle.apply(this, arguments) / 2,
          rp = (ap > epsilon) && (padRadius ? +padRadius.apply(this, arguments) : sqrt(r0 * r0 + r1 * r1)),
          rc = min(abs(r1 - r0) / 2, +cornerRadius.apply(this, arguments)),
          rc0 = rc,
          rc1 = rc,
          t0,
          t1;

      // Apply padding? Note that since r1 ≥ r0, da1 ≥ da0.
      if (rp > epsilon) {
        var p0 = asin(rp / r0 * sin(ap)),
            p1 = asin(rp / r1 * sin(ap));
        if ((da0 -= p0 * 2) > epsilon) p0 *= (cw ? 1 : -1), a00 += p0, a10 -= p0;
        else da0 = 0, a00 = a10 = (a0 + a1) / 2;
        if ((da1 -= p1 * 2) > epsilon) p1 *= (cw ? 1 : -1), a01 += p1, a11 -= p1;
        else da1 = 0, a01 = a11 = (a0 + a1) / 2;
      }

      var x01 = r1 * cos(a01),
          y01 = r1 * sin(a01),
          x10 = r0 * cos(a10),
          y10 = r0 * sin(a10);

      // Apply rounded corners?
      if (rc > epsilon) {
        var x11 = r1 * cos(a11),
            y11 = r1 * sin(a11),
            x00 = r0 * cos(a00),
            y00 = r0 * sin(a00),
            oc;

        // Restrict the corner radius according to the sector angle.
        if (da < pi && (oc = intersect(x01, y01, x00, y00, x11, y11, x10, y10))) {
          var ax = x01 - oc[0],
              ay = y01 - oc[1],
              bx = x11 - oc[0],
              by = y11 - oc[1],
              kc = 1 / sin(acos((ax * bx + ay * by) / (sqrt(ax * ax + ay * ay) * sqrt(bx * bx + by * by))) / 2),
              lc = sqrt(oc[0] * oc[0] + oc[1] * oc[1]);
          rc0 = min(rc, (r0 - lc) / (kc - 1));
          rc1 = min(rc, (r1 - lc) / (kc + 1));
        }
      }

      // Is the sector collapsed to a line?
      if (!(da1 > epsilon)) context.moveTo(x01, y01);

      // Does the sector’s outer ring have rounded corners?
      else if (rc1 > epsilon) {
        t0 = cornerTangents(x00, y00, x01, y01, r1, rc1, cw);
        t1 = cornerTangents(x11, y11, x10, y10, r1, rc1, cw);

        context.moveTo(t0.cx + t0.x01, t0.cy + t0.y01);

        // Have the corners merged?
        if (rc1 < rc) context.arc(t0.cx, t0.cy, rc1, atan2(t0.y01, t0.x01), atan2(t1.y01, t1.x01), !cw);

        // Otherwise, draw the two corners and the ring.
        else {
          context.arc(t0.cx, t0.cy, rc1, atan2(t0.y01, t0.x01), atan2(t0.y11, t0.x11), !cw);
          context.arc(0, 0, r1, atan2(t0.cy + t0.y11, t0.cx + t0.x11), atan2(t1.cy + t1.y11, t1.cx + t1.x11), !cw);
          context.arc(t1.cx, t1.cy, rc1, atan2(t1.y11, t1.x11), atan2(t1.y01, t1.x01), !cw);
        }
      }

      // Or is the outer ring just a circular arc?
      else context.moveTo(x01, y01), context.arc(0, 0, r1, a01, a11, !cw);

      // Is there no inner ring, and it’s a circular sector?
      // Or perhaps it’s an annular sector collapsed due to padding?
      if (!(r0 > epsilon) || !(da0 > epsilon)) context.lineTo(x10, y10);

      // Does the sector’s inner ring (or point) have rounded corners?
      else if (rc0 > epsilon) {
        t0 = cornerTangents(x10, y10, x11, y11, r0, -rc0, cw);
        t1 = cornerTangents(x01, y01, x00, y00, r0, -rc0, cw);

        context.lineTo(t0.cx + t0.x01, t0.cy + t0.y01);

        // Have the corners merged?
        if (rc0 < rc) context.arc(t0.cx, t0.cy, rc0, atan2(t0.y01, t0.x01), atan2(t1.y01, t1.x01), !cw);

        // Otherwise, draw the two corners and the ring.
        else {
          context.arc(t0.cx, t0.cy, rc0, atan2(t0.y01, t0.x01), atan2(t0.y11, t0.x11), !cw);
          context.arc(0, 0, r0, atan2(t0.cy + t0.y11, t0.cx + t0.x11), atan2(t1.cy + t1.y11, t1.cx + t1.x11), cw);
          context.arc(t1.cx, t1.cy, rc0, atan2(t1.y11, t1.x11), atan2(t1.y01, t1.x01), !cw);
        }
      }

      // Or is the inner ring just a circular arc?
      else context.arc(0, 0, r0, a10, a00, cw);
    }

    context.closePath();

    if (buffer) return context = null, buffer + "" || null;
  }

  arc.centroid = function() {
    var r = (+innerRadius.apply(this, arguments) + +outerRadius.apply(this, arguments)) / 2,
        a = (+startAngle.apply(this, arguments) + +endAngle.apply(this, arguments)) / 2 - pi / 2;
    return [cos(a) * r, sin(a) * r];
  };

  arc.innerRadius = function(_) {
    return arguments.length ? (innerRadius = typeof _ === "function" ? _ : constant(+_), arc) : innerRadius;
  };

  arc.outerRadius = function(_) {
    return arguments.length ? (outerRadius = typeof _ === "function" ? _ : constant(+_), arc) : outerRadius;
  };

  arc.cornerRadius = function(_) {
    return arguments.length ? (cornerRadius = typeof _ === "function" ? _ : constant(+_), arc) : cornerRadius;
  };

  arc.padRadius = function(_) {
    return arguments.length ? (padRadius = _ == null ? null : typeof _ === "function" ? _ : constant(+_), arc) : padRadius;
  };

  arc.startAngle = function(_) {
    return arguments.length ? (startAngle = typeof _ === "function" ? _ : constant(+_), arc) : startAngle;
  };

  arc.endAngle = function(_) {
    return arguments.length ? (endAngle = typeof _ === "function" ? _ : constant(+_), arc) : endAngle;
  };

  arc.padAngle = function(_) {
    return arguments.length ? (padAngle = typeof _ === "function" ? _ : constant(+_), arc) : padAngle;
  };

  arc.context = function(_) {
    return arguments.length ? ((context = _ == null ? null : _), arc) : context;
  };

  return arc;
}

function Linear(context) {
  this._context = context;
}

Linear.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._point = 0;
  },
  lineEnd: function() {
    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x, y) {
    x = +x, y = +y;
    switch (this._point) {
      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
      case 1: this._point = 2; // proceed
      default: this._context.lineTo(x, y); break;
    }
  }
};

function curveLinear(context) {
  return new Linear(context);
}

function x(p) {
  return p[0];
}

function y(p) {
  return p[1];
}

function line() {
  var x$1 = x,
      y$1 = y,
      defined = constant(true),
      context = null,
      curve = curveLinear,
      output = null;

  function line(data) {
    var i,
        n = data.length,
        d,
        defined0 = false,
        buffer;

    if (context == null) output = curve(buffer = d3Path.path());

    for (i = 0; i <= n; ++i) {
      if (!(i < n && defined(d = data[i], i, data)) === defined0) {
        if (defined0 = !defined0) output.lineStart();
        else output.lineEnd();
      }
      if (defined0) output.point(+x$1(d, i, data), +y$1(d, i, data));
    }

    if (buffer) return output = null, buffer + "" || null;
  }

  line.x = function(_) {
    return arguments.length ? (x$1 = typeof _ === "function" ? _ : constant(+_), line) : x$1;
  };

  line.y = function(_) {
    return arguments.length ? (y$1 = typeof _ === "function" ? _ : constant(+_), line) : y$1;
  };

  line.defined = function(_) {
    return arguments.length ? (defined = typeof _ === "function" ? _ : constant(!!_), line) : defined;
  };

  line.curve = function(_) {
    return arguments.length ? (curve = _, context != null && (output = curve(context)), line) : curve;
  };

  line.context = function(_) {
    return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), line) : context;
  };

  return line;
}

function area() {
  var x0 = x,
      x1 = null,
      y0 = constant(0),
      y1 = y,
      defined = constant(true),
      context = null,
      curve = curveLinear,
      output = null;

  function area(data) {
    var i,
        j,
        k,
        n = data.length,
        d,
        defined0 = false,
        buffer,
        x0z = new Array(n),
        y0z = new Array(n);

    if (context == null) output = curve(buffer = d3Path.path());

    for (i = 0; i <= n; ++i) {
      if (!(i < n && defined(d = data[i], i, data)) === defined0) {
        if (defined0 = !defined0) {
          j = i;
          output.areaStart();
          output.lineStart();
        } else {
          output.lineEnd();
          output.lineStart();
          for (k = i - 1; k >= j; --k) {
            output.point(x0z[k], y0z[k]);
          }
          output.lineEnd();
          output.areaEnd();
        }
      }
      if (defined0) {
        x0z[i] = +x0(d, i, data), y0z[i] = +y0(d, i, data);
        output.point(x1 ? +x1(d, i, data) : x0z[i], y1 ? +y1(d, i, data) : y0z[i]);
      }
    }

    if (buffer) return output = null, buffer + "" || null;
  }

  function arealine() {
    return line().defined(defined).curve(curve).context(context);
  }

  area.x = function(_) {
    return arguments.length ? (x0 = typeof _ === "function" ? _ : constant(+_), x1 = null, area) : x0;
  };

  area.x0 = function(_) {
    return arguments.length ? (x0 = typeof _ === "function" ? _ : constant(+_), area) : x0;
  };

  area.x1 = function(_) {
    return arguments.length ? (x1 = _ == null ? null : typeof _ === "function" ? _ : constant(+_), area) : x1;
  };

  area.y = function(_) {
    return arguments.length ? (y0 = typeof _ === "function" ? _ : constant(+_), y1 = null, area) : y0;
  };

  area.y0 = function(_) {
    return arguments.length ? (y0 = typeof _ === "function" ? _ : constant(+_), area) : y0;
  };

  area.y1 = function(_) {
    return arguments.length ? (y1 = _ == null ? null : typeof _ === "function" ? _ : constant(+_), area) : y1;
  };

  area.lineX0 =
  area.lineY0 = function() {
    return arealine().x(x0).y(y0);
  };

  area.lineY1 = function() {
    return arealine().x(x0).y(y1);
  };

  area.lineX1 = function() {
    return arealine().x(x1).y(y0);
  };

  area.defined = function(_) {
    return arguments.length ? (defined = typeof _ === "function" ? _ : constant(!!_), area) : defined;
  };

  area.curve = function(_) {
    return arguments.length ? (curve = _, context != null && (output = curve(context)), area) : curve;
  };

  area.context = function(_) {
    return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), area) : context;
  };

  return area;
}

function descending(a, b) {
  return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;
}

function identity(d) {
  return d;
}

function pie() {
  var value = identity,
      sortValues = descending,
      sort = null,
      startAngle = constant(0),
      endAngle = constant(tau),
      padAngle = constant(0);

  function pie(data) {
    var i,
        n = data.length,
        j,
        k,
        sum = 0,
        index = new Array(n),
        arcs = new Array(n),
        a0 = +startAngle.apply(this, arguments),
        da = Math.min(tau, Math.max(-tau, endAngle.apply(this, arguments) - a0)),
        a1,
        p = Math.min(Math.abs(da) / n, padAngle.apply(this, arguments)),
        pa = p * (da < 0 ? -1 : 1),
        v;

    for (i = 0; i < n; ++i) {
      if ((v = arcs[index[i] = i] = +value(data[i], i, data)) > 0) {
        sum += v;
      }
    }

    // Optionally sort the arcs by previously-computed values or by data.
    if (sortValues != null) index.sort(function(i, j) { return sortValues(arcs[i], arcs[j]); });
    else if (sort != null) index.sort(function(i, j) { return sort(data[i], data[j]); });

    // Compute the arcs! They are stored in the original data's order.
    for (i = 0, k = sum ? (da - n * pa) / sum : 0; i < n; ++i, a0 = a1) {
      j = index[i], v = arcs[j], a1 = a0 + (v > 0 ? v * k : 0) + pa, arcs[j] = {
        data: data[j],
        index: i,
        value: v,
        startAngle: a0,
        endAngle: a1,
        padAngle: p
      };
    }

    return arcs;
  }

  pie.value = function(_) {
    return arguments.length ? (value = typeof _ === "function" ? _ : constant(+_), pie) : value;
  };

  pie.sortValues = function(_) {
    return arguments.length ? (sortValues = _, sort = null, pie) : sortValues;
  };

  pie.sort = function(_) {
    return arguments.length ? (sort = _, sortValues = null, pie) : sort;
  };

  pie.startAngle = function(_) {
    return arguments.length ? (startAngle = typeof _ === "function" ? _ : constant(+_), pie) : startAngle;
  };

  pie.endAngle = function(_) {
    return arguments.length ? (endAngle = typeof _ === "function" ? _ : constant(+_), pie) : endAngle;
  };

  pie.padAngle = function(_) {
    return arguments.length ? (padAngle = typeof _ === "function" ? _ : constant(+_), pie) : padAngle;
  };

  return pie;
}

var curveRadialLinear = curveRadial(curveLinear);

function Radial(curve) {
  this._curve = curve;
}

Radial.prototype = {
  areaStart: function() {
    this._curve.areaStart();
  },
  areaEnd: function() {
    this._curve.areaEnd();
  },
  lineStart: function() {
    this._curve.lineStart();
  },
  lineEnd: function() {
    this._curve.lineEnd();
  },
  point: function(a, r) {
    this._curve.point(r * Math.sin(a), r * -Math.cos(a));
  }
};

function curveRadial(curve) {

  function radial(context) {
    return new Radial(curve(context));
  }

  radial._curve = curve;

  return radial;
}

function lineRadial(l) {
  var c = l.curve;

  l.angle = l.x, delete l.x;
  l.radius = l.y, delete l.y;

  l.curve = function(_) {
    return arguments.length ? c(curveRadial(_)) : c()._curve;
  };

  return l;
}

function lineRadial$1() {
  return lineRadial(line().curve(curveRadialLinear));
}

function areaRadial() {
  var a = area().curve(curveRadialLinear),
      c = a.curve,
      x0 = a.lineX0,
      x1 = a.lineX1,
      y0 = a.lineY0,
      y1 = a.lineY1;

  a.angle = a.x, delete a.x;
  a.startAngle = a.x0, delete a.x0;
  a.endAngle = a.x1, delete a.x1;
  a.radius = a.y, delete a.y;
  a.innerRadius = a.y0, delete a.y0;
  a.outerRadius = a.y1, delete a.y1;
  a.lineStartAngle = function() { return lineRadial(x0()); }, delete a.lineX0;
  a.lineEndAngle = function() { return lineRadial(x1()); }, delete a.lineX1;
  a.lineInnerRadius = function() { return lineRadial(y0()); }, delete a.lineY0;
  a.lineOuterRadius = function() { return lineRadial(y1()); }, delete a.lineY1;

  a.curve = function(_) {
    return arguments.length ? c(curveRadial(_)) : c()._curve;
  };

  return a;
}

function pointRadial(x, y) {
  return [(y = +y) * Math.cos(x -= Math.PI / 2), y * Math.sin(x)];
}

var slice = Array.prototype.slice;

function linkSource(d) {
  return d.source;
}

function linkTarget(d) {
  return d.target;
}

function link(curve) {
  var source = linkSource,
      target = linkTarget,
      x$1 = x,
      y$1 = y,
      context = null;

  function link() {
    var buffer, argv = slice.call(arguments), s = source.apply(this, argv), t = target.apply(this, argv);
    if (!context) context = buffer = d3Path.path();
    curve(context, +x$1.apply(this, (argv[0] = s, argv)), +y$1.apply(this, argv), +x$1.apply(this, (argv[0] = t, argv)), +y$1.apply(this, argv));
    if (buffer) return context = null, buffer + "" || null;
  }

  link.source = function(_) {
    return arguments.length ? (source = _, link) : source;
  };

  link.target = function(_) {
    return arguments.length ? (target = _, link) : target;
  };

  link.x = function(_) {
    return arguments.length ? (x$1 = typeof _ === "function" ? _ : constant(+_), link) : x$1;
  };

  link.y = function(_) {
    return arguments.length ? (y$1 = typeof _ === "function" ? _ : constant(+_), link) : y$1;
  };

  link.context = function(_) {
    return arguments.length ? ((context = _ == null ? null : _), link) : context;
  };

  return link;
}

function curveHorizontal(context, x0, y0, x1, y1) {
  context.moveTo(x0, y0);
  context.bezierCurveTo(x0 = (x0 + x1) / 2, y0, x0, y1, x1, y1);
}

function curveVertical(context, x0, y0, x1, y1) {
  context.moveTo(x0, y0);
  context.bezierCurveTo(x0, y0 = (y0 + y1) / 2, x1, y0, x1, y1);
}

function curveRadial$1(context, x0, y0, x1, y1) {
  var p0 = pointRadial(x0, y0),
      p1 = pointRadial(x0, y0 = (y0 + y1) / 2),
      p2 = pointRadial(x1, y0),
      p3 = pointRadial(x1, y1);
  context.moveTo(p0[0], p0[1]);
  context.bezierCurveTo(p1[0], p1[1], p2[0], p2[1], p3[0], p3[1]);
}

function linkHorizontal() {
  return link(curveHorizontal);
}

function linkVertical() {
  return link(curveVertical);
}

function linkRadial() {
  var l = link(curveRadial$1);
  l.angle = l.x, delete l.x;
  l.radius = l.y, delete l.y;
  return l;
}

var circle = {
  draw: function(context, size) {
    var r = Math.sqrt(size / pi);
    context.moveTo(r, 0);
    context.arc(0, 0, r, 0, tau);
  }
};

var cross = {
  draw: function(context, size) {
    var r = Math.sqrt(size / 5) / 2;
    context.moveTo(-3 * r, -r);
    context.lineTo(-r, -r);
    context.lineTo(-r, -3 * r);
    context.lineTo(r, -3 * r);
    context.lineTo(r, -r);
    context.lineTo(3 * r, -r);
    context.lineTo(3 * r, r);
    context.lineTo(r, r);
    context.lineTo(r, 3 * r);
    context.lineTo(-r, 3 * r);
    context.lineTo(-r, r);
    context.lineTo(-3 * r, r);
    context.closePath();
  }
};

var tan30 = Math.sqrt(1 / 3),
    tan30_2 = tan30 * 2;

var diamond = {
  draw: function(context, size) {
    var y = Math.sqrt(size / tan30_2),
        x = y * tan30;
    context.moveTo(0, -y);
    context.lineTo(x, 0);
    context.lineTo(0, y);
    context.lineTo(-x, 0);
    context.closePath();
  }
};

var ka = 0.89081309152928522810,
    kr = Math.sin(pi / 10) / Math.sin(7 * pi / 10),
    kx = Math.sin(tau / 10) * kr,
    ky = -Math.cos(tau / 10) * kr;

var star = {
  draw: function(context, size) {
    var r = Math.sqrt(size * ka),
        x = kx * r,
        y = ky * r;
    context.moveTo(0, -r);
    context.lineTo(x, y);
    for (var i = 1; i < 5; ++i) {
      var a = tau * i / 5,
          c = Math.cos(a),
          s = Math.sin(a);
      context.lineTo(s * r, -c * r);
      context.lineTo(c * x - s * y, s * x + c * y);
    }
    context.closePath();
  }
};

var square = {
  draw: function(context, size) {
    var w = Math.sqrt(size),
        x = -w / 2;
    context.rect(x, x, w, w);
  }
};

var sqrt3 = Math.sqrt(3);

var triangle = {
  draw: function(context, size) {
    var y = -Math.sqrt(size / (sqrt3 * 3));
    context.moveTo(0, y * 2);
    context.lineTo(-sqrt3 * y, -y);
    context.lineTo(sqrt3 * y, -y);
    context.closePath();
  }
};

var c = -0.5,
    s = Math.sqrt(3) / 2,
    k = 1 / Math.sqrt(12),
    a = (k / 2 + 1) * 3;

var wye = {
  draw: function(context, size) {
    var r = Math.sqrt(size / a),
        x0 = r / 2,
        y0 = r * k,
        x1 = x0,
        y1 = r * k + r,
        x2 = -x1,
        y2 = y1;
    context.moveTo(x0, y0);
    context.lineTo(x1, y1);
    context.lineTo(x2, y2);
    context.lineTo(c * x0 - s * y0, s * x0 + c * y0);
    context.lineTo(c * x1 - s * y1, s * x1 + c * y1);
    context.lineTo(c * x2 - s * y2, s * x2 + c * y2);
    context.lineTo(c * x0 + s * y0, c * y0 - s * x0);
    context.lineTo(c * x1 + s * y1, c * y1 - s * x1);
    context.lineTo(c * x2 + s * y2, c * y2 - s * x2);
    context.closePath();
  }
};

var symbols = [
  circle,
  cross,
  diamond,
  square,
  star,
  triangle,
  wye
];

function symbol() {
  var type = constant(circle),
      size = constant(64),
      context = null;

  function symbol() {
    var buffer;
    if (!context) context = buffer = d3Path.path();
    type.apply(this, arguments).draw(context, +size.apply(this, arguments));
    if (buffer) return context = null, buffer + "" || null;
  }

  symbol.type = function(_) {
    return arguments.length ? (type = typeof _ === "function" ? _ : constant(_), symbol) : type;
  };

  symbol.size = function(_) {
    return arguments.length ? (size = typeof _ === "function" ? _ : constant(+_), symbol) : size;
  };

  symbol.context = function(_) {
    return arguments.length ? (context = _ == null ? null : _, symbol) : context;
  };

  return symbol;
}

function noop() {}

function point(that, x, y) {
  that._context.bezierCurveTo(
    (2 * that._x0 + that._x1) / 3,
    (2 * that._y0 + that._y1) / 3,
    (that._x0 + 2 * that._x1) / 3,
    (that._y0 + 2 * that._y1) / 3,
    (that._x0 + 4 * that._x1 + x) / 6,
    (that._y0 + 4 * that._y1 + y) / 6
  );
}

function Basis(context) {
  this._context = context;
}

Basis.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x0 = this._x1 =
    this._y0 = this._y1 = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    switch (this._point) {
      case 3: point(this, this._x1, this._y1); // proceed
      case 2: this._context.lineTo(this._x1, this._y1); break;
    }
    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x, y) {
    x = +x, y = +y;
    switch (this._point) {
      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
      case 1: this._point = 2; break;
      case 2: this._point = 3; this._context.lineTo((5 * this._x0 + this._x1) / 6, (5 * this._y0 + this._y1) / 6); // proceed
      default: point(this, x, y); break;
    }
    this._x0 = this._x1, this._x1 = x;
    this._y0 = this._y1, this._y1 = y;
  }
};

function basis(context) {
  return new Basis(context);
}

function BasisClosed(context) {
  this._context = context;
}

BasisClosed.prototype = {
  areaStart: noop,
  areaEnd: noop,
  lineStart: function() {
    this._x0 = this._x1 = this._x2 = this._x3 = this._x4 =
    this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    switch (this._point) {
      case 1: {
        this._context.moveTo(this._x2, this._y2);
        this._context.closePath();
        break;
      }
      case 2: {
        this._context.moveTo((this._x2 + 2 * this._x3) / 3, (this._y2 + 2 * this._y3) / 3);
        this._context.lineTo((this._x3 + 2 * this._x2) / 3, (this._y3 + 2 * this._y2) / 3);
        this._context.closePath();
        break;
      }
      case 3: {
        this.point(this._x2, this._y2);
        this.point(this._x3, this._y3);
        this.point(this._x4, this._y4);
        break;
      }
    }
  },
  point: function(x, y) {
    x = +x, y = +y;
    switch (this._point) {
      case 0: this._point = 1; this._x2 = x, this._y2 = y; break;
      case 1: this._point = 2; this._x3 = x, this._y3 = y; break;
      case 2: this._point = 3; this._x4 = x, this._y4 = y; this._context.moveTo((this._x0 + 4 * this._x1 + x) / 6, (this._y0 + 4 * this._y1 + y) / 6); break;
      default: point(this, x, y); break;
    }
    this._x0 = this._x1, this._x1 = x;
    this._y0 = this._y1, this._y1 = y;
  }
};

function basisClosed(context) {
  return new BasisClosed(context);
}

function BasisOpen(context) {
  this._context = context;
}

BasisOpen.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x0 = this._x1 =
    this._y0 = this._y1 = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    if (this._line || (this._line !== 0 && this._point === 3)) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x, y) {
    x = +x, y = +y;
    switch (this._point) {
      case 0: this._point = 1; break;
      case 1: this._point = 2; break;
      case 2: this._point = 3; var x0 = (this._x0 + 4 * this._x1 + x) / 6, y0 = (this._y0 + 4 * this._y1 + y) / 6; this._line ? this._context.lineTo(x0, y0) : this._context.moveTo(x0, y0); break;
      case 3: this._point = 4; // proceed
      default: point(this, x, y); break;
    }
    this._x0 = this._x1, this._x1 = x;
    this._y0 = this._y1, this._y1 = y;
  }
};

function basisOpen(context) {
  return new BasisOpen(context);
}

function Bundle(context, beta) {
  this._basis = new Basis(context);
  this._beta = beta;
}

Bundle.prototype = {
  lineStart: function() {
    this._x = [];
    this._y = [];
    this._basis.lineStart();
  },
  lineEnd: function() {
    var x = this._x,
        y = this._y,
        j = x.length - 1;

    if (j > 0) {
      var x0 = x[0],
          y0 = y[0],
          dx = x[j] - x0,
          dy = y[j] - y0,
          i = -1,
          t;

      while (++i <= j) {
        t = i / j;
        this._basis.point(
          this._beta * x[i] + (1 - this._beta) * (x0 + t * dx),
          this._beta * y[i] + (1 - this._beta) * (y0 + t * dy)
        );
      }
    }

    this._x = this._y = null;
    this._basis.lineEnd();
  },
  point: function(x, y) {
    this._x.push(+x);
    this._y.push(+y);
  }
};

var bundle = (function custom(beta) {

  function bundle(context) {
    return beta === 1 ? new Basis(context) : new Bundle(context, beta);
  }

  bundle.beta = function(beta) {
    return custom(+beta);
  };

  return bundle;
})(0.85);

function point$1(that, x, y) {
  that._context.bezierCurveTo(
    that._x1 + that._k * (that._x2 - that._x0),
    that._y1 + that._k * (that._y2 - that._y0),
    that._x2 + that._k * (that._x1 - x),
    that._y2 + that._k * (that._y1 - y),
    that._x2,
    that._y2
  );
}

function Cardinal(context, tension) {
  this._context = context;
  this._k = (1 - tension) / 6;
}

Cardinal.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x0 = this._x1 = this._x2 =
    this._y0 = this._y1 = this._y2 = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    switch (this._point) {
      case 2: this._context.lineTo(this._x2, this._y2); break;
      case 3: point$1(this, this._x1, this._y1); break;
    }
    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x, y) {
    x = +x, y = +y;
    switch (this._point) {
      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
      case 1: this._point = 2; this._x1 = x, this._y1 = y; break;
      case 2: this._point = 3; // proceed
      default: point$1(this, x, y); break;
    }
    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
  }
};

var cardinal = (function custom(tension) {

  function cardinal(context) {
    return new Cardinal(context, tension);
  }

  cardinal.tension = function(tension) {
    return custom(+tension);
  };

  return cardinal;
})(0);

function CardinalClosed(context, tension) {
  this._context = context;
  this._k = (1 - tension) / 6;
}

CardinalClosed.prototype = {
  areaStart: noop,
  areaEnd: noop,
  lineStart: function() {
    this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 =
    this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    switch (this._point) {
      case 1: {
        this._context.moveTo(this._x3, this._y3);
        this._context.closePath();
        break;
      }
      case 2: {
        this._context.lineTo(this._x3, this._y3);
        this._context.closePath();
        break;
      }
      case 3: {
        this.point(this._x3, this._y3);
        this.point(this._x4, this._y4);
        this.point(this._x5, this._y5);
        break;
      }
    }
  },
  point: function(x, y) {
    x = +x, y = +y;
    switch (this._point) {
      case 0: this._point = 1; this._x3 = x, this._y3 = y; break;
      case 1: this._point = 2; this._context.moveTo(this._x4 = x, this._y4 = y); break;
      case 2: this._point = 3; this._x5 = x, this._y5 = y; break;
      default: point$1(this, x, y); break;
    }
    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
  }
};

var cardinalClosed = (function custom(tension) {

  function cardinal(context) {
    return new CardinalClosed(context, tension);
  }

  cardinal.tension = function(tension) {
    return custom(+tension);
  };

  return cardinal;
})(0);

function CardinalOpen(context, tension) {
  this._context = context;
  this._k = (1 - tension) / 6;
}

CardinalOpen.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x0 = this._x1 = this._x2 =
    this._y0 = this._y1 = this._y2 = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    if (this._line || (this._line !== 0 && this._point === 3)) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x, y) {
    x = +x, y = +y;
    switch (this._point) {
      case 0: this._point = 1; break;
      case 1: this._point = 2; break;
      case 2: this._point = 3; this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2); break;
      case 3: this._point = 4; // proceed
      default: point$1(this, x, y); break;
    }
    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
  }
};

var cardinalOpen = (function custom(tension) {

  function cardinal(context) {
    return new CardinalOpen(context, tension);
  }

  cardinal.tension = function(tension) {
    return custom(+tension);
  };

  return cardinal;
})(0);

function point$2(that, x, y) {
  var x1 = that._x1,
      y1 = that._y1,
      x2 = that._x2,
      y2 = that._y2;

  if (that._l01_a > epsilon) {
    var a = 2 * that._l01_2a + 3 * that._l01_a * that._l12_a + that._l12_2a,
        n = 3 * that._l01_a * (that._l01_a + that._l12_a);
    x1 = (x1 * a - that._x0 * that._l12_2a + that._x2 * that._l01_2a) / n;
    y1 = (y1 * a - that._y0 * that._l12_2a + that._y2 * that._l01_2a) / n;
  }

  if (that._l23_a > epsilon) {
    var b = 2 * that._l23_2a + 3 * that._l23_a * that._l12_a + that._l12_2a,
        m = 3 * that._l23_a * (that._l23_a + that._l12_a);
    x2 = (x2 * b + that._x1 * that._l23_2a - x * that._l12_2a) / m;
    y2 = (y2 * b + that._y1 * that._l23_2a - y * that._l12_2a) / m;
  }

  that._context.bezierCurveTo(x1, y1, x2, y2, that._x2, that._y2);
}

function CatmullRom(context, alpha) {
  this._context = context;
  this._alpha = alpha;
}

CatmullRom.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x0 = this._x1 = this._x2 =
    this._y0 = this._y1 = this._y2 = NaN;
    this._l01_a = this._l12_a = this._l23_a =
    this._l01_2a = this._l12_2a = this._l23_2a =
    this._point = 0;
  },
  lineEnd: function() {
    switch (this._point) {
      case 2: this._context.lineTo(this._x2, this._y2); break;
      case 3: this.point(this._x2, this._y2); break;
    }
    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x, y) {
    x = +x, y = +y;

    if (this._point) {
      var x23 = this._x2 - x,
          y23 = this._y2 - y;
      this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
    }

    switch (this._point) {
      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
      case 1: this._point = 2; break;
      case 2: this._point = 3; // proceed
      default: point$2(this, x, y); break;
    }

    this._l01_a = this._l12_a, this._l12_a = this._l23_a;
    this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
  }
};

var catmullRom = (function custom(alpha) {

  function catmullRom(context) {
    return alpha ? new CatmullRom(context, alpha) : new Cardinal(context, 0);
  }

  catmullRom.alpha = function(alpha) {
    return custom(+alpha);
  };

  return catmullRom;
})(0.5);

function CatmullRomClosed(context, alpha) {
  this._context = context;
  this._alpha = alpha;
}

CatmullRomClosed.prototype = {
  areaStart: noop,
  areaEnd: noop,
  lineStart: function() {
    this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 =
    this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;
    this._l01_a = this._l12_a = this._l23_a =
    this._l01_2a = this._l12_2a = this._l23_2a =
    this._point = 0;
  },
  lineEnd: function() {
    switch (this._point) {
      case 1: {
        this._context.moveTo(this._x3, this._y3);
        this._context.closePath();
        break;
      }
      case 2: {
        this._context.lineTo(this._x3, this._y3);
        this._context.closePath();
        break;
      }
      case 3: {
        this.point(this._x3, this._y3);
        this.point(this._x4, this._y4);
        this.point(this._x5, this._y5);
        break;
      }
    }
  },
  point: function(x, y) {
    x = +x, y = +y;

    if (this._point) {
      var x23 = this._x2 - x,
          y23 = this._y2 - y;
      this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
    }

    switch (this._point) {
      case 0: this._point = 1; this._x3 = x, this._y3 = y; break;
      case 1: this._point = 2; this._context.moveTo(this._x4 = x, this._y4 = y); break;
      case 2: this._point = 3; this._x5 = x, this._y5 = y; break;
      default: point$2(this, x, y); break;
    }

    this._l01_a = this._l12_a, this._l12_a = this._l23_a;
    this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
  }
};

var catmullRomClosed = (function custom(alpha) {

  function catmullRom(context) {
    return alpha ? new CatmullRomClosed(context, alpha) : new CardinalClosed(context, 0);
  }

  catmullRom.alpha = function(alpha) {
    return custom(+alpha);
  };

  return catmullRom;
})(0.5);

function CatmullRomOpen(context, alpha) {
  this._context = context;
  this._alpha = alpha;
}

CatmullRomOpen.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x0 = this._x1 = this._x2 =
    this._y0 = this._y1 = this._y2 = NaN;
    this._l01_a = this._l12_a = this._l23_a =
    this._l01_2a = this._l12_2a = this._l23_2a =
    this._point = 0;
  },
  lineEnd: function() {
    if (this._line || (this._line !== 0 && this._point === 3)) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x, y) {
    x = +x, y = +y;

    if (this._point) {
      var x23 = this._x2 - x,
          y23 = this._y2 - y;
      this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
    }

    switch (this._point) {
      case 0: this._point = 1; break;
      case 1: this._point = 2; break;
      case 2: this._point = 3; this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2); break;
      case 3: this._point = 4; // proceed
      default: point$2(this, x, y); break;
    }

    this._l01_a = this._l12_a, this._l12_a = this._l23_a;
    this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
  }
};

var catmullRomOpen = (function custom(alpha) {

  function catmullRom(context) {
    return alpha ? new CatmullRomOpen(context, alpha) : new CardinalOpen(context, 0);
  }

  catmullRom.alpha = function(alpha) {
    return custom(+alpha);
  };

  return catmullRom;
})(0.5);

function LinearClosed(context) {
  this._context = context;
}

LinearClosed.prototype = {
  areaStart: noop,
  areaEnd: noop,
  lineStart: function() {
    this._point = 0;
  },
  lineEnd: function() {
    if (this._point) this._context.closePath();
  },
  point: function(x, y) {
    x = +x, y = +y;
    if (this._point) this._context.lineTo(x, y);
    else this._point = 1, this._context.moveTo(x, y);
  }
};

function linearClosed(context) {
  return new LinearClosed(context);
}

function sign(x) {
  return x < 0 ? -1 : 1;
}

// Calculate the slopes of the tangents (Hermite-type interpolation) based on
// the following paper: Steffen, M. 1990. A Simple Method for Monotonic
// Interpolation in One Dimension. Astronomy and Astrophysics, Vol. 239, NO.
// NOV(II), P. 443, 1990.
function slope3(that, x2, y2) {
  var h0 = that._x1 - that._x0,
      h1 = x2 - that._x1,
      s0 = (that._y1 - that._y0) / (h0 || h1 < 0 && -0),
      s1 = (y2 - that._y1) / (h1 || h0 < 0 && -0),
      p = (s0 * h1 + s1 * h0) / (h0 + h1);
  return (sign(s0) + sign(s1)) * Math.min(Math.abs(s0), Math.abs(s1), 0.5 * Math.abs(p)) || 0;
}

// Calculate a one-sided slope.
function slope2(that, t) {
  var h = that._x1 - that._x0;
  return h ? (3 * (that._y1 - that._y0) / h - t) / 2 : t;
}

// According to https://en.wikipedia.org/wiki/Cubic_Hermite_spline#Representations
// "you can express cubic Hermite interpolation in terms of cubic Bézier curves
// with respect to the four values p0, p0 + m0 / 3, p1 - m1 / 3, p1".
function point$3(that, t0, t1) {
  var x0 = that._x0,
      y0 = that._y0,
      x1 = that._x1,
      y1 = that._y1,
      dx = (x1 - x0) / 3;
  that._context.bezierCurveTo(x0 + dx, y0 + dx * t0, x1 - dx, y1 - dx * t1, x1, y1);
}

function MonotoneX(context) {
  this._context = context;
}

MonotoneX.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x0 = this._x1 =
    this._y0 = this._y1 =
    this._t0 = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    switch (this._point) {
      case 2: this._context.lineTo(this._x1, this._y1); break;
      case 3: point$3(this, this._t0, slope2(this, this._t0)); break;
    }
    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x, y) {
    var t1 = NaN;

    x = +x, y = +y;
    if (x === this._x1 && y === this._y1) return; // Ignore coincident points.
    switch (this._point) {
      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
      case 1: this._point = 2; break;
      case 2: this._point = 3; point$3(this, slope2(this, t1 = slope3(this, x, y)), t1); break;
      default: point$3(this, this._t0, t1 = slope3(this, x, y)); break;
    }

    this._x0 = this._x1, this._x1 = x;
    this._y0 = this._y1, this._y1 = y;
    this._t0 = t1;
  }
};

function MonotoneY(context) {
  this._context = new ReflectContext(context);
}

(MonotoneY.prototype = Object.create(MonotoneX.prototype)).point = function(x, y) {
  MonotoneX.prototype.point.call(this, y, x);
};

function ReflectContext(context) {
  this._context = context;
}

ReflectContext.prototype = {
  moveTo: function(x, y) { this._context.moveTo(y, x); },
  closePath: function() { this._context.closePath(); },
  lineTo: function(x, y) { this._context.lineTo(y, x); },
  bezierCurveTo: function(x1, y1, x2, y2, x, y) { this._context.bezierCurveTo(y1, x1, y2, x2, y, x); }
};

function monotoneX(context) {
  return new MonotoneX(context);
}

function monotoneY(context) {
  return new MonotoneY(context);
}

function Natural(context) {
  this._context = context;
}

Natural.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x = [];
    this._y = [];
  },
  lineEnd: function() {
    var x = this._x,
        y = this._y,
        n = x.length;

    if (n) {
      this._line ? this._context.lineTo(x[0], y[0]) : this._context.moveTo(x[0], y[0]);
      if (n === 2) {
        this._context.lineTo(x[1], y[1]);
      } else {
        var px = controlPoints(x),
            py = controlPoints(y);
        for (var i0 = 0, i1 = 1; i1 < n; ++i0, ++i1) {
          this._context.bezierCurveTo(px[0][i0], py[0][i0], px[1][i0], py[1][i0], x[i1], y[i1]);
        }
      }
    }

    if (this._line || (this._line !== 0 && n === 1)) this._context.closePath();
    this._line = 1 - this._line;
    this._x = this._y = null;
  },
  point: function(x, y) {
    this._x.push(+x);
    this._y.push(+y);
  }
};

// See https://www.particleincell.com/2012/bezier-splines/ for derivation.
function controlPoints(x) {
  var i,
      n = x.length - 1,
      m,
      a = new Array(n),
      b = new Array(n),
      r = new Array(n);
  a[0] = 0, b[0] = 2, r[0] = x[0] + 2 * x[1];
  for (i = 1; i < n - 1; ++i) a[i] = 1, b[i] = 4, r[i] = 4 * x[i] + 2 * x[i + 1];
  a[n - 1] = 2, b[n - 1] = 7, r[n - 1] = 8 * x[n - 1] + x[n];
  for (i = 1; i < n; ++i) m = a[i] / b[i - 1], b[i] -= m, r[i] -= m * r[i - 1];
  a[n - 1] = r[n - 1] / b[n - 1];
  for (i = n - 2; i >= 0; --i) a[i] = (r[i] - a[i + 1]) / b[i];
  b[n - 1] = (x[n] + a[n - 1]) / 2;
  for (i = 0; i < n - 1; ++i) b[i] = 2 * x[i + 1] - a[i + 1];
  return [a, b];
}

function natural(context) {
  return new Natural(context);
}

function Step(context, t) {
  this._context = context;
  this._t = t;
}

Step.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x = this._y = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    if (0 < this._t && this._t < 1 && this._point === 2) this._context.lineTo(this._x, this._y);
    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
    if (this._line >= 0) this._t = 1 - this._t, this._line = 1 - this._line;
  },
  point: function(x, y) {
    x = +x, y = +y;
    switch (this._point) {
      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
      case 1: this._point = 2; // proceed
      default: {
        if (this._t <= 0) {
          this._context.lineTo(this._x, y);
          this._context.lineTo(x, y);
        } else {
          var x1 = this._x * (1 - this._t) + x * this._t;
          this._context.lineTo(x1, this._y);
          this._context.lineTo(x1, y);
        }
        break;
      }
    }
    this._x = x, this._y = y;
  }
};

function step(context) {
  return new Step(context, 0.5);
}

function stepBefore(context) {
  return new Step(context, 0);
}

function stepAfter(context) {
  return new Step(context, 1);
}

function none(series, order) {
  if (!((n = series.length) > 1)) return;
  for (var i = 1, j, s0, s1 = series[order[0]], n, m = s1.length; i < n; ++i) {
    s0 = s1, s1 = series[order[i]];
    for (j = 0; j < m; ++j) {
      s1[j][1] += s1[j][0] = isNaN(s0[j][1]) ? s0[j][0] : s0[j][1];
    }
  }
}

function none$1(series) {
  var n = series.length, o = new Array(n);
  while (--n >= 0) o[n] = n;
  return o;
}

function stackValue(d, key) {
  return d[key];
}

function stack() {
  var keys = constant([]),
      order = none$1,
      offset = none,
      value = stackValue;

  function stack(data) {
    var kz = keys.apply(this, arguments),
        i,
        m = data.length,
        n = kz.length,
        sz = new Array(n),
        oz;

    for (i = 0; i < n; ++i) {
      for (var ki = kz[i], si = sz[i] = new Array(m), j = 0, sij; j < m; ++j) {
        si[j] = sij = [0, +value(data[j], ki, j, data)];
        sij.data = data[j];
      }
      si.key = ki;
    }

    for (i = 0, oz = order(sz); i < n; ++i) {
      sz[oz[i]].index = i;
    }

    offset(sz, oz);
    return sz;
  }

  stack.keys = function(_) {
    return arguments.length ? (keys = typeof _ === "function" ? _ : constant(slice.call(_)), stack) : keys;
  };

  stack.value = function(_) {
    return arguments.length ? (value = typeof _ === "function" ? _ : constant(+_), stack) : value;
  };

  stack.order = function(_) {
    return arguments.length ? (order = _ == null ? none$1 : typeof _ === "function" ? _ : constant(slice.call(_)), stack) : order;
  };

  stack.offset = function(_) {
    return arguments.length ? (offset = _ == null ? none : _, stack) : offset;
  };

  return stack;
}

function expand(series, order) {
  if (!((n = series.length) > 0)) return;
  for (var i, n, j = 0, m = series[0].length, y; j < m; ++j) {
    for (y = i = 0; i < n; ++i) y += series[i][j][1] || 0;
    if (y) for (i = 0; i < n; ++i) series[i][j][1] /= y;
  }
  none(series, order);
}

function diverging(series, order) {
  if (!((n = series.length) > 0)) return;
  for (var i, j = 0, d, dy, yp, yn, n, m = series[order[0]].length; j < m; ++j) {
    for (yp = yn = 0, i = 0; i < n; ++i) {
      if ((dy = (d = series[order[i]][j])[1] - d[0]) > 0) {
        d[0] = yp, d[1] = yp += dy;
      } else if (dy < 0) {
        d[1] = yn, d[0] = yn += dy;
      } else {
        d[0] = 0, d[1] = dy;
      }
    }
  }
}

function silhouette(series, order) {
  if (!((n = series.length) > 0)) return;
  for (var j = 0, s0 = series[order[0]], n, m = s0.length; j < m; ++j) {
    for (var i = 0, y = 0; i < n; ++i) y += series[i][j][1] || 0;
    s0[j][1] += s0[j][0] = -y / 2;
  }
  none(series, order);
}

function wiggle(series, order) {
  if (!((n = series.length) > 0) || !((m = (s0 = series[order[0]]).length) > 0)) return;
  for (var y = 0, j = 1, s0, m, n; j < m; ++j) {
    for (var i = 0, s1 = 0, s2 = 0; i < n; ++i) {
      var si = series[order[i]],
          sij0 = si[j][1] || 0,
          sij1 = si[j - 1][1] || 0,
          s3 = (sij0 - sij1) / 2;
      for (var k = 0; k < i; ++k) {
        var sk = series[order[k]],
            skj0 = sk[j][1] || 0,
            skj1 = sk[j - 1][1] || 0;
        s3 += skj0 - skj1;
      }
      s1 += sij0, s2 += s3 * sij0;
    }
    s0[j - 1][1] += s0[j - 1][0] = y;
    if (s1) y -= s2 / s1;
  }
  s0[j - 1][1] += s0[j - 1][0] = y;
  none(series, order);
}

function appearance(series) {
  var peaks = series.map(peak);
  return none$1(series).sort(function(a, b) { return peaks[a] - peaks[b]; });
}

function peak(series) {
  var i = -1, j = 0, n = series.length, vi, vj = -Infinity;
  while (++i < n) if ((vi = +series[i][1]) > vj) vj = vi, j = i;
  return j;
}

function ascending(series) {
  var sums = series.map(sum);
  return none$1(series).sort(function(a, b) { return sums[a] - sums[b]; });
}

function sum(series) {
  var s = 0, i = -1, n = series.length, v;
  while (++i < n) if (v = +series[i][1]) s += v;
  return s;
}

function descending$1(series) {
  return ascending(series).reverse();
}

function insideOut(series) {
  var n = series.length,
      i,
      j,
      sums = series.map(sum),
      order = appearance(series),
      top = 0,
      bottom = 0,
      tops = [],
      bottoms = [];

  for (i = 0; i < n; ++i) {
    j = order[i];
    if (top < bottom) {
      top += sums[j];
      tops.push(j);
    } else {
      bottom += sums[j];
      bottoms.push(j);
    }
  }

  return bottoms.reverse().concat(tops);
}

function reverse(series) {
  return none$1(series).reverse();
}

exports.arc = arc;
exports.area = area;
exports.areaRadial = areaRadial;
exports.curveBasis = basis;
exports.curveBasisClosed = basisClosed;
exports.curveBasisOpen = basisOpen;
exports.curveBundle = bundle;
exports.curveCardinal = cardinal;
exports.curveCardinalClosed = cardinalClosed;
exports.curveCardinalOpen = cardinalOpen;
exports.curveCatmullRom = catmullRom;
exports.curveCatmullRomClosed = catmullRomClosed;
exports.curveCatmullRomOpen = catmullRomOpen;
exports.curveLinear = curveLinear;
exports.curveLinearClosed = linearClosed;
exports.curveMonotoneX = monotoneX;
exports.curveMonotoneY = monotoneY;
exports.curveNatural = natural;
exports.curveStep = step;
exports.curveStepAfter = stepAfter;
exports.curveStepBefore = stepBefore;
exports.line = line;
exports.lineRadial = lineRadial$1;
exports.linkHorizontal = linkHorizontal;
exports.linkRadial = linkRadial;
exports.linkVertical = linkVertical;
exports.pie = pie;
exports.pointRadial = pointRadial;
exports.radialArea = areaRadial;
exports.radialLine = lineRadial$1;
exports.stack = stack;
exports.stackOffsetDiverging = diverging;
exports.stackOffsetExpand = expand;
exports.stackOffsetNone = none;
exports.stackOffsetSilhouette = silhouette;
exports.stackOffsetWiggle = wiggle;
exports.stackOrderAppearance = appearance;
exports.stackOrderAscending = ascending;
exports.stackOrderDescending = descending$1;
exports.stackOrderInsideOut = insideOut;
exports.stackOrderNone = none$1;
exports.stackOrderReverse = reverse;
exports.symbol = symbol;
exports.symbolCircle = circle;
exports.symbolCross = cross;
exports.symbolDiamond = diamond;
exports.symbolSquare = square;
exports.symbolStar = star;
exports.symbolTriangle = triangle;
exports.symbolWye = wye;
exports.symbols = symbols;

Object.defineProperty(exports, '__esModule', { value: true });

}));

},{"d3-path":7}],11:[function(require,module,exports){
// https://d3js.org/d3-time-format/ v2.3.0 Copyright 2020 Mike Bostock
(function (global, factory) {
typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('d3-time')) :
typeof define === 'function' && define.amd ? define(['exports', 'd3-time'], factory) :
(global = global || self, factory(global.d3 = global.d3 || {}, global.d3));
}(this, function (exports, d3Time) { 'use strict';

function localDate(d) {
  if (0 <= d.y && d.y < 100) {
    var date = new Date(-1, d.m, d.d, d.H, d.M, d.S, d.L);
    date.setFullYear(d.y);
    return date;
  }
  return new Date(d.y, d.m, d.d, d.H, d.M, d.S, d.L);
}

function utcDate(d) {
  if (0 <= d.y && d.y < 100) {
    var date = new Date(Date.UTC(-1, d.m, d.d, d.H, d.M, d.S, d.L));
    date.setUTCFullYear(d.y);
    return date;
  }
  return new Date(Date.UTC(d.y, d.m, d.d, d.H, d.M, d.S, d.L));
}

function newDate(y, m, d) {
  return {y: y, m: m, d: d, H: 0, M: 0, S: 0, L: 0};
}

function formatLocale(locale) {
  var locale_dateTime = locale.dateTime,
      locale_date = locale.date,
      locale_time = locale.time,
      locale_periods = locale.periods,
      locale_weekdays = locale.days,
      locale_shortWeekdays = locale.shortDays,
      locale_months = locale.months,
      locale_shortMonths = locale.shortMonths;

  var periodRe = formatRe(locale_periods),
      periodLookup = formatLookup(locale_periods),
      weekdayRe = formatRe(locale_weekdays),
      weekdayLookup = formatLookup(locale_weekdays),
      shortWeekdayRe = formatRe(locale_shortWeekdays),
      shortWeekdayLookup = formatLookup(locale_shortWeekdays),
      monthRe = formatRe(locale_months),
      monthLookup = formatLookup(locale_months),
      shortMonthRe = formatRe(locale_shortMonths),
      shortMonthLookup = formatLookup(locale_shortMonths);

  var formats = {
    "a": formatShortWeekday,
    "A": formatWeekday,
    "b": formatShortMonth,
    "B": formatMonth,
    "c": null,
    "d": formatDayOfMonth,
    "e": formatDayOfMonth,
    "f": formatMicroseconds,
    "g": formatYearISO,
    "G": formatFullYearISO,
    "H": formatHour24,
    "I": formatHour12,
    "j": formatDayOfYear,
    "L": formatMilliseconds,
    "m": formatMonthNumber,
    "M": formatMinutes,
    "p": formatPeriod,
    "q": formatQuarter,
    "Q": formatUnixTimestamp,
    "s": formatUnixTimestampSeconds,
    "S": formatSeconds,
    "u": formatWeekdayNumberMonday,
    "U": formatWeekNumberSunday,
    "V": formatWeekNumberISO,
    "w": formatWeekdayNumberSunday,
    "W": formatWeekNumberMonday,
    "x": null,
    "X": null,
    "y": formatYear,
    "Y": formatFullYear,
    "Z": formatZone,
    "%": formatLiteralPercent
  };

  var utcFormats = {
    "a": formatUTCShortWeekday,
    "A": formatUTCWeekday,
    "b": formatUTCShortMonth,
    "B": formatUTCMonth,
    "c": null,
    "d": formatUTCDayOfMonth,
    "e": formatUTCDayOfMonth,
    "f": formatUTCMicroseconds,
    "g": formatUTCYearISO,
    "G": formatUTCFullYearISO,
    "H": formatUTCHour24,
    "I": formatUTCHour12,
    "j": formatUTCDayOfYear,
    "L": formatUTCMilliseconds,
    "m": formatUTCMonthNumber,
    "M": formatUTCMinutes,
    "p": formatUTCPeriod,
    "q": formatUTCQuarter,
    "Q": formatUnixTimestamp,
    "s": formatUnixTimestampSeconds,
    "S": formatUTCSeconds,
    "u": formatUTCWeekdayNumberMonday,
    "U": formatUTCWeekNumberSunday,
    "V": formatUTCWeekNumberISO,
    "w": formatUTCWeekdayNumberSunday,
    "W": formatUTCWeekNumberMonday,
    "x": null,
    "X": null,
    "y": formatUTCYear,
    "Y": formatUTCFullYear,
    "Z": formatUTCZone,
    "%": formatLiteralPercent
  };

  var parses = {
    "a": parseShortWeekday,
    "A": parseWeekday,
    "b": parseShortMonth,
    "B": parseMonth,
    "c": parseLocaleDateTime,
    "d": parseDayOfMonth,
    "e": parseDayOfMonth,
    "f": parseMicroseconds,
    "g": parseYear,
    "G": parseFullYear,
    "H": parseHour24,
    "I": parseHour24,
    "j": parseDayOfYear,
    "L": parseMilliseconds,
    "m": parseMonthNumber,
    "M": parseMinutes,
    "p": parsePeriod,
    "q": parseQuarter,
    "Q": parseUnixTimestamp,
    "s": parseUnixTimestampSeconds,
    "S": parseSeconds,
    "u": parseWeekdayNumberMonday,
    "U": parseWeekNumberSunday,
    "V": parseWeekNumberISO,
    "w": parseWeekdayNumberSunday,
    "W": parseWeekNumberMonday,
    "x": parseLocaleDate,
    "X": parseLocaleTime,
    "y": parseYear,
    "Y": parseFullYear,
    "Z": parseZone,
    "%": parseLiteralPercent
  };

  // These recursive directive definitions must be deferred.
  formats.x = newFormat(locale_date, formats);
  formats.X = newFormat(locale_time, formats);
  formats.c = newFormat(locale_dateTime, formats);
  utcFormats.x = newFormat(locale_date, utcFormats);
  utcFormats.X = newFormat(locale_time, utcFormats);
  utcFormats.c = newFormat(locale_dateTime, utcFormats);

  function newFormat(specifier, formats) {
    return function(date) {
      var string = [],
          i = -1,
          j = 0,
          n = specifier.length,
          c,
          pad,
          format;

      if (!(date instanceof Date)) date = new Date(+date);

      while (++i < n) {
        if (specifier.charCodeAt(i) === 37) {
          string.push(specifier.slice(j, i));
          if ((pad = pads[c = specifier.charAt(++i)]) != null) c = specifier.charAt(++i);
          else pad = c === "e" ? " " : "0";
          if (format = formats[c]) c = format(date, pad);
          string.push(c);
          j = i + 1;
        }
      }

      string.push(specifier.slice(j, i));
      return string.join("");
    };
  }

  function newParse(specifier, Z) {
    return function(string) {
      var d = newDate(1900, undefined, 1),
          i = parseSpecifier(d, specifier, string += "", 0),
          week, day;
      if (i != string.length) return null;

      // If a UNIX timestamp is specified, return it.
      if ("Q" in d) return new Date(d.Q);
      if ("s" in d) return new Date(d.s * 1000 + ("L" in d ? d.L : 0));

      // If this is utcParse, never use the local timezone.
      if (Z && !("Z" in d)) d.Z = 0;

      // The am-pm flag is 0 for AM, and 1 for PM.
      if ("p" in d) d.H = d.H % 12 + d.p * 12;

      // If the month was not specified, inherit from the quarter.
      if (d.m === undefined) d.m = "q" in d ? d.q : 0;

      // Convert day-of-week and week-of-year to day-of-year.
      if ("V" in d) {
        if (d.V < 1 || d.V > 53) return null;
        if (!("w" in d)) d.w = 1;
        if ("Z" in d) {
          week = utcDate(newDate(d.y, 0, 1)), day = week.getUTCDay();
          week = day > 4 || day === 0 ? d3Time.utcMonday.ceil(week) : d3Time.utcMonday(week);
          week = d3Time.utcDay.offset(week, (d.V - 1) * 7);
          d.y = week.getUTCFullYear();
          d.m = week.getUTCMonth();
          d.d = week.getUTCDate() + (d.w + 6) % 7;
        } else {
          week = localDate(newDate(d.y, 0, 1)), day = week.getDay();
          week = day > 4 || day === 0 ? d3Time.timeMonday.ceil(week) : d3Time.timeMonday(week);
          week = d3Time.timeDay.offset(week, (d.V - 1) * 7);
          d.y = week.getFullYear();
          d.m = week.getMonth();
          d.d = week.getDate() + (d.w + 6) % 7;
        }
      } else if ("W" in d || "U" in d) {
        if (!("w" in d)) d.w = "u" in d ? d.u % 7 : "W" in d ? 1 : 0;
        day = "Z" in d ? utcDate(newDate(d.y, 0, 1)).getUTCDay() : localDate(newDate(d.y, 0, 1)).getDay();
        d.m = 0;
        d.d = "W" in d ? (d.w + 6) % 7 + d.W * 7 - (day + 5) % 7 : d.w + d.U * 7 - (day + 6) % 7;
      }

      // If a time zone is specified, all fields are interpreted as UTC and then
      // offset according to the specified time zone.
      if ("Z" in d) {
        d.H += d.Z / 100 | 0;
        d.M += d.Z % 100;
        return utcDate(d);
      }

      // Otherwise, all fields are in local time.
      return localDate(d);
    };
  }

  function parseSpecifier(d, specifier, string, j) {
    var i = 0,
        n = specifier.length,
        m = string.length,
        c,
        parse;

    while (i < n) {
      if (j >= m) return -1;
      c = specifier.charCodeAt(i++);
      if (c === 37) {
        c = specifier.charAt(i++);
        parse = parses[c in pads ? specifier.charAt(i++) : c];
        if (!parse || ((j = parse(d, string, j)) < 0)) return -1;
      } else if (c != string.charCodeAt(j++)) {
        return -1;
      }
    }

    return j;
  }

  function parsePeriod(d, string, i) {
    var n = periodRe.exec(string.slice(i));
    return n ? (d.p = periodLookup[n[0].toLowerCase()], i + n[0].length) : -1;
  }

  function parseShortWeekday(d, string, i) {
    var n = shortWeekdayRe.exec(string.slice(i));
    return n ? (d.w = shortWeekdayLookup[n[0].toLowerCase()], i + n[0].length) : -1;
  }

  function parseWeekday(d, string, i) {
    var n = weekdayRe.exec(string.slice(i));
    return n ? (d.w = weekdayLookup[n[0].toLowerCase()], i + n[0].length) : -1;
  }

  function parseShortMonth(d, string, i) {
    var n = shortMonthRe.exec(string.slice(i));
    return n ? (d.m = shortMonthLookup[n[0].toLowerCase()], i + n[0].length) : -1;
  }

  function parseMonth(d, string, i) {
    var n = monthRe.exec(string.slice(i));
    return n ? (d.m = monthLookup[n[0].toLowerCase()], i + n[0].length) : -1;
  }

  function parseLocaleDateTime(d, string, i) {
    return parseSpecifier(d, locale_dateTime, string, i);
  }

  function parseLocaleDate(d, string, i) {
    return parseSpecifier(d, locale_date, string, i);
  }

  function parseLocaleTime(d, string, i) {
    return parseSpecifier(d, locale_time, string, i);
  }

  function formatShortWeekday(d) {
    return locale_shortWeekdays[d.getDay()];
  }

  function formatWeekday(d) {
    return locale_weekdays[d.getDay()];
  }

  function formatShortMonth(d) {
    return locale_shortMonths[d.getMonth()];
  }

  function formatMonth(d) {
    return locale_months[d.getMonth()];
  }

  function formatPeriod(d) {
    return locale_periods[+(d.getHours() >= 12)];
  }

  function formatQuarter(d) {
    return 1 + ~~(d.getMonth() / 3);
  }

  function formatUTCShortWeekday(d) {
    return locale_shortWeekdays[d.getUTCDay()];
  }

  function formatUTCWeekday(d) {
    return locale_weekdays[d.getUTCDay()];
  }

  function formatUTCShortMonth(d) {
    return locale_shortMonths[d.getUTCMonth()];
  }

  function formatUTCMonth(d) {
    return locale_months[d.getUTCMonth()];
  }

  function formatUTCPeriod(d) {
    return locale_periods[+(d.getUTCHours() >= 12)];
  }

  function formatUTCQuarter(d) {
    return 1 + ~~(d.getUTCMonth() / 3);
  }

  return {
    format: function(specifier) {
      var f = newFormat(specifier += "", formats);
      f.toString = function() { return specifier; };
      return f;
    },
    parse: function(specifier) {
      var p = newParse(specifier += "", false);
      p.toString = function() { return specifier; };
      return p;
    },
    utcFormat: function(specifier) {
      var f = newFormat(specifier += "", utcFormats);
      f.toString = function() { return specifier; };
      return f;
    },
    utcParse: function(specifier) {
      var p = newParse(specifier += "", true);
      p.toString = function() { return specifier; };
      return p;
    }
  };
}

var pads = {"-": "", "_": " ", "0": "0"},
    numberRe = /^\s*\d+/, // note: ignores next directive
    percentRe = /^%/,
    requoteRe = /[\\^$*+?|[\]().{}]/g;

function pad(value, fill, width) {
  var sign = value < 0 ? "-" : "",
      string = (sign ? -value : value) + "",
      length = string.length;
  return sign + (length < width ? new Array(width - length + 1).join(fill) + string : string);
}

function requote(s) {
  return s.replace(requoteRe, "\\$&");
}

function formatRe(names) {
  return new RegExp("^(?:" + names.map(requote).join("|") + ")", "i");
}

function formatLookup(names) {
  var map = {}, i = -1, n = names.length;
  while (++i < n) map[names[i].toLowerCase()] = i;
  return map;
}

function parseWeekdayNumberSunday(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 1));
  return n ? (d.w = +n[0], i + n[0].length) : -1;
}

function parseWeekdayNumberMonday(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 1));
  return n ? (d.u = +n[0], i + n[0].length) : -1;
}

function parseWeekNumberSunday(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.U = +n[0], i + n[0].length) : -1;
}

function parseWeekNumberISO(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.V = +n[0], i + n[0].length) : -1;
}

function parseWeekNumberMonday(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.W = +n[0], i + n[0].length) : -1;
}

function parseFullYear(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 4));
  return n ? (d.y = +n[0], i + n[0].length) : -1;
}

function parseYear(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.y = +n[0] + (+n[0] > 68 ? 1900 : 2000), i + n[0].length) : -1;
}

function parseZone(d, string, i) {
  var n = /^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(string.slice(i, i + 6));
  return n ? (d.Z = n[1] ? 0 : -(n[2] + (n[3] || "00")), i + n[0].length) : -1;
}

function parseQuarter(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 1));
  return n ? (d.q = n[0] * 3 - 3, i + n[0].length) : -1;
}

function parseMonthNumber(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.m = n[0] - 1, i + n[0].length) : -1;
}

function parseDayOfMonth(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.d = +n[0], i + n[0].length) : -1;
}

function parseDayOfYear(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 3));
  return n ? (d.m = 0, d.d = +n[0], i + n[0].length) : -1;
}

function parseHour24(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.H = +n[0], i + n[0].length) : -1;
}

function parseMinutes(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.M = +n[0], i + n[0].length) : -1;
}

function parseSeconds(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.S = +n[0], i + n[0].length) : -1;
}

function parseMilliseconds(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 3));
  return n ? (d.L = +n[0], i + n[0].length) : -1;
}

function parseMicroseconds(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 6));
  return n ? (d.L = Math.floor(n[0] / 1000), i + n[0].length) : -1;
}

function parseLiteralPercent(d, string, i) {
  var n = percentRe.exec(string.slice(i, i + 1));
  return n ? i + n[0].length : -1;
}

function parseUnixTimestamp(d, string, i) {
  var n = numberRe.exec(string.slice(i));
  return n ? (d.Q = +n[0], i + n[0].length) : -1;
}

function parseUnixTimestampSeconds(d, string, i) {
  var n = numberRe.exec(string.slice(i));
  return n ? (d.s = +n[0], i + n[0].length) : -1;
}

function formatDayOfMonth(d, p) {
  return pad(d.getDate(), p, 2);
}

function formatHour24(d, p) {
  return pad(d.getHours(), p, 2);
}

function formatHour12(d, p) {
  return pad(d.getHours() % 12 || 12, p, 2);
}

function formatDayOfYear(d, p) {
  return pad(1 + d3Time.timeDay.count(d3Time.timeYear(d), d), p, 3);
}

function formatMilliseconds(d, p) {
  return pad(d.getMilliseconds(), p, 3);
}

function formatMicroseconds(d, p) {
  return formatMilliseconds(d, p) + "000";
}

function formatMonthNumber(d, p) {
  return pad(d.getMonth() + 1, p, 2);
}

function formatMinutes(d, p) {
  return pad(d.getMinutes(), p, 2);
}

function formatSeconds(d, p) {
  return pad(d.getSeconds(), p, 2);
}

function formatWeekdayNumberMonday(d) {
  var day = d.getDay();
  return day === 0 ? 7 : day;
}

function formatWeekNumberSunday(d, p) {
  return pad(d3Time.timeSunday.count(d3Time.timeYear(d) - 1, d), p, 2);
}

function dISO(d) {
  var day = d.getDay();
  return (day >= 4 || day === 0) ? d3Time.timeThursday(d) : d3Time.timeThursday.ceil(d);
}

function formatWeekNumberISO(d, p) {
  d = dISO(d);
  return pad(d3Time.timeThursday.count(d3Time.timeYear(d), d) + (d3Time.timeYear(d).getDay() === 4), p, 2);
}

function formatWeekdayNumberSunday(d) {
  return d.getDay();
}

function formatWeekNumberMonday(d, p) {
  return pad(d3Time.timeMonday.count(d3Time.timeYear(d) - 1, d), p, 2);
}

function formatYear(d, p) {
  return pad(d.getFullYear() % 100, p, 2);
}

function formatYearISO(d, p) {
  d = dISO(d);
  return pad(d.getFullYear() % 100, p, 2);
}

function formatFullYear(d, p) {
  return pad(d.getFullYear() % 10000, p, 4);
}

function formatFullYearISO(d, p) {
  var day = d.getDay();
  d = (day >= 4 || day === 0) ? d3Time.timeThursday(d) : d3Time.timeThursday.ceil(d);
  return pad(d.getFullYear() % 10000, p, 4);
}

function formatZone(d) {
  var z = d.getTimezoneOffset();
  return (z > 0 ? "-" : (z *= -1, "+"))
      + pad(z / 60 | 0, "0", 2)
      + pad(z % 60, "0", 2);
}

function formatUTCDayOfMonth(d, p) {
  return pad(d.getUTCDate(), p, 2);
}

function formatUTCHour24(d, p) {
  return pad(d.getUTCHours(), p, 2);
}

function formatUTCHour12(d, p) {
  return pad(d.getUTCHours() % 12 || 12, p, 2);
}

function formatUTCDayOfYear(d, p) {
  return pad(1 + d3Time.utcDay.count(d3Time.utcYear(d), d), p, 3);
}

function formatUTCMilliseconds(d, p) {
  return pad(d.getUTCMilliseconds(), p, 3);
}

function formatUTCMicroseconds(d, p) {
  return formatUTCMilliseconds(d, p) + "000";
}

function formatUTCMonthNumber(d, p) {
  return pad(d.getUTCMonth() + 1, p, 2);
}

function formatUTCMinutes(d, p) {
  return pad(d.getUTCMinutes(), p, 2);
}

function formatUTCSeconds(d, p) {
  return pad(d.getUTCSeconds(), p, 2);
}

function formatUTCWeekdayNumberMonday(d) {
  var dow = d.getUTCDay();
  return dow === 0 ? 7 : dow;
}

function formatUTCWeekNumberSunday(d, p) {
  return pad(d3Time.utcSunday.count(d3Time.utcYear(d) - 1, d), p, 2);
}

function UTCdISO(d) {
  var day = d.getUTCDay();
  return (day >= 4 || day === 0) ? d3Time.utcThursday(d) : d3Time.utcThursday.ceil(d);
}

function formatUTCWeekNumberISO(d, p) {
  d = UTCdISO(d);
  return pad(d3Time.utcThursday.count(d3Time.utcYear(d), d) + (d3Time.utcYear(d).getUTCDay() === 4), p, 2);
}

function formatUTCWeekdayNumberSunday(d) {
  return d.getUTCDay();
}

function formatUTCWeekNumberMonday(d, p) {
  return pad(d3Time.utcMonday.count(d3Time.utcYear(d) - 1, d), p, 2);
}

function formatUTCYear(d, p) {
  return pad(d.getUTCFullYear() % 100, p, 2);
}

function formatUTCYearISO(d, p) {
  d = UTCdISO(d);
  return pad(d.getUTCFullYear() % 100, p, 2);
}

function formatUTCFullYear(d, p) {
  return pad(d.getUTCFullYear() % 10000, p, 4);
}

function formatUTCFullYearISO(d, p) {
  var day = d.getUTCDay();
  d = (day >= 4 || day === 0) ? d3Time.utcThursday(d) : d3Time.utcThursday.ceil(d);
  return pad(d.getUTCFullYear() % 10000, p, 4);
}

function formatUTCZone() {
  return "+0000";
}

function formatLiteralPercent() {
  return "%";
}

function formatUnixTimestamp(d) {
  return +d;
}

function formatUnixTimestampSeconds(d) {
  return Math.floor(+d / 1000);
}

var locale;

defaultLocale({
  dateTime: "%x, %X",
  date: "%-m/%-d/%Y",
  time: "%-I:%M:%S %p",
  periods: ["AM", "PM"],
  days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
  shortDays: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
  months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
  shortMonths: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
});

function defaultLocale(definition) {
  locale = formatLocale(definition);
  exports.timeFormat = locale.format;
  exports.timeParse = locale.parse;
  exports.utcFormat = locale.utcFormat;
  exports.utcParse = locale.utcParse;
  return locale;
}

var isoSpecifier = "%Y-%m-%dT%H:%M:%S.%LZ";

function formatIsoNative(date) {
  return date.toISOString();
}

var formatIso = Date.prototype.toISOString
    ? formatIsoNative
    : exports.utcFormat(isoSpecifier);

function parseIsoNative(string) {
  var date = new Date(string);
  return isNaN(date) ? null : date;
}

var parseIso = +new Date("2000-01-01T00:00:00.000Z")
    ? parseIsoNative
    : exports.utcParse(isoSpecifier);

exports.isoFormat = formatIso;
exports.isoParse = parseIso;
exports.timeFormatDefaultLocale = defaultLocale;
exports.timeFormatLocale = formatLocale;

Object.defineProperty(exports, '__esModule', { value: true });

}));

},{"d3-time":12}],12:[function(require,module,exports){
// https://d3js.org/d3-time/ v1.1.0 Copyright 2019 Mike Bostock
(function (global, factory) {
typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
typeof define === 'function' && define.amd ? define(['exports'], factory) :
(global = global || self, factory(global.d3 = global.d3 || {}));
}(this, function (exports) { 'use strict';

var t0 = new Date,
    t1 = new Date;

function newInterval(floori, offseti, count, field) {

  function interval(date) {
    return floori(date = arguments.length === 0 ? new Date : new Date(+date)), date;
  }

  interval.floor = function(date) {
    return floori(date = new Date(+date)), date;
  };

  interval.ceil = function(date) {
    return floori(date = new Date(date - 1)), offseti(date, 1), floori(date), date;
  };

  interval.round = function(date) {
    var d0 = interval(date),
        d1 = interval.ceil(date);
    return date - d0 < d1 - date ? d0 : d1;
  };

  interval.offset = function(date, step) {
    return offseti(date = new Date(+date), step == null ? 1 : Math.floor(step)), date;
  };

  interval.range = function(start, stop, step) {
    var range = [], previous;
    start = interval.ceil(start);
    step = step == null ? 1 : Math.floor(step);
    if (!(start < stop) || !(step > 0)) return range; // also handles Invalid Date
    do range.push(previous = new Date(+start)), offseti(start, step), floori(start);
    while (previous < start && start < stop);
    return range;
  };

  interval.filter = function(test) {
    return newInterval(function(date) {
      if (date >= date) while (floori(date), !test(date)) date.setTime(date - 1);
    }, function(date, step) {
      if (date >= date) {
        if (step < 0) while (++step <= 0) {
          while (offseti(date, -1), !test(date)) {} // eslint-disable-line no-empty
        } else while (--step >= 0) {
          while (offseti(date, +1), !test(date)) {} // eslint-disable-line no-empty
        }
      }
    });
  };

  if (count) {
    interval.count = function(start, end) {
      t0.setTime(+start), t1.setTime(+end);
      floori(t0), floori(t1);
      return Math.floor(count(t0, t1));
    };

    interval.every = function(step) {
      step = Math.floor(step);
      return !isFinite(step) || !(step > 0) ? null
          : !(step > 1) ? interval
          : interval.filter(field
              ? function(d) { return field(d) % step === 0; }
              : function(d) { return interval.count(0, d) % step === 0; });
    };
  }

  return interval;
}

var millisecond = newInterval(function() {
  // noop
}, function(date, step) {
  date.setTime(+date + step);
}, function(start, end) {
  return end - start;
});

// An optimized implementation for this simple case.
millisecond.every = function(k) {
  k = Math.floor(k);
  if (!isFinite(k) || !(k > 0)) return null;
  if (!(k > 1)) return millisecond;
  return newInterval(function(date) {
    date.setTime(Math.floor(date / k) * k);
  }, function(date, step) {
    date.setTime(+date + step * k);
  }, function(start, end) {
    return (end - start) / k;
  });
};
var milliseconds = millisecond.range;

var durationSecond = 1e3;
var durationMinute = 6e4;
var durationHour = 36e5;
var durationDay = 864e5;
var durationWeek = 6048e5;

var second = newInterval(function(date) {
  date.setTime(date - date.getMilliseconds());
}, function(date, step) {
  date.setTime(+date + step * durationSecond);
}, function(start, end) {
  return (end - start) / durationSecond;
}, function(date) {
  return date.getUTCSeconds();
});
var seconds = second.range;

var minute = newInterval(function(date) {
  date.setTime(date - date.getMilliseconds() - date.getSeconds() * durationSecond);
}, function(date, step) {
  date.setTime(+date + step * durationMinute);
}, function(start, end) {
  return (end - start) / durationMinute;
}, function(date) {
  return date.getMinutes();
});
var minutes = minute.range;

var hour = newInterval(function(date) {
  date.setTime(date - date.getMilliseconds() - date.getSeconds() * durationSecond - date.getMinutes() * durationMinute);
}, function(date, step) {
  date.setTime(+date + step * durationHour);
}, function(start, end) {
  return (end - start) / durationHour;
}, function(date) {
  return date.getHours();
});
var hours = hour.range;

var day = newInterval(function(date) {
  date.setHours(0, 0, 0, 0);
}, function(date, step) {
  date.setDate(date.getDate() + step);
}, function(start, end) {
  return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationDay;
}, function(date) {
  return date.getDate() - 1;
});
var days = day.range;

function weekday(i) {
  return newInterval(function(date) {
    date.setDate(date.getDate() - (date.getDay() + 7 - i) % 7);
    date.setHours(0, 0, 0, 0);
  }, function(date, step) {
    date.setDate(date.getDate() + step * 7);
  }, function(start, end) {
    return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationWeek;
  });
}

var sunday = weekday(0);
var monday = weekday(1);
var tuesday = weekday(2);
var wednesday = weekday(3);
var thursday = weekday(4);
var friday = weekday(5);
var saturday = weekday(6);

var sundays = sunday.range;
var mondays = monday.range;
var tuesdays = tuesday.range;
var wednesdays = wednesday.range;
var thursdays = thursday.range;
var fridays = friday.range;
var saturdays = saturday.range;

var month = newInterval(function(date) {
  date.setDate(1);
  date.setHours(0, 0, 0, 0);
}, function(date, step) {
  date.setMonth(date.getMonth() + step);
}, function(start, end) {
  return end.getMonth() - start.getMonth() + (end.getFullYear() - start.getFullYear()) * 12;
}, function(date) {
  return date.getMonth();
});
var months = month.range;

var year = newInterval(function(date) {
  date.setMonth(0, 1);
  date.setHours(0, 0, 0, 0);
}, function(date, step) {
  date.setFullYear(date.getFullYear() + step);
}, function(start, end) {
  return end.getFullYear() - start.getFullYear();
}, function(date) {
  return date.getFullYear();
});

// An optimized implementation for this simple case.
year.every = function(k) {
  return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : newInterval(function(date) {
    date.setFullYear(Math.floor(date.getFullYear() / k) * k);
    date.setMonth(0, 1);
    date.setHours(0, 0, 0, 0);
  }, function(date, step) {
    date.setFullYear(date.getFullYear() + step * k);
  });
};
var years = year.range;

var utcMinute = newInterval(function(date) {
  date.setUTCSeconds(0, 0);
}, function(date, step) {
  date.setTime(+date + step * durationMinute);
}, function(start, end) {
  return (end - start) / durationMinute;
}, function(date) {
  return date.getUTCMinutes();
});
var utcMinutes = utcMinute.range;

var utcHour = newInterval(function(date) {
  date.setUTCMinutes(0, 0, 0);
}, function(date, step) {
  date.setTime(+date + step * durationHour);
}, function(start, end) {
  return (end - start) / durationHour;
}, function(date) {
  return date.getUTCHours();
});
var utcHours = utcHour.range;

var utcDay = newInterval(function(date) {
  date.setUTCHours(0, 0, 0, 0);
}, function(date, step) {
  date.setUTCDate(date.getUTCDate() + step);
}, function(start, end) {
  return (end - start) / durationDay;
}, function(date) {
  return date.getUTCDate() - 1;
});
var utcDays = utcDay.range;

function utcWeekday(i) {
  return newInterval(function(date) {
    date.setUTCDate(date.getUTCDate() - (date.getUTCDay() + 7 - i) % 7);
    date.setUTCHours(0, 0, 0, 0);
  }, function(date, step) {
    date.setUTCDate(date.getUTCDate() + step * 7);
  }, function(start, end) {
    return (end - start) / durationWeek;
  });
}

var utcSunday = utcWeekday(0);
var utcMonday = utcWeekday(1);
var utcTuesday = utcWeekday(2);
var utcWednesday = utcWeekday(3);
var utcThursday = utcWeekday(4);
var utcFriday = utcWeekday(5);
var utcSaturday = utcWeekday(6);

var utcSundays = utcSunday.range;
var utcMondays = utcMonday.range;
var utcTuesdays = utcTuesday.range;
var utcWednesdays = utcWednesday.range;
var utcThursdays = utcThursday.range;
var utcFridays = utcFriday.range;
var utcSaturdays = utcSaturday.range;

var utcMonth = newInterval(function(date) {
  date.setUTCDate(1);
  date.setUTCHours(0, 0, 0, 0);
}, function(date, step) {
  date.setUTCMonth(date.getUTCMonth() + step);
}, function(start, end) {
  return end.getUTCMonth() - start.getUTCMonth() + (end.getUTCFullYear() - start.getUTCFullYear()) * 12;
}, function(date) {
  return date.getUTCMonth();
});
var utcMonths = utcMonth.range;

var utcYear = newInterval(function(date) {
  date.setUTCMonth(0, 1);
  date.setUTCHours(0, 0, 0, 0);
}, function(date, step) {
  date.setUTCFullYear(date.getUTCFullYear() + step);
}, function(start, end) {
  return end.getUTCFullYear() - start.getUTCFullYear();
}, function(date) {
  return date.getUTCFullYear();
});

// An optimized implementation for this simple case.
utcYear.every = function(k) {
  return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : newInterval(function(date) {
    date.setUTCFullYear(Math.floor(date.getUTCFullYear() / k) * k);
    date.setUTCMonth(0, 1);
    date.setUTCHours(0, 0, 0, 0);
  }, function(date, step) {
    date.setUTCFullYear(date.getUTCFullYear() + step * k);
  });
};
var utcYears = utcYear.range;

exports.timeDay = day;
exports.timeDays = days;
exports.timeFriday = friday;
exports.timeFridays = fridays;
exports.timeHour = hour;
exports.timeHours = hours;
exports.timeInterval = newInterval;
exports.timeMillisecond = millisecond;
exports.timeMilliseconds = milliseconds;
exports.timeMinute = minute;
exports.timeMinutes = minutes;
exports.timeMonday = monday;
exports.timeMondays = mondays;
exports.timeMonth = month;
exports.timeMonths = months;
exports.timeSaturday = saturday;
exports.timeSaturdays = saturdays;
exports.timeSecond = second;
exports.timeSeconds = seconds;
exports.timeSunday = sunday;
exports.timeSundays = sundays;
exports.timeThursday = thursday;
exports.timeThursdays = thursdays;
exports.timeTuesday = tuesday;
exports.timeTuesdays = tuesdays;
exports.timeWednesday = wednesday;
exports.timeWednesdays = wednesdays;
exports.timeWeek = sunday;
exports.timeWeeks = sundays;
exports.timeYear = year;
exports.timeYears = years;
exports.utcDay = utcDay;
exports.utcDays = utcDays;
exports.utcFriday = utcFriday;
exports.utcFridays = utcFridays;
exports.utcHour = utcHour;
exports.utcHours = utcHours;
exports.utcMillisecond = millisecond;
exports.utcMilliseconds = milliseconds;
exports.utcMinute = utcMinute;
exports.utcMinutes = utcMinutes;
exports.utcMonday = utcMonday;
exports.utcMondays = utcMondays;
exports.utcMonth = utcMonth;
exports.utcMonths = utcMonths;
exports.utcSaturday = utcSaturday;
exports.utcSaturdays = utcSaturdays;
exports.utcSecond = second;
exports.utcSeconds = seconds;
exports.utcSunday = utcSunday;
exports.utcSundays = utcSundays;
exports.utcThursday = utcThursday;
exports.utcThursdays = utcThursdays;
exports.utcTuesday = utcTuesday;
exports.utcTuesdays = utcTuesdays;
exports.utcWednesday = utcWednesday;
exports.utcWednesdays = utcWednesdays;
exports.utcWeek = utcSunday;
exports.utcWeeks = utcSundays;
exports.utcYear = utcYear;
exports.utcYears = utcYears;

Object.defineProperty(exports, '__esModule', { value: true });

}));

},{}],13:[function(require,module,exports){
"use strict";

var _bar_chart_values = require("./bar_chart_values.js");

var _d3Selection = require("d3-selection");

var d3 = {
  select: _d3Selection.select,
  selectAll: _d3Selection.selectAll
};
$("#bar_background_cp").spectrum({
  type: "color",
  preferredFormat: "rgb",
  showInput: true,
  showButtons: false,
  allowEmpty: false,
  move: function move(color) {
    _bar_chart_values.barValues.backgroudCP = color.toRgbString();
    d3.select("#bar_chart").style("background-color", _bar_chart_values.barValues.backgroudCP);
    document.getElementById("bar_background_cp_span").innerHTML = _bar_chart_values.barValues.backgroudCP;
  }
});
$("#bars_cp").spectrum({
  type: "color",
  preferredFormat: "rgb",
  showInput: true,
  showButtons: false,
  allowEmpty: false,
  move: function move(color) {
    _bar_chart_values.barValues.barsCP = color.toRgbString();
    d3.selectAll(".bars").style("fill", _bar_chart_values.barValues.barsCP);
    document.getElementById("bar_cp_span").innerHTML = _bar_chart_values.barValues.barsCP;
  }
});
$("#bar_tick_cp").spectrum({
  type: "color",
  preferredFormat: "rgb",
  showInput: true,
  showButtons: false,
  allowEmpty: false,
  move: function move(color) {
    _bar_chart_values.barValues.tickCP = color.toRgbString();
    d3.selectAll("#bar_chart > g > g > .tick > text").style("fill", _bar_chart_values.barValues.tickCP);
    document.getElementById("bar_tick_cp_span").innerHTML = _bar_chart_values.barValues.tickCP;
  }
});
$("#bar_title_cp").spectrum({
  type: "color",
  preferredFormat: "rgb",
  showInput: true,
  showButtons: false,
  allowEmpty: false,
  move: function move(color) {
    _bar_chart_values.barValues.titleCP = color.toRgbString();
    d3.select("#bar_title").style("fill", _bar_chart_values.barValues.titleCP);
    document.getElementById("bar_title_cp_span").innerHTML = _bar_chart_values.barValues.titleCP;
  }
});
$("#bar_xaxis_title_cp").spectrum({
  type: "color",
  preferredFormat: "rgb",
  showInput: true,
  showButtons: false,
  allowEmpty: false,
  move: function move(color) {
    _bar_chart_values.barValues.xAxisTitleCP = color.toRgbString();
    d3.select("#bar_xaxis_title").style("fill", _bar_chart_values.barValues.xAxisTitleCP);
    document.getElementById("bar_x_title_cp_span").innerHTML = _bar_chart_values.barValues.xAxisTitleCP;
  }
});
$("#bar_yaxis_title_cp").spectrum({
  type: "color",
  preferredFormat: "rgb",
  showInput: true,
  showButtons: false,
  allowEmpty: false,
  move: function move(color) {
    _bar_chart_values.barValues.yAxisTitleCP = color.toRgbString();
    d3.select("#bar_yaxis_title").style("fill", _bar_chart_values.barValues.yAxisTitleCP);
    document.getElementById("bar_y_title_cp_span").innerHTML = _bar_chart_values.barValues.yAxisTitleCP;
  }
});
$("#bar_grid_cp").spectrum({
  type: "color",
  preferredFormat: "rgb",
  showInput: true,
  showButtons: false,
  allowEmpty: false,
  move: function move(color) {
    _bar_chart_values.barValues.gridCP = color.toRgbString();
    d3.selectAll(".bar_grid").style("color", _bar_chart_values.barValues.gridCP);
    document.getElementById("bar_grid_cp_span").innerHTML = _bar_chart_values.barValues.gridCP;
  }
});
$("#bar_xaxis_line_cp").spectrum({
  type: "color",
  preferredFormat: "rgb",
  showInput: true,
  showButtons: false,
  allowEmpty: false,
  move: function move(color) {
    _bar_chart_values.barValues.xAxisLineCP = color.toRgbString();
    d3.select("#bar_x_axis > path").style("stroke", _bar_chart_values.barValues.xAxisLineCP);
    document.getElementById("bar_x_line_cp_span").innerHTML = _bar_chart_values.barValues.xAxisLineCP;
  }
});
$("#bar_yaxis_line_cp").spectrum({
  type: "color",
  preferredFormat: "rgb",
  showInput: true,
  showButtons: false,
  allowEmpty: false,
  move: function move(color) {
    _bar_chart_values.barValues.yAxisLineCP = color.toRgbString();
    d3.select("#bar_y_axis > path").style("stroke", _bar_chart_values.barValues.yAxisLineCP);
    document.getElementById("bar_y_line_cp_span").innerHTML = _bar_chart_values.barValues.yAxisLineCP;
  }
});
$("#bar_border_cp").spectrum({
  type: "color",
  preferredFormat: "rgb",
  showInput: true,
  showButtons: false,
  allowEmpty: false,
  move: function move(color) {
    _bar_chart_values.barValues.borderCP = color.toRgbString();
    d3.selectAll(".bars").style("stroke", _bar_chart_values.barValues.borderCP);
    document.getElementById("bar_border_cp_span").innerHTML = _bar_chart_values.barValues.borderCP;
  }
});

},{"./bar_chart_values.js":18,"d3-selection":9}],14:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.barChart = barChart;

var _bar_chart_values = require("./bar_chart_values.js");

var _d3Selection = require("d3-selection");

var _d3Scale = require("d3-scale");

var _d3Axis = require("d3-axis");

var _d3Array = require("d3-array");

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var d3 = {
  select: _d3Selection.select,
  selectAll: _d3Selection.selectAll,
  scaleBand: _d3Scale.scaleBand,
  scaleLinear: _d3Scale.scaleLinear,
  axisBottom: _d3Axis.axisBottom,
  axisLeft: _d3Axis.axisLeft,
  range: _d3Array.range,
  max: _d3Array.max
};

function barChart(direction, barTitleInputValue, barXAxisTitleInputValue, barYAxisTitleInputValue, barTitleSliderValue, barXAxisTitleSliderValue, barYAxisTitleSliderValue, barXAxisGridCheckboxValue, barYAxisGridCheckboxValue, barHoverCheckboxValue, barXAxisLineCheckboxValue, barYAxisLineCheckboxValue, barTooltipCheckboxValue, barBackgroudCPValue, barBarsCPValue, barTickCPValue, barTitleCPValue, barXAxisTitleCPValue, barYAxisTitleCPValue, barGridCPValue, barXAxisLineCPValue, barYAxisLineCPValue, barBorderCPValue) {
  var chart = document.getElementById("bar_chart");

  if (chart) {
    chart.remove();
  }

  function createData(x, y, num) {
    var arr = [];
    var objNum = num + 1;

    for (var i = 1; i < objNum; i++) {
      var _obj;

      var obj = (_obj = {}, _defineProperty(_obj, x, Math.floor(Math.random() * 11 + 1)), _defineProperty(_obj, y, Math.floor(Math.random() * 11 + 1)), _obj);
      arr.push(obj);
    }

    return arr;
  }

  var data = createData("x", "y", 10);
  var margin = {
    top: 80,
    right: 50,
    bottom: 80,
    left: 70
  };
  var svg = d3.select("#bar_div").append("svg").attr("id", "bar_chart").attr("width", "100%").attr("height", "100%");
  var g = svg.append("g").attr("transform", "translate(" + margin.left + "," + margin.top + ")");
  var usableBounds = svg.node().getBoundingClientRect(),
      usableBoundWidth = usableBounds.width - margin.left - margin.right;
  var title = g.append("text").attr("id", "bar_title").text("Weather");
  var xAxisTitle = g.append("text").attr("id", "bar_xaxis_title").text("Days");
  var yAxisTitle = g.append("text").attr("id", "bar_yaxis_title").text("Temperature");
  var xAxis = g.append("g").attr("id", "bar_x_axis");
  var yAxis = g.append("g").attr("id", "bar_y_axis");
  var xGrid = g.append("g").attr("class", "bar_grid").attr("id", "bar_x_grid");
  var yGrid = g.append("g").attr("class", "bar_grid").attr("id", "bar_y_grid");

  if (direction == "horizontal") {
    var make_x_gridlines = function make_x_gridlines() {
      return d3.axisBottom(xScale).ticks();
    };

    var make_y_gridlines = function make_y_gridlines() {
      return d3.axisLeft(yScale).ticks();
    };

    var draw = function draw() {
      var bounds = svg.node().getBoundingClientRect(),
          width = bounds.width - margin.left - margin.right,
          width2 = bounds.width,
          height = bounds.height - margin.top - margin.bottom;
      barTitleSlider.max = width;
      barXAxisTitleSlider.max = width;
      barTitleSlider.value = width / 2;
      barXAxisTitleSlider.value = width / 2;
      barWidthSpan.innerHTML = Math.round(width2) - 20;
      document.getElementById("bar_title_slider_span").innerHTML = width / 2;
      document.getElementById("bar_x_title_slider_span").innerHTML = width / 2;
      _bar_chart_values.barValues.titleSlider = width / 2;
      _bar_chart_values.barValues.xAxisTitleSlider = width / 2;
      xScale.rangeRound([0, width]);
      yScale.rangeRound([height, 0]);
      xAxis.attr("transform", "translate(0," + height + ")").call(d3.axisBottom(xScale).ticks());
      yAxis.call(d3.axisLeft(yScale).ticks());
      var xAxisLine = d3.select("#bar_chart > g > g.xAxis > path");
      var yAxisLine = d3.select("#bar_chart > g > g.yAxis > path");
      xAxisLine.attr("id", "bar_x_axis_line");
      yAxisLine.attr("id", "bar_y_axis_line");
      xGrid.attr("transform", "translate(0," + height + ")").call(make_x_gridlines().tickSize(-height).tickFormat(""));
      yGrid.call(make_y_gridlines().tickSize(-width).tickFormat(""));
      title.attr("x", width / 2).attr("y", -40).attr("font-size", "1.1em").attr("text-anchor", "middle");
      xAxisTitle.attr("x", width / 2).attr("y", height + margin.top - 30).attr("font-size", "0.9em").attr("text-anchor", "middle");
      yAxisTitle //.attr("x", 5 * -28)
      .attr("y", -40).attr("font-size", "0.9em").attr("text-anchor", "middle").style("transform", "rotate(270deg)");
      var bars = g.selectAll("rect").data(data);
      bars.exit().remove();
      bars.enter().append("rect").attr("class", "bars").attr("width", function (d, i) {
        return xScale(d.x);
      }).attr("y", function (d, i) {
        return yScale(i);
      }).attr("height", yScale.bandwidth()).attr("transform", "translate(" + 0 + ",0)");
      bars.attr("width", function (d, i) {
        return xScale(d.x);
      }).attr("y", function (d, i) {
        return yScale(i);
      }).attr("height", yScale.bandwidth()).attr("transform", "translate(" + 0 * 1 + ",0)");
    };

    var loadData = function loadData() {
      yScale.domain(d3.range(0, data.length));
      xScale.domain([0, d3.max(data, function (d) {
        return d.x;
      })]);
      draw();
    };

    var xScale = d3.scaleLinear();
    var yScale = d3.scaleBand().padding(0.3);
    var barTitleSlider = document.getElementById("bar_title_slider");
    var barXAxisTitleSlider = document.getElementById("bar_xaxis_title_slider");
    var barWidthSpan = document.getElementById("bar_width_span");
    window.addEventListener("resize", draw);
    loadData();
    document.querySelector("#bar_x_grid > g:nth-child(2) > line").remove();
    var barHorizontalCheckbox = document.querySelector("#bar_horizontal_checkbox");
    var barVerticalCheckbox = document.querySelector("#bar_vertical_checkbox");
    barVerticalCheckbox.addEventListener("change", function () {
      window.removeEventListener("resize", draw);
    });
    barHorizontalCheckbox.addEventListener("change", function () {
      window.removeEventListener("resize", draw);
    });
    var navBarButton = document.querySelector("#nav_bar_button");
    var navLineButton = document.querySelector("#nav_line_button");
    var navPieButton = document.querySelector("#nav_pie_button");
    navLineButton.addEventListener("click", function () {
      window.removeEventListener("resize", draw);
    });
    navPieButton.addEventListener("click", function () {
      window.removeEventListener("resize", draw);
    });
  } else if (direction == "vertical") {
    var _make_x_gridlines = function _make_x_gridlines() {
      return d3.axisBottom(_xScale).ticks();
    };

    var _make_y_gridlines = function _make_y_gridlines() {
      return d3.axisLeft(_yScale).ticks();
    };

    var _draw = function _draw() {
      var bounds = svg.node().getBoundingClientRect(),
          width = bounds.width - margin.left - margin.right,
          width2 = bounds.width,
          height = bounds.height - margin.top - margin.bottom;
      _barTitleSlider.max = width;
      _barXAxisTitleSlider.max = width;
      _barTitleSlider.value = width / 2;
      _barXAxisTitleSlider.value = width / 2;
      _barWidthSpan.innerHTML = Math.round(width2) - 20;
      document.getElementById("bar_title_slider_span").innerHTML = width / 2;
      document.getElementById("bar_x_title_slider_span").innerHTML = width / 2;
      _bar_chart_values.barValues.titleSlider = width / 2;
      _bar_chart_values.barValues.xAxisTitleSlider = width / 2;

      _xScale.rangeRound([0, width]);

      _yScale.rangeRound([height, 0]);

      xAxis.attr("transform", "translate(0," + height + ")").call(d3.axisBottom(_xScale).ticks());
      yAxis.call(d3.axisLeft(_yScale).ticks());
      var xAxisLine = d3.select("#bar_chart > g > g.xAxis > path");
      var yAxisLine = d3.select("#bar_chart > g > g.yAxis > path");
      xAxisLine.attr("id", "bar_x_axis_line");
      yAxisLine.attr("id", "bar_y_axis_line");
      xGrid.attr("transform", "translate(0," + height + ")").call(_make_x_gridlines().tickSize(-height).tickFormat(""));
      yGrid.call(_make_y_gridlines().tickSize(-width).tickFormat(""));
      title.attr("x", width / 2).attr("y", -40).attr("text-anchor", "middle").attr("font-size", "1.1em");
      xAxisTitle.attr("x", width / 2).attr("y", height + margin.top - 30).attr("font-size", "0.9em").attr("text-anchor", "middle");
      yAxisTitle //.attr("x", 5 * -28)
      .attr("y", -40).attr("font-size", "0.9em").attr("text-anchor", "middle").style("transform", "rotate(270deg)");
      var bars = g.selectAll("rect").data(data);
      bars.exit().remove();
      bars.enter().append("rect").attr("class", "bars").attr("x", function (d, i) {
        return _xScale(i);
      }).attr("width", _xScale.bandwidth() * (18 * 0.05)).attr("y", function (d) {
        return _yScale(d.y);
      }).attr("height", function (d) {
        return height - _yScale(d.y);
      }).attr("transform", "translate(" + 0 + ",0)");
      bars.attr("x", function (d, i) {
        return _xScale(i);
      }).attr("width", _xScale.bandwidth() * (18 * 0.05)).attr("y", function (d) {
        return _yScale(d.y);
      }).attr("height", function (d) {
        return height - _yScale(d.y);
      }).attr("transform", "translate(" + 0 + ",0)");
    };

    var _loadData = function _loadData() {
      _xScale.domain(d3.range(0, data.length));

      _yScale.domain([0, d3.max(data, function (d) {
        return d.y;
      })]);

      _draw();
    };

    var _xScale = d3.scaleBand().padding(0.3);

    var _yScale = d3.scaleLinear();

    var _barTitleSlider = document.getElementById("bar_title_slider");

    var _barXAxisTitleSlider = document.getElementById("bar_xaxis_title_slider");

    var _barWidthSpan = document.getElementById("bar_width_span");

    window.addEventListener("resize", _draw);

    _loadData();

    document.querySelector("#bar_y_grid > g:nth-child(2) > line").remove();

    var _barHorizontalCheckbox = document.querySelector("#bar_horizontal_checkbox");

    var _barVerticalCheckbox = document.querySelector("#bar_vertical_checkbox");

    _barVerticalCheckbox.addEventListener("change", function () {
      window.removeEventListener("resize", _draw);
    });

    _barHorizontalCheckbox.addEventListener("change", function () {
      window.removeEventListener("resize", _draw);
    });

    var _navBarButton = document.querySelector("#nav_bar_button");

    var _navLineButton = document.querySelector("#nav_line_button");

    var _navPieButton = document.querySelector("#nav_pie_button");

    _navLineButton.addEventListener("click", function () {
      window.removeEventListener("resize", _draw);
    });

    _navPieButton.addEventListener("click", function () {
      window.removeEventListener("resize", _draw);
    });
  }

  if (barTitleInputValue != undefined) {
    if (barTitleInputValue != "") {
      d3.select("#bar_title").text(barTitleInputValue);
    }
  }

  if (barXAxisTitleInputValue != undefined) {
    if (barXAxisTitleInputValue != "") {
      d3.select("#bar_xaxis_title").text(barXAxisTitleInputValue);
    }
  }

  if (barYAxisTitleInputValue != undefined) {
    if (barYAxisTitleInputValue != "") {
      d3.select("#bar_yaxis_title").text(barYAxisTitleInputValue);
    }
  }

  if (barTitleSliderValue != undefined) {
    d3.select("#bar_title").attr("x", usableBoundWidth / 2);
  }

  if (barXAxisTitleSliderValue != undefined) {
    d3.select("#bar_xaxis_title").attr("x", usableBoundWidth / 2);
  }

  if (barYAxisTitleSliderValue != undefined) {
    d3.select("#bar_yaxis_title").attr("x", barYAxisTitleSliderValue * 20);
  }

  if (barXAxisGridCheckboxValue != undefined) {
    if (barXAxisGridCheckboxValue == "checked") {
      d3.select("#bar_x_grid").attr("display", "");
    } else if (barXAxisGridCheckboxValue == "unchecked") {
      d3.select("#bar_x_grid").attr("display", "none");
    }
  }

  if (barYAxisGridCheckboxValue != undefined) {
    if (barYAxisGridCheckboxValue == "checked") {
      d3.select("#bar_y_grid").attr("display", "");
    } else if (barYAxisGridCheckboxValue == "unchecked") {
      d3.select("#bar_y_grid").attr("display", "none");
    }
  }

  if (barHoverCheckboxValue != undefined) {
    if (barHoverCheckboxValue == "checked") {
      d3.selectAll("rect").classed("hovered", true);
    } else if (barHoverCheckboxValue == "unchecked") {
      d3.selectAll("rect").classed("hovered", false);
    }
  }

  if (barXAxisLineCheckboxValue != undefined) {
    if (barXAxisLineCheckboxValue == "checked") {
      d3.select("#bar_x_axis > path").attr("display", "");
    } else if (barXAxisLineCheckboxValue == "unchecked") {
      d3.select("#bar_x_axis > path").attr("display", "none");
    }
  }

  if (barYAxisLineCheckboxValue != undefined) {
    if (barYAxisLineCheckboxValue == "checked") {
      d3.select("#bar_y_axis > path").attr("display", "");
    } else if (barYAxisLineCheckboxValue == "unchecked") {
      d3.select("#bar_y_axis > path").attr("display", "none");
    }
  }

  if (barTooltipCheckboxValue != undefined) {
    if (barTooltipCheckboxValue == "checked") {
      var tooltip = d3.select("body").append("div").attr("class", "bar_tooltip");
      var bars = d3.selectAll(".bars");
      bars.on("mousemove", function (d) {
        tooltip.style("left", _d3Selection.event.pageX + 10 + "px").style("top", _d3Selection.event.pageY + 10 + "px").style("display", "inline-block");
      }).on("mouseout", function (d) {
        tooltip.style("display", "none");
      });
    } else if (barTooltipCheckboxValue == "unchecked") {
      d3.select(".bar_tooltip").remove();
    }
  }

  if (barBackgroudCPValue != undefined) {
    if (barBackgroudCPValue != "") {
      d3.select("#bar_chart").style("background-color", barBackgroudCPValue);
    }
  }

  if (barBarsCPValue != undefined) {
    if (barBarsCPValue != "") {
      d3.selectAll(".bars").style("fill", barBarsCPValue);
    }
  }

  if (barTickCPValue != undefined) {
    if (barTickCPValue != "") {
      d3.selectAll("#bar_chart > g > g > .tick > text").style("fill", barTickCPValue);
    }
  }

  if (barTitleCPValue != undefined) {
    if (barTitleCPValue != "") {
      d3.select("#bar_title").style("fill", barTitleCPValue);
    }
  }

  if (barXAxisTitleCPValue != undefined) {
    if (barXAxisTitleCPValue != "") {
      d3.select("#bar_xaxis_title").style("fill", barXAxisTitleCPValue);
    }
  }

  if (barYAxisTitleCPValue != undefined) {
    if (barYAxisTitleCPValue != "") {
      d3.select("#bar_yaxis_title").style("fill", barYAxisTitleCPValue);
    }
  }

  if (barGridCPValue != undefined) {
    if (barGridCPValue != "") {
      d3.selectAll(".bar_grid").style("color", barGridCPValue);
    }
  }

  if (barXAxisLineCPValue != undefined) {
    if (barXAxisLineCPValue != "") {
      d3.select("#bar_x_axis > path").style("stroke", barXAxisLineCPValue);
    }
  }

  if (barYAxisLineCPValue != undefined) {
    if (barYAxisLineCPValue != "") {
      d3.select("#bar_y_axis > path").style("stroke", barYAxisLineCPValue);
    }
  }

  if (barBorderCPValue != undefined) {
    if (barBorderCPValue != "") {
      d3.selectAll("rect").attr("stroke", barBorderCPValue);
    }
  }
}

},{"./bar_chart_values.js":18,"d3-array":1,"d3-axis":2,"d3-scale":8,"d3-selection":9}],15:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.barHoverCheckbox = exports.barYAxisLineCheckbox = exports.barXAxisLineCheckbox = exports.barYAxisGridCheckbox = exports.barXAxisGridCheckbox = exports.barVerticalCheckbox = exports.barHorizontalCheckbox = exports.barTooltipCheckbox = exports.barYAxisTitleSlider = exports.barXAxisTitleSlider = exports.barTitleSlider = exports.barYAxisTitleInput = exports.barXAxisTitleInput = exports.barTitleInput = void 0;
var barTitleInput = document.querySelector("#bar_title_input");
exports.barTitleInput = barTitleInput;
var barXAxisTitleInput = document.querySelector("#bar_xaxis_title_input");
exports.barXAxisTitleInput = barXAxisTitleInput;
var barYAxisTitleInput = document.querySelector("#bar_yaxis_title_input");
exports.barYAxisTitleInput = barYAxisTitleInput;
var barTitleSlider = document.querySelector("#bar_title_slider");
exports.barTitleSlider = barTitleSlider;
var barXAxisTitleSlider = document.querySelector("#bar_xaxis_title_slider");
exports.barXAxisTitleSlider = barXAxisTitleSlider;
var barYAxisTitleSlider = document.querySelector("#bar_yaxis_title_slider");
exports.barYAxisTitleSlider = barYAxisTitleSlider;
var barTooltipCheckbox = document.querySelector("#bar_tooltip_checkbox");
exports.barTooltipCheckbox = barTooltipCheckbox;
var barHorizontalCheckbox = document.querySelector("#bar_horizontal_checkbox");
exports.barHorizontalCheckbox = barHorizontalCheckbox;
var barVerticalCheckbox = document.querySelector("#bar_vertical_checkbox");
exports.barVerticalCheckbox = barVerticalCheckbox;
var barXAxisGridCheckbox = document.querySelector("#bar_xaxis_grid_checkbox");
exports.barXAxisGridCheckbox = barXAxisGridCheckbox;
var barYAxisGridCheckbox = document.querySelector("#bar_yaxis_grid_checkbox");
exports.barYAxisGridCheckbox = barYAxisGridCheckbox;
var barXAxisLineCheckbox = document.querySelector("#bar_xaxis_line_checkbox");
exports.barXAxisLineCheckbox = barXAxisLineCheckbox;
var barYAxisLineCheckbox = document.querySelector("#bar_yaxis_line_checkbox");
exports.barYAxisLineCheckbox = barYAxisLineCheckbox;
var barHoverCheckbox = document.querySelector("#bar_hover_checkbox");
exports.barHoverCheckbox = barHoverCheckbox;

},{}],16:[function(require,module,exports){
"use strict";

var _bar_chart_graph = require("./bar_chart_graph.js");

var _bar_chart_inputs = require("./bar_chart_inputs.js");

var _bar_chart_values = require("./bar_chart_values.js");

var _d3Selection = require("d3-selection");

var d3 = {
  select: _d3Selection.select,
  selectAll: _d3Selection.selectAll
};

_bar_chart_inputs.barTitleInput.addEventListener("input", function () {
  _bar_chart_values.barValues.titleInput = _bar_chart_inputs.barTitleInput.value;
  d3.select("#bar_title").text(_bar_chart_values.barValues.titleInput);
  document.getElementById("bar_title_span").innerHTML = _bar_chart_values.barValues.titleInput;
});

_bar_chart_inputs.barXAxisTitleInput.addEventListener("input", function () {
  _bar_chart_values.barValues.xAxisTitleInput = _bar_chart_inputs.barXAxisTitleInput.value;
  d3.select("#bar_xaxis_title").text(_bar_chart_values.barValues.xAxisTitleInput);
  document.getElementById("bar_x_title_span").innerHTML = _bar_chart_values.barValues.xAxisTitleInput;
});

_bar_chart_inputs.barYAxisTitleInput.addEventListener("input", function () {
  _bar_chart_values.barValues.yAxisTitleInput = _bar_chart_inputs.barYAxisTitleInput.value;
  d3.select("#bar_yaxis_title").text(_bar_chart_values.barValues.yAxisTitleInput);
  document.getElementById("bar_y_title_span").innerHTML = _bar_chart_values.barValues.yAxisTitleInput;
});

_bar_chart_inputs.barTitleSlider.addEventListener("input", function () {
  _bar_chart_values.barValues.titleSlider = _bar_chart_inputs.barTitleSlider.value;
  d3.select("#bar_title").attr("x", _bar_chart_values.barValues.titleSlider);
  document.getElementById("bar_title_slider_span").innerHTML = _bar_chart_values.barValues.titleSlider;
});

_bar_chart_inputs.barXAxisTitleSlider.addEventListener("input", function () {
  _bar_chart_values.barValues.xAxisTitleSlider = _bar_chart_inputs.barXAxisTitleSlider.value;
  d3.select("#bar_xaxis_title").attr("x", _bar_chart_values.barValues.xAxisTitleSlider);
  document.getElementById("bar_x_title_slider_span").innerHTML = _bar_chart_values.barValues.xAxisTitleSlider;
});

_bar_chart_inputs.barYAxisTitleSlider.addEventListener("input", function () {
  _bar_chart_values.barValues.yAxisTitleSlider = _bar_chart_inputs.barYAxisTitleSlider.value;
  d3.select("#bar_yaxis_title").attr("x", _bar_chart_values.barValues.yAxisTitleSlider * 20);
  document.getElementById("bar_y_title_slider_span").innerHTML = _bar_chart_values.barValues.yAxisTitleSlider;
});

_bar_chart_inputs.barTooltipCheckbox.addEventListener("change", function () {
  if (this.checked) {
    var tooltip = d3.select("body").append("div").attr("class", "bar_tooltip");
    var bars = d3.selectAll(".bars");
    bars.on("mousemove", function (d) {
      tooltip.style("left", _d3Selection.event.pageX + 10 + "px").style("top", _d3Selection.event.pageY + 10 + "px").style("display", "inline-block");
    }).on("mouseout", function (d) {
      tooltip.style("display", "none");
    });
    _bar_chart_values.barValues.tooltipCheckbox = "checked";
    d3.select("#bar_tooltip_logic_span").classed("hide", false);
  } else if (this.checked === false) {
    _bar_chart_values.barValues.tooltipCheckbox = "unchecked";
    document.querySelector("body > div.bar_tooltip").remove();
    d3.select("#bar_tooltip_logic_span").classed("hide", true);
  }
});

_bar_chart_inputs.barHorizontalCheckbox.addEventListener("change", function () {
  if (this.checked) {
    //  turns off tooltip
    _bar_chart_values.barValues.tooltipCheckbox = "unchecked";
    _bar_chart_inputs.barTooltipCheckbox.checked = false;
    d3.select("#bar_tooltip_logic_span").classed("hide", true);
    _bar_chart_values.barValues.direction = "horizontal"; //  calls function to horizontal / turns on necessary divs

    (0, _bar_chart_graph.barChart)(_bar_chart_values.barValues.direction, _bar_chart_values.barValues.titleInput, _bar_chart_values.barValues.xAxisTitleInput, _bar_chart_values.barValues.yAxisTitleInput, _bar_chart_values.barValues.titleSlider, _bar_chart_values.barValues.xAxisTitleSlider, _bar_chart_values.barValues.yAxisTitleSlider, _bar_chart_values.barValues.xAxisGridCheckbox, _bar_chart_values.barValues.yAxisGridCheckbox, _bar_chart_values.barValues.hoverCheckbox, _bar_chart_values.barValues.xAxisLineCheckbox, _bar_chart_values.barValues.yAxisLineCheckbox, _bar_chart_values.barValues.tooltipCheckbox, _bar_chart_values.barValues.backgroudCP, _bar_chart_values.barValues.barsCP, _bar_chart_values.barValues.tickCP, _bar_chart_values.barValues.titleCP, _bar_chart_values.barValues.xAxisTitleCP, _bar_chart_values.barValues.yAxisTitleCP, _bar_chart_values.barValues.gridCP, _bar_chart_values.barValues.xAxisLineCP, _bar_chart_values.barValues.yAxisLineCP, _bar_chart_values.barValues.borderCP);
    d3.select("#bar_horizontal_scale_span").classed("hide", false);
    d3.select("#bar_horizontal_bar_logic_span").classed("hide", false);
    document.getElementById("bar_gnth_child_span_x").innerHTML = "2";
    document.getElementById("bar_gnth_child_span_y").innerHTML = "1"; //  turns off vertical

    _bar_chart_inputs.barVerticalCheckbox.checked = false;
    d3.select("#bar_vertical_scale_span").classed("hide", true);
    d3.select("#bar_vertical_bar_logic_span").classed("hide", true);
  } else if (this.checked === false) {
    _bar_chart_values.barValues.tooltipCheckbox = "unchecked";
    _bar_chart_inputs.barTooltipCheckbox.checked = false;
    d3.select("#bar_tooltip_logic_span").classed("hide", true);
    _bar_chart_values.barValues.direction = "vertical";
    (0, _bar_chart_graph.barChart)(_bar_chart_values.barValues.direction, _bar_chart_values.barValues.titleInput, _bar_chart_values.barValues.xAxisTitleInput, _bar_chart_values.barValues.yAxisTitleInput, _bar_chart_values.barValues.titleSlider, _bar_chart_values.barValues.xAxisTitleSlider, _bar_chart_values.barValues.yAxisTitleSlider, _bar_chart_values.barValues.xAxisGridCheckbox, _bar_chart_values.barValues.yAxisGridCheckbox, _bar_chart_values.barValues.hoverCheckbox, _bar_chart_values.barValues.xAxisLineCheckbox, _bar_chart_values.barValues.yAxisLineCheckbox, _bar_chart_values.barValues.tooltipCheckbox, _bar_chart_values.barValues.backgroudCP, _bar_chart_values.barValues.barsCP, _bar_chart_values.barValues.tickCP, _bar_chart_values.barValues.titleCP, _bar_chart_values.barValues.xAxisTitleCP, _bar_chart_values.barValues.yAxisTitleCP, _bar_chart_values.barValues.gridCP, _bar_chart_values.barValues.xAxisLineCP, _bar_chart_values.barValues.yAxisLineCP, _bar_chart_values.barValues.borderCP);
    d3.select("#bar_horizontal_scale_span").classed("hide", true);
    d3.select("#bar_horizontal_bar_logic_span").classed("hide", true);
    _bar_chart_inputs.barVerticalCheckbox.checked = true;
    d3.select("#bar_vertical_scale_span").classed("hide", false);
    d3.select("#bar_vertical_bar_logic_span").classed("hide", false);
    document.getElementById("bar_gnth_child_span_x").innerHTML = "1";
    document.getElementById("bar_gnth_child_span_y").innerHTML = "2";
  }
});

_bar_chart_inputs.barVerticalCheckbox.addEventListener("change", function () {
  if (this.checked) {
    _bar_chart_values.barValues.tooltipCheckbox = "unchecked";
    _bar_chart_inputs.barTooltipCheckbox.checked = false;
    d3.select("#bar_tooltip_logic_span").classed("hide", true);
    _bar_chart_values.barValues.direction = "vertical";
    (0, _bar_chart_graph.barChart)(_bar_chart_values.barValues.direction, _bar_chart_values.barValues.titleInput, _bar_chart_values.barValues.xAxisTitleInput, _bar_chart_values.barValues.yAxisTitleInput, _bar_chart_values.barValues.titleSlider, _bar_chart_values.barValues.xAxisTitleSlider, _bar_chart_values.barValues.yAxisTitleSlider, _bar_chart_values.barValues.xAxisGridCheckbox, _bar_chart_values.barValues.yAxisGridCheckbox, _bar_chart_values.barValues.hoverCheckbox, _bar_chart_values.barValues.xAxisLineCheckbox, _bar_chart_values.barValues.yAxisLineCheckbox, _bar_chart_values.barValues.tooltipCheckbox, _bar_chart_values.barValues.backgroudCP, _bar_chart_values.barValues.barsCP, _bar_chart_values.barValues.tickCP, _bar_chart_values.barValues.titleCP, _bar_chart_values.barValues.xAxisTitleCP, _bar_chart_values.barValues.yAxisTitleCP, _bar_chart_values.barValues.gridCP, _bar_chart_values.barValues.xAxisLineCP, _bar_chart_values.barValues.yAxisLineCP, _bar_chart_values.barValues.borderCP);
    _bar_chart_inputs.barHorizontalCheckbox.checked = false;
    d3.select("#bar_horizontal_scale_span").classed("hide", true);
    d3.select("#bar_horizontal_bar_logic_span").classed("hide", true);
    d3.select("#bar_vertical_scale_span").classed("hide", false);
    d3.select("#bar_vertical_bar_logic_span").classed("hide", false);
    document.getElementById("bar_gnth_child_span_x").innerHTML = "1";
    document.getElementById("bar_gnth_child_span_y").innerHTML = "2";
  } else if (this.checked === false) {
    _bar_chart_values.barValues.tooltipCheckbox = "unchecked";
    _bar_chart_inputs.barTooltipCheckbox.checked = false;
    d3.select("#bar_tooltip_logic_span").classed("hide", true);
    _bar_chart_values.barValues.direction = "horizontal";
    (0, _bar_chart_graph.barChart)(_bar_chart_values.barValues.direction, _bar_chart_values.barValues.titleInput, _bar_chart_values.barValues.xAxisTitleInput, _bar_chart_values.barValues.yAxisTitleInput, _bar_chart_values.barValues.titleSlider, _bar_chart_values.barValues.xAxisTitleSlider, _bar_chart_values.barValues.yAxisTitleSlider, _bar_chart_values.barValues.xAxisGridCheckbox, _bar_chart_values.barValues.yAxisGridCheckbox, _bar_chart_values.barValues.hoverCheckbox, _bar_chart_values.barValues.xAxisLineCheckbox, _bar_chart_values.barValues.yAxisLineCheckbox, _bar_chart_values.barValues.tooltipCheckbox, _bar_chart_values.barValues.backgroudCP, _bar_chart_values.barValues.barsCP, _bar_chart_values.barValues.tickCP, _bar_chart_values.barValues.titleCP, _bar_chart_values.barValues.xAxisTitleCP, _bar_chart_values.barValues.yAxisTitleCP, _bar_chart_values.barValues.gridCP, _bar_chart_values.barValues.xAxisLineCP, _bar_chart_values.barValues.yAxisLineCP, _bar_chart_values.barValues.borderCP);
    _bar_chart_inputs.barHorizontalCheckbox.checked = true;
    d3.select("#bar_horizontal_scale_span").classed("hide", false);
    d3.select("#bar_horizontal_bar_logic_span").classed("hide", false);
    document.getElementById("bar_gnth_child_span_x").innerHTML = "2";
    document.getElementById("bar_gnth_child_span_y").innerHTML = "1";
    d3.select("#bar_vertical_scale_span").classed("hide", true);
    d3.select("#bar_vertical_bar_logic_span").classed("hide", true);
  }
});

_bar_chart_inputs.barXAxisGridCheckbox.addEventListener("change", function () {
  if (this.checked) {
    _bar_chart_values.barValues.xAxisGridCheckbox = "checked";
    d3.select("#bar_x_grid").attr("display", "");
    d3.select("#bar_x_grid_span").classed("hide", false);
  } else if (this.checked === false) {
    _bar_chart_values.barValues.xAxisGridCheckbox = "unchecked";
    d3.select("#bar_x_grid").attr("display", "none");
    d3.select("#bar_x_grid_span").classed("hide", true);
  }
});

_bar_chart_inputs.barYAxisGridCheckbox.addEventListener("change", function () {
  if (this.checked) {
    _bar_chart_values.barValues.yAxisGridCheckbox = "checked";
    d3.select("#bar_y_grid").attr("display", "");
    d3.select("#bar_y_grid_span").classed("hide", false);
  } else if (this.checked === false) {
    _bar_chart_values.barValues.yAxisGridCheckbox = "unchecked";
    d3.select("#bar_y_grid").attr("display", "none");
    d3.select("#bar_y_grid_span").classed("hide", true);
  }
});

_bar_chart_inputs.barHoverCheckbox.addEventListener("change", function () {
  if (this.checked) {
    _bar_chart_values.barValues.hoverCheckbox = "checked";
    d3.selectAll("rect").classed("hovered", true);
    d3.select("#bar_hover_span").classed("hide", false);
    d3.select("#bar_hover_span2").classed("hide", false);
  } else if (this.checked === false) {
    _bar_chart_values.barValues.hoverCheckbox = "unchecked";
    d3.selectAll("rect").classed("hovered", false);
    d3.select("#bar_hover_span").classed("hide", true);
    d3.select("#bar_hover_span2").classed("hide", true);
  }
});

_bar_chart_inputs.barXAxisLineCheckbox.addEventListener("change", function () {
  if (this.checked) {
    _bar_chart_values.barValues.xAxisLineCheckbox = "checked";
    d3.select("#bar_x_axis > path").attr("display", "");
    d3.select("#bar_x_line_span").classed("hide", true);
  } else if (this.checked === false) {
    _bar_chart_values.barValues.xAxisLineCheckbox = "unchecked";
    d3.select("#bar_x_axis > path").attr("display", "none");
    d3.select("#bar_x_line_span").classed("hide", false);
  }
});

_bar_chart_inputs.barYAxisLineCheckbox.addEventListener("change", function () {
  if (this.checked) {
    _bar_chart_values.barValues.yAxisLineCheckbox = "checked";
    d3.select("#bar_y_axis > path").attr("display", "");
    d3.select("#bar_y_line_span").classed("hide", true);
  } else if (this.checked === false) {
    _bar_chart_values.barValues.yAxisLineCheckbox = "unchecked";
    d3.select("#bar_y_axis > path").attr("display", "none");
    d3.select("#bar_y_line_span").classed("hide", false);
  }
});

},{"./bar_chart_graph.js":14,"./bar_chart_inputs.js":15,"./bar_chart_values.js":18,"d3-selection":9}],17:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.initBarChart = initBarChart;

var _bar_chart_graph = require("./bar_chart_graph.js");

var _bar_chart_values = require("./bar_chart_values.js");

require("./bar_chart_listeners.js");

require("./bar_chart_color_picker.js");

var _d3Selection = require("d3-selection");

var d3 = {
  select: _d3Selection.select
};

function initBarChart() {
  (0, _bar_chart_graph.barChart)(_bar_chart_values.barValues.direction, _bar_chart_values.barValues.titleInput, _bar_chart_values.barValues.xAxisTitleInput, _bar_chart_values.barValues.yAxisTitleInput, _bar_chart_values.barValues.titleSlider, _bar_chart_values.barValues.xAxisTitleSlider, _bar_chart_values.barValues.yAxisTitleSlider, _bar_chart_values.barValues.xAxisGridCheckbox, _bar_chart_values.barValues.yAxisGridCheckbox, _bar_chart_values.barValues.hoverCheckbox, _bar_chart_values.barValues.xAxisLineCheckbox, _bar_chart_values.barValues.yAxisLineCheckbox, _bar_chart_values.barValues.tooltipCheckbox, _bar_chart_values.barValues.backgroudCP, _bar_chart_values.barValues.barsCP, _bar_chart_values.barValues.tickCP, _bar_chart_values.barValues.titleCP, _bar_chart_values.barValues.xAxisTitleCP, _bar_chart_values.barValues.yAxisTitleCP, _bar_chart_values.barValues.gridCP, _bar_chart_values.barValues.xAxisLineCP, _bar_chart_values.barValues.yAxisLineCP, _bar_chart_values.barValues.borderCP); //to set new default, set FALSE to TRUE, and "1" to "2" to work properly

  d3.select("#bar_vertical_scale_span").classed("hide", false);
  d3.select("#bar_vertical_bar_logic_span").classed("hide", false);
  document.getElementById("bar_gnth_child_span_x").innerHTML = "1";
  document.getElementById("bar_gnth_child_span_y").innerHTML = "2";
  d3.select("#bar_horizontal_scale_span").classed("hide", true);
  d3.select("#bar_horizontal_bar_logic_span").classed("hide", true);
  document.getElementById("bar_title_span").innerHTML = _bar_chart_values.barValues.titleInput;
  document.getElementById("bar_x_title_span").innerHTML = _bar_chart_values.barValues.xAxisTitleInput;
  document.getElementById("bar_y_title_span").innerHTML = _bar_chart_values.barValues.yAxisTitleInput;
  document.getElementById("bar_title_slider_span").innerHTML = _bar_chart_values.barValues.titleSlider;
  document.getElementById("bar_x_title_slider_span").innerHTML = _bar_chart_values.barValues.xAxisTitleSlider;
  document.getElementById("bar_y_title_slider_span").innerHTML = _bar_chart_values.barValues.yAxisTitleSlider;
  d3.select("#bar_x_axis > path").attr("display", "");
  d3.select("#bar_x_line_span").classed("hide", true);
  d3.select("#bar_y_axis > path").attr("display", "none");
  d3.select("#bar_y_line_span").classed("hide", false);
  d3.select("#bar_x_grid").attr("display", "none");
  d3.select("#bar_x_grid_span").classed("hide", true);
  d3.select("#bar_hover_span").classed("hide", true);
  d3.select("#bar_hover_span2").classed("hide", true);
  document.getElementById("bar_background_cp_span").innerHTML = _bar_chart_values.barValues.backgroudCP;
  document.getElementById("bar_cp_span").innerHTML = _bar_chart_values.barValues.barsCP;
  document.getElementById("bar_border_cp_span").innerHTML = _bar_chart_values.barValues.borderCP;
  document.getElementById("bar_title_cp_span").innerHTML = _bar_chart_values.barValues.titleCP;
  document.getElementById("bar_x_title_cp_span").innerHTML = _bar_chart_values.barValues.xAxisTitleCP;
  document.getElementById("bar_y_title_cp_span").innerHTML = _bar_chart_values.barValues.yAxisTitleCP;
  document.getElementById("bar_grid_cp_span").innerHTML = _bar_chart_values.barValues.gridCP;
  document.getElementById("bar_x_line_cp_span").innerHTML = _bar_chart_values.barValues.xAxisLineCP;
  document.getElementById("bar_y_line_cp_span").innerHTML = _bar_chart_values.barValues.yAxisLineCP;
  document.getElementById("bar_tick_cp_span").innerHTML = _bar_chart_values.barValues.tickCP;
}

},{"./bar_chart_color_picker.js":13,"./bar_chart_graph.js":14,"./bar_chart_listeners.js":16,"./bar_chart_values.js":18,"d3-selection":9}],18:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.barValues = void 0;

var _bar_chart_inputs = require("./bar_chart_inputs.js");

var barValues = {
  titleInput: _bar_chart_inputs.barTitleInput.value,
  xAxisTitleInput: _bar_chart_inputs.barXAxisTitleInput.value,
  yAxisTitleInput: _bar_chart_inputs.barYAxisTitleInput.value,
  titleSlider: _bar_chart_inputs.barTitleSlider.value,
  xAxisTitleSlider: _bar_chart_inputs.barXAxisTitleSlider.value,
  yAxisTitleSlider: _bar_chart_inputs.barYAxisTitleSlider.value,
  tooltipCheckbox: "unchecked",
  xAxisGridCheckbox: "unchecked",
  yAxisGridCheckbox: "checked",
  hoverCheckbox: "unchecked",
  xAxisLineCheckbox: "checked",
  yAxisLineCheckbox: "unchecked",
  backgroudCP: "rgba(255,255,255,1)",
  barsCP: "rgba(226, 161, 28, 0.3)",
  tickCP: "rgb(153, 153, 153)",
  titleCP: "rgb(103, 103, 103)",
  xAxisTitleCP: "rgb(103, 103, 103)",
  yAxisTitleCP: "rgb(103, 103, 103)",
  gridCP: "rgba(0, 0, 0, 0.06)",
  xAxisLineCP: "rgb(153, 153, 153)",
  yAxisLineCP: "rgb(211, 211, 211)",
  borderCP: "rgba(0, 0, 0, 0.1)",
  direction: "vertical"
};
exports.barValues = barValues;

},{"./bar_chart_inputs.js":15}],19:[function(require,module,exports){
"use strict";

var _line_chart_values = require("./line_chart_values.js");

var _d3Selection = require("d3-selection");

var d3 = {
  select: _d3Selection.select,
  selectAll: _d3Selection.selectAll
};
$("#line_background_cp").spectrum({
  type: "color",
  preferredFormat: "rgb",
  showInput: true,
  showButtons: false,
  allowEmpty: false,
  move: function move(color) {
    _line_chart_values.lineValues.backgroundCP = color.toRgbString();
    d3.select("#line_chart").style("background-color", _line_chart_values.lineValues.backgroundCP);
    document.getElementById("line_background_cp_span").innerHTML = color.toRgbString();
  }
});
$("#line_color_cp1").spectrum({
  type: "color",
  preferredFormat: "rgb",
  showInput: true,
  showButtons: false,
  allowEmpty: false,
  move: function move(color) {
    _line_chart_values.lineValues.lineCP1 = color.toRgbString();
    d3.select("#line1").style("stroke", _line_chart_values.lineValues.lineCP1);
    document.getElementById("line_1_cp_span").innerHTML = color.toRgbString();
  }
});
$("#line_color_cp2").spectrum({
  type: "color",
  preferredFormat: "rgb",
  showInput: true,
  showButtons: false,
  allowEmpty: false,
  move: function move(color) {
    _line_chart_values.lineValues.lineCP2 = color.toRgbString();
    d3.select("#line2").style("stroke", _line_chart_values.lineValues.lineCP2);
    document.getElementById("line_2_cp_span").innerHTML = color.toRgbString();
  }
});
$("#line_color_cp3").spectrum({
  type: "color",
  preferredFormat: "rgb",
  showInput: true,
  showButtons: false,
  allowEmpty: false,
  move: function move(color) {
    _line_chart_values.lineValues.lineCP3 = color.toRgbString();
    d3.select("#line3").style("stroke", _line_chart_values.lineValues.lineCP3);
    document.getElementById("line_3_cp_span").innerHTML = color.toRgbString();
  }
});
$("#line_tick_cp").spectrum({
  type: "color",
  preferredFormat: "rgb",
  showInput: true,
  showButtons: false,
  allowEmpty: false,
  move: function move(color) {
    _line_chart_values.lineValues.tickCP = color.toRgbString();
    d3.selectAll("#line_chart > g > g > .tick > text").style("fill", _line_chart_values.lineValues.tickCP);
    document.getElementById("line_tick_cp_span").innerHTML = color.toRgbString();
  }
});
$("#line_title_cp").spectrum({
  type: "color",
  preferredFormat: "rgb",
  showInput: true,
  showButtons: false,
  allowEmpty: false,
  move: function move(color) {
    _line_chart_values.lineValues.titleCP = color.toRgbString();
    d3.select("#line_title").style("fill", _line_chart_values.lineValues.titleCP);
    document.getElementById("line_title_cp_span").innerHTML = color.toRgbString();
  }
});
$("#line_xaxis_title_cp").spectrum({
  type: "color",
  preferredFormat: "rgb",
  showInput: true,
  showButtons: false,
  allowEmpty: false,
  move: function move(color) {
    _line_chart_values.lineValues.xAxisTitleCP = color.toRgbString();
    d3.select("#line_xaxis_title").style("fill", _line_chart_values.lineValues.xAxisTitleCP);
    document.getElementById("line_x_title_cp_span").innerHTML = color.toRgbString();
  }
});
$("#line_yaxis_title_cp").spectrum({
  type: "color",
  preferredFormat: "rgb",
  showInput: true,
  showButtons: false,
  allowEmpty: false,
  move: function move(color) {
    _line_chart_values.lineValues.yAxisTitleCP = color.toRgbString();
    d3.select("#line_yaxis_title").style("fill", _line_chart_values.lineValues.yAxisTitleCP);
    document.getElementById("line_y_title_cp_span").innerHTML = color.toRgbString();
  }
});
$("#line_grid_cp").spectrum({
  type: "color",
  preferredFormat: "rgb",
  showInput: true,
  showButtons: false,
  allowEmpty: false,
  move: function move(color) {
    _line_chart_values.lineValues.gridCP = color.toRgbString();
    d3.selectAll(".line_grid").style("color", _line_chart_values.lineValues.gridCP);
    document.getElementById("line_grid_cp_span").innerHTML = color.toRgbString();
  }
});
$("#line_xaxis_line_cp").spectrum({
  type: "color",
  preferredFormat: "rgb",
  showInput: true,
  showButtons: false,
  allowEmpty: false,
  move: function move(color) {
    _line_chart_values.lineValues.xAxisLineCP = color.toRgbString();
    d3.select("#line_x_axis > path").style("stroke", _line_chart_values.lineValues.xAxisLineCP);
    document.getElementById("line_x_line_cp_span").innerHTML = color.toRgbString();
  }
});
$("#line_yaxis_line_cp").spectrum({
  type: "color",
  preferredFormat: "rgb",
  showInput: true,
  showButtons: false,
  allowEmpty: false,
  move: function move(color) {
    _line_chart_values.lineValues.yAxisLineCP = color.toRgbString();
    d3.select("#line_y_axis > path").style("stroke", _line_chart_values.lineValues.yAxisLineCP);
    document.getElementById("line_y_line_cp_span").innerHTML = _line_chart_values.lineValues.yAxisLineCP;
  }
});
$("#line_datapoint_cp").spectrum({
  type: "color",
  preferredFormat: "rgb",
  showInput: true,
  showButtons: false,
  allowEmpty: false,
  move: function move(color) {
    _line_chart_values.lineValues.datapointCP = color.toRgbString();
    d3.selectAll(".circles_line").style("fill", _line_chart_values.lineValues.datapointCP);
    d3.selectAll(".circles_line2").style("fill", _line_chart_values.lineValues.datapointCP);
    d3.selectAll(".circles_line3").style("fill", _line_chart_values.lineValues.datapointCP);
    document.getElementById("line_datapoint_cp_span").innerHTML = color.toRgbString();
    document.getElementById("line_datapoint2_cp_span").innerHTML = color.toRgbString();
    document.getElementById("line_datapoint3_cp_span").innerHTML = color.toRgbString();
  }
});
$("#line_datapoint_border_cp").spectrum({
  type: "color",
  preferredFormat: "rgb",
  showInput: true,
  showButtons: false,
  allowEmpty: false,
  move: function move(color) {
    _line_chart_values.lineValues.datapointBorderCP = color.toRgbString();
    d3.selectAll(".circles_line").style("stroke", _line_chart_values.lineValues.datapointBorderCP);
    d3.selectAll(".circles_line2").style("stroke", _line_chart_values.lineValues.datapointBorderCP);
    d3.selectAll(".circles_line3").style("stroke", _line_chart_values.lineValues.datapointBorderCP);
    document.getElementById("line_datapoint_border_cp_span").innerHTML = color.toRgbString();
    document.getElementById("line_datapoint2_border_cp_span").innerHTML = color.toRgbString();
    document.getElementById("line_datapoint3_border_cp_span").innerHTML = color.toRgbString();
  }
});
$("#line_area_cp").spectrum({
  type: "color",
  preferredFormat: "rgb",
  showInput: true,
  showButtons: false,
  allowEmpty: false,
  move: function move(color) {
    _line_chart_values.lineValues.areaCP = color.toRgbString();
    d3.select("#line_area").style("fill", _line_chart_values.lineValues.areaCP);
    document.getElementById("line_area_cp_span").innerHTML = color.toRgbString();
  }
});

},{"./line_chart_values.js":24,"d3-selection":9}],20:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.lineChart = lineChart;

var _line_chart_values = require("./line_chart_values.js");

var _d3Selection = require("d3-selection");

var _d3Scale = require("d3-scale");

var _d3Axis = require("d3-axis");

var _d3Array = require("d3-array");

var _d3Shape = require("d3-shape");

var _d3TimeFormat = require("d3-time-format");

var d3 = {
  select: _d3Selection.select,
  selectAll: _d3Selection.selectAll,
  scaleTime: _d3Scale.scaleTime,
  scaleLinear: _d3Scale.scaleLinear,
  axisBottom: _d3Axis.axisBottom,
  axisLeft: _d3Axis.axisLeft,
  range: _d3Array.range,
  max: _d3Array.max,
  extent: _d3Array.extent,
  line: _d3Shape.line,
  area: _d3Shape.area,
  timeFormat: _d3TimeFormat.timeFormat
};

function lineChart(lineTitleInputValue, lineXAxisTitleInputValue, lineYAxisTitleInputValue, lineTitleSliderValue, lineXAxisTitleSliderValue, lineYAxisTitleSliderValue, lineWidthSliderValue, linePointRadiusSliderValue, lineTooltipCheckboxValue, lineDatapointCheckboxValue, lineXAxisGridCheckboxValue, lineYAxisGridCheckboxValue, lineXAxisLineCheckboxValue, lineYAxisLineCheckboxValue, lineHoverCheckboxValue, lineBackgroundCPValue, lineCPValue1, lineCPValue2, lineCPValue3, lineTickCPValue, lineTitleCPValue, lineXAxisTitleCPValue, lineYAxisTitleCPValue, lineGridCPValue, lineXAxisLineCPValue, lineYAxisLineCPValue, lineDatapointCPValue, lineDatapointBorderCPValue, lineAreaCPValue) {
  function makeDateArray() {
    var arr = [],
        startDate = new Date("01/02/2020"),
        endDate = new Date("01/22/2020");

    while (startDate <= endDate) {
      arr.push(new Date(startDate));
      startDate.setDate(startDate.getDate() + 1);
    }

    return arr;
  }

  function createData() {
    var dates = makeDateArray();
    var i = 1;
    var data = dates.map(function (x) {
      i += 30;
      return {
        date: x,
        num1: Math.floor(Math.random() * 101 + i++),
        num2: Math.floor(Math.random() * 101 + i++),
        num3: Math.floor(Math.random() * 101 + i++)
      };
    });
    return data;
  }

  var data = createData();
  var margin = {
    top: 80,
    right: 40,
    bottom: 80,
    left: 80
  };
  var svg = d3.select("#line_div").append("svg").attr("id", "line_chart").attr("width", "100%").attr("height", "100%");
  var g = svg.append("g").attr("transform", "translate(".concat(margin.left, ",").concat(margin.top, ")"));
  var usableBounds = svg.node().getBoundingClientRect(),
      usableBoundWidth = usableBounds.width - margin.left - margin.right;
  var title = g.append("text").attr("id", "line_title").text("Weather");
  var xAxisTitle = g.append("text").attr("id", "line_xaxis_title").text("Days");
  var yAxisTitle = g.append("text").attr("id", "line_yaxis_title").text("Temperature");
  var xScale = d3.scaleTime();
  var yScale = d3.scaleLinear();
  var xAxis = g.append("g").attr("id", "line_x_axis");
  var yAxis = g.append("g").attr("id", "line_y_axis");
  var xGrid = g.append("g").attr("class", "line_grid").attr("id", "line_x_grid");
  var yGrid = g.append("g").attr("class", "line_grid").attr("id", "line_y_grid");

  function make_x_gridlines() {
    return d3.axisBottom(xScale).ticks();
  }

  function make_y_gridlines() {
    return d3.axisLeft(yScale).ticks();
  }

  var line1 = d3.line().x(function (d) {
    return xScale(d.date);
  }).y(function (d) {
    return yScale(d.num1);
  });
  var line2 = d3.line().x(function (d) {
    return xScale(d.date);
  }).y(function (d) {
    return yScale(d.num2);
  });
  var line3 = d3.line().x(function (d) {
    return xScale(d.date);
  }).y(function (d) {
    return yScale(d.num3);
  });
  var linePath1 = g.append("path");
  var linePath2 = g.append("path");
  var linePath3 = g.append("path");
  var lineArea = g.append("path");
  var area = d3.area();
  var lineTitleSlider = document.getElementById("line_title_slider");
  var lineXAxisTitleSlider = document.getElementById("line_xaxis_title_slider");
  var lineWidthSpan = document.getElementById("line_width_span");

  function draw() {
    var bounds = svg.node().getBoundingClientRect(),
        width = bounds.width - margin.left - margin.right,
        width2 = bounds.width,
        height = bounds.height - margin.top - margin.bottom;
    lineTitleSlider.max = width;
    lineXAxisTitleSlider.max = width;
    lineTitleSlider.value = width / 2;
    lineXAxisTitleSlider.value = width / 2;
    lineWidthSpan.innerHTML = width2 - 20;
    document.getElementById("line_title_slider_span").innerHTML = width / 2;
    document.getElementById("line_x_title_slider_span").innerHTML = width / 2;
    _line_chart_values.lineValues.titleSlider = width / 2;
    _line_chart_values.lineValues.xAxisTitleSlider = width / 2;
    xScale.range([0, width]);
    yScale.range([height, 0]);
    xAxis.attr("transform", "translate(0," + height + ")").call(d3.axisBottom(xScale).ticks().tickFormat(d3.timeFormat("%b %e")));
    yAxis.call(d3.axisLeft(yScale));
    xGrid.attr("transform", "translate(0," + height + ")").call(make_x_gridlines().tickSize(-height).tickFormat(""));
    yGrid.call(make_y_gridlines().tickSize(-width).tickFormat(""));
    title.attr("x", width / 2).attr("y", -40).attr("font-size", "1.1em").attr("text-anchor", "middle");
    xAxisTitle.attr("x", width / 2).attr("y", height + margin.top - 30).attr("font-size", "0.9em").attr("text-anchor", "middle");
    yAxisTitle //.attr("x", 5 * -28)
    .attr("y", -50).attr("font-size", "0.9em").attr("text-anchor", "middle").style("transform", "rotate(270deg)");
    area.x(function (d) {
      return xScale(d.date);
    }).y0(yScale(0)).y1(function (d) {
      return yScale(d.num1);
    });
    lineArea.datum(data).attr("id", "line_area").attr("fill", "rgba(159, 197, 232, 0.222)").attr("d", area);
    linePath1.data([data]).attr("class", "line").attr("id", "line1").attr("d", line1).attr("stroke", "red").attr("stroke-width", "0.5px").attr("fill", "none");
    linePath2.data([data]).attr("class", "line").attr("id", "line2").attr("d", line2).attr("stroke", "blue").attr("stroke-width", "0.5px").attr("fill", "none");
    linePath3.data([data]).attr("class", "line").attr("id", "line3").attr("d", line3).attr("stroke", "green").attr("stroke-width", "0.5px").attr("fill", "none");
    var circles = g.selectAll(".circles_line").data(data);
    var circles2 = g.selectAll(".circles_line2").data(data);
    var circles3 = g.selectAll(".circles_line3").data(data);
    circles.exit().remove();
    circles.enter().append("circle").attr("class", "circles_line").attr("r", 3).attr("cx", function (d, i) {
      return xScale(d.date);
    }).attr("cy", function (d, i) {
      return yScale(d.num1);
    }).attr("fill", "white").attr("stroke", "black").attr("stroke-width", "1px");
    circles2.enter().append("circle").attr("class", "circles_line2").attr("r", 3).attr("cx", function (d, i) {
      return xScale(d.date);
    }).attr("cy", function (d, i) {
      return yScale(d.num2);
    }).attr("fill", "white").attr("stroke", "black").attr("stroke-width", "1px");
    circles3.enter().append("circle").attr("class", "circles_line3").attr("r", 3).attr("cx", function (d, i) {
      return xScale(d.date);
    }).attr("cy", function (d, i) {
      return yScale(d.num3);
    }).attr("fill", "white").attr("stroke", "black").attr("stroke-width", "1px");
    circles.attr("r", 3).attr("cx", function (d, i) {
      return xScale(d.date);
    }).attr("cy", function (d, i) {
      return yScale(d.num1);
    }).attr("fill", "white").attr("stroke", "black").attr("stroke-width", "1px");
    circles2.attr("r", 3).attr("cx", function (d, i) {
      return xScale(d.date);
    }).attr("cy", function (d, i) {
      return yScale(d.num2);
    }).attr("fill", "white").attr("stroke", "black").attr("stroke-width", "1px");
    circles3.attr("r", 3).attr("cx", function (d, i) {
      return xScale(d.date);
    }).attr("cy", function (d, i) {
      return yScale(d.num3);
    }).attr("fill", "white").attr("stroke", "black").attr("stroke-width", "1px");
  }

  function loadData() {
    xScale.domain(d3.extent(data, function (d) {
      return d.date;
    }));
    yScale.domain([0, d3.max(data, function (d) {
      return d.num1;
    })]);
    draw();
  }

  window.addEventListener("resize", draw);
  loadData();
  d3.select("#line_y_grid > g:nth-child(2) > line").remove();

  if (lineTitleInputValue != undefined) {
    if (lineTitleInputValue != "") {
      d3.select("#line_title").text(lineTitleInputValue);
    }
  }

  if (lineXAxisTitleInputValue != undefined) {
    if (lineXAxisTitleInputValue != "") {
      d3.select("#line_xaxis_title").text(lineXAxisTitleInputValue);
    }
  }

  if (lineYAxisTitleInputValue != undefined) {
    if (lineYAxisTitleInputValue != "") {
      d3.select("#line_yaxis_title").text(lineYAxisTitleInputValue);
    }
  }

  if (lineTitleSliderValue != undefined) {
    d3.select("#line_title").attr("x", usableBoundWidth / 2);
  }

  if (lineXAxisTitleSliderValue != undefined) {
    d3.select("#line_xaxis_title").attr("x", usableBoundWidth / 2);
  }

  if (lineYAxisTitleSliderValue != undefined) {
    d3.select("#line_yaxis_title").attr("x", lineYAxisTitleSliderValue * 20);
  }

  if (lineWidthSliderValue != undefined) {
    d3.select("#line1").attr("stroke-width", lineWidthSliderValue * 0.5);
    d3.select("#line2").attr("stroke-width", lineWidthSliderValue * 0.5);
    d3.select("#line3").attr("stroke-width", lineWidthSliderValue * 0.5);
  }

  if (linePointRadiusSliderValue != undefined) {
    d3.select(".circles_line").attr("r", linePointRadiusSliderValue * 0.5);
    d3.select(".circles_line2").attr("r", linePointRadiusSliderValue * 0.5);
    d3.select(".circles_line3").attr("r", linePointRadiusSliderValue * 0.5);
  }

  if (lineTooltipCheckboxValue != undefined) {
    if (lineTooltipCheckboxValue == "checked") {
      var tooltip = d3.select("body").append("div").attr("class", "line_tooltip");
      var circles = d3.selectAll(".circles_line");
      var circles2 = d3.selectAll(".circles_line2");
      var circles3 = d3.selectAll(".circles_line3");
      circles.on("mousemove", function (d) {
        tooltip.style("left", _d3Selection.event.pageX + 10 + "px").style("top", _d3Selection.event.pageY + 10 + "px").style("display", "inline-block");
      }).on("mouseout", function (d) {
        tooltip.style("display", "none");
      });
      circles2.on("mousemove", function (d) {
        tooltip.style("left", _d3Selection.event.pageX + 10 + "px").style("top", _d3Selection.event.pageY + 10 + "px").style("display", "inline-block");
      }).on("mouseout", function (d) {
        tooltip.style("display", "none");
      });
      circles3.on("mousemove", function (d) {
        tooltip.style("left", _d3Selection.event.pageX + 10 + "px").style("top", _d3Selection.event.pageY + 10 + "px").style("display", "inline-block");
      }).on("mouseout", function (d) {
        tooltip.style("display", "none");
      });
    } else if (lineTooltipCheckboxValue == "unchecked") {
      var i = document.querySelector("body > div.line_tooltip");

      if (i != null) {
        i.remove();
      }
    }
  }

  if (lineDatapointCheckboxValue != undefined) {
    if (lineDatapointCheckboxValue == "checked") {
      d3.selectAll(".circles_line").attr("display", "");
      d3.selectAll(".circles_line2").attr("display", "");
      d3.selectAll(".circles_line3").attr("display", "");
    } else if (lineDatapointCheckboxValue == "unchecked") {
      d3.selectAll(".circles_line").attr("display", "none");
      d3.selectAll(".circles_line2").attr("display", "none");
      d3.selectAll(".circles_line3").attr("display", "none");
    }
  }

  if (lineXAxisGridCheckboxValue != undefined) {
    if (lineXAxisGridCheckboxValue == "checked") {
      d3.select("#line_x_grid").attr("display", "");
    } else if (lineXAxisGridCheckboxValue == "unchecked") {
      d3.select("#line_x_grid").attr("display", "none");
    }
  }

  if (lineYAxisGridCheckboxValue != undefined) {
    if (lineYAxisGridCheckboxValue == "checked") {
      d3.select("#line_y_grid").attr("display", "");
    } else if (lineYAxisGridCheckboxValue == "unchecked") {
      d3.select("#line_y_grid").attr("display", "none");
    }
  }

  if (lineXAxisLineCheckboxValue != undefined) {
    if (lineXAxisLineCheckboxValue == "checked") {
      d3.select("#line_x_axis > path").attr("display", "");
    } else if (lineXAxisLineCheckboxValue == "unchecked") {
      d3.select("#line_x_axis > path").attr("display", "none");
    }
  }

  if (lineYAxisLineCheckboxValue != undefined) {
    if (lineYAxisLineCheckboxValue == "checked") {
      d3.select("#line_y_axis > path").attr("display", "");
    } else if (lineYAxisLineCheckboxValue == "unchecked") {
      d3.select("#line_y_axis > path").attr("display", "none");
    }
  }

  if (lineHoverCheckboxValue != undefined) {
    if (lineHoverCheckboxValue == "checked") {
      d3.selectAll(".circles_line").classed("circle_hovered", true);
      d3.selectAll(".circles_line2").classed("circle_hovered", true);
      d3.selectAll(".circles_line3").classed("circle_hovered", true);
    } else if (lineHoverCheckboxValue == "unchecked") {
      d3.selectAll(".circles_line").classed("circle_hovered", false);
      d3.selectAll(".circles_line2").classed("circle_hovered", false);
      d3.selectAll(".circles_line3").classed("circle_hovered", false);
    }
  }

  if (lineBackgroundCPValue != undefined) {
    if (lineBackgroundCPValue != "") {
      d3.select("#line_chart").style("background-color", lineBackgroundCPValue);
    }
  }

  if (lineCPValue1 != undefined) {
    if (lineCPValue1 != "") {
      d3.select("#line1").style("stroke", lineCPValue1);
    }
  }

  if (lineCPValue2 != undefined) {
    if (lineCPValue2 != "") {
      d3.select("#line2").style("stroke", lineCPValue2);
    }
  }

  if (lineCPValue3 != undefined) {
    if (lineCPValue3 != "") {
      d3.select("#line3").style("stroke", lineCPValue3);
    }
  }

  if (lineTickCPValue != undefined) {
    if (lineTickCPValue != "") {
      d3.selectAll("#line_chart > g > g > .tick > text").style("fill", lineTickCPValue);
    }
  }

  if (lineTitleCPValue != undefined) {
    if (lineTitleCPValue != "") {
      d3.select("#line_title").style("fill", lineTitleCPValue);
    }
  }

  if (lineXAxisTitleCPValue != undefined) {
    if (lineXAxisTitleCPValue != "") {
      d3.select("#line_xaxis_title").style("fill", lineXAxisTitleCPValue);
    }
  }

  if (lineYAxisTitleCPValue != undefined) {
    if (lineYAxisTitleCPValue != "") {
      d3.select("#line_yaxis_title").style("fill", lineYAxisTitleCPValue);
    }
  }

  if (lineGridCPValue != undefined) {
    if (lineGridCPValue != "") {
      d3.selectAll(".line_grid").style("color", lineGridCPValue);
    }
  }

  if (lineXAxisLineCPValue != undefined) {
    if (lineXAxisLineCPValue != "") {
      d3.select("#line_x_axis > path").style("stroke", lineXAxisLineCPValue);
    }
  }

  if (lineYAxisLineCPValue != undefined) {
    if (lineYAxisLineCPValue != "") {
      d3.select("#line_y_axis > path").style("stroke", lineYAxisLineCPValue);
    }
  }

  if (lineDatapointCPValue != undefined) {
    if (lineDatapointCPValue != "") {
      d3.selectAll(".circles_line").style("fill", lineDatapointCPValue);
      d3.selectAll(".circles_line2").style("fill", lineDatapointCPValue);
      d3.selectAll(".circles_line3").style("fill", lineDatapointCPValue);
    }
  }

  if (lineDatapointBorderCPValue != undefined) {
    if (lineDatapointBorderCPValue != "") {
      d3.selectAll(".circles_line").style("stroke", lineDatapointBorderCPValue);
      d3.selectAll(".circles_line2").style("stroke", lineDatapointBorderCPValue);
      d3.selectAll(".circles_line3").style("stroke", lineDatapointBorderCPValue);
    }
  }

  if (lineAreaCPValue != undefined) {
    if (lineAreaCPValue != "") {
      d3.select("#line_area").style("fill", lineAreaCPValue);
    }
  }
}

},{"./line_chart_values.js":24,"d3-array":1,"d3-axis":2,"d3-scale":8,"d3-selection":9,"d3-shape":10,"d3-time-format":11}],21:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.lineAmountInput = exports.lineAreaCheckbox = exports.lineHoverCheckbox = exports.lineYAxisLineCheckbox = exports.lineXAxisLineCheckbox = exports.lineYAxisGridCheckbox = exports.lineXAxisGridCheckbox = exports.lineDatapointCheckbox = exports.lineTooltipCheckbox = exports.linePointRadiusSlider = exports.lineWidthSlider = exports.lineYAxisTitleSlider = exports.lineXAxisTitleSlider = exports.lineTitleSlider = exports.lineYAxisTitleInput = exports.lineXAxisTitleInput = exports.lineTitleInput = void 0;
var lineTitleInput = document.querySelector("#line_title_input");
exports.lineTitleInput = lineTitleInput;
var lineXAxisTitleInput = document.querySelector("#line_xaxis_title_input");
exports.lineXAxisTitleInput = lineXAxisTitleInput;
var lineYAxisTitleInput = document.querySelector("#line_yaxis_title_input");
exports.lineYAxisTitleInput = lineYAxisTitleInput;
var lineTitleSlider = document.querySelector("#line_title_slider");
exports.lineTitleSlider = lineTitleSlider;
var lineXAxisTitleSlider = document.querySelector("#line_xaxis_title_slider");
exports.lineXAxisTitleSlider = lineXAxisTitleSlider;
var lineYAxisTitleSlider = document.querySelector("#line_yaxis_title_slider");
exports.lineYAxisTitleSlider = lineYAxisTitleSlider;
var lineWidthSlider = document.querySelector("#line_width_slider");
exports.lineWidthSlider = lineWidthSlider;
var linePointRadiusSlider = document.querySelector("#line_point_radius_slider");
exports.linePointRadiusSlider = linePointRadiusSlider;
var lineTooltipCheckbox = document.querySelector("#line_tooltip_checkbox");
exports.lineTooltipCheckbox = lineTooltipCheckbox;
var lineDatapointCheckbox = document.querySelector("#line_datapoint_checkbox");
exports.lineDatapointCheckbox = lineDatapointCheckbox;
var lineXAxisGridCheckbox = document.querySelector("#line_xaxis_grid_checkbox");
exports.lineXAxisGridCheckbox = lineXAxisGridCheckbox;
var lineYAxisGridCheckbox = document.querySelector("#line_yaxis_grid_checkbox");
exports.lineYAxisGridCheckbox = lineYAxisGridCheckbox;
var lineXAxisLineCheckbox = document.querySelector("#line_xaxis_line_checkbox");
exports.lineXAxisLineCheckbox = lineXAxisLineCheckbox;
var lineYAxisLineCheckbox = document.querySelector("#line_yaxis_line_checkbox");
exports.lineYAxisLineCheckbox = lineYAxisLineCheckbox;
var lineHoverCheckbox = document.querySelector("#line_hover_checkbox");
exports.lineHoverCheckbox = lineHoverCheckbox;
var lineAreaCheckbox = document.querySelector("#line_area_checkbox");
exports.lineAreaCheckbox = lineAreaCheckbox;
var lineAmountInput = document.querySelector("#line_amount_input");
exports.lineAmountInput = lineAmountInput;

},{}],22:[function(require,module,exports){
"use strict";

var _line_chart_inputs = require("./line_chart_inputs.js");

var _line_chart_values = require("./line_chart_values.js");

var _d3Selection = require("d3-selection");

var d3 = {
  select: _d3Selection.select,
  selectAll: _d3Selection.selectAll
};

_line_chart_inputs.lineTitleInput.addEventListener("input", function () {
  _line_chart_values.lineValues.titleInput = _line_chart_inputs.lineTitleInput.value;
  d3.select("#line_title").text(_line_chart_values.lineValues.titleInput);
  document.getElementById("line_title_span").innerHTML = _line_chart_values.lineValues.titleInput;
});

_line_chart_inputs.lineXAxisTitleInput.addEventListener("input", function () {
  _line_chart_values.lineValues.xAxisTitleInput = _line_chart_inputs.lineXAxisTitleInput.value;
  d3.select("#line_xaxis_title").text(_line_chart_values.lineValues.xAxisTitleInput);
  document.getElementById("line_x_title_span").innerHTML = _line_chart_values.lineValues.xAxisTitleInput;
});

_line_chart_inputs.lineYAxisTitleInput.addEventListener("input", function () {
  _line_chart_values.lineValues.yAxisTitleInput = _line_chart_inputs.lineYAxisTitleInput.value;
  d3.select("#line_yaxis_title").text(_line_chart_values.lineValues.yAxisTitleInput);
  document.getElementById("line_y_title_span").innerHTML = _line_chart_values.lineValues.yAxisTitleInput;
});

_line_chart_inputs.lineTitleSlider.addEventListener("input", function () {
  _line_chart_values.lineValues.titleSlider = _line_chart_inputs.lineTitleSlider.value;
  d3.select("#line_title").attr("x", _line_chart_values.lineValues.titleSlider);
  document.getElementById("line_title_slider_span").innerHTML = _line_chart_values.lineValues.titleSlider;
});

_line_chart_inputs.lineXAxisTitleSlider.addEventListener("input", function () {
  _line_chart_values.lineValues.xAxisTitleSlider = _line_chart_inputs.lineXAxisTitleSlider.value;
  d3.select("#line_xaxis_title").attr("x", _line_chart_values.lineValues.xAxisTitleSlider);
  document.getElementById("line_x_title_slider_span").innerHTML = _line_chart_values.lineValues.xAxisTitleSlider;
});

_line_chart_inputs.lineYAxisTitleSlider.addEventListener("input", function () {
  _line_chart_values.lineValues.yAxisTitleSlider = _line_chart_inputs.lineYAxisTitleSlider.value;
  d3.select("#line_yaxis_title").attr("x", _line_chart_values.lineValues.yAxisTitleSlider * 20);
  document.getElementById("line_y_title_slider_span").innerHTML = _line_chart_values.lineValues.yAxisTitleSlider;
});

_line_chart_inputs.lineWidthSlider.addEventListener("input", function () {
  _line_chart_values.lineValues.widthSlider = _line_chart_inputs.lineWidthSlider.value;
  d3.selectAll(".line").attr("stroke-width", "".concat(_line_chart_values.lineValues.widthSlider * 0.5, "px"));
  document.getElementById("line_1_width_slider_span").innerHTML = _line_chart_values.lineValues.widthSlider;
  document.getElementById("line_2_width_slider_span").innerHTML = _line_chart_values.lineValues.widthSlider;
  document.getElementById("line_3_width_slider_span").innerHTML = _line_chart_values.lineValues.widthSlider;
});

_line_chart_inputs.linePointRadiusSlider.addEventListener("input", function () {
  _line_chart_values.lineValues.pointRadiusSlider = _line_chart_inputs.linePointRadiusSlider.value;
  d3.selectAll(".circles_line").attr("r", _line_chart_values.lineValues.pointRadiusSlider * 0.5);
  d3.selectAll(".circles_line2").attr("r", _line_chart_values.lineValues.pointRadiusSlider * 0.5);
  d3.selectAll(".circles_line3").attr("r", _line_chart_values.lineValues.pointRadiusSlider * 0.5);
  document.getElementById("line_point_radius_slider_span").innerHTML = _line_chart_values.lineValues.pointRadiusSlider;
  document.getElementById("line_point2_radius_slider_span").innerHTML = _line_chart_values.lineValues.pointRadiusSlider;
  document.getElementById("line_point3_radius_slider_span").innerHTML = _line_chart_values.lineValues.pointRadiusSlider;
});

_line_chart_inputs.lineXAxisGridCheckbox.addEventListener("change", function () {
  if (this.checked) {
    _line_chart_values.lineValues.xAxisGridCheckbox = "checked";
    d3.select("#line_x_grid").attr("display", "");
    d3.select("#line_x_grid_checkbox_span").classed("hide", false);
  } else if (this.checked === false) {
    d3.select("#line_x_grid").attr("display", "none");
    _line_chart_values.lineValues.xAxisGridCheckbox = "unchecked";
    d3.select("#line_x_grid_checkbox_span").classed("hide", true);
  }
});

_line_chart_inputs.lineYAxisGridCheckbox.addEventListener("change", function () {
  if (this.checked) {
    _line_chart_values.lineValues.yAxisGridCheckbox = "checked";
    d3.select("#line_y_grid").attr("display", "");
    d3.select("#line_y_grid_checkbox_span").classed("hide", false);
  } else if (this.checked === false) {
    _line_chart_values.lineValues.yAxisGridCheckbox = "unchecked";
    d3.select("#line_y_grid").attr("display", "none");
    d3.select("#line_y_grid_checkbox_span").classed("hide", true);
  }
});

_line_chart_inputs.lineXAxisLineCheckbox.addEventListener("change", function () {
  if (this.checked) {
    _line_chart_values.lineValues.xAxisLineCheckbox = "checked";
    d3.select("#line_x_axis > path").attr("display", "");
    d3.select("#line_x_line_checkbox_span").classed("hide", true);
  } else if (this.checked === false) {
    _line_chart_values.lineValues.xAxisLineCheckbox = "unchecked";
    d3.select("#line_x_axis > path").attr("display", "none");
    d3.select("#line_x_line_checkbox_span").classed("hide", false);
  }
});

_line_chart_inputs.lineYAxisLineCheckbox.addEventListener("change", function () {
  if (this.checked) {
    _line_chart_values.lineValues.yAxisLineCheckbox = "checked";
    d3.select("#line_y_axis > path").attr("display", "");
    d3.select("#line_y_line_checkbox_span").classed("hide", true);
  } else if (this.checked === false) {
    _line_chart_values.lineValues.yAxisLineCheckbox = "unchecked";
    d3.select("#line_y_axis > path").attr("display", "none");
    d3.select("#line_y_line_checkbox_span").classed("hide", false);
  }
});

_line_chart_inputs.lineHoverCheckbox.addEventListener("change", function () {
  if (this.checked) {
    _line_chart_values.lineValues.hoverCheckbox = "checked";
    d3.selectAll(".circles_line").classed("circle_hovered", true);
    d3.selectAll(".circles_line2").classed("circle_hovered", true);
    d3.selectAll(".circles_line3").classed("circle_hovered", true);
    d3.select("#line_hover_checkbox_span").classed("hide", false);
    d3.select("#line_template_hover_span1").classed("hide", false);
    d3.select("#line_template_hover_span2").classed("hide", false);
    d3.select("#line_template_hover_span2").classed("hide", false);
  } else if (this.checked === false) {
    _line_chart_values.lineValues.hoverCheckbox = "unchecked";
    d3.selectAll(".circles_line").classed("circle_hovered", false);
    d3.selectAll(".circles_line2").classed("circle_hovered", false);
    d3.selectAll(".circles_line3").classed("circle_hovered", false);
    d3.select("#line_hover_checkbox_span").classed("hide", true);
    d3.select("#line_template_hover_span1").classed("hide", true);
    d3.select("#line_template_hover_span2").classed("hide", true);
    d3.select("#line_template_hover_span3").classed("hide", true);
  }
});

_line_chart_inputs.lineAreaCheckbox.addEventListener("change", function () {
  if (this.checked) {
    _line_chart_values.lineValues.amountInput = 1;
    _line_chart_inputs.lineAmountInput.value = 1;
    _line_chart_inputs.lineAmountInput.disabled = true;
    d3.select("#line_obj_num2_span").classed("hide", true);
    d3.select("#line_obj_num3_span").classed("hide", true);
    d3.select("#line2").attr("display", "none");
    d3.select("#line3").attr("display", "none");
    d3.selectAll(".circles_line2").attr("display", "none");
    d3.selectAll(".circles_line3").attr("display", "none");
    d3.select("#line_1_select_span").classed("hide", false);
    d3.select("#line_2_select_span").classed("hide", true);
    d3.select("#line_3_select_span").classed("hide", true);
    d3.select("#line_datapoint_checkbox_span").classed("hide", false);
    d3.select("#line_datapoint2_checkbox_span").classed("hide", true);
    d3.select("#line_datapoint3_checkbox_span").classed("hide", true);
    d3.select("#line_area").attr("display", "");
    d3.select("#line_area_checkbox_span").classed("hide", false);
  }

  if (this.checked === false) {
    d3.select("#line_area").attr("display", "none");
    _line_chart_inputs.lineAmountInput.disabled = false;
    d3.select("#line_area_checkbox_span").classed("hide", true);
  }
});

_line_chart_inputs.lineTooltipCheckbox.addEventListener("change", function () {
  if (this.checked) {
    if (_line_chart_inputs.lineAmountInput.value == 1) {
      var tooltip = d3.select("body").append("div").attr("class", "line_tooltip");
      var circles = d3.selectAll(".circles_line");
      circles.on("mousemove", function (d) {
        tooltip.style("left", _d3Selection.event.pageX + 10 + "px").style("top", _d3Selection.event.pageY + 10 + "px").style("display", "inline-block");
      }).on("mouseout", function (d) {
        tooltip.style("display", "none");
      });
      d3.select("#line_tooltip_circle_checkbox_span").classed("hide", false);
      d3.select("#line_tooltip2_circle_checkbox_span").classed("hide", true);
      d3.select("#line_tooltip3_circle_checkbox_span").classed("hide", true);
    }

    if (_line_chart_inputs.lineAmountInput.value == 2) {
      var _tooltip = d3.select("body").append("div").attr("class", "line_tooltip");

      var _circles = d3.selectAll(".circles_line");

      _circles.on("mousemove", function (d) {
        _tooltip.style("left", _d3Selection.event.pageX + 10 + "px").style("top", _d3Selection.event.pageY + 10 + "px").style("display", "inline-block");
      }).on("mouseout", function (d) {
        _tooltip.style("display", "none");
      });

      var circles2 = d3.selectAll(".circles_line2");
      circles2.on("mousemove", function (d) {
        _tooltip.style("left", _d3Selection.event.pageX + 10 + "px").style("top", _d3Selection.event.pageY + 10 + "px").style("display", "inline-block");
      }).on("mouseout", function (d) {
        _tooltip.style("display", "none");
      });
      d3.select("#line_tooltip_circle_checkbox_span").classed("hide", false);
      d3.select("#line_tooltip2_circle_checkbox_span").classed("hide", false);
      d3.select("#line_tooltip3_circle_checkbox_span").classed("hide", true);
    }

    if (_line_chart_inputs.lineAmountInput.value == 3) {
      var _tooltip2 = d3.select("body").append("div").attr("class", "line_tooltip");

      var _circles2 = d3.selectAll(".circles_line");

      _circles2.on("mousemove", function (d) {
        _tooltip2.style("left", _d3Selection.event.pageX + 10 + "px").style("top", _d3Selection.event.pageY + 10 + "px").style("display", "inline-block");
      }).on("mouseout", function (d) {
        _tooltip2.style("display", "none");
      });

      var _circles3 = d3.selectAll(".circles_line2");

      _circles3.on("mousemove", function (d) {
        _tooltip2.style("left", _d3Selection.event.pageX + 10 + "px").style("top", _d3Selection.event.pageY + 10 + "px").style("display", "inline-block");
      }).on("mouseout", function (d) {
        _tooltip2.style("display", "none");
      });

      var circles3 = d3.selectAll(".circles_line3");
      circles3.on("mousemove", function (d) {
        _tooltip2.style("left", _d3Selection.event.pageX + 10 + "px").style("top", _d3Selection.event.pageY + 10 + "px").style("display", "inline-block");
      }).on("mouseout", function (d) {
        _tooltip2.style("display", "none");
      });
      d3.select("#line_tooltip_circle_checkbox_span").classed("hide", false);
      d3.select("#line_tooltip2_circle_checkbox_span").classed("hide", false);
      d3.select("#line_tooltip3_circle_checkbox_span").classed("hide", false);
    }

    d3.select("#line_tooltip_checkbox_span").classed("hide", false);
    _line_chart_values.lineValues.tooltipCheckbox = "checked";
  }

  if (this.checked === false) {
    document.querySelector("body > div.line_tooltip").remove();
    d3.select("#line_tooltip_checkbox_span").classed("hide", true);
    d3.select("#line_tooltip_circle_checkbox_span").classed("hide", true);
    d3.select("#line_tooltip2_circle_checkbox_span").classed("hide", true);
    d3.select("#line_tooltip3_circle_checkbox_span").classed("hide", true);
    _line_chart_values.lineValues.tooltipCheckbox = "unchecked";
  }
});

_line_chart_inputs.lineAmountInput.addEventListener("change", function () {
  if (_line_chart_inputs.lineAmountInput.value == 1) {
    if (_line_chart_inputs.lineDatapointCheckbox.checked) {
      d3.selectAll(".circles_line").attr("display", "");
      d3.selectAll(".circles_line2").attr("display", "none");
      d3.selectAll(".circles_line3").attr("display", "none");
      d3.select("#line_datapoint_checkbox_span").classed("hide", false);
      d3.select("#line_datapoint2_checkbox_span").classed("hide", true);
      d3.select("#line_datapoint3_checkbox_span").classed("hide", true);
    }

    if (_line_chart_inputs.lineTooltipCheckbox.checked) {
      var tooltip = d3.select("body").append("div").attr("class", "line_tooltip");
      var circles = d3.selectAll(".circles_line");
      circles.on("mousemove", function (d) {
        tooltip.style("left", _d3Selection.event.pageX + 10 + "px").style("top", _d3Selection.event.pageY + 10 + "px").style("display", "inline-block");
      }).on("mouseout", function (d) {
        tooltip.style("display", "none");
      });
      d3.select("#line_tooltip_circle_checkbox_span").classed("hide", false);
      d3.select("#line_tooltip2_circle_checkbox_span").classed("hide", true);
      d3.select("#line_tooltip3_circle_checkbox_span").classed("hide", true);
    }

    d3.select("#line1").attr("display", "");
    d3.select("#line2").attr("display", "none");
    d3.select("#line3").attr("display", "none");
    d3.select("#line_1_select_span").classed("hide", false);
    d3.select("#line_2_select_span").classed("hide", true);
    d3.select("#line_3_select_span").classed("hide", true);
    d3.select("#line_obj_num2_span").classed("hide", true);
    d3.select("#line_obj_num3_span").classed("hide", true);
    _line_chart_values.lineValues.amountInput = _line_chart_inputs.lineAmountInput.value;
  }

  if (_line_chart_inputs.lineAmountInput.value == 2) {
    if (_line_chart_inputs.lineDatapointCheckbox.checked) {
      d3.selectAll(".circles_line").attr("display", "");
      d3.selectAll(".circles_line2").attr("display", "");
      d3.selectAll(".circles_line3").attr("display", "none");
      d3.select("#line_datapoint_checkbox_span").classed("hide", false);
      d3.select("#line_datapoint2_checkbox_span").classed("hide", false);
      d3.select("#line_datapoint3_checkbox_span").classed("hide", true);
    }

    if (_line_chart_inputs.lineTooltipCheckbox.checked) {
      var _tooltip3 = d3.select("body").append("div").attr("class", "line_tooltip");

      var _circles4 = d3.selectAll(".circles_line");

      _circles4.on("mousemove", function (d) {
        _tooltip3.style("left", _d3Selection.event.pageX + 10 + "px").style("top", _d3Selection.event.pageY + 10 + "px").style("display", "inline-block");
      }).on("mouseout", function (d) {
        _tooltip3.style("display", "none");
      });

      var circles2 = d3.selectAll(".circles_line2");
      circles2.on("mousemove", function (d) {
        _tooltip3.style("left", _d3Selection.event.pageX + 10 + "px").style("top", _d3Selection.event.pageY + 10 + "px").style("display", "inline-block");
      }).on("mouseout", function (d) {
        _tooltip3.style("display", "none");
      });
      d3.select("#line_tooltip_circle_checkbox_span").classed("hide", false);
      d3.select("#line_tooltip2_circle_checkbox_span").classed("hide", false);
      d3.select("#line_tooltip3_circle_checkbox_span").classed("hide", true);
    }

    d3.select("#line1").attr("display", "");
    d3.select("#line2").attr("display", "");
    d3.select("#line3").attr("display", "none");
    d3.select("#line_1_select_span").classed("hide", false);
    d3.select("#line_2_select_span").classed("hide", false);
    d3.select("#line_3_select_span").classed("hide", true);
    d3.select("#line_obj_num2_span").classed("hide", false);
    d3.select("#line_obj_num3_span").classed("hide", true);
    _line_chart_values.lineValues.amountInput = _line_chart_inputs.lineAmountInput.value;
  }

  if (_line_chart_inputs.lineAmountInput.value == 3) {
    if (_line_chart_inputs.lineDatapointCheckbox.checked) {
      d3.selectAll(".circles_line").attr("display", "");
      d3.selectAll(".circles_line2").attr("display", "");
      d3.selectAll(".circles_line3").attr("display", "");
      d3.select("#line_datapoint_checkbox_span").classed("hide", false);
      d3.select("#line_datapoint2_checkbox_span").classed("hide", false);
      d3.select("#line_datapoint3_checkbox_span").classed("hide", false);
    }

    if (_line_chart_inputs.lineTooltipCheckbox.checked) {
      var _tooltip4 = d3.select("body").append("div").attr("class", "line_tooltip");

      var _circles5 = d3.selectAll(".circles_line");

      _circles5.on("mousemove", function (d) {
        _tooltip4.style("left", _d3Selection.event.pageX + 10 + "px").style("top", _d3Selection.event.pageY + 10 + "px").style("display", "inline-block");
      }).on("mouseout", function (d) {
        _tooltip4.style("display", "none");
      });

      var _circles6 = d3.selectAll(".circles_line2");

      _circles6.on("mousemove", function (d) {
        _tooltip4.style("left", _d3Selection.event.pageX + 10 + "px").style("top", _d3Selection.event.pageY + 10 + "px").style("display", "inline-block");
      }).on("mouseout", function (d) {
        _tooltip4.style("display", "none");
      });

      var circles3 = d3.selectAll(".circles_line3");
      circles3.on("mousemove", function (d) {
        _tooltip4.style("left", _d3Selection.event.pageX + 10 + "px").style("top", _d3Selection.event.pageY + 10 + "px").style("display", "inline-block");
      }).on("mouseout", function (d) {
        _tooltip4.style("display", "none");
      });
      d3.select("#line_tooltip_circle_checkbox_span").classed("hide", false);
      d3.select("#line_tooltip2_circle_checkbox_span").classed("hide", false);
      d3.select("#line_tooltip3_circle_checkbox_span").classed("hide", false);
    }

    d3.select("#line1").attr("display", "");
    d3.select("#line2").attr("display", "");
    d3.select("#line3").attr("display", "");
    d3.select("#line_1_select_span").classed("hide", false);
    d3.select("#line_2_select_span").classed("hide", false);
    d3.select("#line_3_select_span").classed("hide", false);
    d3.select("#line_obj_num2_span").classed("hide", false);
    d3.select("#line_obj_num3_span").classed("hide", false);
    _line_chart_values.lineValues.amountInput = _line_chart_inputs.lineAmountInput.value;
  }
});

_line_chart_inputs.lineDatapointCheckbox.addEventListener("change", function () {
  if (this.checked == true) {
    if (_line_chart_inputs.lineAmountInput.value == 1) {
      d3.selectAll(".circles_line").attr("display", "");
      d3.selectAll(".circles_line2").attr("display", "none");
      d3.selectAll(".circles_line3").attr("display", "none");
      d3.select("#line_datapoint_checkbox_span").classed("hide", false);
      d3.select("#line_datapoint2_checkbox_span").classed("hide", true);
      d3.select("#line_datapoint3_checkbox_span").classed("hide", true);
      d3.select("#line1").attr("display", "");
      d3.select("#line2").attr("display", "none");
      d3.select("#line3").attr("display", "none");
      d3.select("#line_1_select_span").classed("hide", false);
      d3.select("#line_2_select_span").classed("hide", true);
      d3.select("#line_3_select_span").classed("hide", true);
    }

    if (_line_chart_inputs.lineAmountInput.value == 2) {
      d3.selectAll(".circles_line").attr("display", "");
      d3.selectAll(".circles_line2").attr("display", "");
      d3.selectAll(".circles_line3").attr("display", "none");
      d3.select("#line_datapoint_checkbox_span").classed("hide", false);
      d3.select("#line_datapoint2_checkbox_span").classed("hide", false);
      d3.select("#line_datapoint3_checkbox_span").classed("hide", true);
      d3.select("#line1").attr("display", "");
      d3.select("#line2").attr("display", "");
      d3.select("#line3").attr("display", "none");
      d3.select("#line_1_select_span").classed("hide", false);
      d3.select("#line_2_select_span").classed("hide", false);
      d3.select("#line_3_select_span").classed("hide", true);
    }

    if (_line_chart_inputs.lineAmountInput.value == 3) {
      d3.selectAll(".circles_line").attr("display", "");
      d3.selectAll(".circles_line2").attr("display", "");
      d3.selectAll(".circles_line3").attr("display", "");
      d3.select("#line_datapoint_checkbox_span").classed("hide", false);
      d3.select("#line_datapoint2_checkbox_span").classed("hide", false);
      d3.select("#line_datapoint3_checkbox_span").classed("hide", false);
      d3.select("#line1").attr("display", "");
      d3.select("#line2").attr("display", "");
      d3.select("#line3").attr("display", "");
      d3.select("#line_1_select_span").classed("hide", false);
      d3.select("#line_2_select_span").classed("hide", false);
      d3.select("#line_3_select_span").classed("hide", false);
    }

    _line_chart_values.lineValues.datapointCheckbox = "checked";
  }

  if (this.checked == false) {
    d3.selectAll(".circles_line").attr("display", "none");
    d3.selectAll(".circles_line2").attr("display", "none");
    d3.selectAll(".circles_line3").attr("display", "none");
    d3.select("#line_datapoint_checkbox_span").classed("hide", true);
    d3.select("#line_datapoint2_checkbox_span").classed("hide", true);
    d3.select("#line_datapoint3_checkbox_span").classed("hide", true);
    _line_chart_values.lineValues.datapointCheckbox = "unchecked";
    d3.select("#line_datapoint_checkbox_span").classed("hide", true);
  }
});

},{"./line_chart_inputs.js":21,"./line_chart_values.js":24,"d3-selection":9}],23:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.initLineChart = initLineChart;

var _line_chart_graph = require("./line_chart_graph.js");

var _line_chart_values = require("./line_chart_values.js");

require("./line_chart_listeners.js");

require("./line_chart_color_picker.js");

var _d3Selection = require("d3-selection");

var d3 = {
  select: _d3Selection.select,
  selectAll: _d3Selection.selectAll
};

function initLineChart() {
  (0, _line_chart_graph.lineChart)(_line_chart_values.lineValues.titleInput, _line_chart_values.lineValues.xAxisTitleInput, _line_chart_values.lineValues.yAxisTitleInput, _line_chart_values.lineValues.titleSlider, _line_chart_values.lineValues.xAxisTitleSlider, _line_chart_values.lineValues.yAxisTitleSlider, _line_chart_values.lineValues.widthSlider, _line_chart_values.lineValues.pointRadiusSlider, _line_chart_values.lineValues.tooltipCheckbox, _line_chart_values.lineValues.datapointCheckbox, _line_chart_values.lineValues.xAxisGridCheckbox, _line_chart_values.lineValues.yAxisGridCheckbox, _line_chart_values.lineValues.xAxisLineCheckbox, _line_chart_values.lineValues.yAxisLineCheckbox, _line_chart_values.lineValues.hoverCheckbox, _line_chart_values.lineValues.backgroundCP, _line_chart_values.lineValues.lineCP1, _line_chart_values.lineValues.lineCP2, _line_chart_values.lineValues.lineCP3, _line_chart_values.lineValues.tickCP, _line_chart_values.lineValues.titleCP, _line_chart_values.lineValues.xAxisTitleCP, _line_chart_values.lineValues.yAxisTitleCP, _line_chart_values.lineValues.gridCP, _line_chart_values.lineValues.xAxisLineCP, _line_chart_values.lineValues.yAxisLineCP, _line_chart_values.lineValues.datapointCP, _line_chart_values.lineValues.datapointBorderCP, _line_chart_values.lineValues.areaCP);
  document.getElementById("line_title_span").innerHTML = _line_chart_values.lineValues.titleInput;
  document.getElementById("line_x_title_span").innerHTML = _line_chart_values.lineValues.xAxisTitleInput;
  document.getElementById("line_y_title_span").innerHTML = _line_chart_values.lineValues.yAxisTitleInput;
  document.getElementById("line_title_slider_span").innerHTML = _line_chart_values.lineValues.titleSlider;
  document.getElementById("line_x_title_slider_span").innerHTML = _line_chart_values.lineValues.xAxisTitleSlider;
  document.getElementById("line_y_title_slider_span").innerHTML = _line_chart_values.lineValues.yAxisTitleSlider;
  document.getElementById("line_1_width_slider_span").innerHTML = _line_chart_values.lineValues.widthSlider;
  document.getElementById("line_2_width_slider_span").innerHTML = _line_chart_values.lineValues.widthSlider;
  document.getElementById("line_3_width_slider_span").innerHTML = _line_chart_values.lineValues.widthSlider;
  document.getElementById("line_point_radius_slider_span").innerHTML = _line_chart_values.lineValues.pointRadiusSlider;
  document.getElementById("line_point2_radius_slider_span").innerHTML = _line_chart_values.lineValues.pointRadiusSlider;
  document.getElementById("line_point3_radius_slider_span").innerHTML = _line_chart_values.lineValues.pointRadiusSlider;
  d3.select("#line_tooltip_checkbox_span").classed("hide", true);
  d3.select("#line_tooltip_circle_checkbox_span").classed("hide", true);
  d3.select("#line_tooltip2_circle_checkbox_span").classed("hide", true);
  d3.select("#line_tooltip3_circle_checkbox_span").classed("hide", true);
  d3.select("#line_datapoint_checkbox_span").classed("hide", false);
  d3.select("#line_datapoint2_checkbox_span").classed("hide", true);
  d3.select("#line_datapoint3_checkbox_span").classed("hide", true);
  d3.select("#line_x_grid_checkbox_span").classed("hide", true);
  d3.select("#line_y_grid_checkbox_span").classed("hide", false);
  d3.select("#line_x_line_checkbox_span").classed("hide", true);
  d3.select("#line_y_line_checkbox_span").classed("hide", false);
  d3.select("#line_hover_checkbox_span").classed("hide", true);
  d3.select("#line_template_hover_span1").classed("hide", true);
  d3.select("#line_template_hover_span2").classed("hide", true);
  d3.select("#line_template_hover_span3").classed("hide", true);
  document.getElementById("line_background_cp_span").innerHTML = _line_chart_values.lineValues.backgroundCP;
  document.getElementById("line_tick_cp_span").innerHTML = _line_chart_values.lineValues.tickCP;
  document.getElementById("line_title_cp_span").innerHTML = _line_chart_values.lineValues.titleCP;
  document.getElementById("line_x_title_cp_span").innerHTML = _line_chart_values.lineValues.xAxisTitleCP;
  document.getElementById("line_y_title_cp_span").innerHTML = _line_chart_values.lineValues.yAxisTitleCP;
  document.getElementById("line_grid_cp_span").innerHTML = _line_chart_values.lineValues.gridCP;
  document.getElementById("line_x_line_cp_span").innerHTML = _line_chart_values.lineValues.xAxisLineCP;
  document.getElementById("line_y_line_cp_span").innerHTML = _line_chart_values.lineValues.yAxisLineCP;
  document.getElementById("line_datapoint_cp_span").innerHTML = _line_chart_values.lineValues.datapointCP;
  document.getElementById("line_datapoint2_cp_span").innerHTML = _line_chart_values.lineValues.datapointCP;
  document.getElementById("line_datapoint3_cp_span").innerHTML = _line_chart_values.lineValues.datapointCP;
  document.getElementById("line_datapoint_border_cp_span").innerHTML = _line_chart_values.lineValues.datapointBorderCP;
  document.getElementById("line_datapoint2_border_cp_span").innerHTML = _line_chart_values.lineValues.datapointBorderCP;
  document.getElementById("line_datapoint3_border_cp_span").innerHTML = _line_chart_values.lineValues.datapointBorderCP;
  document.getElementById("line_area_cp_span").innerHTML = _line_chart_values.lineValues.areaCP;
  document.getElementById("line_1_cp_span").innerHTML = _line_chart_values.lineValues.lineCP1;
  document.getElementById("line_2_cp_span").innerHTML = _line_chart_values.lineValues.lineCP2;
  document.getElementById("line_3_cp_span").innerHTML = _line_chart_values.lineValues.lineCP3;
  d3.select("#line_area_checkbox_span").classed("hide", true);
  d3.select("#line_1_select_span").classed("hide", false);
  d3.select("#line_2_select_span").classed("hide", true);
  d3.select("#line_3_select_span").classed("hide", true);
  d3.select("#line_obj_num2_span").classed("hide", true);
  d3.select("#line_obj_num3_span").classed("hide", true);
  d3.select("#line_area").attr("display", "none");
  d3.select("#line1").attr("display", "");
  d3.select("#line2").attr("display", "none");
  d3.select("#line3").attr("display", "none");
  d3.selectAll(".circles_line").attr("display", "");
  d3.selectAll(".circles_line2").attr("display", "none");
  d3.selectAll(".circles_line3").attr("display", "none");
}

},{"./line_chart_color_picker.js":19,"./line_chart_graph.js":20,"./line_chart_listeners.js":22,"./line_chart_values.js":24,"d3-selection":9}],24:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.lineValues = void 0;

var _line_chart_inputs = require("./line_chart_inputs.js");

var lineValues = {
  titleInput: _line_chart_inputs.lineTitleInput.value,
  xAxisTitleInput: _line_chart_inputs.lineXAxisTitleInput.value,
  yAxisTitleInput: _line_chart_inputs.lineYAxisTitleInput.value,
  titleSlider: _line_chart_inputs.lineTitleSlider.value,
  xAxisTitleSlider: _line_chart_inputs.lineXAxisTitleSlider.value,
  yAxisTitleSlider: _line_chart_inputs.lineYAxisTitleSlider.value,
  widthSlider: _line_chart_inputs.lineWidthSlider.value,
  pointRadiusSlider: _line_chart_inputs.linePointRadiusSlider.value,
  tooltipCheckbox: "unchecked",
  datapointCheckbox: "checked",
  xAxisGridCheckbox: "unchecked",
  yAxisGridCheckbox: "checked",
  xAxisLineCheckbox: "checked",
  yAxisLineCheckbox: "unchecked",
  hoverCheckbox: "unchecked",
  backgroundCP: "rgb(255, 255, 255)",
  lineCP1: "rgb(167, 78, 78)",
  lineCP2: "rgb(204, 149, 41)",
  lineCP3: "rgb(41, 134, 204)",
  tickCP: "rgb(153, 153, 153)",
  titleCP: "rgb(68, 68, 68)",
  xAxisTitleCP: "rgb(68, 68, 68)",
  yAxisTitleCP: "rgb(68, 68, 68)",
  gridCP: "rgba(0, 0, 0, 0.1)",
  xAxisLineCP: "rgb(153, 153, 153)",
  yAxisLineCP: "rgb(153, 153, 153)",
  datapointCP: "rgba(255, 255, 255, 0)",
  datapointBorderCP: "rgba(0, 0, 0, 0.3)",
  areaCP: "rgba(105, 105, 105, 0.25)",
  areaCheckbox: "unchecked",
  amountInput: _line_chart_inputs.lineAmountInput.value
};
exports.lineValues = lineValues;

},{"./line_chart_inputs.js":21}],25:[function(require,module,exports){
"use strict";

var _line_chart_main = require("./line_chart/line_chart_main.js");

var _bar_chart_main = require("./bar_chart/bar_chart_main.js");

var _pie_chart_main = require("./pie_chart/pie_chart_main.js");

var _d3Selection = require("d3-selection");

var d3 = {
  select: _d3Selection.select
};
var overlayCloseButton = document.querySelector("#overlay_close_button");
var overlayCloseButton2 = document.querySelector("#overlay_close_button2");
var overlayCopyButton = document.querySelector("#overlay_button_copy");
var formSubmitButton = document.querySelector("#form_submit_button");
var navLineButton = document.querySelector("#nav_line_button");
var navBarButton = document.querySelector("#nav_bar_button");
var navPieButton = document.querySelector("#nav_pie_button");
var questionMarkButton = document.querySelector("#question_mark_button");
var selected = "bar_chart";

(function rowButtons() {
  $("#title_arrow_right_icon").hide();
  $("#slider_arrow_right_icon").hide();
  $("#checkbox_arrow_right_icon").hide();
  $("#color_arrow_right_icon").hide();
  $("#title_arrow_down_icon").click(function () {
    $("#title_row_group").slideToggle("slow");
    $(this).hide();
    $("#title_arrow_right_icon").show();
  });
  $("#title_arrow_right_icon").click(function () {
    $("#title_row_group").slideToggle("slow");
    $(this).hide();
    $("#title_arrow_down_icon").show();
  });
  $("#slider_arrow_down_icon").click(function () {
    $("#slider_row_group").slideToggle("slow");
    $(this).hide();
    $("#slider_arrow_right_icon").show();
  });
  $("#slider_arrow_right_icon").click(function () {
    $("#slider_row_group").slideToggle("slow");
    $(this).hide();
    $("#slider_arrow_down_icon").show();
  });
  $("#checkbox_arrow_down_icon").click(function () {
    $("#checkbox_row_group").slideToggle("slow");
    $(this).hide();
    $("#checkbox_arrow_right_icon").show();
  });
  $("#checkbox_arrow_right_icon").click(function () {
    $("#checkbox_row_group").slideToggle("slow");
    $(this).hide();
    $("#checkbox_arrow_down_icon").show();
  });
  $("#color_arrow_down_icon").click(function () {
    $("#color_row_group").slideToggle("slow");
    $(this).hide();
    $("#color_arrow_right_icon").show();
  });
  $("#color_arrow_right_icon").click(function () {
    $("#color_row_group").slideToggle("slow");
    $(this).hide();
    $("#color_arrow_down_icon").show();
  });
})();

function copyChartToClipboard(chart) {
  var range = document.createRange();
  range.selectNode(document.getElementById("".concat(chart, "_template")));
  window.getSelection().removeAllRanges();
  window.getSelection().addRange(range);
  document.execCommand("copy");
  window.getSelection().removeAllRanges();
  window.alert("Code has been copied to your clipboard.");
}

function copyChartToValue(chart) {
  $("#overlay").fadeIn(600);
  var range = document.createRange();
  range.selectNode(document.getElementById("".concat(chart, "_template")));
  window.getSelection().removeAllRanges(); // clear current selection

  window.getSelection().addRange(range); // to select text

  var formHiddenLine = document.querySelector("#".concat(chart, "_form_input"));
  formHiddenLine.setAttribute("value", window.getSelection().toString());
  window.getSelection().removeAllRanges(); // clear current selection
}

function showLine() {
  selected = "line_chart";
  $("#main_row").show();
  $(".line_title_col_row").show();
  $(".line_slider_col_row").show();
  $(".line_checkbox_col_row").show();
  $(".line_color_col_row").show();
  $("#line_chart_template").show();
  $("#line_dimension_div").show();
  $("#line_div").show();
  $("#line_form_button").show();
  $(".bar_title_col_row").hide();
  $(".bar_slider_col_row").hide();
  $(".bar_checkbox_col_row").hide();
  $(".bar_color_col_row").hide();
  $("#bar_chart_template").hide();
  $("#bar_dimension_div").hide();
  $("#bar_div").hide();
  $("#bar_form_button").hide();
  $(".pie_title_col_row").hide();
  $(".pie_slider_col_row").hide();
  $(".pie_checkbox_col_row").hide();
  $(".pie_color_col_row").hide();
  $("#pie_chart_template").hide();
  $("#pie_dimension_div").hide();
  $("#pie_div").hide();
  $("#pie_form_button").hide();
}

function showBar() {
  selected = "bar_chart";
  $("#main_row").show();
  $(".bar_title_col_row").show();
  $(".bar_slider_col_row").show();
  $(".bar_checkbox_col_row").show();
  $(".bar_color_col_row").show();
  $("#bar_chart_template").show();
  $("#bar_dimension_div").show();
  $("#bar_div").show();
  $("#bar_form_button").show();
  $(".line_title_col_row").hide();
  $(".line_slider_col_row").hide();
  $(".line_checkbox_col_row").hide();
  $(".line_color_col_row").hide();
  $("#line_chart_template").hide();
  $("#line_dimension_div").hide();
  $("#line_div").hide();
  $("#line_form_button").hide();
  $(".pie_title_col_row").hide();
  $(".pie_slider_col_row").hide();
  $(".pie_checkbox_col_row").hide();
  $(".pie_color_col_row").hide();
  $("#pie_chart_template").hide();
  $("#pie_dimension_div").hide();
  $("#pie_div").hide();
  $("#pie_form_button").hide();
}

function showPie() {
  selected = "pie_chart";
  $("#main_row").show();
  $(".pie_title_col_row").show();
  $(".pie_slider_col_row").show();
  $(".pie_checkbox_col_row").show();
  $(".pie_color_col_row").show();
  $("#pie_chart_template").show();
  $("#pie_dimension_div").show();
  $("#pie_div").show();
  $("#pie_form_button").show();
  $(".bar_title_col_row").hide();
  $(".bar_slider_col_row").hide();
  $(".bar_checkbox_col_row").hide();
  $(".bar_color_col_row").hide();
  $("#bar_chart_template").hide();
  $("#bar_dimension_div").hide();
  $("#bar_div").hide();
  $("#bar_form_button").hide();
  $(".line_title_col_row").hide();
  $(".line_slider_col_row").hide();
  $(".line_checkbox_col_row").hide();
  $(".line_color_col_row").hide();
  $("#line_chart_template").hide();
  $("#line_dimension_div").hide();
  $("#line_div").hide();
  $("#line_form_button").hide();
}

questionMarkButton.addEventListener("click", function () {
  $("#overlay2").fadeIn(600);
});
formSubmitButton.addEventListener("click", function () {
  if (selected == "line_chart") {
    copyChartToValue("line_chart");
  }

  if (selected == "bar_chart") {
    copyChartToValue("bar_chart");
  }

  if (selected == "pie_chart") {
    copyChartToValue("pie_chart");
  }
});
overlayCloseButton.addEventListener("click", function () {
  $("#overlay").fadeOut();
});
overlayCloseButton2.addEventListener("click", function () {
  $("#overlay2").fadeOut();
});
overlayCopyButton.addEventListener("click", function () {
  if (selected == "line_chart") {
    copyChartToClipboard("line_chart");
  }

  if (selected == "bar_chart") {
    copyChartToClipboard("bar_chart");
  }

  if (selected == "pie_chart") {
    copyChartToClipboard("pie_chart");
  }
});
$(document).keyup(function (e) {
  if (e.key === "Escape") {
    // escape key maps to keycode `27`
    $("#overlay").fadeOut();
    $("#overlay2").fadeOut();
  }
});
$(navLineButton).click(function (e) {
  e.preventDefault();

  if (selected != "line_chart") {
    $("#form_container").fadeOut(900);
    $("#graph_container").fadeOut(900);
    setTimeout(function () {
      showLine();
      $("#form_container").fadeIn(850);
      $("#graph_container").fadeIn(850);
      var resizeEvent = new Event("resize");
      window.dispatchEvent(resizeEvent);
    }, 850);
  }

  d3.select(this).classed("selected", true);
  d3.select(navBarButton).classed("selected", false);
  d3.select(navPieButton).classed("selected", false);
});
$(navBarButton).click(function (e) {
  e.preventDefault();

  if (selected != "bar_chart") {
    $("#form_container").fadeOut(900);
    $("#graph_container").fadeOut(900);
    setTimeout(function () {
      showBar();
      $("#form_container").fadeIn(850);
      $("#graph_container").fadeIn(850);
      var resizeEvent = new Event("resize");
      window.dispatchEvent(resizeEvent);
    }, 850);
  }

  d3.select(this).classed("selected", true);
  d3.select(navLineButton).classed("selected", false);
  d3.select(navPieButton).classed("selected", false);
});
$(navPieButton).click(function (e) {
  e.preventDefault();

  if (selected != "pie_chart") {
    $("#form_container").fadeOut(900);
    $("#graph_container").fadeOut(900);
    setTimeout(function () {
      showPie();
      $("#form_container").fadeIn(850);
      $("#graph_container").fadeIn(850);
      var resizeEvent = new Event("resize");
      window.dispatchEvent(resizeEvent);
    }, 850);
  }

  d3.select(this).classed("selected", true);
  d3.select(navLineButton).classed("selected", false);
  d3.select(navBarButton).classed("selected", false);
});
(0, _bar_chart_main.initBarChart)();
(0, _line_chart_main.initLineChart)();
(0, _pie_chart_main.initPieChart)();
showBar(); //showLine();
//showPie();

d3.select(navBarButton).classed("selected", true);

},{"./bar_chart/bar_chart_main.js":17,"./line_chart/line_chart_main.js":23,"./pie_chart/pie_chart_main.js":30,"d3-selection":9}],26:[function(require,module,exports){
"use strict";

var _pie_chart_graph = require("./pie_chart_graph.js");

var _pie_chart_values = require("./pie_chart_values.js");

var _d3Selection = require("d3-selection");

var d3 = {
  select: _d3Selection.select,
  selectAll: _d3Selection.selectAll
};
$("#pie_background_cp").spectrum({
  type: "color",
  preferredFormat: "rgb",
  showInput: true,
  showButtons: false,
  allowEmpty: false,
  move: function move(color) {
    _pie_chart_values.pieValues.backgroundCP = color.toRgbString();
    d3.select("#pie_div").style("background-color", color.toRgbString());
    document.querySelector("#pie_backgroud_cp_span").innerHTML = _pie_chart_values.pieValues.backgroundCP;
  }
});
$("#pie_border_cp").spectrum({
  type: "color",
  preferredFormat: "rgb",
  showInput: true,
  showButtons: false,
  allowEmpty: false,
  move: function move(color) {
    _pie_chart_values.pieValues.borderCP = color.toRgbString();
    d3.selectAll(".pie_stroke").style("stroke", color.toRgbString());
    document.querySelector("#pie_border_cp_span").innerHTML = _pie_chart_values.pieValues.borderCP;
  }
});
$("#pie_font_cp").spectrum({
  type: "color",
  preferredFormat: "rgb",
  showInput: true,
  showButtons: false,
  allowEmpty: false,
  move: function move(color) {
    _pie_chart_values.pieValues.fontCP = color.toRgbString();
    d3.selectAll(".pie-font").style("fill", color.toRgbString());
    d3.selectAll(".pie-font").style("color", color.toRgbString());
    document.querySelector("#pie_title_cp_span").innerHTML = _pie_chart_values.pieValues.fontCP;
    document.querySelector("#pie_legend_cp_span").innerHTML = _pie_chart_values.pieValues.fontCP;
    document.querySelector("#pie_values_cp_span").innerHTML = _pie_chart_values.pieValues.fontCP;
  }
});
$("#pie_color1_cp").spectrum({
  type: "color",
  preferredFormat: "hex",
  showInput: true,
  showButtons: false,
  allowEmpty: false,
  move: function move(color) {
    if (document.querySelector(".pie_tooltip")) {
      document.querySelector(".pie_tooltip").remove();
    }

    _pie_chart_values.pieValues.colorScaleArray[0] = color.toString("hex");
    (0, _pie_chart_graph.pieCalc)(_pie_chart_values.pieValues.innerRadiusSlider, _pie_chart_values.pieValues.outerRadiusSlider, _pie_chart_values.pieValues.borderSlider, _pie_chart_values.pieValues.labelRadiusSlider, _pie_chart_values.pieValues.tooltipCheckbox, _pie_chart_values.pieValues.colorScaleArray);
    document.querySelector("#pie_color1_cp_span").innerHTML = _pie_chart_values.pieValues.colorScaleArray[0];
  }
});
$("#pie_color2_cp").spectrum({
  type: "color",
  preferredFormat: "hex",
  showInput: true,
  showButtons: false,
  allowEmpty: false,
  move: function move(color) {
    if (document.querySelector(".pie_tooltip")) {
      document.querySelector(".pie_tooltip").remove();
    }

    _pie_chart_values.pieValues.colorScaleArray[1] = color.toString("hex");
    (0, _pie_chart_graph.pieCalc)(_pie_chart_values.pieValues.innerRadiusSlider, _pie_chart_values.pieValues.outerRadiusSlider, _pie_chart_values.pieValues.borderSlider, _pie_chart_values.pieValues.labelRadiusSlider, _pie_chart_values.pieValues.tooltipCheckbox, _pie_chart_values.pieValues.colorScaleArray);
    document.querySelector("#pie_color2_cp_span").innerHTML = _pie_chart_values.pieValues.colorScaleArray[1];
  }
});
$("#pie_color3_cp").spectrum({
  type: "color",
  preferredFormat: "hex",
  showInput: true,
  showButtons: false,
  allowEmpty: false,
  move: function move(color) {
    if (document.querySelector(".pie_tooltip")) {
      document.querySelector(".pie_tooltip").remove();
    }

    _pie_chart_values.pieValues.colorScaleArray[2] = color.toString("hex");
    (0, _pie_chart_graph.pieCalc)(_pie_chart_values.pieValues.innerRadiusSlider, _pie_chart_values.pieValues.outerRadiusSlider, _pie_chart_values.pieValues.borderSlider, _pie_chart_values.pieValues.labelRadiusSlider, _pie_chart_values.pieValues.tooltipCheckbox, _pie_chart_values.pieValues.colorScaleArray);
    document.querySelector("#pie_color3_cp_span").innerHTML = _pie_chart_values.pieValues.colorScaleArray[2];
  }
});

},{"./pie_chart_graph.js":27,"./pie_chart_values.js":31,"d3-selection":9}],27:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.pieCalc = pieCalc;

var _d3Selection = require("d3-selection");

var _d3Scale = require("d3-scale");

var _d3Shape = require("d3-shape");

var d3 = {
  select: _d3Selection.select,
  selectAll: _d3Selection.selectAll,
  scaleOrdinal: _d3Scale.scaleOrdinal,
  arc: _d3Shape.arc,
  pie: _d3Shape.pie
};
var data = [40, 27, 13, 67, 88];
var width = 350,
    height = 400,
    radius = Math.min(width, height) / 2;
var svg = d3.select("#pie_div").append("svg").attr("id", "pie_chart").attr("width", "100%").attr("height", height);
var pieChart = svg.append("g").attr("id", "pie_chart_g").attr("transform", "translate(175, 230)");
var title = svg.append("text").attr("class", "pie-font").attr("x", 310).attr("y", 25).attr("id", "pie_title").attr("text-anchor", "middle").style("font-size", "1.1em").text("Client Demographic");

function sortsLegend() {
  data.sort(function (a, b) {
    return a - b;
  });
}

sortsLegend();
var legend = d3.select("#pie_chart").append("g").attr("transform", "translate(".concat(width + 100, ", ", 140, ")")).attr("id", "legend");
var pairs = legend.selectAll(".pairs").data(data).enter().append("g").attr("class", "pairs");
var icon = d3.selectAll(".pairs").append("rect");
var num = d3.selectAll(".pairs").append("text").attr("class", "pie-font").text(function (d) {
  return d;
}).attr("x", 20).attr("y", 10);
var i = 0;
var pair = d3.selectAll(".pairs");
pair.each(function (p, j) {
  d3.select(this).attr("transform", "translate(".concat(0, ", ", i += 20, ")"));
});
var pieScale = d3.scaleOrdinal();
var arc1 = d3.arc();
var labelArc = d3.arc();
var pie1 = d3.pie();
var slice = pieChart.selectAll(".arc").data(pie1(data)).enter().append("g").attr("class", "arc");
var slices = slice.append("path").attr("class", "pie_stroke hovered");
var labelSlices = slice.append("text");

function pieCalc(innerRadius, outerRadius, borderWidth, labelRadius, tooltipCheckbox, colorScaleArray) {
  pieScale.range(colorScaleArray);
  icon.attr("height", "10px").attr("width", "10px").style("fill", function (d) {
    return pieScale(d);
  });
  pie1.value(function (d) {
    return d;
  });
  arc1.outerRadius(radius - outerRadius).innerRadius(innerRadius);
  labelArc.outerRadius(radius - 70).innerRadius(radius - labelRadius);
  slices.attr("d", arc1).attr("stroke", "white").attr("stroke-width", "".concat(borderWidth, "px")).style("fill", function (d) {
    return pieScale(d.data);
  }); // label arc

  labelSlices.attr("transform", function (d) {
    return "translate(" + labelArc.centroid(d) + ")";
  }).attr("dy", ".35em").attr("class", "pie-font slice-labels").text(function (d) {
    return d.data;
  });

  if (tooltipCheckbox == "checked") {
    var tooltip = d3.select("body").append("div").attr("class", "pie_tooltip");
    slices.on("mousemove", function (d) {
      tooltip.style("left", _d3Selection.event.pageX + 10 + "px").style("top", _d3Selection.event.pageY + 10 + "px").style("display", "inline-block").html(d.value);
    }).on("mouseout", function (d) {
      tooltip.style("display", "none");
    });
  }
}

},{"d3-scale":8,"d3-selection":9,"d3-shape":10}],28:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.pieValuesCheckbox = exports.pieHoverCheckbox = exports.pieLegendCheckbox = exports.pieTooltipCheckbox = exports.pieLabelRadiusSlider = exports.pieOuterRadiusSlider = exports.pieInnerRadiusSlider = exports.pieBorderSlider = exports.pieTitleSlider = exports.pieTitleInput = void 0;
var pieTitleInput = document.querySelector("#pie_title_input");
exports.pieTitleInput = pieTitleInput;
var pieTitleSlider = document.querySelector("#pie_title_slider");
exports.pieTitleSlider = pieTitleSlider;
var pieBorderSlider = document.querySelector("#pie_border_slider");
exports.pieBorderSlider = pieBorderSlider;
var pieInnerRadiusSlider = document.querySelector("#pie_inner_radius_slider");
exports.pieInnerRadiusSlider = pieInnerRadiusSlider;
var pieOuterRadiusSlider = document.querySelector("#pie_outer_radius_slider");
exports.pieOuterRadiusSlider = pieOuterRadiusSlider;
var pieLabelRadiusSlider = document.querySelector("#pie_label_radius_slider");
exports.pieLabelRadiusSlider = pieLabelRadiusSlider;
var pieTooltipCheckbox = document.querySelector("#pie_tooltip_checkbox");
exports.pieTooltipCheckbox = pieTooltipCheckbox;
var pieLegendCheckbox = document.querySelector("#pie_legend_checkbox");
exports.pieLegendCheckbox = pieLegendCheckbox;
var pieHoverCheckbox = document.querySelector("#pie_hover_checkbox");
exports.pieHoverCheckbox = pieHoverCheckbox;
var pieValuesCheckbox = document.querySelector("#pie_values_checkbox");
exports.pieValuesCheckbox = pieValuesCheckbox;

},{}],29:[function(require,module,exports){
"use strict";

var _pie_chart_graph = require("./pie_chart_graph.js");

var _pie_chart_inputs = require("./pie_chart_inputs.js");

var _pie_chart_values = require("./pie_chart_values.js");

var _d3Selection = require("d3-selection");

var d3 = {
  select: _d3Selection.select,
  selectAll: _d3Selection.selectAll
};

_pie_chart_inputs.pieTitleInput.addEventListener("keyup", function () {
  _pie_chart_values.pieValues.titleInput = _pie_chart_inputs.pieTitleInput.value;
  d3.select("#pie_title").text(_pie_chart_values.pieValues.titleInput);
  document.querySelector("#pie_title_span").innerHTML = _pie_chart_values.pieValues.titleInput;
});

_pie_chart_inputs.pieTitleSlider.addEventListener("input", function () {
  _pie_chart_values.pieValues.titleSlider = _pie_chart_inputs.pieTitleSlider.value;
  d3.select("#pie_title").attr("x", _pie_chart_values.pieValues.titleSlider);
  document.querySelector("#pie_title_slider_span").innerHTML = _pie_chart_values.pieValues.titleSlider;
});

_pie_chart_inputs.pieBorderSlider.addEventListener("input", function () {
  _pie_chart_values.pieValues.borderSlider = _pie_chart_inputs.pieBorderSlider.value;
  d3.selectAll(".pie_stroke").attr("stroke-width", "".concat(_pie_chart_values.pieValues.borderSlider, "px"));
  document.querySelector("#pie_stroke_span").innerHTML = _pie_chart_values.pieValues.borderSlider;
});

_pie_chart_inputs.pieInnerRadiusSlider.addEventListener("input", function () {
  _pie_chart_values.pieValues.innerRadiusSlider = _pie_chart_inputs.pieInnerRadiusSlider.value;
  (0, _pie_chart_graph.pieCalc)(_pie_chart_values.pieValues.innerRadiusSlider, _pie_chart_values.pieValues.outerRadiusSlider, _pie_chart_values.pieValues.borderSlider, _pie_chart_values.pieValues.labelRadiusSlider, _pie_chart_values.pieValues.tooltipCheckbox, _pie_chart_values.pieValues.colorScaleArray);
  document.querySelector("#pie_inner_radius_span").innerHTML = _pie_chart_values.pieValues.innerRadiusSlider;
});

_pie_chart_inputs.pieOuterRadiusSlider.addEventListener("input", function () {
  _pie_chart_values.pieValues.outerRadiusSlider = _pie_chart_inputs.pieOuterRadiusSlider.value;
  (0, _pie_chart_graph.pieCalc)(_pie_chart_values.pieValues.innerRadiusSlider, _pie_chart_values.pieValues.outerRadiusSlider, _pie_chart_values.pieValues.borderSlider, _pie_chart_values.pieValues.labelRadiusSlider, _pie_chart_values.pieValues.tooltipCheckbox, _pie_chart_values.pieValues.colorScaleArray);
  document.querySelector("#pie_outer_radius_span").innerHTML = _pie_chart_values.pieValues.outerRadiusSlider;
});

_pie_chart_inputs.pieLabelRadiusSlider.addEventListener("input", function () {
  _pie_chart_values.pieValues.labelRadiusSlider = _pie_chart_inputs.pieLabelRadiusSlider.value;
  (0, _pie_chart_graph.pieCalc)(_pie_chart_values.pieValues.innerRadiusSlider, _pie_chart_values.pieValues.outerRadiusSlider, _pie_chart_values.pieValues.borderSlider, _pie_chart_values.pieValues.labelRadiusSlider, _pie_chart_values.pieValues.tooltipCheckbox, _pie_chart_values.pieValues.colorScaleArray);
  document.querySelector("#pie_label_radius_span").innerHTML = _pie_chart_values.pieValues.labelRadiusSlider;
});

_pie_chart_inputs.pieTooltipCheckbox.addEventListener("change", function () {
  if (this.checked) {
    _pie_chart_values.pieValues.tooltipCheckbox = "checked";
    (0, _pie_chart_graph.pieCalc)(_pie_chart_values.pieValues.innerRadiusSlider, _pie_chart_values.pieValues.outerRadiusSlider, _pie_chart_values.pieValues.borderSlider, _pie_chart_values.pieValues.labelRadiusSlider, _pie_chart_values.pieValues.tooltipCheckbox, _pie_chart_values.pieValues.colorScaleArray);
    d3.select("#pie_tooltip_checkbox_span").classed("hide", false);
  }

  if (this.checked == false) {
    _pie_chart_values.pieValues.tooltipCheckbox = "unchecked";

    if (document.querySelector(".pie_tooltip")) {
      d3.select(".pie_tooltip").remove();
    }

    d3.select("#pie_tooltip_checkbox_span").classed("hide", true);
  }
});

_pie_chart_inputs.pieLegendCheckbox.addEventListener("change", function () {
  if (this.checked) {
    _pie_chart_values.pieValues.legendCheckbox = "checked";
    d3.selectAll(".pairs").style("display", "flex");
    d3.select("#pie_legend_checkbox_span").classed("hide", false);
    d3.select("#pie_tran_x_span").html("175");
    d3.select("#pie_chart_g").attr("transform", "translate(175, 230)");
  }

  if (this.checked == false) {
    _pie_chart_values.pieValues.legendCheckbox = "unchecked";
    d3.selectAll(".pairs").style("display", "none");
    d3.select("#pie_legend_checkbox_span").classed("hide", true);
    d3.select("#pie_tran_x_span").html("310");
    d3.select("#pie_chart_g").attr("transform", "translate(300, 230)");
  }
});

_pie_chart_inputs.pieHoverCheckbox.addEventListener("change", function () {
  if (this.checked) {
    _pie_chart_values.pieValues.hoverCheckbox = "checked";
    d3.selectAll(".arc > path").classed("hovered", true);
    d3.select("#pie_hover_checkbox_span").classed("hide", false);
  }

  if (this.checked == false) {
    _pie_chart_values.pieValues.hoverCheckbox = "unchecked";
    d3.selectAll(".arc > path").classed("hovered", false);
    d3.select("#pie_hover_checkbox_span").classed("hide", true);
  }
});

_pie_chart_inputs.pieValuesCheckbox.addEventListener("change", function () {
  if (this.checked) {
    _pie_chart_values.pieValues.valuesCheckbox = "checked";
    d3.selectAll(".slice-labels").attr("display", "");
    d3.select("#pie_values_checkbox_span").classed("hide", false);
  }

  if (this.checked == false) {
    _pie_chart_values.pieValues.valuesCheckbox = "unchecked";
    d3.selectAll(".slice-labels").attr("display", "none");
    d3.select("#pie_values_checkbox_span").classed("hide", true);
  }
});

},{"./pie_chart_graph.js":27,"./pie_chart_inputs.js":28,"./pie_chart_values.js":31,"d3-selection":9}],30:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.initPieChart = initPieChart;

var _pie_chart_graph = require("./pie_chart_graph.js");

var _pie_chart_values = require("./pie_chart_values.js");

require("./pie_chart_listeners");

require("./pie_chart_color_picker.js");

var _d3Selection = require("d3-selection");

var d3 = {
  select: _d3Selection.select,
  selectAll: _d3Selection.selectAll
};

function initPieChart() {
  (0, _pie_chart_graph.pieCalc)(_pie_chart_values.pieValues.innerRadiusSlider, _pie_chart_values.pieValues.outerRadiusSlider, _pie_chart_values.pieValues.borderSlider, _pie_chart_values.pieValues.labelRadiusSlider, _pie_chart_values.pieValues.tooltipCheckbox, _pie_chart_values.pieValues.colorScaleArray);
  document.querySelector("#pie_title_span").innerHTML = _pie_chart_values.pieValues.titleInput;
  document.querySelector("#pie_title_slider_span").innerHTML = _pie_chart_values.pieValues.titleSlider;
  document.querySelector("#pie_stroke_span").innerHTML = _pie_chart_values.pieValues.borderSlider;
  document.querySelector("#pie_inner_radius_span").innerHTML = _pie_chart_values.pieValues.innerRadiusSlider;
  document.querySelector("#pie_outer_radius_span").innerHTML = _pie_chart_values.pieValues.outerRadiusSlider;
  document.querySelector("#pie_label_radius_span").innerHTML = _pie_chart_values.pieValues.labelRadiusSlider;
  d3.select("#pie_tooltip_checkbox_span").classed("hide", false);
  d3.select("#pie_legend_checkbox_span").classed("hide", false);
  d3.select("#pie_hover_checkbox_span").classed("hide", false);
  d3.select("#pie_values_checkbox_span").classed("hide", false);
  document.querySelector("#pie_backgroud_cp_span").innerHTML = _pie_chart_values.pieValues.backgroundCP;
  document.querySelector("#pie_border_cp_span").innerHTML = _pie_chart_values.pieValues.borderCP;
  document.querySelector("#pie_title_cp_span").innerHTML = _pie_chart_values.pieValues.fontCP;
  document.querySelector("#pie_legend_cp_span").innerHTML = _pie_chart_values.pieValues.fontCP;
  document.querySelector("#pie_values_cp_span").innerHTML = _pie_chart_values.pieValues.fontCP;
  document.querySelector("#pie_color1_cp_span").innerHTML = _pie_chart_values.pieValues.colorScaleArray[0];
  document.querySelector("#pie_color2_cp_span").innerHTML = _pie_chart_values.pieValues.colorScaleArray[1];
  document.querySelector("#pie_color3_cp_span").innerHTML = _pie_chart_values.pieValues.colorScaleArray[2];
  d3.select("#pie_tran_x_span").html("175");
}

},{"./pie_chart_color_picker.js":26,"./pie_chart_graph.js":27,"./pie_chart_listeners":29,"./pie_chart_values.js":31,"d3-selection":9}],31:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.pieValues = void 0;

var _pie_chart_inputs = require("./pie_chart_inputs.js");

var pieValues = {
  titleInput: _pie_chart_inputs.pieTitleInput.value,
  titleSlider: _pie_chart_inputs.pieTitleSlider.value,
  borderSlider: _pie_chart_inputs.pieBorderSlider.value,
  innerRadiusSlider: _pie_chart_inputs.pieInnerRadiusSlider.value,
  outerRadiusSlider: _pie_chart_inputs.pieOuterRadiusSlider.value,
  labelRadiusSlider: _pie_chart_inputs.pieLabelRadiusSlider.value,
  tooltipCheckbox: "checked",
  legendCheckbox: "checked",
  hoverCheckbox: "checked",
  valuesCheckbox: "checked",
  sortedCheckbox: "checked",
  backgroundCP: "rgba(255,255,255,1)",
  borderCP: "rgba(255,255,255,1)",
  fontCP: "rgba(70,70,70,1)",
  colorScaleArray: ["#98abc5", "#8a89a6", "#7b6888"]
};
exports.pieValues = pieValues;

},{"./pie_chart_inputs.js":28}]},{},[25])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL1VzZXJzL3JpY2FyZG8vQXBwRGF0YS9Sb2FtaW5nL25wbS9ub2RlX21vZHVsZXMvd2F0Y2hpZnkvbm9kZV9tb2R1bGVzL2Jyb3dzZXItcGFjay9fcHJlbHVkZS5qcyIsIm5vZGVfbW9kdWxlcy9kMy1hcnJheS9kaXN0L2QzLWFycmF5LmpzIiwibm9kZV9tb2R1bGVzL2QzLWF4aXMvZGlzdC9kMy1heGlzLmpzIiwibm9kZV9tb2R1bGVzL2QzLWNvbGxlY3Rpb24vZGlzdC9kMy1jb2xsZWN0aW9uLmpzIiwibm9kZV9tb2R1bGVzL2QzLWNvbG9yL2Rpc3QvZDMtY29sb3IuanMiLCJub2RlX21vZHVsZXMvZDMtZm9ybWF0L2Rpc3QvZDMtZm9ybWF0LmpzIiwibm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL2Rpc3QvZDMtaW50ZXJwb2xhdGUuanMiLCJub2RlX21vZHVsZXMvZDMtcGF0aC9kaXN0L2QzLXBhdGguanMiLCJub2RlX21vZHVsZXMvZDMtc2NhbGUvZGlzdC9kMy1zY2FsZS5qcyIsIm5vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vZGlzdC9kMy1zZWxlY3Rpb24uanMiLCJub2RlX21vZHVsZXMvZDMtc2hhcGUvZGlzdC9kMy1zaGFwZS5qcyIsIm5vZGVfbW9kdWxlcy9kMy10aW1lLWZvcm1hdC9kaXN0L2QzLXRpbWUtZm9ybWF0LmpzIiwibm9kZV9tb2R1bGVzL2QzLXRpbWUvZGlzdC9kMy10aW1lLmpzIiwic3JjL2Jhcl9jaGFydC9iYXJfY2hhcnRfY29sb3JfcGlja2VyLmpzIiwic3JjL2Jhcl9jaGFydC9iYXJfY2hhcnRfZ3JhcGguanMiLCJzcmMvYmFyX2NoYXJ0L2Jhcl9jaGFydF9pbnB1dHMuanMiLCJzcmMvYmFyX2NoYXJ0L2Jhcl9jaGFydF9saXN0ZW5lcnMuanMiLCJzcmMvYmFyX2NoYXJ0L2Jhcl9jaGFydF9tYWluLmpzIiwic3JjL2Jhcl9jaGFydC9iYXJfY2hhcnRfdmFsdWVzLmpzIiwic3JjL2xpbmVfY2hhcnQvbGluZV9jaGFydF9jb2xvcl9waWNrZXIuanMiLCJzcmMvbGluZV9jaGFydC9saW5lX2NoYXJ0X2dyYXBoLmpzIiwic3JjL2xpbmVfY2hhcnQvbGluZV9jaGFydF9pbnB1dHMuanMiLCJzcmMvbGluZV9jaGFydC9saW5lX2NoYXJ0X2xpc3RlbmVycy5qcyIsInNyYy9saW5lX2NoYXJ0L2xpbmVfY2hhcnRfbWFpbi5qcyIsInNyYy9saW5lX2NoYXJ0L2xpbmVfY2hhcnRfdmFsdWVzLmpzIiwic3JjL21haW4uanMiLCJzcmMvcGllX2NoYXJ0L3BpZV9jaGFydF9jb2xvcl9waWNrZXIuanMiLCJzcmMvcGllX2NoYXJ0L3BpZV9jaGFydF9ncmFwaC5qcyIsInNyYy9waWVfY2hhcnQvcGllX2NoYXJ0X2lucHV0cy5qcyIsInNyYy9waWVfY2hhcnQvcGllX2NoYXJ0X2xpc3RlbmVycy5qcyIsInNyYy9waWVfY2hhcnQvcGllX2NoYXJ0X21haW4uanMiLCJzcmMvcGllX2NoYXJ0L3BpZV9jaGFydF92YWx1ZXMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUNBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDOWtCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2pNQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3pOQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDcmtCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN6VkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2psQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDN0lBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDN29DQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDNzlCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDNzVEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdnVCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtB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RUFBQSxRQUFRLEVBQUUscUJBYlc7QUFjckIsRUFBQSxNQUFNLEVBQUUsa0JBZGE7QUFlckIsRUFBQSxlQUFlLEVBQUUsQ0FBQyxTQUFELEVBQVksU0FBWixFQUF1QixTQUF2QjtBQWZJLENBQWhCIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24oKXtmdW5jdGlvbiByKGUsbix0KXtmdW5jdGlvbiBvKGksZil7aWYoIW5baV0pe2lmKCFlW2ldKXt2YXIgYz1cImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlO2lmKCFmJiZjKXJldHVybiBjKGksITApO2lmKHUpcmV0dXJuIHUoaSwhMCk7dmFyIGE9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitpK1wiJ1wiKTt0aHJvdyBhLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsYX12YXIgcD1uW2ldPXtleHBvcnRzOnt9fTtlW2ldWzBdLmNhbGwocC5leHBvcnRzLGZ1bmN0aW9uKHIpe3ZhciBuPWVbaV1bMV1bcl07cmV0dXJuIG8obnx8cil9LHAscC5leHBvcnRzLHIsZSxuLHQpfXJldHVybiBuW2ldLmV4cG9ydHN9Zm9yKHZhciB1PVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmUsaT0wO2k8dC5sZW5ndGg7aSsrKW8odFtpXSk7cmV0dXJuIG99cmV0dXJuIHJ9KSgpIiwiLy8gaHR0cHM6Ly9kM2pzLm9yZy9kMy1hcnJheS8gdjEuMi40IENvcHlyaWdodCAyMDE4IE1pa2UgQm9zdG9ja1xuKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbnR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyA/IGZhY3RvcnkoZXhwb3J0cykgOlxudHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnZXhwb3J0cyddLCBmYWN0b3J5KSA6XG4oZmFjdG9yeSgoZ2xvYmFsLmQzID0gZ2xvYmFsLmQzIHx8IHt9KSkpO1xufSh0aGlzLCAoZnVuY3Rpb24gKGV4cG9ydHMpIHsgJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBhc2NlbmRpbmcoYSwgYikge1xuICByZXR1cm4gYSA8IGIgPyAtMSA6IGEgPiBiID8gMSA6IGEgPj0gYiA/IDAgOiBOYU47XG59XG5cbmZ1bmN0aW9uIGJpc2VjdG9yKGNvbXBhcmUpIHtcbiAgaWYgKGNvbXBhcmUubGVuZ3RoID09PSAxKSBjb21wYXJlID0gYXNjZW5kaW5nQ29tcGFyYXRvcihjb21wYXJlKTtcbiAgcmV0dXJuIHtcbiAgICBsZWZ0OiBmdW5jdGlvbihhLCB4LCBsbywgaGkpIHtcbiAgICAgIGlmIChsbyA9PSBudWxsKSBsbyA9IDA7XG4gICAgICBpZiAoaGkgPT0gbnVsbCkgaGkgPSBhLmxlbmd0aDtcbiAgICAgIHdoaWxlIChsbyA8IGhpKSB7XG4gICAgICAgIHZhciBtaWQgPSBsbyArIGhpID4+PiAxO1xuICAgICAgICBpZiAoY29tcGFyZShhW21pZF0sIHgpIDwgMCkgbG8gPSBtaWQgKyAxO1xuICAgICAgICBlbHNlIGhpID0gbWlkO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGxvO1xuICAgIH0sXG4gICAgcmlnaHQ6IGZ1bmN0aW9uKGEsIHgsIGxvLCBoaSkge1xuICAgICAgaWYgKGxvID09IG51bGwpIGxvID0gMDtcbiAgICAgIGlmIChoaSA9PSBudWxsKSBoaSA9IGEubGVuZ3RoO1xuICAgICAgd2hpbGUgKGxvIDwgaGkpIHtcbiAgICAgICAgdmFyIG1pZCA9IGxvICsgaGkgPj4+IDE7XG4gICAgICAgIGlmIChjb21wYXJlKGFbbWlkXSwgeCkgPiAwKSBoaSA9IG1pZDtcbiAgICAgICAgZWxzZSBsbyA9IG1pZCArIDE7XG4gICAgICB9XG4gICAgICByZXR1cm4gbG87XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBhc2NlbmRpbmdDb21wYXJhdG9yKGYpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGQsIHgpIHtcbiAgICByZXR1cm4gYXNjZW5kaW5nKGYoZCksIHgpO1xuICB9O1xufVxuXG52YXIgYXNjZW5kaW5nQmlzZWN0ID0gYmlzZWN0b3IoYXNjZW5kaW5nKTtcbnZhciBiaXNlY3RSaWdodCA9IGFzY2VuZGluZ0Jpc2VjdC5yaWdodDtcbnZhciBiaXNlY3RMZWZ0ID0gYXNjZW5kaW5nQmlzZWN0LmxlZnQ7XG5cbmZ1bmN0aW9uIHBhaXJzKGFycmF5LCBmKSB7XG4gIGlmIChmID09IG51bGwpIGYgPSBwYWlyO1xuICB2YXIgaSA9IDAsIG4gPSBhcnJheS5sZW5ndGggLSAxLCBwID0gYXJyYXlbMF0sIHBhaXJzID0gbmV3IEFycmF5KG4gPCAwID8gMCA6IG4pO1xuICB3aGlsZSAoaSA8IG4pIHBhaXJzW2ldID0gZihwLCBwID0gYXJyYXlbKytpXSk7XG4gIHJldHVybiBwYWlycztcbn1cblxuZnVuY3Rpb24gcGFpcihhLCBiKSB7XG4gIHJldHVybiBbYSwgYl07XG59XG5cbmZ1bmN0aW9uIGNyb3NzKHZhbHVlczAsIHZhbHVlczEsIHJlZHVjZSkge1xuICB2YXIgbjAgPSB2YWx1ZXMwLmxlbmd0aCxcbiAgICAgIG4xID0gdmFsdWVzMS5sZW5ndGgsXG4gICAgICB2YWx1ZXMgPSBuZXcgQXJyYXkobjAgKiBuMSksXG4gICAgICBpMCxcbiAgICAgIGkxLFxuICAgICAgaSxcbiAgICAgIHZhbHVlMDtcblxuICBpZiAocmVkdWNlID09IG51bGwpIHJlZHVjZSA9IHBhaXI7XG5cbiAgZm9yIChpMCA9IGkgPSAwOyBpMCA8IG4wOyArK2kwKSB7XG4gICAgZm9yICh2YWx1ZTAgPSB2YWx1ZXMwW2kwXSwgaTEgPSAwOyBpMSA8IG4xOyArK2kxLCArK2kpIHtcbiAgICAgIHZhbHVlc1tpXSA9IHJlZHVjZSh2YWx1ZTAsIHZhbHVlczFbaTFdKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdmFsdWVzO1xufVxuXG5mdW5jdGlvbiBkZXNjZW5kaW5nKGEsIGIpIHtcbiAgcmV0dXJuIGIgPCBhID8gLTEgOiBiID4gYSA/IDEgOiBiID49IGEgPyAwIDogTmFOO1xufVxuXG5mdW5jdGlvbiBudW1iZXIoeCkge1xuICByZXR1cm4geCA9PT0gbnVsbCA/IE5hTiA6ICt4O1xufVxuXG5mdW5jdGlvbiB2YXJpYW5jZSh2YWx1ZXMsIHZhbHVlb2YpIHtcbiAgdmFyIG4gPSB2YWx1ZXMubGVuZ3RoLFxuICAgICAgbSA9IDAsXG4gICAgICBpID0gLTEsXG4gICAgICBtZWFuID0gMCxcbiAgICAgIHZhbHVlLFxuICAgICAgZGVsdGEsXG4gICAgICBzdW0gPSAwO1xuXG4gIGlmICh2YWx1ZW9mID09IG51bGwpIHtcbiAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgaWYgKCFpc05hTih2YWx1ZSA9IG51bWJlcih2YWx1ZXNbaV0pKSkge1xuICAgICAgICBkZWx0YSA9IHZhbHVlIC0gbWVhbjtcbiAgICAgICAgbWVhbiArPSBkZWx0YSAvICsrbTtcbiAgICAgICAgc3VtICs9IGRlbHRhICogKHZhbHVlIC0gbWVhbik7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZWxzZSB7XG4gICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgIGlmICghaXNOYU4odmFsdWUgPSBudW1iZXIodmFsdWVvZih2YWx1ZXNbaV0sIGksIHZhbHVlcykpKSkge1xuICAgICAgICBkZWx0YSA9IHZhbHVlIC0gbWVhbjtcbiAgICAgICAgbWVhbiArPSBkZWx0YSAvICsrbTtcbiAgICAgICAgc3VtICs9IGRlbHRhICogKHZhbHVlIC0gbWVhbik7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaWYgKG0gPiAxKSByZXR1cm4gc3VtIC8gKG0gLSAxKTtcbn1cblxuZnVuY3Rpb24gZGV2aWF0aW9uKGFycmF5LCBmKSB7XG4gIHZhciB2ID0gdmFyaWFuY2UoYXJyYXksIGYpO1xuICByZXR1cm4gdiA/IE1hdGguc3FydCh2KSA6IHY7XG59XG5cbmZ1bmN0aW9uIGV4dGVudCh2YWx1ZXMsIHZhbHVlb2YpIHtcbiAgdmFyIG4gPSB2YWx1ZXMubGVuZ3RoLFxuICAgICAgaSA9IC0xLFxuICAgICAgdmFsdWUsXG4gICAgICBtaW4sXG4gICAgICBtYXg7XG5cbiAgaWYgKHZhbHVlb2YgPT0gbnVsbCkge1xuICAgIHdoaWxlICgrK2kgPCBuKSB7IC8vIEZpbmQgdGhlIGZpcnN0IGNvbXBhcmFibGUgdmFsdWUuXG4gICAgICBpZiAoKHZhbHVlID0gdmFsdWVzW2ldKSAhPSBudWxsICYmIHZhbHVlID49IHZhbHVlKSB7XG4gICAgICAgIG1pbiA9IG1heCA9IHZhbHVlO1xuICAgICAgICB3aGlsZSAoKytpIDwgbikgeyAvLyBDb21wYXJlIHRoZSByZW1haW5pbmcgdmFsdWVzLlxuICAgICAgICAgIGlmICgodmFsdWUgPSB2YWx1ZXNbaV0pICE9IG51bGwpIHtcbiAgICAgICAgICAgIGlmIChtaW4gPiB2YWx1ZSkgbWluID0gdmFsdWU7XG4gICAgICAgICAgICBpZiAobWF4IDwgdmFsdWUpIG1heCA9IHZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGVsc2Uge1xuICAgIHdoaWxlICgrK2kgPCBuKSB7IC8vIEZpbmQgdGhlIGZpcnN0IGNvbXBhcmFibGUgdmFsdWUuXG4gICAgICBpZiAoKHZhbHVlID0gdmFsdWVvZih2YWx1ZXNbaV0sIGksIHZhbHVlcykpICE9IG51bGwgJiYgdmFsdWUgPj0gdmFsdWUpIHtcbiAgICAgICAgbWluID0gbWF4ID0gdmFsdWU7XG4gICAgICAgIHdoaWxlICgrK2kgPCBuKSB7IC8vIENvbXBhcmUgdGhlIHJlbWFpbmluZyB2YWx1ZXMuXG4gICAgICAgICAgaWYgKCh2YWx1ZSA9IHZhbHVlb2YodmFsdWVzW2ldLCBpLCB2YWx1ZXMpKSAhPSBudWxsKSB7XG4gICAgICAgICAgICBpZiAobWluID4gdmFsdWUpIG1pbiA9IHZhbHVlO1xuICAgICAgICAgICAgaWYgKG1heCA8IHZhbHVlKSBtYXggPSB2YWx1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gW21pbiwgbWF4XTtcbn1cblxudmFyIGFycmF5ID0gQXJyYXkucHJvdG90eXBlO1xuXG52YXIgc2xpY2UgPSBhcnJheS5zbGljZTtcbnZhciBtYXAgPSBhcnJheS5tYXA7XG5cbmZ1bmN0aW9uIGNvbnN0YW50KHgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB4O1xuICB9O1xufVxuXG5mdW5jdGlvbiBpZGVudGl0eSh4KSB7XG4gIHJldHVybiB4O1xufVxuXG5mdW5jdGlvbiByYW5nZShzdGFydCwgc3RvcCwgc3RlcCkge1xuICBzdGFydCA9ICtzdGFydCwgc3RvcCA9ICtzdG9wLCBzdGVwID0gKG4gPSBhcmd1bWVudHMubGVuZ3RoKSA8IDIgPyAoc3RvcCA9IHN0YXJ0LCBzdGFydCA9IDAsIDEpIDogbiA8IDMgPyAxIDogK3N0ZXA7XG5cbiAgdmFyIGkgPSAtMSxcbiAgICAgIG4gPSBNYXRoLm1heCgwLCBNYXRoLmNlaWwoKHN0b3AgLSBzdGFydCkgLyBzdGVwKSkgfCAwLFxuICAgICAgcmFuZ2UgPSBuZXcgQXJyYXkobik7XG5cbiAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICByYW5nZVtpXSA9IHN0YXJ0ICsgaSAqIHN0ZXA7XG4gIH1cblxuICByZXR1cm4gcmFuZ2U7XG59XG5cbnZhciBlMTAgPSBNYXRoLnNxcnQoNTApLFxuICAgIGU1ID0gTWF0aC5zcXJ0KDEwKSxcbiAgICBlMiA9IE1hdGguc3FydCgyKTtcblxuZnVuY3Rpb24gdGlja3Moc3RhcnQsIHN0b3AsIGNvdW50KSB7XG4gIHZhciByZXZlcnNlLFxuICAgICAgaSA9IC0xLFxuICAgICAgbixcbiAgICAgIHRpY2tzLFxuICAgICAgc3RlcDtcblxuICBzdG9wID0gK3N0b3AsIHN0YXJ0ID0gK3N0YXJ0LCBjb3VudCA9ICtjb3VudDtcbiAgaWYgKHN0YXJ0ID09PSBzdG9wICYmIGNvdW50ID4gMCkgcmV0dXJuIFtzdGFydF07XG4gIGlmIChyZXZlcnNlID0gc3RvcCA8IHN0YXJ0KSBuID0gc3RhcnQsIHN0YXJ0ID0gc3RvcCwgc3RvcCA9IG47XG4gIGlmICgoc3RlcCA9IHRpY2tJbmNyZW1lbnQoc3RhcnQsIHN0b3AsIGNvdW50KSkgPT09IDAgfHwgIWlzRmluaXRlKHN0ZXApKSByZXR1cm4gW107XG5cbiAgaWYgKHN0ZXAgPiAwKSB7XG4gICAgc3RhcnQgPSBNYXRoLmNlaWwoc3RhcnQgLyBzdGVwKTtcbiAgICBzdG9wID0gTWF0aC5mbG9vcihzdG9wIC8gc3RlcCk7XG4gICAgdGlja3MgPSBuZXcgQXJyYXkobiA9IE1hdGguY2VpbChzdG9wIC0gc3RhcnQgKyAxKSk7XG4gICAgd2hpbGUgKCsraSA8IG4pIHRpY2tzW2ldID0gKHN0YXJ0ICsgaSkgKiBzdGVwO1xuICB9IGVsc2Uge1xuICAgIHN0YXJ0ID0gTWF0aC5mbG9vcihzdGFydCAqIHN0ZXApO1xuICAgIHN0b3AgPSBNYXRoLmNlaWwoc3RvcCAqIHN0ZXApO1xuICAgIHRpY2tzID0gbmV3IEFycmF5KG4gPSBNYXRoLmNlaWwoc3RhcnQgLSBzdG9wICsgMSkpO1xuICAgIHdoaWxlICgrK2kgPCBuKSB0aWNrc1tpXSA9IChzdGFydCAtIGkpIC8gc3RlcDtcbiAgfVxuXG4gIGlmIChyZXZlcnNlKSB0aWNrcy5yZXZlcnNlKCk7XG5cbiAgcmV0dXJuIHRpY2tzO1xufVxuXG5mdW5jdGlvbiB0aWNrSW5jcmVtZW50KHN0YXJ0LCBzdG9wLCBjb3VudCkge1xuICB2YXIgc3RlcCA9IChzdG9wIC0gc3RhcnQpIC8gTWF0aC5tYXgoMCwgY291bnQpLFxuICAgICAgcG93ZXIgPSBNYXRoLmZsb29yKE1hdGgubG9nKHN0ZXApIC8gTWF0aC5MTjEwKSxcbiAgICAgIGVycm9yID0gc3RlcCAvIE1hdGgucG93KDEwLCBwb3dlcik7XG4gIHJldHVybiBwb3dlciA+PSAwXG4gICAgICA/IChlcnJvciA+PSBlMTAgPyAxMCA6IGVycm9yID49IGU1ID8gNSA6IGVycm9yID49IGUyID8gMiA6IDEpICogTWF0aC5wb3coMTAsIHBvd2VyKVxuICAgICAgOiAtTWF0aC5wb3coMTAsIC1wb3dlcikgLyAoZXJyb3IgPj0gZTEwID8gMTAgOiBlcnJvciA+PSBlNSA/IDUgOiBlcnJvciA+PSBlMiA/IDIgOiAxKTtcbn1cblxuZnVuY3Rpb24gdGlja1N0ZXAoc3RhcnQsIHN0b3AsIGNvdW50KSB7XG4gIHZhciBzdGVwMCA9IE1hdGguYWJzKHN0b3AgLSBzdGFydCkgLyBNYXRoLm1heCgwLCBjb3VudCksXG4gICAgICBzdGVwMSA9IE1hdGgucG93KDEwLCBNYXRoLmZsb29yKE1hdGgubG9nKHN0ZXAwKSAvIE1hdGguTE4xMCkpLFxuICAgICAgZXJyb3IgPSBzdGVwMCAvIHN0ZXAxO1xuICBpZiAoZXJyb3IgPj0gZTEwKSBzdGVwMSAqPSAxMDtcbiAgZWxzZSBpZiAoZXJyb3IgPj0gZTUpIHN0ZXAxICo9IDU7XG4gIGVsc2UgaWYgKGVycm9yID49IGUyKSBzdGVwMSAqPSAyO1xuICByZXR1cm4gc3RvcCA8IHN0YXJ0ID8gLXN0ZXAxIDogc3RlcDE7XG59XG5cbmZ1bmN0aW9uIHN0dXJnZXModmFsdWVzKSB7XG4gIHJldHVybiBNYXRoLmNlaWwoTWF0aC5sb2codmFsdWVzLmxlbmd0aCkgLyBNYXRoLkxOMikgKyAxO1xufVxuXG5mdW5jdGlvbiBoaXN0b2dyYW0oKSB7XG4gIHZhciB2YWx1ZSA9IGlkZW50aXR5LFxuICAgICAgZG9tYWluID0gZXh0ZW50LFxuICAgICAgdGhyZXNob2xkID0gc3R1cmdlcztcblxuICBmdW5jdGlvbiBoaXN0b2dyYW0oZGF0YSkge1xuICAgIHZhciBpLFxuICAgICAgICBuID0gZGF0YS5sZW5ndGgsXG4gICAgICAgIHgsXG4gICAgICAgIHZhbHVlcyA9IG5ldyBBcnJheShuKTtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIHZhbHVlc1tpXSA9IHZhbHVlKGRhdGFbaV0sIGksIGRhdGEpO1xuICAgIH1cblxuICAgIHZhciB4eiA9IGRvbWFpbih2YWx1ZXMpLFxuICAgICAgICB4MCA9IHh6WzBdLFxuICAgICAgICB4MSA9IHh6WzFdLFxuICAgICAgICB0eiA9IHRocmVzaG9sZCh2YWx1ZXMsIHgwLCB4MSk7XG5cbiAgICAvLyBDb252ZXJ0IG51bWJlciBvZiB0aHJlc2hvbGRzIGludG8gdW5pZm9ybSB0aHJlc2hvbGRzLlxuICAgIGlmICghQXJyYXkuaXNBcnJheSh0eikpIHtcbiAgICAgIHR6ID0gdGlja1N0ZXAoeDAsIHgxLCB0eik7XG4gICAgICB0eiA9IHJhbmdlKE1hdGguY2VpbCh4MCAvIHR6KSAqIHR6LCB4MSwgdHopOyAvLyBleGNsdXNpdmVcbiAgICB9XG5cbiAgICAvLyBSZW1vdmUgYW55IHRocmVzaG9sZHMgb3V0c2lkZSB0aGUgZG9tYWluLlxuICAgIHZhciBtID0gdHoubGVuZ3RoO1xuICAgIHdoaWxlICh0elswXSA8PSB4MCkgdHouc2hpZnQoKSwgLS1tO1xuICAgIHdoaWxlICh0elttIC0gMV0gPiB4MSkgdHoucG9wKCksIC0tbTtcblxuICAgIHZhciBiaW5zID0gbmV3IEFycmF5KG0gKyAxKSxcbiAgICAgICAgYmluO1xuXG4gICAgLy8gSW5pdGlhbGl6ZSBiaW5zLlxuICAgIGZvciAoaSA9IDA7IGkgPD0gbTsgKytpKSB7XG4gICAgICBiaW4gPSBiaW5zW2ldID0gW107XG4gICAgICBiaW4ueDAgPSBpID4gMCA/IHR6W2kgLSAxXSA6IHgwO1xuICAgICAgYmluLngxID0gaSA8IG0gPyB0eltpXSA6IHgxO1xuICAgIH1cblxuICAgIC8vIEFzc2lnbiBkYXRhIHRvIGJpbnMgYnkgdmFsdWUsIGlnbm9yaW5nIGFueSBvdXRzaWRlIHRoZSBkb21haW4uXG4gICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgeCA9IHZhbHVlc1tpXTtcbiAgICAgIGlmICh4MCA8PSB4ICYmIHggPD0geDEpIHtcbiAgICAgICAgYmluc1tiaXNlY3RSaWdodCh0eiwgeCwgMCwgbSldLnB1c2goZGF0YVtpXSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGJpbnM7XG4gIH1cblxuICBoaXN0b2dyYW0udmFsdWUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodmFsdWUgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KF8pLCBoaXN0b2dyYW0pIDogdmFsdWU7XG4gIH07XG5cbiAgaGlzdG9ncmFtLmRvbWFpbiA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChkb21haW4gPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KFtfWzBdLCBfWzFdXSksIGhpc3RvZ3JhbSkgOiBkb21haW47XG4gIH07XG5cbiAgaGlzdG9ncmFtLnRocmVzaG9sZHMgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodGhyZXNob2xkID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBBcnJheS5pc0FycmF5KF8pID8gY29uc3RhbnQoc2xpY2UuY2FsbChfKSkgOiBjb25zdGFudChfKSwgaGlzdG9ncmFtKSA6IHRocmVzaG9sZDtcbiAgfTtcblxuICByZXR1cm4gaGlzdG9ncmFtO1xufVxuXG5mdW5jdGlvbiBxdWFudGlsZSh2YWx1ZXMsIHAsIHZhbHVlb2YpIHtcbiAgaWYgKHZhbHVlb2YgPT0gbnVsbCkgdmFsdWVvZiA9IG51bWJlcjtcbiAgaWYgKCEobiA9IHZhbHVlcy5sZW5ndGgpKSByZXR1cm47XG4gIGlmICgocCA9ICtwKSA8PSAwIHx8IG4gPCAyKSByZXR1cm4gK3ZhbHVlb2YodmFsdWVzWzBdLCAwLCB2YWx1ZXMpO1xuICBpZiAocCA+PSAxKSByZXR1cm4gK3ZhbHVlb2YodmFsdWVzW24gLSAxXSwgbiAtIDEsIHZhbHVlcyk7XG4gIHZhciBuLFxuICAgICAgaSA9IChuIC0gMSkgKiBwLFxuICAgICAgaTAgPSBNYXRoLmZsb29yKGkpLFxuICAgICAgdmFsdWUwID0gK3ZhbHVlb2YodmFsdWVzW2kwXSwgaTAsIHZhbHVlcyksXG4gICAgICB2YWx1ZTEgPSArdmFsdWVvZih2YWx1ZXNbaTAgKyAxXSwgaTAgKyAxLCB2YWx1ZXMpO1xuICByZXR1cm4gdmFsdWUwICsgKHZhbHVlMSAtIHZhbHVlMCkgKiAoaSAtIGkwKTtcbn1cblxuZnVuY3Rpb24gZnJlZWRtYW5EaWFjb25pcyh2YWx1ZXMsIG1pbiwgbWF4KSB7XG4gIHZhbHVlcyA9IG1hcC5jYWxsKHZhbHVlcywgbnVtYmVyKS5zb3J0KGFzY2VuZGluZyk7XG4gIHJldHVybiBNYXRoLmNlaWwoKG1heCAtIG1pbikgLyAoMiAqIChxdWFudGlsZSh2YWx1ZXMsIDAuNzUpIC0gcXVhbnRpbGUodmFsdWVzLCAwLjI1KSkgKiBNYXRoLnBvdyh2YWx1ZXMubGVuZ3RoLCAtMSAvIDMpKSk7XG59XG5cbmZ1bmN0aW9uIHNjb3R0KHZhbHVlcywgbWluLCBtYXgpIHtcbiAgcmV0dXJuIE1hdGguY2VpbCgobWF4IC0gbWluKSAvICgzLjUgKiBkZXZpYXRpb24odmFsdWVzKSAqIE1hdGgucG93KHZhbHVlcy5sZW5ndGgsIC0xIC8gMykpKTtcbn1cblxuZnVuY3Rpb24gbWF4KHZhbHVlcywgdmFsdWVvZikge1xuICB2YXIgbiA9IHZhbHVlcy5sZW5ndGgsXG4gICAgICBpID0gLTEsXG4gICAgICB2YWx1ZSxcbiAgICAgIG1heDtcblxuICBpZiAodmFsdWVvZiA9PSBudWxsKSB7XG4gICAgd2hpbGUgKCsraSA8IG4pIHsgLy8gRmluZCB0aGUgZmlyc3QgY29tcGFyYWJsZSB2YWx1ZS5cbiAgICAgIGlmICgodmFsdWUgPSB2YWx1ZXNbaV0pICE9IG51bGwgJiYgdmFsdWUgPj0gdmFsdWUpIHtcbiAgICAgICAgbWF4ID0gdmFsdWU7XG4gICAgICAgIHdoaWxlICgrK2kgPCBuKSB7IC8vIENvbXBhcmUgdGhlIHJlbWFpbmluZyB2YWx1ZXMuXG4gICAgICAgICAgaWYgKCh2YWx1ZSA9IHZhbHVlc1tpXSkgIT0gbnVsbCAmJiB2YWx1ZSA+IG1heCkge1xuICAgICAgICAgICAgbWF4ID0gdmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZWxzZSB7XG4gICAgd2hpbGUgKCsraSA8IG4pIHsgLy8gRmluZCB0aGUgZmlyc3QgY29tcGFyYWJsZSB2YWx1ZS5cbiAgICAgIGlmICgodmFsdWUgPSB2YWx1ZW9mKHZhbHVlc1tpXSwgaSwgdmFsdWVzKSkgIT0gbnVsbCAmJiB2YWx1ZSA+PSB2YWx1ZSkge1xuICAgICAgICBtYXggPSB2YWx1ZTtcbiAgICAgICAgd2hpbGUgKCsraSA8IG4pIHsgLy8gQ29tcGFyZSB0aGUgcmVtYWluaW5nIHZhbHVlcy5cbiAgICAgICAgICBpZiAoKHZhbHVlID0gdmFsdWVvZih2YWx1ZXNbaV0sIGksIHZhbHVlcykpICE9IG51bGwgJiYgdmFsdWUgPiBtYXgpIHtcbiAgICAgICAgICAgIG1heCA9IHZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBtYXg7XG59XG5cbmZ1bmN0aW9uIG1lYW4odmFsdWVzLCB2YWx1ZW9mKSB7XG4gIHZhciBuID0gdmFsdWVzLmxlbmd0aCxcbiAgICAgIG0gPSBuLFxuICAgICAgaSA9IC0xLFxuICAgICAgdmFsdWUsXG4gICAgICBzdW0gPSAwO1xuXG4gIGlmICh2YWx1ZW9mID09IG51bGwpIHtcbiAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgaWYgKCFpc05hTih2YWx1ZSA9IG51bWJlcih2YWx1ZXNbaV0pKSkgc3VtICs9IHZhbHVlO1xuICAgICAgZWxzZSAtLW07XG4gICAgfVxuICB9XG5cbiAgZWxzZSB7XG4gICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgIGlmICghaXNOYU4odmFsdWUgPSBudW1iZXIodmFsdWVvZih2YWx1ZXNbaV0sIGksIHZhbHVlcykpKSkgc3VtICs9IHZhbHVlO1xuICAgICAgZWxzZSAtLW07XG4gICAgfVxuICB9XG5cbiAgaWYgKG0pIHJldHVybiBzdW0gLyBtO1xufVxuXG5mdW5jdGlvbiBtZWRpYW4odmFsdWVzLCB2YWx1ZW9mKSB7XG4gIHZhciBuID0gdmFsdWVzLmxlbmd0aCxcbiAgICAgIGkgPSAtMSxcbiAgICAgIHZhbHVlLFxuICAgICAgbnVtYmVycyA9IFtdO1xuXG4gIGlmICh2YWx1ZW9mID09IG51bGwpIHtcbiAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgaWYgKCFpc05hTih2YWx1ZSA9IG51bWJlcih2YWx1ZXNbaV0pKSkge1xuICAgICAgICBudW1iZXJzLnB1c2godmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGVsc2Uge1xuICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICBpZiAoIWlzTmFOKHZhbHVlID0gbnVtYmVyKHZhbHVlb2YodmFsdWVzW2ldLCBpLCB2YWx1ZXMpKSkpIHtcbiAgICAgICAgbnVtYmVycy5wdXNoKHZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gcXVhbnRpbGUobnVtYmVycy5zb3J0KGFzY2VuZGluZyksIDAuNSk7XG59XG5cbmZ1bmN0aW9uIG1lcmdlKGFycmF5cykge1xuICB2YXIgbiA9IGFycmF5cy5sZW5ndGgsXG4gICAgICBtLFxuICAgICAgaSA9IC0xLFxuICAgICAgaiA9IDAsXG4gICAgICBtZXJnZWQsXG4gICAgICBhcnJheTtcblxuICB3aGlsZSAoKytpIDwgbikgaiArPSBhcnJheXNbaV0ubGVuZ3RoO1xuICBtZXJnZWQgPSBuZXcgQXJyYXkoaik7XG5cbiAgd2hpbGUgKC0tbiA+PSAwKSB7XG4gICAgYXJyYXkgPSBhcnJheXNbbl07XG4gICAgbSA9IGFycmF5Lmxlbmd0aDtcbiAgICB3aGlsZSAoLS1tID49IDApIHtcbiAgICAgIG1lcmdlZFstLWpdID0gYXJyYXlbbV07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG1lcmdlZDtcbn1cblxuZnVuY3Rpb24gbWluKHZhbHVlcywgdmFsdWVvZikge1xuICB2YXIgbiA9IHZhbHVlcy5sZW5ndGgsXG4gICAgICBpID0gLTEsXG4gICAgICB2YWx1ZSxcbiAgICAgIG1pbjtcblxuICBpZiAodmFsdWVvZiA9PSBudWxsKSB7XG4gICAgd2hpbGUgKCsraSA8IG4pIHsgLy8gRmluZCB0aGUgZmlyc3QgY29tcGFyYWJsZSB2YWx1ZS5cbiAgICAgIGlmICgodmFsdWUgPSB2YWx1ZXNbaV0pICE9IG51bGwgJiYgdmFsdWUgPj0gdmFsdWUpIHtcbiAgICAgICAgbWluID0gdmFsdWU7XG4gICAgICAgIHdoaWxlICgrK2kgPCBuKSB7IC8vIENvbXBhcmUgdGhlIHJlbWFpbmluZyB2YWx1ZXMuXG4gICAgICAgICAgaWYgKCh2YWx1ZSA9IHZhbHVlc1tpXSkgIT0gbnVsbCAmJiBtaW4gPiB2YWx1ZSkge1xuICAgICAgICAgICAgbWluID0gdmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZWxzZSB7XG4gICAgd2hpbGUgKCsraSA8IG4pIHsgLy8gRmluZCB0aGUgZmlyc3QgY29tcGFyYWJsZSB2YWx1ZS5cbiAgICAgIGlmICgodmFsdWUgPSB2YWx1ZW9mKHZhbHVlc1tpXSwgaSwgdmFsdWVzKSkgIT0gbnVsbCAmJiB2YWx1ZSA+PSB2YWx1ZSkge1xuICAgICAgICBtaW4gPSB2YWx1ZTtcbiAgICAgICAgd2hpbGUgKCsraSA8IG4pIHsgLy8gQ29tcGFyZSB0aGUgcmVtYWluaW5nIHZhbHVlcy5cbiAgICAgICAgICBpZiAoKHZhbHVlID0gdmFsdWVvZih2YWx1ZXNbaV0sIGksIHZhbHVlcykpICE9IG51bGwgJiYgbWluID4gdmFsdWUpIHtcbiAgICAgICAgICAgIG1pbiA9IHZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBtaW47XG59XG5cbmZ1bmN0aW9uIHBlcm11dGUoYXJyYXksIGluZGV4ZXMpIHtcbiAgdmFyIGkgPSBpbmRleGVzLmxlbmd0aCwgcGVybXV0ZXMgPSBuZXcgQXJyYXkoaSk7XG4gIHdoaWxlIChpLS0pIHBlcm11dGVzW2ldID0gYXJyYXlbaW5kZXhlc1tpXV07XG4gIHJldHVybiBwZXJtdXRlcztcbn1cblxuZnVuY3Rpb24gc2Nhbih2YWx1ZXMsIGNvbXBhcmUpIHtcbiAgaWYgKCEobiA9IHZhbHVlcy5sZW5ndGgpKSByZXR1cm47XG4gIHZhciBuLFxuICAgICAgaSA9IDAsXG4gICAgICBqID0gMCxcbiAgICAgIHhpLFxuICAgICAgeGogPSB2YWx1ZXNbal07XG5cbiAgaWYgKGNvbXBhcmUgPT0gbnVsbCkgY29tcGFyZSA9IGFzY2VuZGluZztcblxuICB3aGlsZSAoKytpIDwgbikge1xuICAgIGlmIChjb21wYXJlKHhpID0gdmFsdWVzW2ldLCB4aikgPCAwIHx8IGNvbXBhcmUoeGosIHhqKSAhPT0gMCkge1xuICAgICAgeGogPSB4aSwgaiA9IGk7XG4gICAgfVxuICB9XG5cbiAgaWYgKGNvbXBhcmUoeGosIHhqKSA9PT0gMCkgcmV0dXJuIGo7XG59XG5cbmZ1bmN0aW9uIHNodWZmbGUoYXJyYXksIGkwLCBpMSkge1xuICB2YXIgbSA9IChpMSA9PSBudWxsID8gYXJyYXkubGVuZ3RoIDogaTEpIC0gKGkwID0gaTAgPT0gbnVsbCA/IDAgOiAraTApLFxuICAgICAgdCxcbiAgICAgIGk7XG5cbiAgd2hpbGUgKG0pIHtcbiAgICBpID0gTWF0aC5yYW5kb20oKSAqIG0tLSB8IDA7XG4gICAgdCA9IGFycmF5W20gKyBpMF07XG4gICAgYXJyYXlbbSArIGkwXSA9IGFycmF5W2kgKyBpMF07XG4gICAgYXJyYXlbaSArIGkwXSA9IHQ7XG4gIH1cblxuICByZXR1cm4gYXJyYXk7XG59XG5cbmZ1bmN0aW9uIHN1bSh2YWx1ZXMsIHZhbHVlb2YpIHtcbiAgdmFyIG4gPSB2YWx1ZXMubGVuZ3RoLFxuICAgICAgaSA9IC0xLFxuICAgICAgdmFsdWUsXG4gICAgICBzdW0gPSAwO1xuXG4gIGlmICh2YWx1ZW9mID09IG51bGwpIHtcbiAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgaWYgKHZhbHVlID0gK3ZhbHVlc1tpXSkgc3VtICs9IHZhbHVlOyAvLyBOb3RlOiB6ZXJvIGFuZCBudWxsIGFyZSBlcXVpdmFsZW50LlxuICAgIH1cbiAgfVxuXG4gIGVsc2Uge1xuICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICBpZiAodmFsdWUgPSArdmFsdWVvZih2YWx1ZXNbaV0sIGksIHZhbHVlcykpIHN1bSArPSB2YWx1ZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gc3VtO1xufVxuXG5mdW5jdGlvbiB0cmFuc3Bvc2UobWF0cml4KSB7XG4gIGlmICghKG4gPSBtYXRyaXgubGVuZ3RoKSkgcmV0dXJuIFtdO1xuICBmb3IgKHZhciBpID0gLTEsIG0gPSBtaW4obWF0cml4LCBsZW5ndGgpLCB0cmFuc3Bvc2UgPSBuZXcgQXJyYXkobSk7ICsraSA8IG07KSB7XG4gICAgZm9yICh2YXIgaiA9IC0xLCBuLCByb3cgPSB0cmFuc3Bvc2VbaV0gPSBuZXcgQXJyYXkobik7ICsraiA8IG47KSB7XG4gICAgICByb3dbal0gPSBtYXRyaXhbal1baV07XG4gICAgfVxuICB9XG4gIHJldHVybiB0cmFuc3Bvc2U7XG59XG5cbmZ1bmN0aW9uIGxlbmd0aChkKSB7XG4gIHJldHVybiBkLmxlbmd0aDtcbn1cblxuZnVuY3Rpb24gemlwKCkge1xuICByZXR1cm4gdHJhbnNwb3NlKGFyZ3VtZW50cyk7XG59XG5cbmV4cG9ydHMuYmlzZWN0ID0gYmlzZWN0UmlnaHQ7XG5leHBvcnRzLmJpc2VjdFJpZ2h0ID0gYmlzZWN0UmlnaHQ7XG5leHBvcnRzLmJpc2VjdExlZnQgPSBiaXNlY3RMZWZ0O1xuZXhwb3J0cy5hc2NlbmRpbmcgPSBhc2NlbmRpbmc7XG5leHBvcnRzLmJpc2VjdG9yID0gYmlzZWN0b3I7XG5leHBvcnRzLmNyb3NzID0gY3Jvc3M7XG5leHBvcnRzLmRlc2NlbmRpbmcgPSBkZXNjZW5kaW5nO1xuZXhwb3J0cy5kZXZpYXRpb24gPSBkZXZpYXRpb247XG5leHBvcnRzLmV4dGVudCA9IGV4dGVudDtcbmV4cG9ydHMuaGlzdG9ncmFtID0gaGlzdG9ncmFtO1xuZXhwb3J0cy50aHJlc2hvbGRGcmVlZG1hbkRpYWNvbmlzID0gZnJlZWRtYW5EaWFjb25pcztcbmV4cG9ydHMudGhyZXNob2xkU2NvdHQgPSBzY290dDtcbmV4cG9ydHMudGhyZXNob2xkU3R1cmdlcyA9IHN0dXJnZXM7XG5leHBvcnRzLm1heCA9IG1heDtcbmV4cG9ydHMubWVhbiA9IG1lYW47XG5leHBvcnRzLm1lZGlhbiA9IG1lZGlhbjtcbmV4cG9ydHMubWVyZ2UgPSBtZXJnZTtcbmV4cG9ydHMubWluID0gbWluO1xuZXhwb3J0cy5wYWlycyA9IHBhaXJzO1xuZXhwb3J0cy5wZXJtdXRlID0gcGVybXV0ZTtcbmV4cG9ydHMucXVhbnRpbGUgPSBxdWFudGlsZTtcbmV4cG9ydHMucmFuZ2UgPSByYW5nZTtcbmV4cG9ydHMuc2NhbiA9IHNjYW47XG5leHBvcnRzLnNodWZmbGUgPSBzaHVmZmxlO1xuZXhwb3J0cy5zdW0gPSBzdW07XG5leHBvcnRzLnRpY2tzID0gdGlja3M7XG5leHBvcnRzLnRpY2tJbmNyZW1lbnQgPSB0aWNrSW5jcmVtZW50O1xuZXhwb3J0cy50aWNrU3RlcCA9IHRpY2tTdGVwO1xuZXhwb3J0cy50cmFuc3Bvc2UgPSB0cmFuc3Bvc2U7XG5leHBvcnRzLnZhcmlhbmNlID0gdmFyaWFuY2U7XG5leHBvcnRzLnppcCA9IHppcDtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxufSkpKTtcbiIsIi8vIGh0dHBzOi8vZDNqcy5vcmcvZDMtYXhpcy8gdjEuMC4xMiBDb3B5cmlnaHQgMjAxOCBNaWtlIEJvc3RvY2tcbihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG50eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgPyBmYWN0b3J5KGV4cG9ydHMpIDpcbnR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJ2V4cG9ydHMnXSwgZmFjdG9yeSkgOlxuKGZhY3RvcnkoKGdsb2JhbC5kMyA9IGdsb2JhbC5kMyB8fCB7fSkpKTtcbn0odGhpcywgKGZ1bmN0aW9uIChleHBvcnRzKSB7ICd1c2Ugc3RyaWN0JztcblxudmFyIHNsaWNlID0gQXJyYXkucHJvdG90eXBlLnNsaWNlO1xuXG5mdW5jdGlvbiBpZGVudGl0eSh4KSB7XG4gIHJldHVybiB4O1xufVxuXG52YXIgdG9wID0gMSxcbiAgICByaWdodCA9IDIsXG4gICAgYm90dG9tID0gMyxcbiAgICBsZWZ0ID0gNCxcbiAgICBlcHNpbG9uID0gMWUtNjtcblxuZnVuY3Rpb24gdHJhbnNsYXRlWCh4KSB7XG4gIHJldHVybiBcInRyYW5zbGF0ZShcIiArICh4ICsgMC41KSArIFwiLDApXCI7XG59XG5cbmZ1bmN0aW9uIHRyYW5zbGF0ZVkoeSkge1xuICByZXR1cm4gXCJ0cmFuc2xhdGUoMCxcIiArICh5ICsgMC41KSArIFwiKVwiO1xufVxuXG5mdW5jdGlvbiBudW1iZXIoc2NhbGUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGQpIHtcbiAgICByZXR1cm4gK3NjYWxlKGQpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBjZW50ZXIoc2NhbGUpIHtcbiAgdmFyIG9mZnNldCA9IE1hdGgubWF4KDAsIHNjYWxlLmJhbmR3aWR0aCgpIC0gMSkgLyAyOyAvLyBBZGp1c3QgZm9yIDAuNXB4IG9mZnNldC5cbiAgaWYgKHNjYWxlLnJvdW5kKCkpIG9mZnNldCA9IE1hdGgucm91bmQob2Zmc2V0KTtcbiAgcmV0dXJuIGZ1bmN0aW9uKGQpIHtcbiAgICByZXR1cm4gK3NjYWxlKGQpICsgb2Zmc2V0O1xuICB9O1xufVxuXG5mdW5jdGlvbiBlbnRlcmluZygpIHtcbiAgcmV0dXJuICF0aGlzLl9fYXhpcztcbn1cblxuZnVuY3Rpb24gYXhpcyhvcmllbnQsIHNjYWxlKSB7XG4gIHZhciB0aWNrQXJndW1lbnRzID0gW10sXG4gICAgICB0aWNrVmFsdWVzID0gbnVsbCxcbiAgICAgIHRpY2tGb3JtYXQgPSBudWxsLFxuICAgICAgdGlja1NpemVJbm5lciA9IDYsXG4gICAgICB0aWNrU2l6ZU91dGVyID0gNixcbiAgICAgIHRpY2tQYWRkaW5nID0gMyxcbiAgICAgIGsgPSBvcmllbnQgPT09IHRvcCB8fCBvcmllbnQgPT09IGxlZnQgPyAtMSA6IDEsXG4gICAgICB4ID0gb3JpZW50ID09PSBsZWZ0IHx8IG9yaWVudCA9PT0gcmlnaHQgPyBcInhcIiA6IFwieVwiLFxuICAgICAgdHJhbnNmb3JtID0gb3JpZW50ID09PSB0b3AgfHwgb3JpZW50ID09PSBib3R0b20gPyB0cmFuc2xhdGVYIDogdHJhbnNsYXRlWTtcblxuICBmdW5jdGlvbiBheGlzKGNvbnRleHQpIHtcbiAgICB2YXIgdmFsdWVzID0gdGlja1ZhbHVlcyA9PSBudWxsID8gKHNjYWxlLnRpY2tzID8gc2NhbGUudGlja3MuYXBwbHkoc2NhbGUsIHRpY2tBcmd1bWVudHMpIDogc2NhbGUuZG9tYWluKCkpIDogdGlja1ZhbHVlcyxcbiAgICAgICAgZm9ybWF0ID0gdGlja0Zvcm1hdCA9PSBudWxsID8gKHNjYWxlLnRpY2tGb3JtYXQgPyBzY2FsZS50aWNrRm9ybWF0LmFwcGx5KHNjYWxlLCB0aWNrQXJndW1lbnRzKSA6IGlkZW50aXR5KSA6IHRpY2tGb3JtYXQsXG4gICAgICAgIHNwYWNpbmcgPSBNYXRoLm1heCh0aWNrU2l6ZUlubmVyLCAwKSArIHRpY2tQYWRkaW5nLFxuICAgICAgICByYW5nZSA9IHNjYWxlLnJhbmdlKCksXG4gICAgICAgIHJhbmdlMCA9ICtyYW5nZVswXSArIDAuNSxcbiAgICAgICAgcmFuZ2UxID0gK3JhbmdlW3JhbmdlLmxlbmd0aCAtIDFdICsgMC41LFxuICAgICAgICBwb3NpdGlvbiA9IChzY2FsZS5iYW5kd2lkdGggPyBjZW50ZXIgOiBudW1iZXIpKHNjYWxlLmNvcHkoKSksXG4gICAgICAgIHNlbGVjdGlvbiA9IGNvbnRleHQuc2VsZWN0aW9uID8gY29udGV4dC5zZWxlY3Rpb24oKSA6IGNvbnRleHQsXG4gICAgICAgIHBhdGggPSBzZWxlY3Rpb24uc2VsZWN0QWxsKFwiLmRvbWFpblwiKS5kYXRhKFtudWxsXSksXG4gICAgICAgIHRpY2sgPSBzZWxlY3Rpb24uc2VsZWN0QWxsKFwiLnRpY2tcIikuZGF0YSh2YWx1ZXMsIHNjYWxlKS5vcmRlcigpLFxuICAgICAgICB0aWNrRXhpdCA9IHRpY2suZXhpdCgpLFxuICAgICAgICB0aWNrRW50ZXIgPSB0aWNrLmVudGVyKCkuYXBwZW5kKFwiZ1wiKS5hdHRyKFwiY2xhc3NcIiwgXCJ0aWNrXCIpLFxuICAgICAgICBsaW5lID0gdGljay5zZWxlY3QoXCJsaW5lXCIpLFxuICAgICAgICB0ZXh0ID0gdGljay5zZWxlY3QoXCJ0ZXh0XCIpO1xuXG4gICAgcGF0aCA9IHBhdGgubWVyZ2UocGF0aC5lbnRlcigpLmluc2VydChcInBhdGhcIiwgXCIudGlja1wiKVxuICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwiZG9tYWluXCIpXG4gICAgICAgIC5hdHRyKFwic3Ryb2tlXCIsIFwiY3VycmVudENvbG9yXCIpKTtcblxuICAgIHRpY2sgPSB0aWNrLm1lcmdlKHRpY2tFbnRlcik7XG5cbiAgICBsaW5lID0gbGluZS5tZXJnZSh0aWNrRW50ZXIuYXBwZW5kKFwibGluZVwiKVxuICAgICAgICAuYXR0cihcInN0cm9rZVwiLCBcImN1cnJlbnRDb2xvclwiKVxuICAgICAgICAuYXR0cih4ICsgXCIyXCIsIGsgKiB0aWNrU2l6ZUlubmVyKSk7XG5cbiAgICB0ZXh0ID0gdGV4dC5tZXJnZSh0aWNrRW50ZXIuYXBwZW5kKFwidGV4dFwiKVxuICAgICAgICAuYXR0cihcImZpbGxcIiwgXCJjdXJyZW50Q29sb3JcIilcbiAgICAgICAgLmF0dHIoeCwgayAqIHNwYWNpbmcpXG4gICAgICAgIC5hdHRyKFwiZHlcIiwgb3JpZW50ID09PSB0b3AgPyBcIjBlbVwiIDogb3JpZW50ID09PSBib3R0b20gPyBcIjAuNzFlbVwiIDogXCIwLjMyZW1cIikpO1xuXG4gICAgaWYgKGNvbnRleHQgIT09IHNlbGVjdGlvbikge1xuICAgICAgcGF0aCA9IHBhdGgudHJhbnNpdGlvbihjb250ZXh0KTtcbiAgICAgIHRpY2sgPSB0aWNrLnRyYW5zaXRpb24oY29udGV4dCk7XG4gICAgICBsaW5lID0gbGluZS50cmFuc2l0aW9uKGNvbnRleHQpO1xuICAgICAgdGV4dCA9IHRleHQudHJhbnNpdGlvbihjb250ZXh0KTtcblxuICAgICAgdGlja0V4aXQgPSB0aWNrRXhpdC50cmFuc2l0aW9uKGNvbnRleHQpXG4gICAgICAgICAgLmF0dHIoXCJvcGFjaXR5XCIsIGVwc2lsb24pXG4gICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgZnVuY3Rpb24oZCkgeyByZXR1cm4gaXNGaW5pdGUoZCA9IHBvc2l0aW9uKGQpKSA/IHRyYW5zZm9ybShkKSA6IHRoaXMuZ2V0QXR0cmlidXRlKFwidHJhbnNmb3JtXCIpOyB9KTtcblxuICAgICAgdGlja0VudGVyXG4gICAgICAgICAgLmF0dHIoXCJvcGFjaXR5XCIsIGVwc2lsb24pXG4gICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgZnVuY3Rpb24oZCkgeyB2YXIgcCA9IHRoaXMucGFyZW50Tm9kZS5fX2F4aXM7IHJldHVybiB0cmFuc2Zvcm0ocCAmJiBpc0Zpbml0ZShwID0gcChkKSkgPyBwIDogcG9zaXRpb24oZCkpOyB9KTtcbiAgICB9XG5cbiAgICB0aWNrRXhpdC5yZW1vdmUoKTtcblxuICAgIHBhdGhcbiAgICAgICAgLmF0dHIoXCJkXCIsIG9yaWVudCA9PT0gbGVmdCB8fCBvcmllbnQgPT0gcmlnaHRcbiAgICAgICAgICAgID8gKHRpY2tTaXplT3V0ZXIgPyBcIk1cIiArIGsgKiB0aWNrU2l6ZU91dGVyICsgXCIsXCIgKyByYW5nZTAgKyBcIkgwLjVWXCIgKyByYW5nZTEgKyBcIkhcIiArIGsgKiB0aWNrU2l6ZU91dGVyIDogXCJNMC41LFwiICsgcmFuZ2UwICsgXCJWXCIgKyByYW5nZTEpXG4gICAgICAgICAgICA6ICh0aWNrU2l6ZU91dGVyID8gXCJNXCIgKyByYW5nZTAgKyBcIixcIiArIGsgKiB0aWNrU2l6ZU91dGVyICsgXCJWMC41SFwiICsgcmFuZ2UxICsgXCJWXCIgKyBrICogdGlja1NpemVPdXRlciA6IFwiTVwiICsgcmFuZ2UwICsgXCIsMC41SFwiICsgcmFuZ2UxKSk7XG5cbiAgICB0aWNrXG4gICAgICAgIC5hdHRyKFwib3BhY2l0eVwiLCAxKVxuICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBmdW5jdGlvbihkKSB7IHJldHVybiB0cmFuc2Zvcm0ocG9zaXRpb24oZCkpOyB9KTtcblxuICAgIGxpbmVcbiAgICAgICAgLmF0dHIoeCArIFwiMlwiLCBrICogdGlja1NpemVJbm5lcik7XG5cbiAgICB0ZXh0XG4gICAgICAgIC5hdHRyKHgsIGsgKiBzcGFjaW5nKVxuICAgICAgICAudGV4dChmb3JtYXQpO1xuXG4gICAgc2VsZWN0aW9uLmZpbHRlcihlbnRlcmluZylcbiAgICAgICAgLmF0dHIoXCJmaWxsXCIsIFwibm9uZVwiKVxuICAgICAgICAuYXR0cihcImZvbnQtc2l6ZVwiLCAxMClcbiAgICAgICAgLmF0dHIoXCJmb250LWZhbWlseVwiLCBcInNhbnMtc2VyaWZcIilcbiAgICAgICAgLmF0dHIoXCJ0ZXh0LWFuY2hvclwiLCBvcmllbnQgPT09IHJpZ2h0ID8gXCJzdGFydFwiIDogb3JpZW50ID09PSBsZWZ0ID8gXCJlbmRcIiA6IFwibWlkZGxlXCIpO1xuXG4gICAgc2VsZWN0aW9uXG4gICAgICAgIC5lYWNoKGZ1bmN0aW9uKCkgeyB0aGlzLl9fYXhpcyA9IHBvc2l0aW9uOyB9KTtcbiAgfVxuXG4gIGF4aXMuc2NhbGUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoc2NhbGUgPSBfLCBheGlzKSA6IHNjYWxlO1xuICB9O1xuXG4gIGF4aXMudGlja3MgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGlja0FyZ3VtZW50cyA9IHNsaWNlLmNhbGwoYXJndW1lbnRzKSwgYXhpcztcbiAgfTtcblxuICBheGlzLnRpY2tBcmd1bWVudHMgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodGlja0FyZ3VtZW50cyA9IF8gPT0gbnVsbCA/IFtdIDogc2xpY2UuY2FsbChfKSwgYXhpcykgOiB0aWNrQXJndW1lbnRzLnNsaWNlKCk7XG4gIH07XG5cbiAgYXhpcy50aWNrVmFsdWVzID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRpY2tWYWx1ZXMgPSBfID09IG51bGwgPyBudWxsIDogc2xpY2UuY2FsbChfKSwgYXhpcykgOiB0aWNrVmFsdWVzICYmIHRpY2tWYWx1ZXMuc2xpY2UoKTtcbiAgfTtcblxuICBheGlzLnRpY2tGb3JtYXQgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodGlja0Zvcm1hdCA9IF8sIGF4aXMpIDogdGlja0Zvcm1hdDtcbiAgfTtcblxuICBheGlzLnRpY2tTaXplID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRpY2tTaXplSW5uZXIgPSB0aWNrU2l6ZU91dGVyID0gK18sIGF4aXMpIDogdGlja1NpemVJbm5lcjtcbiAgfTtcblxuICBheGlzLnRpY2tTaXplSW5uZXIgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodGlja1NpemVJbm5lciA9ICtfLCBheGlzKSA6IHRpY2tTaXplSW5uZXI7XG4gIH07XG5cbiAgYXhpcy50aWNrU2l6ZU91dGVyID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRpY2tTaXplT3V0ZXIgPSArXywgYXhpcykgOiB0aWNrU2l6ZU91dGVyO1xuICB9O1xuXG4gIGF4aXMudGlja1BhZGRpbmcgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodGlja1BhZGRpbmcgPSArXywgYXhpcykgOiB0aWNrUGFkZGluZztcbiAgfTtcblxuICByZXR1cm4gYXhpcztcbn1cblxuZnVuY3Rpb24gYXhpc1RvcChzY2FsZSkge1xuICByZXR1cm4gYXhpcyh0b3AsIHNjYWxlKTtcbn1cblxuZnVuY3Rpb24gYXhpc1JpZ2h0KHNjYWxlKSB7XG4gIHJldHVybiBheGlzKHJpZ2h0LCBzY2FsZSk7XG59XG5cbmZ1bmN0aW9uIGF4aXNCb3R0b20oc2NhbGUpIHtcbiAgcmV0dXJuIGF4aXMoYm90dG9tLCBzY2FsZSk7XG59XG5cbmZ1bmN0aW9uIGF4aXNMZWZ0KHNjYWxlKSB7XG4gIHJldHVybiBheGlzKGxlZnQsIHNjYWxlKTtcbn1cblxuZXhwb3J0cy5heGlzVG9wID0gYXhpc1RvcDtcbmV4cG9ydHMuYXhpc1JpZ2h0ID0gYXhpc1JpZ2h0O1xuZXhwb3J0cy5heGlzQm90dG9tID0gYXhpc0JvdHRvbTtcbmV4cG9ydHMuYXhpc0xlZnQgPSBheGlzTGVmdDtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxufSkpKTtcbiIsIi8vIGh0dHBzOi8vZDNqcy5vcmcvZDMtY29sbGVjdGlvbi8gdjEuMC43IENvcHlyaWdodCAyMDE4IE1pa2UgQm9zdG9ja1xuKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbnR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyA/IGZhY3RvcnkoZXhwb3J0cykgOlxudHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnZXhwb3J0cyddLCBmYWN0b3J5KSA6XG4oZmFjdG9yeSgoZ2xvYmFsLmQzID0gZ2xvYmFsLmQzIHx8IHt9KSkpO1xufSh0aGlzLCAoZnVuY3Rpb24gKGV4cG9ydHMpIHsgJ3VzZSBzdHJpY3QnO1xuXG52YXIgcHJlZml4ID0gXCIkXCI7XG5cbmZ1bmN0aW9uIE1hcCgpIHt9XG5cbk1hcC5wcm90b3R5cGUgPSBtYXAucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogTWFwLFxuICBoYXM6IGZ1bmN0aW9uKGtleSkge1xuICAgIHJldHVybiAocHJlZml4ICsga2V5KSBpbiB0aGlzO1xuICB9LFxuICBnZXQ6IGZ1bmN0aW9uKGtleSkge1xuICAgIHJldHVybiB0aGlzW3ByZWZpeCArIGtleV07XG4gIH0sXG4gIHNldDogZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xuICAgIHRoaXNbcHJlZml4ICsga2V5XSA9IHZhbHVlO1xuICAgIHJldHVybiB0aGlzO1xuICB9LFxuICByZW1vdmU6IGZ1bmN0aW9uKGtleSkge1xuICAgIHZhciBwcm9wZXJ0eSA9IHByZWZpeCArIGtleTtcbiAgICByZXR1cm4gcHJvcGVydHkgaW4gdGhpcyAmJiBkZWxldGUgdGhpc1twcm9wZXJ0eV07XG4gIH0sXG4gIGNsZWFyOiBmdW5jdGlvbigpIHtcbiAgICBmb3IgKHZhciBwcm9wZXJ0eSBpbiB0aGlzKSBpZiAocHJvcGVydHlbMF0gPT09IHByZWZpeCkgZGVsZXRlIHRoaXNbcHJvcGVydHldO1xuICB9LFxuICBrZXlzOiBmdW5jdGlvbigpIHtcbiAgICB2YXIga2V5cyA9IFtdO1xuICAgIGZvciAodmFyIHByb3BlcnR5IGluIHRoaXMpIGlmIChwcm9wZXJ0eVswXSA9PT0gcHJlZml4KSBrZXlzLnB1c2gocHJvcGVydHkuc2xpY2UoMSkpO1xuICAgIHJldHVybiBrZXlzO1xuICB9LFxuICB2YWx1ZXM6IGZ1bmN0aW9uKCkge1xuICAgIHZhciB2YWx1ZXMgPSBbXTtcbiAgICBmb3IgKHZhciBwcm9wZXJ0eSBpbiB0aGlzKSBpZiAocHJvcGVydHlbMF0gPT09IHByZWZpeCkgdmFsdWVzLnB1c2godGhpc1twcm9wZXJ0eV0pO1xuICAgIHJldHVybiB2YWx1ZXM7XG4gIH0sXG4gIGVudHJpZXM6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBlbnRyaWVzID0gW107XG4gICAgZm9yICh2YXIgcHJvcGVydHkgaW4gdGhpcykgaWYgKHByb3BlcnR5WzBdID09PSBwcmVmaXgpIGVudHJpZXMucHVzaCh7a2V5OiBwcm9wZXJ0eS5zbGljZSgxKSwgdmFsdWU6IHRoaXNbcHJvcGVydHldfSk7XG4gICAgcmV0dXJuIGVudHJpZXM7XG4gIH0sXG4gIHNpemU6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBzaXplID0gMDtcbiAgICBmb3IgKHZhciBwcm9wZXJ0eSBpbiB0aGlzKSBpZiAocHJvcGVydHlbMF0gPT09IHByZWZpeCkgKytzaXplO1xuICAgIHJldHVybiBzaXplO1xuICB9LFxuICBlbXB0eTogZnVuY3Rpb24oKSB7XG4gICAgZm9yICh2YXIgcHJvcGVydHkgaW4gdGhpcykgaWYgKHByb3BlcnR5WzBdID09PSBwcmVmaXgpIHJldHVybiBmYWxzZTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSxcbiAgZWFjaDogZnVuY3Rpb24oZikge1xuICAgIGZvciAodmFyIHByb3BlcnR5IGluIHRoaXMpIGlmIChwcm9wZXJ0eVswXSA9PT0gcHJlZml4KSBmKHRoaXNbcHJvcGVydHldLCBwcm9wZXJ0eS5zbGljZSgxKSwgdGhpcyk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIG1hcChvYmplY3QsIGYpIHtcbiAgdmFyIG1hcCA9IG5ldyBNYXA7XG5cbiAgLy8gQ29weSBjb25zdHJ1Y3Rvci5cbiAgaWYgKG9iamVjdCBpbnN0YW5jZW9mIE1hcCkgb2JqZWN0LmVhY2goZnVuY3Rpb24odmFsdWUsIGtleSkgeyBtYXAuc2V0KGtleSwgdmFsdWUpOyB9KTtcblxuICAvLyBJbmRleCBhcnJheSBieSBudW1lcmljIGluZGV4IG9yIHNwZWNpZmllZCBrZXkgZnVuY3Rpb24uXG4gIGVsc2UgaWYgKEFycmF5LmlzQXJyYXkob2JqZWN0KSkge1xuICAgIHZhciBpID0gLTEsXG4gICAgICAgIG4gPSBvYmplY3QubGVuZ3RoLFxuICAgICAgICBvO1xuXG4gICAgaWYgKGYgPT0gbnVsbCkgd2hpbGUgKCsraSA8IG4pIG1hcC5zZXQoaSwgb2JqZWN0W2ldKTtcbiAgICBlbHNlIHdoaWxlICgrK2kgPCBuKSBtYXAuc2V0KGYobyA9IG9iamVjdFtpXSwgaSwgb2JqZWN0KSwgbyk7XG4gIH1cblxuICAvLyBDb252ZXJ0IG9iamVjdCB0byBtYXAuXG4gIGVsc2UgaWYgKG9iamVjdCkgZm9yICh2YXIga2V5IGluIG9iamVjdCkgbWFwLnNldChrZXksIG9iamVjdFtrZXldKTtcblxuICByZXR1cm4gbWFwO1xufVxuXG5mdW5jdGlvbiBuZXN0KCkge1xuICB2YXIga2V5cyA9IFtdLFxuICAgICAgc29ydEtleXMgPSBbXSxcbiAgICAgIHNvcnRWYWx1ZXMsXG4gICAgICByb2xsdXAsXG4gICAgICBuZXN0O1xuXG4gIGZ1bmN0aW9uIGFwcGx5KGFycmF5LCBkZXB0aCwgY3JlYXRlUmVzdWx0LCBzZXRSZXN1bHQpIHtcbiAgICBpZiAoZGVwdGggPj0ga2V5cy5sZW5ndGgpIHtcbiAgICAgIGlmIChzb3J0VmFsdWVzICE9IG51bGwpIGFycmF5LnNvcnQoc29ydFZhbHVlcyk7XG4gICAgICByZXR1cm4gcm9sbHVwICE9IG51bGwgPyByb2xsdXAoYXJyYXkpIDogYXJyYXk7XG4gICAgfVxuXG4gICAgdmFyIGkgPSAtMSxcbiAgICAgICAgbiA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAga2V5ID0ga2V5c1tkZXB0aCsrXSxcbiAgICAgICAga2V5VmFsdWUsXG4gICAgICAgIHZhbHVlLFxuICAgICAgICB2YWx1ZXNCeUtleSA9IG1hcCgpLFxuICAgICAgICB2YWx1ZXMsXG4gICAgICAgIHJlc3VsdCA9IGNyZWF0ZVJlc3VsdCgpO1xuXG4gICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgIGlmICh2YWx1ZXMgPSB2YWx1ZXNCeUtleS5nZXQoa2V5VmFsdWUgPSBrZXkodmFsdWUgPSBhcnJheVtpXSkgKyBcIlwiKSkge1xuICAgICAgICB2YWx1ZXMucHVzaCh2YWx1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YWx1ZXNCeUtleS5zZXQoa2V5VmFsdWUsIFt2YWx1ZV0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhbHVlc0J5S2V5LmVhY2goZnVuY3Rpb24odmFsdWVzLCBrZXkpIHtcbiAgICAgIHNldFJlc3VsdChyZXN1bHQsIGtleSwgYXBwbHkodmFsdWVzLCBkZXB0aCwgY3JlYXRlUmVzdWx0LCBzZXRSZXN1bHQpKTtcbiAgICB9KTtcblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBmdW5jdGlvbiBlbnRyaWVzKG1hcCQkMSwgZGVwdGgpIHtcbiAgICBpZiAoKytkZXB0aCA+IGtleXMubGVuZ3RoKSByZXR1cm4gbWFwJCQxO1xuICAgIHZhciBhcnJheSwgc29ydEtleSA9IHNvcnRLZXlzW2RlcHRoIC0gMV07XG4gICAgaWYgKHJvbGx1cCAhPSBudWxsICYmIGRlcHRoID49IGtleXMubGVuZ3RoKSBhcnJheSA9IG1hcCQkMS5lbnRyaWVzKCk7XG4gICAgZWxzZSBhcnJheSA9IFtdLCBtYXAkJDEuZWFjaChmdW5jdGlvbih2LCBrKSB7IGFycmF5LnB1c2goe2tleTogaywgdmFsdWVzOiBlbnRyaWVzKHYsIGRlcHRoKX0pOyB9KTtcbiAgICByZXR1cm4gc29ydEtleSAhPSBudWxsID8gYXJyYXkuc29ydChmdW5jdGlvbihhLCBiKSB7IHJldHVybiBzb3J0S2V5KGEua2V5LCBiLmtleSk7IH0pIDogYXJyYXk7XG4gIH1cblxuICByZXR1cm4gbmVzdCA9IHtcbiAgICBvYmplY3Q6IGZ1bmN0aW9uKGFycmF5KSB7IHJldHVybiBhcHBseShhcnJheSwgMCwgY3JlYXRlT2JqZWN0LCBzZXRPYmplY3QpOyB9LFxuICAgIG1hcDogZnVuY3Rpb24oYXJyYXkpIHsgcmV0dXJuIGFwcGx5KGFycmF5LCAwLCBjcmVhdGVNYXAsIHNldE1hcCk7IH0sXG4gICAgZW50cmllczogZnVuY3Rpb24oYXJyYXkpIHsgcmV0dXJuIGVudHJpZXMoYXBwbHkoYXJyYXksIDAsIGNyZWF0ZU1hcCwgc2V0TWFwKSwgMCk7IH0sXG4gICAga2V5OiBmdW5jdGlvbihkKSB7IGtleXMucHVzaChkKTsgcmV0dXJuIG5lc3Q7IH0sXG4gICAgc29ydEtleXM6IGZ1bmN0aW9uKG9yZGVyKSB7IHNvcnRLZXlzW2tleXMubGVuZ3RoIC0gMV0gPSBvcmRlcjsgcmV0dXJuIG5lc3Q7IH0sXG4gICAgc29ydFZhbHVlczogZnVuY3Rpb24ob3JkZXIpIHsgc29ydFZhbHVlcyA9IG9yZGVyOyByZXR1cm4gbmVzdDsgfSxcbiAgICByb2xsdXA6IGZ1bmN0aW9uKGYpIHsgcm9sbHVwID0gZjsgcmV0dXJuIG5lc3Q7IH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlT2JqZWN0KCkge1xuICByZXR1cm4ge307XG59XG5cbmZ1bmN0aW9uIHNldE9iamVjdChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgb2JqZWN0W2tleV0gPSB2YWx1ZTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlTWFwKCkge1xuICByZXR1cm4gbWFwKCk7XG59XG5cbmZ1bmN0aW9uIHNldE1hcChtYXAkJDEsIGtleSwgdmFsdWUpIHtcbiAgbWFwJCQxLnNldChrZXksIHZhbHVlKTtcbn1cblxuZnVuY3Rpb24gU2V0KCkge31cblxudmFyIHByb3RvID0gbWFwLnByb3RvdHlwZTtcblxuU2V0LnByb3RvdHlwZSA9IHNldC5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBTZXQsXG4gIGhhczogcHJvdG8uaGFzLFxuICBhZGQ6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgdmFsdWUgKz0gXCJcIjtcbiAgICB0aGlzW3ByZWZpeCArIHZhbHVlXSA9IHZhbHVlO1xuICAgIHJldHVybiB0aGlzO1xuICB9LFxuICByZW1vdmU6IHByb3RvLnJlbW92ZSxcbiAgY2xlYXI6IHByb3RvLmNsZWFyLFxuICB2YWx1ZXM6IHByb3RvLmtleXMsXG4gIHNpemU6IHByb3RvLnNpemUsXG4gIGVtcHR5OiBwcm90by5lbXB0eSxcbiAgZWFjaDogcHJvdG8uZWFjaFxufTtcblxuZnVuY3Rpb24gc2V0KG9iamVjdCwgZikge1xuICB2YXIgc2V0ID0gbmV3IFNldDtcblxuICAvLyBDb3B5IGNvbnN0cnVjdG9yLlxuICBpZiAob2JqZWN0IGluc3RhbmNlb2YgU2V0KSBvYmplY3QuZWFjaChmdW5jdGlvbih2YWx1ZSkgeyBzZXQuYWRkKHZhbHVlKTsgfSk7XG5cbiAgLy8gT3RoZXJ3aXNlLCBhc3N1bWUgaXTigJlzIGFuIGFycmF5LlxuICBlbHNlIGlmIChvYmplY3QpIHtcbiAgICB2YXIgaSA9IC0xLCBuID0gb2JqZWN0Lmxlbmd0aDtcbiAgICBpZiAoZiA9PSBudWxsKSB3aGlsZSAoKytpIDwgbikgc2V0LmFkZChvYmplY3RbaV0pO1xuICAgIGVsc2Ugd2hpbGUgKCsraSA8IG4pIHNldC5hZGQoZihvYmplY3RbaV0sIGksIG9iamVjdCkpO1xuICB9XG5cbiAgcmV0dXJuIHNldDtcbn1cblxuZnVuY3Rpb24ga2V5cyhtYXApIHtcbiAgdmFyIGtleXMgPSBbXTtcbiAgZm9yICh2YXIga2V5IGluIG1hcCkga2V5cy5wdXNoKGtleSk7XG4gIHJldHVybiBrZXlzO1xufVxuXG5mdW5jdGlvbiB2YWx1ZXMobWFwKSB7XG4gIHZhciB2YWx1ZXMgPSBbXTtcbiAgZm9yICh2YXIga2V5IGluIG1hcCkgdmFsdWVzLnB1c2gobWFwW2tleV0pO1xuICByZXR1cm4gdmFsdWVzO1xufVxuXG5mdW5jdGlvbiBlbnRyaWVzKG1hcCkge1xuICB2YXIgZW50cmllcyA9IFtdO1xuICBmb3IgKHZhciBrZXkgaW4gbWFwKSBlbnRyaWVzLnB1c2goe2tleToga2V5LCB2YWx1ZTogbWFwW2tleV19KTtcbiAgcmV0dXJuIGVudHJpZXM7XG59XG5cbmV4cG9ydHMubmVzdCA9IG5lc3Q7XG5leHBvcnRzLnNldCA9IHNldDtcbmV4cG9ydHMubWFwID0gbWFwO1xuZXhwb3J0cy5rZXlzID0ga2V5cztcbmV4cG9ydHMudmFsdWVzID0gdmFsdWVzO1xuZXhwb3J0cy5lbnRyaWVzID0gZW50cmllcztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxufSkpKTtcbiIsIi8vIGh0dHBzOi8vZDNqcy5vcmcvZDMtY29sb3IvIHYxLjQuMSBDb3B5cmlnaHQgMjAyMCBNaWtlIEJvc3RvY2tcbihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG50eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgPyBmYWN0b3J5KGV4cG9ydHMpIDpcbnR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJ2V4cG9ydHMnXSwgZmFjdG9yeSkgOlxuKGdsb2JhbCA9IGdsb2JhbCB8fCBzZWxmLCBmYWN0b3J5KGdsb2JhbC5kMyA9IGdsb2JhbC5kMyB8fCB7fSkpO1xufSh0aGlzLCBmdW5jdGlvbiAoZXhwb3J0cykgeyAndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIGRlZmluZShjb25zdHJ1Y3RvciwgZmFjdG9yeSwgcHJvdG90eXBlKSB7XG4gIGNvbnN0cnVjdG9yLnByb3RvdHlwZSA9IGZhY3RvcnkucHJvdG90eXBlID0gcHJvdG90eXBlO1xuICBwcm90b3R5cGUuY29uc3RydWN0b3IgPSBjb25zdHJ1Y3Rvcjtcbn1cblxuZnVuY3Rpb24gZXh0ZW5kKHBhcmVudCwgZGVmaW5pdGlvbikge1xuICB2YXIgcHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShwYXJlbnQucHJvdG90eXBlKTtcbiAgZm9yICh2YXIga2V5IGluIGRlZmluaXRpb24pIHByb3RvdHlwZVtrZXldID0gZGVmaW5pdGlvbltrZXldO1xuICByZXR1cm4gcHJvdG90eXBlO1xufVxuXG5mdW5jdGlvbiBDb2xvcigpIHt9XG5cbnZhciBkYXJrZXIgPSAwLjc7XG52YXIgYnJpZ2h0ZXIgPSAxIC8gZGFya2VyO1xuXG52YXIgcmVJID0gXCJcXFxccyooWystXT9cXFxcZCspXFxcXHMqXCIsXG4gICAgcmVOID0gXCJcXFxccyooWystXT9cXFxcZCpcXFxcLj9cXFxcZCsoPzpbZUVdWystXT9cXFxcZCspPylcXFxccypcIixcbiAgICByZVAgPSBcIlxcXFxzKihbKy1dP1xcXFxkKlxcXFwuP1xcXFxkKyg/OltlRV1bKy1dP1xcXFxkKyk/KSVcXFxccypcIixcbiAgICByZUhleCA9IC9eIyhbMC05YS1mXXszLDh9KSQvLFxuICAgIHJlUmdiSW50ZWdlciA9IG5ldyBSZWdFeHAoXCJecmdiXFxcXChcIiArIFtyZUksIHJlSSwgcmVJXSArIFwiXFxcXCkkXCIpLFxuICAgIHJlUmdiUGVyY2VudCA9IG5ldyBSZWdFeHAoXCJecmdiXFxcXChcIiArIFtyZVAsIHJlUCwgcmVQXSArIFwiXFxcXCkkXCIpLFxuICAgIHJlUmdiYUludGVnZXIgPSBuZXcgUmVnRXhwKFwiXnJnYmFcXFxcKFwiICsgW3JlSSwgcmVJLCByZUksIHJlTl0gKyBcIlxcXFwpJFwiKSxcbiAgICByZVJnYmFQZXJjZW50ID0gbmV3IFJlZ0V4cChcIl5yZ2JhXFxcXChcIiArIFtyZVAsIHJlUCwgcmVQLCByZU5dICsgXCJcXFxcKSRcIiksXG4gICAgcmVIc2xQZXJjZW50ID0gbmV3IFJlZ0V4cChcIl5oc2xcXFxcKFwiICsgW3JlTiwgcmVQLCByZVBdICsgXCJcXFxcKSRcIiksXG4gICAgcmVIc2xhUGVyY2VudCA9IG5ldyBSZWdFeHAoXCJeaHNsYVxcXFwoXCIgKyBbcmVOLCByZVAsIHJlUCwgcmVOXSArIFwiXFxcXCkkXCIpO1xuXG52YXIgbmFtZWQgPSB7XG4gIGFsaWNlYmx1ZTogMHhmMGY4ZmYsXG4gIGFudGlxdWV3aGl0ZTogMHhmYWViZDcsXG4gIGFxdWE6IDB4MDBmZmZmLFxuICBhcXVhbWFyaW5lOiAweDdmZmZkNCxcbiAgYXp1cmU6IDB4ZjBmZmZmLFxuICBiZWlnZTogMHhmNWY1ZGMsXG4gIGJpc3F1ZTogMHhmZmU0YzQsXG4gIGJsYWNrOiAweDAwMDAwMCxcbiAgYmxhbmNoZWRhbG1vbmQ6IDB4ZmZlYmNkLFxuICBibHVlOiAweDAwMDBmZixcbiAgYmx1ZXZpb2xldDogMHg4YTJiZTIsXG4gIGJyb3duOiAweGE1MmEyYSxcbiAgYnVybHl3b29kOiAweGRlYjg4NyxcbiAgY2FkZXRibHVlOiAweDVmOWVhMCxcbiAgY2hhcnRyZXVzZTogMHg3ZmZmMDAsXG4gIGNob2NvbGF0ZTogMHhkMjY5MWUsXG4gIGNvcmFsOiAweGZmN2Y1MCxcbiAgY29ybmZsb3dlcmJsdWU6IDB4NjQ5NWVkLFxuICBjb3Juc2lsazogMHhmZmY4ZGMsXG4gIGNyaW1zb246IDB4ZGMxNDNjLFxuICBjeWFuOiAweDAwZmZmZixcbiAgZGFya2JsdWU6IDB4MDAwMDhiLFxuICBkYXJrY3lhbjogMHgwMDhiOGIsXG4gIGRhcmtnb2xkZW5yb2Q6IDB4Yjg4NjBiLFxuICBkYXJrZ3JheTogMHhhOWE5YTksXG4gIGRhcmtncmVlbjogMHgwMDY0MDAsXG4gIGRhcmtncmV5OiAweGE5YTlhOSxcbiAgZGFya2toYWtpOiAweGJkYjc2YixcbiAgZGFya21hZ2VudGE6IDB4OGIwMDhiLFxuICBkYXJrb2xpdmVncmVlbjogMHg1NTZiMmYsXG4gIGRhcmtvcmFuZ2U6IDB4ZmY4YzAwLFxuICBkYXJrb3JjaGlkOiAweDk5MzJjYyxcbiAgZGFya3JlZDogMHg4YjAwMDAsXG4gIGRhcmtzYWxtb246IDB4ZTk5NjdhLFxuICBkYXJrc2VhZ3JlZW46IDB4OGZiYzhmLFxuICBkYXJrc2xhdGVibHVlOiAweDQ4M2Q4YixcbiAgZGFya3NsYXRlZ3JheTogMHgyZjRmNGYsXG4gIGRhcmtzbGF0ZWdyZXk6IDB4MmY0ZjRmLFxuICBkYXJrdHVycXVvaXNlOiAweDAwY2VkMSxcbiAgZGFya3Zpb2xldDogMHg5NDAwZDMsXG4gIGRlZXBwaW5rOiAweGZmMTQ5MyxcbiAgZGVlcHNreWJsdWU6IDB4MDBiZmZmLFxuICBkaW1ncmF5OiAweDY5Njk2OSxcbiAgZGltZ3JleTogMHg2OTY5NjksXG4gIGRvZGdlcmJsdWU6IDB4MWU5MGZmLFxuICBmaXJlYnJpY2s6IDB4YjIyMjIyLFxuICBmbG9yYWx3aGl0ZTogMHhmZmZhZjAsXG4gIGZvcmVzdGdyZWVuOiAweDIyOGIyMixcbiAgZnVjaHNpYTogMHhmZjAwZmYsXG4gIGdhaW5zYm9ybzogMHhkY2RjZGMsXG4gIGdob3N0d2hpdGU6IDB4ZjhmOGZmLFxuICBnb2xkOiAweGZmZDcwMCxcbiAgZ29sZGVucm9kOiAweGRhYTUyMCxcbiAgZ3JheTogMHg4MDgwODAsXG4gIGdyZWVuOiAweDAwODAwMCxcbiAgZ3JlZW55ZWxsb3c6IDB4YWRmZjJmLFxuICBncmV5OiAweDgwODA4MCxcbiAgaG9uZXlkZXc6IDB4ZjBmZmYwLFxuICBob3RwaW5rOiAweGZmNjliNCxcbiAgaW5kaWFucmVkOiAweGNkNWM1YyxcbiAgaW5kaWdvOiAweDRiMDA4MixcbiAgaXZvcnk6IDB4ZmZmZmYwLFxuICBraGFraTogMHhmMGU2OGMsXG4gIGxhdmVuZGVyOiAweGU2ZTZmYSxcbiAgbGF2ZW5kZXJibHVzaDogMHhmZmYwZjUsXG4gIGxhd25ncmVlbjogMHg3Y2ZjMDAsXG4gIGxlbW9uY2hpZmZvbjogMHhmZmZhY2QsXG4gIGxpZ2h0Ymx1ZTogMHhhZGQ4ZTYsXG4gIGxpZ2h0Y29yYWw6IDB4ZjA4MDgwLFxuICBsaWdodGN5YW46IDB4ZTBmZmZmLFxuICBsaWdodGdvbGRlbnJvZHllbGxvdzogMHhmYWZhZDIsXG4gIGxpZ2h0Z3JheTogMHhkM2QzZDMsXG4gIGxpZ2h0Z3JlZW46IDB4OTBlZTkwLFxuICBsaWdodGdyZXk6IDB4ZDNkM2QzLFxuICBsaWdodHBpbms6IDB4ZmZiNmMxLFxuICBsaWdodHNhbG1vbjogMHhmZmEwN2EsXG4gIGxpZ2h0c2VhZ3JlZW46IDB4MjBiMmFhLFxuICBsaWdodHNreWJsdWU6IDB4ODdjZWZhLFxuICBsaWdodHNsYXRlZ3JheTogMHg3Nzg4OTksXG4gIGxpZ2h0c2xhdGVncmV5OiAweDc3ODg5OSxcbiAgbGlnaHRzdGVlbGJsdWU6IDB4YjBjNGRlLFxuICBsaWdodHllbGxvdzogMHhmZmZmZTAsXG4gIGxpbWU6IDB4MDBmZjAwLFxuICBsaW1lZ3JlZW46IDB4MzJjZDMyLFxuICBsaW5lbjogMHhmYWYwZTYsXG4gIG1hZ2VudGE6IDB4ZmYwMGZmLFxuICBtYXJvb246IDB4ODAwMDAwLFxuICBtZWRpdW1hcXVhbWFyaW5lOiAweDY2Y2RhYSxcbiAgbWVkaXVtYmx1ZTogMHgwMDAwY2QsXG4gIG1lZGl1bW9yY2hpZDogMHhiYTU1ZDMsXG4gIG1lZGl1bXB1cnBsZTogMHg5MzcwZGIsXG4gIG1lZGl1bXNlYWdyZWVuOiAweDNjYjM3MSxcbiAgbWVkaXVtc2xhdGVibHVlOiAweDdiNjhlZSxcbiAgbWVkaXVtc3ByaW5nZ3JlZW46IDB4MDBmYTlhLFxuICBtZWRpdW10dXJxdW9pc2U6IDB4NDhkMWNjLFxuICBtZWRpdW12aW9sZXRyZWQ6IDB4YzcxNTg1LFxuICBtaWRuaWdodGJsdWU6IDB4MTkxOTcwLFxuICBtaW50Y3JlYW06IDB4ZjVmZmZhLFxuICBtaXN0eXJvc2U6IDB4ZmZlNGUxLFxuICBtb2NjYXNpbjogMHhmZmU0YjUsXG4gIG5hdmFqb3doaXRlOiAweGZmZGVhZCxcbiAgbmF2eTogMHgwMDAwODAsXG4gIG9sZGxhY2U6IDB4ZmRmNWU2LFxuICBvbGl2ZTogMHg4MDgwMDAsXG4gIG9saXZlZHJhYjogMHg2YjhlMjMsXG4gIG9yYW5nZTogMHhmZmE1MDAsXG4gIG9yYW5nZXJlZDogMHhmZjQ1MDAsXG4gIG9yY2hpZDogMHhkYTcwZDYsXG4gIHBhbGVnb2xkZW5yb2Q6IDB4ZWVlOGFhLFxuICBwYWxlZ3JlZW46IDB4OThmYjk4LFxuICBwYWxldHVycXVvaXNlOiAweGFmZWVlZSxcbiAgcGFsZXZpb2xldHJlZDogMHhkYjcwOTMsXG4gIHBhcGF5YXdoaXA6IDB4ZmZlZmQ1LFxuICBwZWFjaHB1ZmY6IDB4ZmZkYWI5LFxuICBwZXJ1OiAweGNkODUzZixcbiAgcGluazogMHhmZmMwY2IsXG4gIHBsdW06IDB4ZGRhMGRkLFxuICBwb3dkZXJibHVlOiAweGIwZTBlNixcbiAgcHVycGxlOiAweDgwMDA4MCxcbiAgcmViZWNjYXB1cnBsZTogMHg2NjMzOTksXG4gIHJlZDogMHhmZjAwMDAsXG4gIHJvc3licm93bjogMHhiYzhmOGYsXG4gIHJveWFsYmx1ZTogMHg0MTY5ZTEsXG4gIHNhZGRsZWJyb3duOiAweDhiNDUxMyxcbiAgc2FsbW9uOiAweGZhODA3MixcbiAgc2FuZHlicm93bjogMHhmNGE0NjAsXG4gIHNlYWdyZWVuOiAweDJlOGI1NyxcbiAgc2Vhc2hlbGw6IDB4ZmZmNWVlLFxuICBzaWVubmE6IDB4YTA1MjJkLFxuICBzaWx2ZXI6IDB4YzBjMGMwLFxuICBza3libHVlOiAweDg3Y2VlYixcbiAgc2xhdGVibHVlOiAweDZhNWFjZCxcbiAgc2xhdGVncmF5OiAweDcwODA5MCxcbiAgc2xhdGVncmV5OiAweDcwODA5MCxcbiAgc25vdzogMHhmZmZhZmEsXG4gIHNwcmluZ2dyZWVuOiAweDAwZmY3ZixcbiAgc3RlZWxibHVlOiAweDQ2ODJiNCxcbiAgdGFuOiAweGQyYjQ4YyxcbiAgdGVhbDogMHgwMDgwODAsXG4gIHRoaXN0bGU6IDB4ZDhiZmQ4LFxuICB0b21hdG86IDB4ZmY2MzQ3LFxuICB0dXJxdW9pc2U6IDB4NDBlMGQwLFxuICB2aW9sZXQ6IDB4ZWU4MmVlLFxuICB3aGVhdDogMHhmNWRlYjMsXG4gIHdoaXRlOiAweGZmZmZmZixcbiAgd2hpdGVzbW9rZTogMHhmNWY1ZjUsXG4gIHllbGxvdzogMHhmZmZmMDAsXG4gIHllbGxvd2dyZWVuOiAweDlhY2QzMlxufTtcblxuZGVmaW5lKENvbG9yLCBjb2xvciwge1xuICBjb3B5OiBmdW5jdGlvbihjaGFubmVscykge1xuICAgIHJldHVybiBPYmplY3QuYXNzaWduKG5ldyB0aGlzLmNvbnN0cnVjdG9yLCB0aGlzLCBjaGFubmVscyk7XG4gIH0sXG4gIGRpc3BsYXlhYmxlOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5yZ2IoKS5kaXNwbGF5YWJsZSgpO1xuICB9LFxuICBoZXg6IGNvbG9yX2Zvcm1hdEhleCwgLy8gRGVwcmVjYXRlZCEgVXNlIGNvbG9yLmZvcm1hdEhleC5cbiAgZm9ybWF0SGV4OiBjb2xvcl9mb3JtYXRIZXgsXG4gIGZvcm1hdEhzbDogY29sb3JfZm9ybWF0SHNsLFxuICBmb3JtYXRSZ2I6IGNvbG9yX2Zvcm1hdFJnYixcbiAgdG9TdHJpbmc6IGNvbG9yX2Zvcm1hdFJnYlxufSk7XG5cbmZ1bmN0aW9uIGNvbG9yX2Zvcm1hdEhleCgpIHtcbiAgcmV0dXJuIHRoaXMucmdiKCkuZm9ybWF0SGV4KCk7XG59XG5cbmZ1bmN0aW9uIGNvbG9yX2Zvcm1hdEhzbCgpIHtcbiAgcmV0dXJuIGhzbENvbnZlcnQodGhpcykuZm9ybWF0SHNsKCk7XG59XG5cbmZ1bmN0aW9uIGNvbG9yX2Zvcm1hdFJnYigpIHtcbiAgcmV0dXJuIHRoaXMucmdiKCkuZm9ybWF0UmdiKCk7XG59XG5cbmZ1bmN0aW9uIGNvbG9yKGZvcm1hdCkge1xuICB2YXIgbSwgbDtcbiAgZm9ybWF0ID0gKGZvcm1hdCArIFwiXCIpLnRyaW0oKS50b0xvd2VyQ2FzZSgpO1xuICByZXR1cm4gKG0gPSByZUhleC5leGVjKGZvcm1hdCkpID8gKGwgPSBtWzFdLmxlbmd0aCwgbSA9IHBhcnNlSW50KG1bMV0sIDE2KSwgbCA9PT0gNiA/IHJnYm4obSkgLy8gI2ZmMDAwMFxuICAgICAgOiBsID09PSAzID8gbmV3IFJnYigobSA+PiA4ICYgMHhmKSB8IChtID4+IDQgJiAweGYwKSwgKG0gPj4gNCAmIDB4ZikgfCAobSAmIDB4ZjApLCAoKG0gJiAweGYpIDw8IDQpIHwgKG0gJiAweGYpLCAxKSAvLyAjZjAwXG4gICAgICA6IGwgPT09IDggPyByZ2JhKG0gPj4gMjQgJiAweGZmLCBtID4+IDE2ICYgMHhmZiwgbSA+PiA4ICYgMHhmZiwgKG0gJiAweGZmKSAvIDB4ZmYpIC8vICNmZjAwMDAwMFxuICAgICAgOiBsID09PSA0ID8gcmdiYSgobSA+PiAxMiAmIDB4ZikgfCAobSA+PiA4ICYgMHhmMCksIChtID4+IDggJiAweGYpIHwgKG0gPj4gNCAmIDB4ZjApLCAobSA+PiA0ICYgMHhmKSB8IChtICYgMHhmMCksICgoKG0gJiAweGYpIDw8IDQpIHwgKG0gJiAweGYpKSAvIDB4ZmYpIC8vICNmMDAwXG4gICAgICA6IG51bGwpIC8vIGludmFsaWQgaGV4XG4gICAgICA6IChtID0gcmVSZ2JJbnRlZ2VyLmV4ZWMoZm9ybWF0KSkgPyBuZXcgUmdiKG1bMV0sIG1bMl0sIG1bM10sIDEpIC8vIHJnYigyNTUsIDAsIDApXG4gICAgICA6IChtID0gcmVSZ2JQZXJjZW50LmV4ZWMoZm9ybWF0KSkgPyBuZXcgUmdiKG1bMV0gKiAyNTUgLyAxMDAsIG1bMl0gKiAyNTUgLyAxMDAsIG1bM10gKiAyNTUgLyAxMDAsIDEpIC8vIHJnYigxMDAlLCAwJSwgMCUpXG4gICAgICA6IChtID0gcmVSZ2JhSW50ZWdlci5leGVjKGZvcm1hdCkpID8gcmdiYShtWzFdLCBtWzJdLCBtWzNdLCBtWzRdKSAvLyByZ2JhKDI1NSwgMCwgMCwgMSlcbiAgICAgIDogKG0gPSByZVJnYmFQZXJjZW50LmV4ZWMoZm9ybWF0KSkgPyByZ2JhKG1bMV0gKiAyNTUgLyAxMDAsIG1bMl0gKiAyNTUgLyAxMDAsIG1bM10gKiAyNTUgLyAxMDAsIG1bNF0pIC8vIHJnYigxMDAlLCAwJSwgMCUsIDEpXG4gICAgICA6IChtID0gcmVIc2xQZXJjZW50LmV4ZWMoZm9ybWF0KSkgPyBoc2xhKG1bMV0sIG1bMl0gLyAxMDAsIG1bM10gLyAxMDAsIDEpIC8vIGhzbCgxMjAsIDUwJSwgNTAlKVxuICAgICAgOiAobSA9IHJlSHNsYVBlcmNlbnQuZXhlYyhmb3JtYXQpKSA/IGhzbGEobVsxXSwgbVsyXSAvIDEwMCwgbVszXSAvIDEwMCwgbVs0XSkgLy8gaHNsYSgxMjAsIDUwJSwgNTAlLCAxKVxuICAgICAgOiBuYW1lZC5oYXNPd25Qcm9wZXJ0eShmb3JtYXQpID8gcmdibihuYW1lZFtmb3JtYXRdKSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXByb3RvdHlwZS1idWlsdGluc1xuICAgICAgOiBmb3JtYXQgPT09IFwidHJhbnNwYXJlbnRcIiA/IG5ldyBSZ2IoTmFOLCBOYU4sIE5hTiwgMClcbiAgICAgIDogbnVsbDtcbn1cblxuZnVuY3Rpb24gcmdibihuKSB7XG4gIHJldHVybiBuZXcgUmdiKG4gPj4gMTYgJiAweGZmLCBuID4+IDggJiAweGZmLCBuICYgMHhmZiwgMSk7XG59XG5cbmZ1bmN0aW9uIHJnYmEociwgZywgYiwgYSkge1xuICBpZiAoYSA8PSAwKSByID0gZyA9IGIgPSBOYU47XG4gIHJldHVybiBuZXcgUmdiKHIsIGcsIGIsIGEpO1xufVxuXG5mdW5jdGlvbiByZ2JDb252ZXJ0KG8pIHtcbiAgaWYgKCEobyBpbnN0YW5jZW9mIENvbG9yKSkgbyA9IGNvbG9yKG8pO1xuICBpZiAoIW8pIHJldHVybiBuZXcgUmdiO1xuICBvID0gby5yZ2IoKTtcbiAgcmV0dXJuIG5ldyBSZ2Ioby5yLCBvLmcsIG8uYiwgby5vcGFjaXR5KTtcbn1cblxuZnVuY3Rpb24gcmdiKHIsIGcsIGIsIG9wYWNpdHkpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPT09IDEgPyByZ2JDb252ZXJ0KHIpIDogbmV3IFJnYihyLCBnLCBiLCBvcGFjaXR5ID09IG51bGwgPyAxIDogb3BhY2l0eSk7XG59XG5cbmZ1bmN0aW9uIFJnYihyLCBnLCBiLCBvcGFjaXR5KSB7XG4gIHRoaXMuciA9ICtyO1xuICB0aGlzLmcgPSArZztcbiAgdGhpcy5iID0gK2I7XG4gIHRoaXMub3BhY2l0eSA9ICtvcGFjaXR5O1xufVxuXG5kZWZpbmUoUmdiLCByZ2IsIGV4dGVuZChDb2xvciwge1xuICBicmlnaHRlcjogZnVuY3Rpb24oaykge1xuICAgIGsgPSBrID09IG51bGwgPyBicmlnaHRlciA6IE1hdGgucG93KGJyaWdodGVyLCBrKTtcbiAgICByZXR1cm4gbmV3IFJnYih0aGlzLnIgKiBrLCB0aGlzLmcgKiBrLCB0aGlzLmIgKiBrLCB0aGlzLm9wYWNpdHkpO1xuICB9LFxuICBkYXJrZXI6IGZ1bmN0aW9uKGspIHtcbiAgICBrID0gayA9PSBudWxsID8gZGFya2VyIDogTWF0aC5wb3coZGFya2VyLCBrKTtcbiAgICByZXR1cm4gbmV3IFJnYih0aGlzLnIgKiBrLCB0aGlzLmcgKiBrLCB0aGlzLmIgKiBrLCB0aGlzLm9wYWNpdHkpO1xuICB9LFxuICByZ2I6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9LFxuICBkaXNwbGF5YWJsZTogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuICgtMC41IDw9IHRoaXMuciAmJiB0aGlzLnIgPCAyNTUuNSlcbiAgICAgICAgJiYgKC0wLjUgPD0gdGhpcy5nICYmIHRoaXMuZyA8IDI1NS41KVxuICAgICAgICAmJiAoLTAuNSA8PSB0aGlzLmIgJiYgdGhpcy5iIDwgMjU1LjUpXG4gICAgICAgICYmICgwIDw9IHRoaXMub3BhY2l0eSAmJiB0aGlzLm9wYWNpdHkgPD0gMSk7XG4gIH0sXG4gIGhleDogcmdiX2Zvcm1hdEhleCwgLy8gRGVwcmVjYXRlZCEgVXNlIGNvbG9yLmZvcm1hdEhleC5cbiAgZm9ybWF0SGV4OiByZ2JfZm9ybWF0SGV4LFxuICBmb3JtYXRSZ2I6IHJnYl9mb3JtYXRSZ2IsXG4gIHRvU3RyaW5nOiByZ2JfZm9ybWF0UmdiXG59KSk7XG5cbmZ1bmN0aW9uIHJnYl9mb3JtYXRIZXgoKSB7XG4gIHJldHVybiBcIiNcIiArIGhleCh0aGlzLnIpICsgaGV4KHRoaXMuZykgKyBoZXgodGhpcy5iKTtcbn1cblxuZnVuY3Rpb24gcmdiX2Zvcm1hdFJnYigpIHtcbiAgdmFyIGEgPSB0aGlzLm9wYWNpdHk7IGEgPSBpc05hTihhKSA/IDEgOiBNYXRoLm1heCgwLCBNYXRoLm1pbigxLCBhKSk7XG4gIHJldHVybiAoYSA9PT0gMSA/IFwicmdiKFwiIDogXCJyZ2JhKFwiKVxuICAgICAgKyBNYXRoLm1heCgwLCBNYXRoLm1pbigyNTUsIE1hdGgucm91bmQodGhpcy5yKSB8fCAwKSkgKyBcIiwgXCJcbiAgICAgICsgTWF0aC5tYXgoMCwgTWF0aC5taW4oMjU1LCBNYXRoLnJvdW5kKHRoaXMuZykgfHwgMCkpICsgXCIsIFwiXG4gICAgICArIE1hdGgubWF4KDAsIE1hdGgubWluKDI1NSwgTWF0aC5yb3VuZCh0aGlzLmIpIHx8IDApKVxuICAgICAgKyAoYSA9PT0gMSA/IFwiKVwiIDogXCIsIFwiICsgYSArIFwiKVwiKTtcbn1cblxuZnVuY3Rpb24gaGV4KHZhbHVlKSB7XG4gIHZhbHVlID0gTWF0aC5tYXgoMCwgTWF0aC5taW4oMjU1LCBNYXRoLnJvdW5kKHZhbHVlKSB8fCAwKSk7XG4gIHJldHVybiAodmFsdWUgPCAxNiA/IFwiMFwiIDogXCJcIikgKyB2YWx1ZS50b1N0cmluZygxNik7XG59XG5cbmZ1bmN0aW9uIGhzbGEoaCwgcywgbCwgYSkge1xuICBpZiAoYSA8PSAwKSBoID0gcyA9IGwgPSBOYU47XG4gIGVsc2UgaWYgKGwgPD0gMCB8fCBsID49IDEpIGggPSBzID0gTmFOO1xuICBlbHNlIGlmIChzIDw9IDApIGggPSBOYU47XG4gIHJldHVybiBuZXcgSHNsKGgsIHMsIGwsIGEpO1xufVxuXG5mdW5jdGlvbiBoc2xDb252ZXJ0KG8pIHtcbiAgaWYgKG8gaW5zdGFuY2VvZiBIc2wpIHJldHVybiBuZXcgSHNsKG8uaCwgby5zLCBvLmwsIG8ub3BhY2l0eSk7XG4gIGlmICghKG8gaW5zdGFuY2VvZiBDb2xvcikpIG8gPSBjb2xvcihvKTtcbiAgaWYgKCFvKSByZXR1cm4gbmV3IEhzbDtcbiAgaWYgKG8gaW5zdGFuY2VvZiBIc2wpIHJldHVybiBvO1xuICBvID0gby5yZ2IoKTtcbiAgdmFyIHIgPSBvLnIgLyAyNTUsXG4gICAgICBnID0gby5nIC8gMjU1LFxuICAgICAgYiA9IG8uYiAvIDI1NSxcbiAgICAgIG1pbiA9IE1hdGgubWluKHIsIGcsIGIpLFxuICAgICAgbWF4ID0gTWF0aC5tYXgociwgZywgYiksXG4gICAgICBoID0gTmFOLFxuICAgICAgcyA9IG1heCAtIG1pbixcbiAgICAgIGwgPSAobWF4ICsgbWluKSAvIDI7XG4gIGlmIChzKSB7XG4gICAgaWYgKHIgPT09IG1heCkgaCA9IChnIC0gYikgLyBzICsgKGcgPCBiKSAqIDY7XG4gICAgZWxzZSBpZiAoZyA9PT0gbWF4KSBoID0gKGIgLSByKSAvIHMgKyAyO1xuICAgIGVsc2UgaCA9IChyIC0gZykgLyBzICsgNDtcbiAgICBzIC89IGwgPCAwLjUgPyBtYXggKyBtaW4gOiAyIC0gbWF4IC0gbWluO1xuICAgIGggKj0gNjA7XG4gIH0gZWxzZSB7XG4gICAgcyA9IGwgPiAwICYmIGwgPCAxID8gMCA6IGg7XG4gIH1cbiAgcmV0dXJuIG5ldyBIc2woaCwgcywgbCwgby5vcGFjaXR5KTtcbn1cblxuZnVuY3Rpb24gaHNsKGgsIHMsIGwsIG9wYWNpdHkpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPT09IDEgPyBoc2xDb252ZXJ0KGgpIDogbmV3IEhzbChoLCBzLCBsLCBvcGFjaXR5ID09IG51bGwgPyAxIDogb3BhY2l0eSk7XG59XG5cbmZ1bmN0aW9uIEhzbChoLCBzLCBsLCBvcGFjaXR5KSB7XG4gIHRoaXMuaCA9ICtoO1xuICB0aGlzLnMgPSArcztcbiAgdGhpcy5sID0gK2w7XG4gIHRoaXMub3BhY2l0eSA9ICtvcGFjaXR5O1xufVxuXG5kZWZpbmUoSHNsLCBoc2wsIGV4dGVuZChDb2xvciwge1xuICBicmlnaHRlcjogZnVuY3Rpb24oaykge1xuICAgIGsgPSBrID09IG51bGwgPyBicmlnaHRlciA6IE1hdGgucG93KGJyaWdodGVyLCBrKTtcbiAgICByZXR1cm4gbmV3IEhzbCh0aGlzLmgsIHRoaXMucywgdGhpcy5sICogaywgdGhpcy5vcGFjaXR5KTtcbiAgfSxcbiAgZGFya2VyOiBmdW5jdGlvbihrKSB7XG4gICAgayA9IGsgPT0gbnVsbCA/IGRhcmtlciA6IE1hdGgucG93KGRhcmtlciwgayk7XG4gICAgcmV0dXJuIG5ldyBIc2wodGhpcy5oLCB0aGlzLnMsIHRoaXMubCAqIGssIHRoaXMub3BhY2l0eSk7XG4gIH0sXG4gIHJnYjogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGggPSB0aGlzLmggJSAzNjAgKyAodGhpcy5oIDwgMCkgKiAzNjAsXG4gICAgICAgIHMgPSBpc05hTihoKSB8fCBpc05hTih0aGlzLnMpID8gMCA6IHRoaXMucyxcbiAgICAgICAgbCA9IHRoaXMubCxcbiAgICAgICAgbTIgPSBsICsgKGwgPCAwLjUgPyBsIDogMSAtIGwpICogcyxcbiAgICAgICAgbTEgPSAyICogbCAtIG0yO1xuICAgIHJldHVybiBuZXcgUmdiKFxuICAgICAgaHNsMnJnYihoID49IDI0MCA/IGggLSAyNDAgOiBoICsgMTIwLCBtMSwgbTIpLFxuICAgICAgaHNsMnJnYihoLCBtMSwgbTIpLFxuICAgICAgaHNsMnJnYihoIDwgMTIwID8gaCArIDI0MCA6IGggLSAxMjAsIG0xLCBtMiksXG4gICAgICB0aGlzLm9wYWNpdHlcbiAgICApO1xuICB9LFxuICBkaXNwbGF5YWJsZTogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuICgwIDw9IHRoaXMucyAmJiB0aGlzLnMgPD0gMSB8fCBpc05hTih0aGlzLnMpKVxuICAgICAgICAmJiAoMCA8PSB0aGlzLmwgJiYgdGhpcy5sIDw9IDEpXG4gICAgICAgICYmICgwIDw9IHRoaXMub3BhY2l0eSAmJiB0aGlzLm9wYWNpdHkgPD0gMSk7XG4gIH0sXG4gIGZvcm1hdEhzbDogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGEgPSB0aGlzLm9wYWNpdHk7IGEgPSBpc05hTihhKSA/IDEgOiBNYXRoLm1heCgwLCBNYXRoLm1pbigxLCBhKSk7XG4gICAgcmV0dXJuIChhID09PSAxID8gXCJoc2woXCIgOiBcImhzbGEoXCIpXG4gICAgICAgICsgKHRoaXMuaCB8fCAwKSArIFwiLCBcIlxuICAgICAgICArICh0aGlzLnMgfHwgMCkgKiAxMDAgKyBcIiUsIFwiXG4gICAgICAgICsgKHRoaXMubCB8fCAwKSAqIDEwMCArIFwiJVwiXG4gICAgICAgICsgKGEgPT09IDEgPyBcIilcIiA6IFwiLCBcIiArIGEgKyBcIilcIik7XG4gIH1cbn0pKTtcblxuLyogRnJvbSBGdkQgMTMuMzcsIENTUyBDb2xvciBNb2R1bGUgTGV2ZWwgMyAqL1xuZnVuY3Rpb24gaHNsMnJnYihoLCBtMSwgbTIpIHtcbiAgcmV0dXJuIChoIDwgNjAgPyBtMSArIChtMiAtIG0xKSAqIGggLyA2MFxuICAgICAgOiBoIDwgMTgwID8gbTJcbiAgICAgIDogaCA8IDI0MCA/IG0xICsgKG0yIC0gbTEpICogKDI0MCAtIGgpIC8gNjBcbiAgICAgIDogbTEpICogMjU1O1xufVxuXG52YXIgZGVnMnJhZCA9IE1hdGguUEkgLyAxODA7XG52YXIgcmFkMmRlZyA9IDE4MCAvIE1hdGguUEk7XG5cbi8vIGh0dHBzOi8vb2JzZXJ2YWJsZWhxLmNvbS9AbWJvc3RvY2svbGFiLWFuZC1yZ2JcbnZhciBLID0gMTgsXG4gICAgWG4gPSAwLjk2NDIyLFxuICAgIFluID0gMSxcbiAgICBabiA9IDAuODI1MjEsXG4gICAgdDAgPSA0IC8gMjksXG4gICAgdDEgPSA2IC8gMjksXG4gICAgdDIgPSAzICogdDEgKiB0MSxcbiAgICB0MyA9IHQxICogdDEgKiB0MTtcblxuZnVuY3Rpb24gbGFiQ29udmVydChvKSB7XG4gIGlmIChvIGluc3RhbmNlb2YgTGFiKSByZXR1cm4gbmV3IExhYihvLmwsIG8uYSwgby5iLCBvLm9wYWNpdHkpO1xuICBpZiAobyBpbnN0YW5jZW9mIEhjbCkgcmV0dXJuIGhjbDJsYWIobyk7XG4gIGlmICghKG8gaW5zdGFuY2VvZiBSZ2IpKSBvID0gcmdiQ29udmVydChvKTtcbiAgdmFyIHIgPSByZ2IybHJnYihvLnIpLFxuICAgICAgZyA9IHJnYjJscmdiKG8uZyksXG4gICAgICBiID0gcmdiMmxyZ2Ioby5iKSxcbiAgICAgIHkgPSB4eXoybGFiKCgwLjIyMjUwNDUgKiByICsgMC43MTY4Nzg2ICogZyArIDAuMDYwNjE2OSAqIGIpIC8gWW4pLCB4LCB6O1xuICBpZiAociA9PT0gZyAmJiBnID09PSBiKSB4ID0geiA9IHk7IGVsc2Uge1xuICAgIHggPSB4eXoybGFiKCgwLjQzNjA3NDcgKiByICsgMC4zODUwNjQ5ICogZyArIDAuMTQzMDgwNCAqIGIpIC8gWG4pO1xuICAgIHogPSB4eXoybGFiKCgwLjAxMzkzMjIgKiByICsgMC4wOTcxMDQ1ICogZyArIDAuNzE0MTczMyAqIGIpIC8gWm4pO1xuICB9XG4gIHJldHVybiBuZXcgTGFiKDExNiAqIHkgLSAxNiwgNTAwICogKHggLSB5KSwgMjAwICogKHkgLSB6KSwgby5vcGFjaXR5KTtcbn1cblxuZnVuY3Rpb24gZ3JheShsLCBvcGFjaXR5KSB7XG4gIHJldHVybiBuZXcgTGFiKGwsIDAsIDAsIG9wYWNpdHkgPT0gbnVsbCA/IDEgOiBvcGFjaXR5KTtcbn1cblxuZnVuY3Rpb24gbGFiKGwsIGEsIGIsIG9wYWNpdHkpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPT09IDEgPyBsYWJDb252ZXJ0KGwpIDogbmV3IExhYihsLCBhLCBiLCBvcGFjaXR5ID09IG51bGwgPyAxIDogb3BhY2l0eSk7XG59XG5cbmZ1bmN0aW9uIExhYihsLCBhLCBiLCBvcGFjaXR5KSB7XG4gIHRoaXMubCA9ICtsO1xuICB0aGlzLmEgPSArYTtcbiAgdGhpcy5iID0gK2I7XG4gIHRoaXMub3BhY2l0eSA9ICtvcGFjaXR5O1xufVxuXG5kZWZpbmUoTGFiLCBsYWIsIGV4dGVuZChDb2xvciwge1xuICBicmlnaHRlcjogZnVuY3Rpb24oaykge1xuICAgIHJldHVybiBuZXcgTGFiKHRoaXMubCArIEsgKiAoayA9PSBudWxsID8gMSA6IGspLCB0aGlzLmEsIHRoaXMuYiwgdGhpcy5vcGFjaXR5KTtcbiAgfSxcbiAgZGFya2VyOiBmdW5jdGlvbihrKSB7XG4gICAgcmV0dXJuIG5ldyBMYWIodGhpcy5sIC0gSyAqIChrID09IG51bGwgPyAxIDogayksIHRoaXMuYSwgdGhpcy5iLCB0aGlzLm9wYWNpdHkpO1xuICB9LFxuICByZ2I6IGZ1bmN0aW9uKCkge1xuICAgIHZhciB5ID0gKHRoaXMubCArIDE2KSAvIDExNixcbiAgICAgICAgeCA9IGlzTmFOKHRoaXMuYSkgPyB5IDogeSArIHRoaXMuYSAvIDUwMCxcbiAgICAgICAgeiA9IGlzTmFOKHRoaXMuYikgPyB5IDogeSAtIHRoaXMuYiAvIDIwMDtcbiAgICB4ID0gWG4gKiBsYWIyeHl6KHgpO1xuICAgIHkgPSBZbiAqIGxhYjJ4eXooeSk7XG4gICAgeiA9IFpuICogbGFiMnh5eih6KTtcbiAgICByZXR1cm4gbmV3IFJnYihcbiAgICAgIGxyZ2IycmdiKCAzLjEzMzg1NjEgKiB4IC0gMS42MTY4NjY3ICogeSAtIDAuNDkwNjE0NiAqIHopLFxuICAgICAgbHJnYjJyZ2IoLTAuOTc4NzY4NCAqIHggKyAxLjkxNjE0MTUgKiB5ICsgMC4wMzM0NTQwICogeiksXG4gICAgICBscmdiMnJnYiggMC4wNzE5NDUzICogeCAtIDAuMjI4OTkxNCAqIHkgKyAxLjQwNTI0MjcgKiB6KSxcbiAgICAgIHRoaXMub3BhY2l0eVxuICAgICk7XG4gIH1cbn0pKTtcblxuZnVuY3Rpb24geHl6MmxhYih0KSB7XG4gIHJldHVybiB0ID4gdDMgPyBNYXRoLnBvdyh0LCAxIC8gMykgOiB0IC8gdDIgKyB0MDtcbn1cblxuZnVuY3Rpb24gbGFiMnh5eih0KSB7XG4gIHJldHVybiB0ID4gdDEgPyB0ICogdCAqIHQgOiB0MiAqICh0IC0gdDApO1xufVxuXG5mdW5jdGlvbiBscmdiMnJnYih4KSB7XG4gIHJldHVybiAyNTUgKiAoeCA8PSAwLjAwMzEzMDggPyAxMi45MiAqIHggOiAxLjA1NSAqIE1hdGgucG93KHgsIDEgLyAyLjQpIC0gMC4wNTUpO1xufVxuXG5mdW5jdGlvbiByZ2IybHJnYih4KSB7XG4gIHJldHVybiAoeCAvPSAyNTUpIDw9IDAuMDQwNDUgPyB4IC8gMTIuOTIgOiBNYXRoLnBvdygoeCArIDAuMDU1KSAvIDEuMDU1LCAyLjQpO1xufVxuXG5mdW5jdGlvbiBoY2xDb252ZXJ0KG8pIHtcbiAgaWYgKG8gaW5zdGFuY2VvZiBIY2wpIHJldHVybiBuZXcgSGNsKG8uaCwgby5jLCBvLmwsIG8ub3BhY2l0eSk7XG4gIGlmICghKG8gaW5zdGFuY2VvZiBMYWIpKSBvID0gbGFiQ29udmVydChvKTtcbiAgaWYgKG8uYSA9PT0gMCAmJiBvLmIgPT09IDApIHJldHVybiBuZXcgSGNsKE5hTiwgMCA8IG8ubCAmJiBvLmwgPCAxMDAgPyAwIDogTmFOLCBvLmwsIG8ub3BhY2l0eSk7XG4gIHZhciBoID0gTWF0aC5hdGFuMihvLmIsIG8uYSkgKiByYWQyZGVnO1xuICByZXR1cm4gbmV3IEhjbChoIDwgMCA/IGggKyAzNjAgOiBoLCBNYXRoLnNxcnQoby5hICogby5hICsgby5iICogby5iKSwgby5sLCBvLm9wYWNpdHkpO1xufVxuXG5mdW5jdGlvbiBsY2gobCwgYywgaCwgb3BhY2l0eSkge1xuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA9PT0gMSA/IGhjbENvbnZlcnQobCkgOiBuZXcgSGNsKGgsIGMsIGwsIG9wYWNpdHkgPT0gbnVsbCA/IDEgOiBvcGFjaXR5KTtcbn1cblxuZnVuY3Rpb24gaGNsKGgsIGMsIGwsIG9wYWNpdHkpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPT09IDEgPyBoY2xDb252ZXJ0KGgpIDogbmV3IEhjbChoLCBjLCBsLCBvcGFjaXR5ID09IG51bGwgPyAxIDogb3BhY2l0eSk7XG59XG5cbmZ1bmN0aW9uIEhjbChoLCBjLCBsLCBvcGFjaXR5KSB7XG4gIHRoaXMuaCA9ICtoO1xuICB0aGlzLmMgPSArYztcbiAgdGhpcy5sID0gK2w7XG4gIHRoaXMub3BhY2l0eSA9ICtvcGFjaXR5O1xufVxuXG5mdW5jdGlvbiBoY2wybGFiKG8pIHtcbiAgaWYgKGlzTmFOKG8uaCkpIHJldHVybiBuZXcgTGFiKG8ubCwgMCwgMCwgby5vcGFjaXR5KTtcbiAgdmFyIGggPSBvLmggKiBkZWcycmFkO1xuICByZXR1cm4gbmV3IExhYihvLmwsIE1hdGguY29zKGgpICogby5jLCBNYXRoLnNpbihoKSAqIG8uYywgby5vcGFjaXR5KTtcbn1cblxuZGVmaW5lKEhjbCwgaGNsLCBleHRlbmQoQ29sb3IsIHtcbiAgYnJpZ2h0ZXI6IGZ1bmN0aW9uKGspIHtcbiAgICByZXR1cm4gbmV3IEhjbCh0aGlzLmgsIHRoaXMuYywgdGhpcy5sICsgSyAqIChrID09IG51bGwgPyAxIDogayksIHRoaXMub3BhY2l0eSk7XG4gIH0sXG4gIGRhcmtlcjogZnVuY3Rpb24oaykge1xuICAgIHJldHVybiBuZXcgSGNsKHRoaXMuaCwgdGhpcy5jLCB0aGlzLmwgLSBLICogKGsgPT0gbnVsbCA/IDEgOiBrKSwgdGhpcy5vcGFjaXR5KTtcbiAgfSxcbiAgcmdiOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gaGNsMmxhYih0aGlzKS5yZ2IoKTtcbiAgfVxufSkpO1xuXG52YXIgQSA9IC0wLjE0ODYxLFxuICAgIEIgPSArMS43ODI3NyxcbiAgICBDID0gLTAuMjkyMjcsXG4gICAgRCA9IC0wLjkwNjQ5LFxuICAgIEUgPSArMS45NzI5NCxcbiAgICBFRCA9IEUgKiBELFxuICAgIEVCID0gRSAqIEIsXG4gICAgQkNfREEgPSBCICogQyAtIEQgKiBBO1xuXG5mdW5jdGlvbiBjdWJlaGVsaXhDb252ZXJ0KG8pIHtcbiAgaWYgKG8gaW5zdGFuY2VvZiBDdWJlaGVsaXgpIHJldHVybiBuZXcgQ3ViZWhlbGl4KG8uaCwgby5zLCBvLmwsIG8ub3BhY2l0eSk7XG4gIGlmICghKG8gaW5zdGFuY2VvZiBSZ2IpKSBvID0gcmdiQ29udmVydChvKTtcbiAgdmFyIHIgPSBvLnIgLyAyNTUsXG4gICAgICBnID0gby5nIC8gMjU1LFxuICAgICAgYiA9IG8uYiAvIDI1NSxcbiAgICAgIGwgPSAoQkNfREEgKiBiICsgRUQgKiByIC0gRUIgKiBnKSAvIChCQ19EQSArIEVEIC0gRUIpLFxuICAgICAgYmwgPSBiIC0gbCxcbiAgICAgIGsgPSAoRSAqIChnIC0gbCkgLSBDICogYmwpIC8gRCxcbiAgICAgIHMgPSBNYXRoLnNxcnQoayAqIGsgKyBibCAqIGJsKSAvIChFICogbCAqICgxIC0gbCkpLCAvLyBOYU4gaWYgbD0wIG9yIGw9MVxuICAgICAgaCA9IHMgPyBNYXRoLmF0YW4yKGssIGJsKSAqIHJhZDJkZWcgLSAxMjAgOiBOYU47XG4gIHJldHVybiBuZXcgQ3ViZWhlbGl4KGggPCAwID8gaCArIDM2MCA6IGgsIHMsIGwsIG8ub3BhY2l0eSk7XG59XG5cbmZ1bmN0aW9uIGN1YmVoZWxpeChoLCBzLCBsLCBvcGFjaXR5KSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID09PSAxID8gY3ViZWhlbGl4Q29udmVydChoKSA6IG5ldyBDdWJlaGVsaXgoaCwgcywgbCwgb3BhY2l0eSA9PSBudWxsID8gMSA6IG9wYWNpdHkpO1xufVxuXG5mdW5jdGlvbiBDdWJlaGVsaXgoaCwgcywgbCwgb3BhY2l0eSkge1xuICB0aGlzLmggPSAraDtcbiAgdGhpcy5zID0gK3M7XG4gIHRoaXMubCA9ICtsO1xuICB0aGlzLm9wYWNpdHkgPSArb3BhY2l0eTtcbn1cblxuZGVmaW5lKEN1YmVoZWxpeCwgY3ViZWhlbGl4LCBleHRlbmQoQ29sb3IsIHtcbiAgYnJpZ2h0ZXI6IGZ1bmN0aW9uKGspIHtcbiAgICBrID0gayA9PSBudWxsID8gYnJpZ2h0ZXIgOiBNYXRoLnBvdyhicmlnaHRlciwgayk7XG4gICAgcmV0dXJuIG5ldyBDdWJlaGVsaXgodGhpcy5oLCB0aGlzLnMsIHRoaXMubCAqIGssIHRoaXMub3BhY2l0eSk7XG4gIH0sXG4gIGRhcmtlcjogZnVuY3Rpb24oaykge1xuICAgIGsgPSBrID09IG51bGwgPyBkYXJrZXIgOiBNYXRoLnBvdyhkYXJrZXIsIGspO1xuICAgIHJldHVybiBuZXcgQ3ViZWhlbGl4KHRoaXMuaCwgdGhpcy5zLCB0aGlzLmwgKiBrLCB0aGlzLm9wYWNpdHkpO1xuICB9LFxuICByZ2I6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBoID0gaXNOYU4odGhpcy5oKSA/IDAgOiAodGhpcy5oICsgMTIwKSAqIGRlZzJyYWQsXG4gICAgICAgIGwgPSArdGhpcy5sLFxuICAgICAgICBhID0gaXNOYU4odGhpcy5zKSA/IDAgOiB0aGlzLnMgKiBsICogKDEgLSBsKSxcbiAgICAgICAgY29zaCA9IE1hdGguY29zKGgpLFxuICAgICAgICBzaW5oID0gTWF0aC5zaW4oaCk7XG4gICAgcmV0dXJuIG5ldyBSZ2IoXG4gICAgICAyNTUgKiAobCArIGEgKiAoQSAqIGNvc2ggKyBCICogc2luaCkpLFxuICAgICAgMjU1ICogKGwgKyBhICogKEMgKiBjb3NoICsgRCAqIHNpbmgpKSxcbiAgICAgIDI1NSAqIChsICsgYSAqIChFICogY29zaCkpLFxuICAgICAgdGhpcy5vcGFjaXR5XG4gICAgKTtcbiAgfVxufSkpO1xuXG5leHBvcnRzLmNvbG9yID0gY29sb3I7XG5leHBvcnRzLmN1YmVoZWxpeCA9IGN1YmVoZWxpeDtcbmV4cG9ydHMuZ3JheSA9IGdyYXk7XG5leHBvcnRzLmhjbCA9IGhjbDtcbmV4cG9ydHMuaHNsID0gaHNsO1xuZXhwb3J0cy5sYWIgPSBsYWI7XG5leHBvcnRzLmxjaCA9IGxjaDtcbmV4cG9ydHMucmdiID0gcmdiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG59KSk7XG4iLCIvLyBodHRwczovL2QzanMub3JnL2QzLWZvcm1hdC8gdjEuNC41IENvcHlyaWdodCAyMDIwIE1pa2UgQm9zdG9ja1xuKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbnR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyA/IGZhY3RvcnkoZXhwb3J0cykgOlxudHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnZXhwb3J0cyddLCBmYWN0b3J5KSA6XG4oZ2xvYmFsID0gdHlwZW9mIGdsb2JhbFRoaXMgIT09ICd1bmRlZmluZWQnID8gZ2xvYmFsVGhpcyA6IGdsb2JhbCB8fCBzZWxmLCBmYWN0b3J5KGdsb2JhbC5kMyA9IGdsb2JhbC5kMyB8fCB7fSkpO1xufSh0aGlzLCAoZnVuY3Rpb24gKGV4cG9ydHMpIHsgJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBmb3JtYXREZWNpbWFsKHgpIHtcbiAgcmV0dXJuIE1hdGguYWJzKHggPSBNYXRoLnJvdW5kKHgpKSA+PSAxZTIxXG4gICAgICA/IHgudG9Mb2NhbGVTdHJpbmcoXCJlblwiKS5yZXBsYWNlKC8sL2csIFwiXCIpXG4gICAgICA6IHgudG9TdHJpbmcoMTApO1xufVxuXG4vLyBDb21wdXRlcyB0aGUgZGVjaW1hbCBjb2VmZmljaWVudCBhbmQgZXhwb25lbnQgb2YgdGhlIHNwZWNpZmllZCBudW1iZXIgeCB3aXRoXG4vLyBzaWduaWZpY2FudCBkaWdpdHMgcCwgd2hlcmUgeCBpcyBwb3NpdGl2ZSBhbmQgcCBpcyBpbiBbMSwgMjFdIG9yIHVuZGVmaW5lZC5cbi8vIEZvciBleGFtcGxlLCBmb3JtYXREZWNpbWFsUGFydHMoMS4yMykgcmV0dXJucyBbXCIxMjNcIiwgMF0uXG5mdW5jdGlvbiBmb3JtYXREZWNpbWFsUGFydHMoeCwgcCkge1xuICBpZiAoKGkgPSAoeCA9IHAgPyB4LnRvRXhwb25lbnRpYWwocCAtIDEpIDogeC50b0V4cG9uZW50aWFsKCkpLmluZGV4T2YoXCJlXCIpKSA8IDApIHJldHVybiBudWxsOyAvLyBOYU4sIMKxSW5maW5pdHlcbiAgdmFyIGksIGNvZWZmaWNpZW50ID0geC5zbGljZSgwLCBpKTtcblxuICAvLyBUaGUgc3RyaW5nIHJldHVybmVkIGJ5IHRvRXhwb25lbnRpYWwgZWl0aGVyIGhhcyB0aGUgZm9ybSBcXGRcXC5cXGQrZVstK11cXGQrXG4gIC8vIChlLmcuLCAxLjJlKzMpIG9yIHRoZSBmb3JtIFxcZGVbLStdXFxkKyAoZS5nLiwgMWUrMykuXG4gIHJldHVybiBbXG4gICAgY29lZmZpY2llbnQubGVuZ3RoID4gMSA/IGNvZWZmaWNpZW50WzBdICsgY29lZmZpY2llbnQuc2xpY2UoMikgOiBjb2VmZmljaWVudCxcbiAgICAreC5zbGljZShpICsgMSlcbiAgXTtcbn1cblxuZnVuY3Rpb24gZXhwb25lbnQoeCkge1xuICByZXR1cm4geCA9IGZvcm1hdERlY2ltYWxQYXJ0cyhNYXRoLmFicyh4KSksIHggPyB4WzFdIDogTmFOO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRHcm91cChncm91cGluZywgdGhvdXNhbmRzKSB7XG4gIHJldHVybiBmdW5jdGlvbih2YWx1ZSwgd2lkdGgpIHtcbiAgICB2YXIgaSA9IHZhbHVlLmxlbmd0aCxcbiAgICAgICAgdCA9IFtdLFxuICAgICAgICBqID0gMCxcbiAgICAgICAgZyA9IGdyb3VwaW5nWzBdLFxuICAgICAgICBsZW5ndGggPSAwO1xuXG4gICAgd2hpbGUgKGkgPiAwICYmIGcgPiAwKSB7XG4gICAgICBpZiAobGVuZ3RoICsgZyArIDEgPiB3aWR0aCkgZyA9IE1hdGgubWF4KDEsIHdpZHRoIC0gbGVuZ3RoKTtcbiAgICAgIHQucHVzaCh2YWx1ZS5zdWJzdHJpbmcoaSAtPSBnLCBpICsgZykpO1xuICAgICAgaWYgKChsZW5ndGggKz0gZyArIDEpID4gd2lkdGgpIGJyZWFrO1xuICAgICAgZyA9IGdyb3VwaW5nW2ogPSAoaiArIDEpICUgZ3JvdXBpbmcubGVuZ3RoXTtcbiAgICB9XG5cbiAgICByZXR1cm4gdC5yZXZlcnNlKCkuam9pbih0aG91c2FuZHMpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBmb3JtYXROdW1lcmFscyhudW1lcmFscykge1xuICByZXR1cm4gZnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUucmVwbGFjZSgvWzAtOV0vZywgZnVuY3Rpb24oaSkge1xuICAgICAgcmV0dXJuIG51bWVyYWxzWytpXTtcbiAgICB9KTtcbiAgfTtcbn1cblxuLy8gW1tmaWxsXWFsaWduXVtzaWduXVtzeW1ib2xdWzBdW3dpZHRoXVssXVsucHJlY2lzaW9uXVt+XVt0eXBlXVxudmFyIHJlID0gL14oPzooLik/KFs8Pj1eXSkpPyhbK1xcLSggXSk/KFskI10pPygwKT8oXFxkKyk/KCwpPyhcXC5cXGQrKT8ofik/KFthLXolXSk/JC9pO1xuXG5mdW5jdGlvbiBmb3JtYXRTcGVjaWZpZXIoc3BlY2lmaWVyKSB7XG4gIGlmICghKG1hdGNoID0gcmUuZXhlYyhzcGVjaWZpZXIpKSkgdGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCBmb3JtYXQ6IFwiICsgc3BlY2lmaWVyKTtcbiAgdmFyIG1hdGNoO1xuICByZXR1cm4gbmV3IEZvcm1hdFNwZWNpZmllcih7XG4gICAgZmlsbDogbWF0Y2hbMV0sXG4gICAgYWxpZ246IG1hdGNoWzJdLFxuICAgIHNpZ246IG1hdGNoWzNdLFxuICAgIHN5bWJvbDogbWF0Y2hbNF0sXG4gICAgemVybzogbWF0Y2hbNV0sXG4gICAgd2lkdGg6IG1hdGNoWzZdLFxuICAgIGNvbW1hOiBtYXRjaFs3XSxcbiAgICBwcmVjaXNpb246IG1hdGNoWzhdICYmIG1hdGNoWzhdLnNsaWNlKDEpLFxuICAgIHRyaW06IG1hdGNoWzldLFxuICAgIHR5cGU6IG1hdGNoWzEwXVxuICB9KTtcbn1cblxuZm9ybWF0U3BlY2lmaWVyLnByb3RvdHlwZSA9IEZvcm1hdFNwZWNpZmllci5wcm90b3R5cGU7IC8vIGluc3RhbmNlb2ZcblxuZnVuY3Rpb24gRm9ybWF0U3BlY2lmaWVyKHNwZWNpZmllcikge1xuICB0aGlzLmZpbGwgPSBzcGVjaWZpZXIuZmlsbCA9PT0gdW5kZWZpbmVkID8gXCIgXCIgOiBzcGVjaWZpZXIuZmlsbCArIFwiXCI7XG4gIHRoaXMuYWxpZ24gPSBzcGVjaWZpZXIuYWxpZ24gPT09IHVuZGVmaW5lZCA/IFwiPlwiIDogc3BlY2lmaWVyLmFsaWduICsgXCJcIjtcbiAgdGhpcy5zaWduID0gc3BlY2lmaWVyLnNpZ24gPT09IHVuZGVmaW5lZCA/IFwiLVwiIDogc3BlY2lmaWVyLnNpZ24gKyBcIlwiO1xuICB0aGlzLnN5bWJvbCA9IHNwZWNpZmllci5zeW1ib2wgPT09IHVuZGVmaW5lZCA/IFwiXCIgOiBzcGVjaWZpZXIuc3ltYm9sICsgXCJcIjtcbiAgdGhpcy56ZXJvID0gISFzcGVjaWZpZXIuemVybztcbiAgdGhpcy53aWR0aCA9IHNwZWNpZmllci53aWR0aCA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogK3NwZWNpZmllci53aWR0aDtcbiAgdGhpcy5jb21tYSA9ICEhc3BlY2lmaWVyLmNvbW1hO1xuICB0aGlzLnByZWNpc2lvbiA9IHNwZWNpZmllci5wcmVjaXNpb24gPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6ICtzcGVjaWZpZXIucHJlY2lzaW9uO1xuICB0aGlzLnRyaW0gPSAhIXNwZWNpZmllci50cmltO1xuICB0aGlzLnR5cGUgPSBzcGVjaWZpZXIudHlwZSA9PT0gdW5kZWZpbmVkID8gXCJcIiA6IHNwZWNpZmllci50eXBlICsgXCJcIjtcbn1cblxuRm9ybWF0U3BlY2lmaWVyLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5maWxsXG4gICAgICArIHRoaXMuYWxpZ25cbiAgICAgICsgdGhpcy5zaWduXG4gICAgICArIHRoaXMuc3ltYm9sXG4gICAgICArICh0aGlzLnplcm8gPyBcIjBcIiA6IFwiXCIpXG4gICAgICArICh0aGlzLndpZHRoID09PSB1bmRlZmluZWQgPyBcIlwiIDogTWF0aC5tYXgoMSwgdGhpcy53aWR0aCB8IDApKVxuICAgICAgKyAodGhpcy5jb21tYSA/IFwiLFwiIDogXCJcIilcbiAgICAgICsgKHRoaXMucHJlY2lzaW9uID09PSB1bmRlZmluZWQgPyBcIlwiIDogXCIuXCIgKyBNYXRoLm1heCgwLCB0aGlzLnByZWNpc2lvbiB8IDApKVxuICAgICAgKyAodGhpcy50cmltID8gXCJ+XCIgOiBcIlwiKVxuICAgICAgKyB0aGlzLnR5cGU7XG59O1xuXG4vLyBUcmltcyBpbnNpZ25pZmljYW50IHplcm9zLCBlLmcuLCByZXBsYWNlcyAxLjIwMDBrIHdpdGggMS4yay5cbmZ1bmN0aW9uIGZvcm1hdFRyaW0ocykge1xuICBvdXQ6IGZvciAodmFyIG4gPSBzLmxlbmd0aCwgaSA9IDEsIGkwID0gLTEsIGkxOyBpIDwgbjsgKytpKSB7XG4gICAgc3dpdGNoIChzW2ldKSB7XG4gICAgICBjYXNlIFwiLlwiOiBpMCA9IGkxID0gaTsgYnJlYWs7XG4gICAgICBjYXNlIFwiMFwiOiBpZiAoaTAgPT09IDApIGkwID0gaTsgaTEgPSBpOyBicmVhaztcbiAgICAgIGRlZmF1bHQ6IGlmICghK3NbaV0pIGJyZWFrIG91dDsgaWYgKGkwID4gMCkgaTAgPSAwOyBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGkwID4gMCA/IHMuc2xpY2UoMCwgaTApICsgcy5zbGljZShpMSArIDEpIDogcztcbn1cblxudmFyIHByZWZpeEV4cG9uZW50O1xuXG5mdW5jdGlvbiBmb3JtYXRQcmVmaXhBdXRvKHgsIHApIHtcbiAgdmFyIGQgPSBmb3JtYXREZWNpbWFsUGFydHMoeCwgcCk7XG4gIGlmICghZCkgcmV0dXJuIHggKyBcIlwiO1xuICB2YXIgY29lZmZpY2llbnQgPSBkWzBdLFxuICAgICAgZXhwb25lbnQgPSBkWzFdLFxuICAgICAgaSA9IGV4cG9uZW50IC0gKHByZWZpeEV4cG9uZW50ID0gTWF0aC5tYXgoLTgsIE1hdGgubWluKDgsIE1hdGguZmxvb3IoZXhwb25lbnQgLyAzKSkpICogMykgKyAxLFxuICAgICAgbiA9IGNvZWZmaWNpZW50Lmxlbmd0aDtcbiAgcmV0dXJuIGkgPT09IG4gPyBjb2VmZmljaWVudFxuICAgICAgOiBpID4gbiA/IGNvZWZmaWNpZW50ICsgbmV3IEFycmF5KGkgLSBuICsgMSkuam9pbihcIjBcIilcbiAgICAgIDogaSA+IDAgPyBjb2VmZmljaWVudC5zbGljZSgwLCBpKSArIFwiLlwiICsgY29lZmZpY2llbnQuc2xpY2UoaSlcbiAgICAgIDogXCIwLlwiICsgbmV3IEFycmF5KDEgLSBpKS5qb2luKFwiMFwiKSArIGZvcm1hdERlY2ltYWxQYXJ0cyh4LCBNYXRoLm1heCgwLCBwICsgaSAtIDEpKVswXTsgLy8gbGVzcyB0aGFuIDF5IVxufVxuXG5mdW5jdGlvbiBmb3JtYXRSb3VuZGVkKHgsIHApIHtcbiAgdmFyIGQgPSBmb3JtYXREZWNpbWFsUGFydHMoeCwgcCk7XG4gIGlmICghZCkgcmV0dXJuIHggKyBcIlwiO1xuICB2YXIgY29lZmZpY2llbnQgPSBkWzBdLFxuICAgICAgZXhwb25lbnQgPSBkWzFdO1xuICByZXR1cm4gZXhwb25lbnQgPCAwID8gXCIwLlwiICsgbmV3IEFycmF5KC1leHBvbmVudCkuam9pbihcIjBcIikgKyBjb2VmZmljaWVudFxuICAgICAgOiBjb2VmZmljaWVudC5sZW5ndGggPiBleHBvbmVudCArIDEgPyBjb2VmZmljaWVudC5zbGljZSgwLCBleHBvbmVudCArIDEpICsgXCIuXCIgKyBjb2VmZmljaWVudC5zbGljZShleHBvbmVudCArIDEpXG4gICAgICA6IGNvZWZmaWNpZW50ICsgbmV3IEFycmF5KGV4cG9uZW50IC0gY29lZmZpY2llbnQubGVuZ3RoICsgMikuam9pbihcIjBcIik7XG59XG5cbnZhciBmb3JtYXRUeXBlcyA9IHtcbiAgXCIlXCI6IGZ1bmN0aW9uKHgsIHApIHsgcmV0dXJuICh4ICogMTAwKS50b0ZpeGVkKHApOyB9LFxuICBcImJcIjogZnVuY3Rpb24oeCkgeyByZXR1cm4gTWF0aC5yb3VuZCh4KS50b1N0cmluZygyKTsgfSxcbiAgXCJjXCI6IGZ1bmN0aW9uKHgpIHsgcmV0dXJuIHggKyBcIlwiOyB9LFxuICBcImRcIjogZm9ybWF0RGVjaW1hbCxcbiAgXCJlXCI6IGZ1bmN0aW9uKHgsIHApIHsgcmV0dXJuIHgudG9FeHBvbmVudGlhbChwKTsgfSxcbiAgXCJmXCI6IGZ1bmN0aW9uKHgsIHApIHsgcmV0dXJuIHgudG9GaXhlZChwKTsgfSxcbiAgXCJnXCI6IGZ1bmN0aW9uKHgsIHApIHsgcmV0dXJuIHgudG9QcmVjaXNpb24ocCk7IH0sXG4gIFwib1wiOiBmdW5jdGlvbih4KSB7IHJldHVybiBNYXRoLnJvdW5kKHgpLnRvU3RyaW5nKDgpOyB9LFxuICBcInBcIjogZnVuY3Rpb24oeCwgcCkgeyByZXR1cm4gZm9ybWF0Um91bmRlZCh4ICogMTAwLCBwKTsgfSxcbiAgXCJyXCI6IGZvcm1hdFJvdW5kZWQsXG4gIFwic1wiOiBmb3JtYXRQcmVmaXhBdXRvLFxuICBcIlhcIjogZnVuY3Rpb24oeCkgeyByZXR1cm4gTWF0aC5yb3VuZCh4KS50b1N0cmluZygxNikudG9VcHBlckNhc2UoKTsgfSxcbiAgXCJ4XCI6IGZ1bmN0aW9uKHgpIHsgcmV0dXJuIE1hdGgucm91bmQoeCkudG9TdHJpbmcoMTYpOyB9XG59O1xuXG5mdW5jdGlvbiBpZGVudGl0eSh4KSB7XG4gIHJldHVybiB4O1xufVxuXG52YXIgbWFwID0gQXJyYXkucHJvdG90eXBlLm1hcCxcbiAgICBwcmVmaXhlcyA9IFtcInlcIixcInpcIixcImFcIixcImZcIixcInBcIixcIm5cIixcIsK1XCIsXCJtXCIsXCJcIixcImtcIixcIk1cIixcIkdcIixcIlRcIixcIlBcIixcIkVcIixcIlpcIixcIllcIl07XG5cbmZ1bmN0aW9uIGZvcm1hdExvY2FsZShsb2NhbGUpIHtcbiAgdmFyIGdyb3VwID0gbG9jYWxlLmdyb3VwaW5nID09PSB1bmRlZmluZWQgfHwgbG9jYWxlLnRob3VzYW5kcyA9PT0gdW5kZWZpbmVkID8gaWRlbnRpdHkgOiBmb3JtYXRHcm91cChtYXAuY2FsbChsb2NhbGUuZ3JvdXBpbmcsIE51bWJlciksIGxvY2FsZS50aG91c2FuZHMgKyBcIlwiKSxcbiAgICAgIGN1cnJlbmN5UHJlZml4ID0gbG9jYWxlLmN1cnJlbmN5ID09PSB1bmRlZmluZWQgPyBcIlwiIDogbG9jYWxlLmN1cnJlbmN5WzBdICsgXCJcIixcbiAgICAgIGN1cnJlbmN5U3VmZml4ID0gbG9jYWxlLmN1cnJlbmN5ID09PSB1bmRlZmluZWQgPyBcIlwiIDogbG9jYWxlLmN1cnJlbmN5WzFdICsgXCJcIixcbiAgICAgIGRlY2ltYWwgPSBsb2NhbGUuZGVjaW1hbCA9PT0gdW5kZWZpbmVkID8gXCIuXCIgOiBsb2NhbGUuZGVjaW1hbCArIFwiXCIsXG4gICAgICBudW1lcmFscyA9IGxvY2FsZS5udW1lcmFscyA9PT0gdW5kZWZpbmVkID8gaWRlbnRpdHkgOiBmb3JtYXROdW1lcmFscyhtYXAuY2FsbChsb2NhbGUubnVtZXJhbHMsIFN0cmluZykpLFxuICAgICAgcGVyY2VudCA9IGxvY2FsZS5wZXJjZW50ID09PSB1bmRlZmluZWQgPyBcIiVcIiA6IGxvY2FsZS5wZXJjZW50ICsgXCJcIixcbiAgICAgIG1pbnVzID0gbG9jYWxlLm1pbnVzID09PSB1bmRlZmluZWQgPyBcIi1cIiA6IGxvY2FsZS5taW51cyArIFwiXCIsXG4gICAgICBuYW4gPSBsb2NhbGUubmFuID09PSB1bmRlZmluZWQgPyBcIk5hTlwiIDogbG9jYWxlLm5hbiArIFwiXCI7XG5cbiAgZnVuY3Rpb24gbmV3Rm9ybWF0KHNwZWNpZmllcikge1xuICAgIHNwZWNpZmllciA9IGZvcm1hdFNwZWNpZmllcihzcGVjaWZpZXIpO1xuXG4gICAgdmFyIGZpbGwgPSBzcGVjaWZpZXIuZmlsbCxcbiAgICAgICAgYWxpZ24gPSBzcGVjaWZpZXIuYWxpZ24sXG4gICAgICAgIHNpZ24gPSBzcGVjaWZpZXIuc2lnbixcbiAgICAgICAgc3ltYm9sID0gc3BlY2lmaWVyLnN5bWJvbCxcbiAgICAgICAgemVybyA9IHNwZWNpZmllci56ZXJvLFxuICAgICAgICB3aWR0aCA9IHNwZWNpZmllci53aWR0aCxcbiAgICAgICAgY29tbWEgPSBzcGVjaWZpZXIuY29tbWEsXG4gICAgICAgIHByZWNpc2lvbiA9IHNwZWNpZmllci5wcmVjaXNpb24sXG4gICAgICAgIHRyaW0gPSBzcGVjaWZpZXIudHJpbSxcbiAgICAgICAgdHlwZSA9IHNwZWNpZmllci50eXBlO1xuXG4gICAgLy8gVGhlIFwiblwiIHR5cGUgaXMgYW4gYWxpYXMgZm9yIFwiLGdcIi5cbiAgICBpZiAodHlwZSA9PT0gXCJuXCIpIGNvbW1hID0gdHJ1ZSwgdHlwZSA9IFwiZ1wiO1xuXG4gICAgLy8gVGhlIFwiXCIgdHlwZSwgYW5kIGFueSBpbnZhbGlkIHR5cGUsIGlzIGFuIGFsaWFzIGZvciBcIi4xMn5nXCIuXG4gICAgZWxzZSBpZiAoIWZvcm1hdFR5cGVzW3R5cGVdKSBwcmVjaXNpb24gPT09IHVuZGVmaW5lZCAmJiAocHJlY2lzaW9uID0gMTIpLCB0cmltID0gdHJ1ZSwgdHlwZSA9IFwiZ1wiO1xuXG4gICAgLy8gSWYgemVybyBmaWxsIGlzIHNwZWNpZmllZCwgcGFkZGluZyBnb2VzIGFmdGVyIHNpZ24gYW5kIGJlZm9yZSBkaWdpdHMuXG4gICAgaWYgKHplcm8gfHwgKGZpbGwgPT09IFwiMFwiICYmIGFsaWduID09PSBcIj1cIikpIHplcm8gPSB0cnVlLCBmaWxsID0gXCIwXCIsIGFsaWduID0gXCI9XCI7XG5cbiAgICAvLyBDb21wdXRlIHRoZSBwcmVmaXggYW5kIHN1ZmZpeC5cbiAgICAvLyBGb3IgU0ktcHJlZml4LCB0aGUgc3VmZml4IGlzIGxhemlseSBjb21wdXRlZC5cbiAgICB2YXIgcHJlZml4ID0gc3ltYm9sID09PSBcIiRcIiA/IGN1cnJlbmN5UHJlZml4IDogc3ltYm9sID09PSBcIiNcIiAmJiAvW2JveFhdLy50ZXN0KHR5cGUpID8gXCIwXCIgKyB0eXBlLnRvTG93ZXJDYXNlKCkgOiBcIlwiLFxuICAgICAgICBzdWZmaXggPSBzeW1ib2wgPT09IFwiJFwiID8gY3VycmVuY3lTdWZmaXggOiAvWyVwXS8udGVzdCh0eXBlKSA/IHBlcmNlbnQgOiBcIlwiO1xuXG4gICAgLy8gV2hhdCBmb3JtYXQgZnVuY3Rpb24gc2hvdWxkIHdlIHVzZT9cbiAgICAvLyBJcyB0aGlzIGFuIGludGVnZXIgdHlwZT9cbiAgICAvLyBDYW4gdGhpcyB0eXBlIGdlbmVyYXRlIGV4cG9uZW50aWFsIG5vdGF0aW9uP1xuICAgIHZhciBmb3JtYXRUeXBlID0gZm9ybWF0VHlwZXNbdHlwZV0sXG4gICAgICAgIG1heWJlU3VmZml4ID0gL1tkZWZncHJzJV0vLnRlc3QodHlwZSk7XG5cbiAgICAvLyBTZXQgdGhlIGRlZmF1bHQgcHJlY2lzaW9uIGlmIG5vdCBzcGVjaWZpZWQsXG4gICAgLy8gb3IgY2xhbXAgdGhlIHNwZWNpZmllZCBwcmVjaXNpb24gdG8gdGhlIHN1cHBvcnRlZCByYW5nZS5cbiAgICAvLyBGb3Igc2lnbmlmaWNhbnQgcHJlY2lzaW9uLCBpdCBtdXN0IGJlIGluIFsxLCAyMV0uXG4gICAgLy8gRm9yIGZpeGVkIHByZWNpc2lvbiwgaXQgbXVzdCBiZSBpbiBbMCwgMjBdLlxuICAgIHByZWNpc2lvbiA9IHByZWNpc2lvbiA9PT0gdW5kZWZpbmVkID8gNlxuICAgICAgICA6IC9bZ3Byc10vLnRlc3QodHlwZSkgPyBNYXRoLm1heCgxLCBNYXRoLm1pbigyMSwgcHJlY2lzaW9uKSlcbiAgICAgICAgOiBNYXRoLm1heCgwLCBNYXRoLm1pbigyMCwgcHJlY2lzaW9uKSk7XG5cbiAgICBmdW5jdGlvbiBmb3JtYXQodmFsdWUpIHtcbiAgICAgIHZhciB2YWx1ZVByZWZpeCA9IHByZWZpeCxcbiAgICAgICAgICB2YWx1ZVN1ZmZpeCA9IHN1ZmZpeCxcbiAgICAgICAgICBpLCBuLCBjO1xuXG4gICAgICBpZiAodHlwZSA9PT0gXCJjXCIpIHtcbiAgICAgICAgdmFsdWVTdWZmaXggPSBmb3JtYXRUeXBlKHZhbHVlKSArIHZhbHVlU3VmZml4O1xuICAgICAgICB2YWx1ZSA9IFwiXCI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YWx1ZSA9ICt2YWx1ZTtcblxuICAgICAgICAvLyBEZXRlcm1pbmUgdGhlIHNpZ24uIC0wIGlzIG5vdCBsZXNzIHRoYW4gMCwgYnV0IDEgLyAtMCBpcyFcbiAgICAgICAgdmFyIHZhbHVlTmVnYXRpdmUgPSB2YWx1ZSA8IDAgfHwgMSAvIHZhbHVlIDwgMDtcblxuICAgICAgICAvLyBQZXJmb3JtIHRoZSBpbml0aWFsIGZvcm1hdHRpbmcuXG4gICAgICAgIHZhbHVlID0gaXNOYU4odmFsdWUpID8gbmFuIDogZm9ybWF0VHlwZShNYXRoLmFicyh2YWx1ZSksIHByZWNpc2lvbik7XG5cbiAgICAgICAgLy8gVHJpbSBpbnNpZ25pZmljYW50IHplcm9zLlxuICAgICAgICBpZiAodHJpbSkgdmFsdWUgPSBmb3JtYXRUcmltKHZhbHVlKTtcblxuICAgICAgICAvLyBJZiBhIG5lZ2F0aXZlIHZhbHVlIHJvdW5kcyB0byB6ZXJvIGFmdGVyIGZvcm1hdHRpbmcsIGFuZCBubyBleHBsaWNpdCBwb3NpdGl2ZSBzaWduIGlzIHJlcXVlc3RlZCwgaGlkZSB0aGUgc2lnbi5cbiAgICAgICAgaWYgKHZhbHVlTmVnYXRpdmUgJiYgK3ZhbHVlID09PSAwICYmIHNpZ24gIT09IFwiK1wiKSB2YWx1ZU5lZ2F0aXZlID0gZmFsc2U7XG5cbiAgICAgICAgLy8gQ29tcHV0ZSB0aGUgcHJlZml4IGFuZCBzdWZmaXguXG4gICAgICAgIHZhbHVlUHJlZml4ID0gKHZhbHVlTmVnYXRpdmUgPyAoc2lnbiA9PT0gXCIoXCIgPyBzaWduIDogbWludXMpIDogc2lnbiA9PT0gXCItXCIgfHwgc2lnbiA9PT0gXCIoXCIgPyBcIlwiIDogc2lnbikgKyB2YWx1ZVByZWZpeDtcbiAgICAgICAgdmFsdWVTdWZmaXggPSAodHlwZSA9PT0gXCJzXCIgPyBwcmVmaXhlc1s4ICsgcHJlZml4RXhwb25lbnQgLyAzXSA6IFwiXCIpICsgdmFsdWVTdWZmaXggKyAodmFsdWVOZWdhdGl2ZSAmJiBzaWduID09PSBcIihcIiA/IFwiKVwiIDogXCJcIik7XG5cbiAgICAgICAgLy8gQnJlYWsgdGhlIGZvcm1hdHRlZCB2YWx1ZSBpbnRvIHRoZSBpbnRlZ2VyIOKAnHZhbHVl4oCdIHBhcnQgdGhhdCBjYW4gYmVcbiAgICAgICAgLy8gZ3JvdXBlZCwgYW5kIGZyYWN0aW9uYWwgb3IgZXhwb25lbnRpYWwg4oCcc3VmZml44oCdIHBhcnQgdGhhdCBpcyBub3QuXG4gICAgICAgIGlmIChtYXliZVN1ZmZpeCkge1xuICAgICAgICAgIGkgPSAtMSwgbiA9IHZhbHVlLmxlbmd0aDtcbiAgICAgICAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgICAgICAgaWYgKGMgPSB2YWx1ZS5jaGFyQ29kZUF0KGkpLCA0OCA+IGMgfHwgYyA+IDU3KSB7XG4gICAgICAgICAgICAgIHZhbHVlU3VmZml4ID0gKGMgPT09IDQ2ID8gZGVjaW1hbCArIHZhbHVlLnNsaWNlKGkgKyAxKSA6IHZhbHVlLnNsaWNlKGkpKSArIHZhbHVlU3VmZml4O1xuICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLnNsaWNlKDAsIGkpO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gSWYgdGhlIGZpbGwgY2hhcmFjdGVyIGlzIG5vdCBcIjBcIiwgZ3JvdXBpbmcgaXMgYXBwbGllZCBiZWZvcmUgcGFkZGluZy5cbiAgICAgIGlmIChjb21tYSAmJiAhemVybykgdmFsdWUgPSBncm91cCh2YWx1ZSwgSW5maW5pdHkpO1xuXG4gICAgICAvLyBDb21wdXRlIHRoZSBwYWRkaW5nLlxuICAgICAgdmFyIGxlbmd0aCA9IHZhbHVlUHJlZml4Lmxlbmd0aCArIHZhbHVlLmxlbmd0aCArIHZhbHVlU3VmZml4Lmxlbmd0aCxcbiAgICAgICAgICBwYWRkaW5nID0gbGVuZ3RoIDwgd2lkdGggPyBuZXcgQXJyYXkod2lkdGggLSBsZW5ndGggKyAxKS5qb2luKGZpbGwpIDogXCJcIjtcblxuICAgICAgLy8gSWYgdGhlIGZpbGwgY2hhcmFjdGVyIGlzIFwiMFwiLCBncm91cGluZyBpcyBhcHBsaWVkIGFmdGVyIHBhZGRpbmcuXG4gICAgICBpZiAoY29tbWEgJiYgemVybykgdmFsdWUgPSBncm91cChwYWRkaW5nICsgdmFsdWUsIHBhZGRpbmcubGVuZ3RoID8gd2lkdGggLSB2YWx1ZVN1ZmZpeC5sZW5ndGggOiBJbmZpbml0eSksIHBhZGRpbmcgPSBcIlwiO1xuXG4gICAgICAvLyBSZWNvbnN0cnVjdCB0aGUgZmluYWwgb3V0cHV0IGJhc2VkIG9uIHRoZSBkZXNpcmVkIGFsaWdubWVudC5cbiAgICAgIHN3aXRjaCAoYWxpZ24pIHtcbiAgICAgICAgY2FzZSBcIjxcIjogdmFsdWUgPSB2YWx1ZVByZWZpeCArIHZhbHVlICsgdmFsdWVTdWZmaXggKyBwYWRkaW5nOyBicmVhaztcbiAgICAgICAgY2FzZSBcIj1cIjogdmFsdWUgPSB2YWx1ZVByZWZpeCArIHBhZGRpbmcgKyB2YWx1ZSArIHZhbHVlU3VmZml4OyBicmVhaztcbiAgICAgICAgY2FzZSBcIl5cIjogdmFsdWUgPSBwYWRkaW5nLnNsaWNlKDAsIGxlbmd0aCA9IHBhZGRpbmcubGVuZ3RoID4+IDEpICsgdmFsdWVQcmVmaXggKyB2YWx1ZSArIHZhbHVlU3VmZml4ICsgcGFkZGluZy5zbGljZShsZW5ndGgpOyBicmVhaztcbiAgICAgICAgZGVmYXVsdDogdmFsdWUgPSBwYWRkaW5nICsgdmFsdWVQcmVmaXggKyB2YWx1ZSArIHZhbHVlU3VmZml4OyBicmVhaztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG51bWVyYWxzKHZhbHVlKTtcbiAgICB9XG5cbiAgICBmb3JtYXQudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBzcGVjaWZpZXIgKyBcIlwiO1xuICAgIH07XG5cbiAgICByZXR1cm4gZm9ybWF0O1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0UHJlZml4KHNwZWNpZmllciwgdmFsdWUpIHtcbiAgICB2YXIgZiA9IG5ld0Zvcm1hdCgoc3BlY2lmaWVyID0gZm9ybWF0U3BlY2lmaWVyKHNwZWNpZmllciksIHNwZWNpZmllci50eXBlID0gXCJmXCIsIHNwZWNpZmllcikpLFxuICAgICAgICBlID0gTWF0aC5tYXgoLTgsIE1hdGgubWluKDgsIE1hdGguZmxvb3IoZXhwb25lbnQodmFsdWUpIC8gMykpKSAqIDMsXG4gICAgICAgIGsgPSBNYXRoLnBvdygxMCwgLWUpLFxuICAgICAgICBwcmVmaXggPSBwcmVmaXhlc1s4ICsgZSAvIDNdO1xuICAgIHJldHVybiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgcmV0dXJuIGYoayAqIHZhbHVlKSArIHByZWZpeDtcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBmb3JtYXQ6IG5ld0Zvcm1hdCxcbiAgICBmb3JtYXRQcmVmaXg6IGZvcm1hdFByZWZpeFxuICB9O1xufVxuXG52YXIgbG9jYWxlO1xuXG5kZWZhdWx0TG9jYWxlKHtcbiAgZGVjaW1hbDogXCIuXCIsXG4gIHRob3VzYW5kczogXCIsXCIsXG4gIGdyb3VwaW5nOiBbM10sXG4gIGN1cnJlbmN5OiBbXCIkXCIsIFwiXCJdLFxuICBtaW51czogXCItXCJcbn0pO1xuXG5mdW5jdGlvbiBkZWZhdWx0TG9jYWxlKGRlZmluaXRpb24pIHtcbiAgbG9jYWxlID0gZm9ybWF0TG9jYWxlKGRlZmluaXRpb24pO1xuICBleHBvcnRzLmZvcm1hdCA9IGxvY2FsZS5mb3JtYXQ7XG4gIGV4cG9ydHMuZm9ybWF0UHJlZml4ID0gbG9jYWxlLmZvcm1hdFByZWZpeDtcbiAgcmV0dXJuIGxvY2FsZTtcbn1cblxuZnVuY3Rpb24gcHJlY2lzaW9uRml4ZWQoc3RlcCkge1xuICByZXR1cm4gTWF0aC5tYXgoMCwgLWV4cG9uZW50KE1hdGguYWJzKHN0ZXApKSk7XG59XG5cbmZ1bmN0aW9uIHByZWNpc2lvblByZWZpeChzdGVwLCB2YWx1ZSkge1xuICByZXR1cm4gTWF0aC5tYXgoMCwgTWF0aC5tYXgoLTgsIE1hdGgubWluKDgsIE1hdGguZmxvb3IoZXhwb25lbnQodmFsdWUpIC8gMykpKSAqIDMgLSBleHBvbmVudChNYXRoLmFicyhzdGVwKSkpO1xufVxuXG5mdW5jdGlvbiBwcmVjaXNpb25Sb3VuZChzdGVwLCBtYXgpIHtcbiAgc3RlcCA9IE1hdGguYWJzKHN0ZXApLCBtYXggPSBNYXRoLmFicyhtYXgpIC0gc3RlcDtcbiAgcmV0dXJuIE1hdGgubWF4KDAsIGV4cG9uZW50KG1heCkgLSBleHBvbmVudChzdGVwKSkgKyAxO1xufVxuXG5leHBvcnRzLkZvcm1hdFNwZWNpZmllciA9IEZvcm1hdFNwZWNpZmllcjtcbmV4cG9ydHMuZm9ybWF0RGVmYXVsdExvY2FsZSA9IGRlZmF1bHRMb2NhbGU7XG5leHBvcnRzLmZvcm1hdExvY2FsZSA9IGZvcm1hdExvY2FsZTtcbmV4cG9ydHMuZm9ybWF0U3BlY2lmaWVyID0gZm9ybWF0U3BlY2lmaWVyO1xuZXhwb3J0cy5wcmVjaXNpb25GaXhlZCA9IHByZWNpc2lvbkZpeGVkO1xuZXhwb3J0cy5wcmVjaXNpb25QcmVmaXggPSBwcmVjaXNpb25QcmVmaXg7XG5leHBvcnRzLnByZWNpc2lvblJvdW5kID0gcHJlY2lzaW9uUm91bmQ7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbn0pKSk7XG4iLCIvLyBodHRwczovL2QzanMub3JnL2QzLWludGVycG9sYXRlLyB2MS40LjAgQ29weXJpZ2h0IDIwMTkgTWlrZSBCb3N0b2NrXG4oZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xudHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnID8gZmFjdG9yeShleHBvcnRzLCByZXF1aXJlKCdkMy1jb2xvcicpKSA6XG50eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWydleHBvcnRzJywgJ2QzLWNvbG9yJ10sIGZhY3RvcnkpIDpcbihnbG9iYWwgPSBnbG9iYWwgfHwgc2VsZiwgZmFjdG9yeShnbG9iYWwuZDMgPSBnbG9iYWwuZDMgfHwge30sIGdsb2JhbC5kMykpO1xufSh0aGlzLCBmdW5jdGlvbiAoZXhwb3J0cywgZDNDb2xvcikgeyAndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIGJhc2lzKHQxLCB2MCwgdjEsIHYyLCB2Mykge1xuICB2YXIgdDIgPSB0MSAqIHQxLCB0MyA9IHQyICogdDE7XG4gIHJldHVybiAoKDEgLSAzICogdDEgKyAzICogdDIgLSB0MykgKiB2MFxuICAgICAgKyAoNCAtIDYgKiB0MiArIDMgKiB0MykgKiB2MVxuICAgICAgKyAoMSArIDMgKiB0MSArIDMgKiB0MiAtIDMgKiB0MykgKiB2MlxuICAgICAgKyB0MyAqIHYzKSAvIDY7XG59XG5cbmZ1bmN0aW9uIGJhc2lzJDEodmFsdWVzKSB7XG4gIHZhciBuID0gdmFsdWVzLmxlbmd0aCAtIDE7XG4gIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgdmFyIGkgPSB0IDw9IDAgPyAodCA9IDApIDogdCA+PSAxID8gKHQgPSAxLCBuIC0gMSkgOiBNYXRoLmZsb29yKHQgKiBuKSxcbiAgICAgICAgdjEgPSB2YWx1ZXNbaV0sXG4gICAgICAgIHYyID0gdmFsdWVzW2kgKyAxXSxcbiAgICAgICAgdjAgPSBpID4gMCA/IHZhbHVlc1tpIC0gMV0gOiAyICogdjEgLSB2MixcbiAgICAgICAgdjMgPSBpIDwgbiAtIDEgPyB2YWx1ZXNbaSArIDJdIDogMiAqIHYyIC0gdjE7XG4gICAgcmV0dXJuIGJhc2lzKCh0IC0gaSAvIG4pICogbiwgdjAsIHYxLCB2MiwgdjMpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBiYXNpc0Nsb3NlZCh2YWx1ZXMpIHtcbiAgdmFyIG4gPSB2YWx1ZXMubGVuZ3RoO1xuICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgIHZhciBpID0gTWF0aC5mbG9vcigoKHQgJT0gMSkgPCAwID8gKyt0IDogdCkgKiBuKSxcbiAgICAgICAgdjAgPSB2YWx1ZXNbKGkgKyBuIC0gMSkgJSBuXSxcbiAgICAgICAgdjEgPSB2YWx1ZXNbaSAlIG5dLFxuICAgICAgICB2MiA9IHZhbHVlc1soaSArIDEpICUgbl0sXG4gICAgICAgIHYzID0gdmFsdWVzWyhpICsgMikgJSBuXTtcbiAgICByZXR1cm4gYmFzaXMoKHQgLSBpIC8gbikgKiBuLCB2MCwgdjEsIHYyLCB2Myk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGNvbnN0YW50KHgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB4O1xuICB9O1xufVxuXG5mdW5jdGlvbiBsaW5lYXIoYSwgZCkge1xuICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgIHJldHVybiBhICsgdCAqIGQ7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGV4cG9uZW50aWFsKGEsIGIsIHkpIHtcbiAgcmV0dXJuIGEgPSBNYXRoLnBvdyhhLCB5KSwgYiA9IE1hdGgucG93KGIsIHkpIC0gYSwgeSA9IDEgLyB5LCBmdW5jdGlvbih0KSB7XG4gICAgcmV0dXJuIE1hdGgucG93KGEgKyB0ICogYiwgeSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGh1ZShhLCBiKSB7XG4gIHZhciBkID0gYiAtIGE7XG4gIHJldHVybiBkID8gbGluZWFyKGEsIGQgPiAxODAgfHwgZCA8IC0xODAgPyBkIC0gMzYwICogTWF0aC5yb3VuZChkIC8gMzYwKSA6IGQpIDogY29uc3RhbnQoaXNOYU4oYSkgPyBiIDogYSk7XG59XG5cbmZ1bmN0aW9uIGdhbW1hKHkpIHtcbiAgcmV0dXJuICh5ID0gK3kpID09PSAxID8gbm9nYW1tYSA6IGZ1bmN0aW9uKGEsIGIpIHtcbiAgICByZXR1cm4gYiAtIGEgPyBleHBvbmVudGlhbChhLCBiLCB5KSA6IGNvbnN0YW50KGlzTmFOKGEpID8gYiA6IGEpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBub2dhbW1hKGEsIGIpIHtcbiAgdmFyIGQgPSBiIC0gYTtcbiAgcmV0dXJuIGQgPyBsaW5lYXIoYSwgZCkgOiBjb25zdGFudChpc05hTihhKSA/IGIgOiBhKTtcbn1cblxudmFyIHJnYiA9IChmdW5jdGlvbiByZ2JHYW1tYSh5KSB7XG4gIHZhciBjb2xvciA9IGdhbW1hKHkpO1xuXG4gIGZ1bmN0aW9uIHJnYihzdGFydCwgZW5kKSB7XG4gICAgdmFyIHIgPSBjb2xvcigoc3RhcnQgPSBkM0NvbG9yLnJnYihzdGFydCkpLnIsIChlbmQgPSBkM0NvbG9yLnJnYihlbmQpKS5yKSxcbiAgICAgICAgZyA9IGNvbG9yKHN0YXJ0LmcsIGVuZC5nKSxcbiAgICAgICAgYiA9IGNvbG9yKHN0YXJ0LmIsIGVuZC5iKSxcbiAgICAgICAgb3BhY2l0eSA9IG5vZ2FtbWEoc3RhcnQub3BhY2l0eSwgZW5kLm9wYWNpdHkpO1xuICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgICBzdGFydC5yID0gcih0KTtcbiAgICAgIHN0YXJ0LmcgPSBnKHQpO1xuICAgICAgc3RhcnQuYiA9IGIodCk7XG4gICAgICBzdGFydC5vcGFjaXR5ID0gb3BhY2l0eSh0KTtcbiAgICAgIHJldHVybiBzdGFydCArIFwiXCI7XG4gICAgfTtcbiAgfVxuXG4gIHJnYi5nYW1tYSA9IHJnYkdhbW1hO1xuXG4gIHJldHVybiByZ2I7XG59KSgxKTtcblxuZnVuY3Rpb24gcmdiU3BsaW5lKHNwbGluZSkge1xuICByZXR1cm4gZnVuY3Rpb24oY29sb3JzKSB7XG4gICAgdmFyIG4gPSBjb2xvcnMubGVuZ3RoLFxuICAgICAgICByID0gbmV3IEFycmF5KG4pLFxuICAgICAgICBnID0gbmV3IEFycmF5KG4pLFxuICAgICAgICBiID0gbmV3IEFycmF5KG4pLFxuICAgICAgICBpLCBjb2xvcjtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBjb2xvciA9IGQzQ29sb3IucmdiKGNvbG9yc1tpXSk7XG4gICAgICByW2ldID0gY29sb3IuciB8fCAwO1xuICAgICAgZ1tpXSA9IGNvbG9yLmcgfHwgMDtcbiAgICAgIGJbaV0gPSBjb2xvci5iIHx8IDA7XG4gICAgfVxuICAgIHIgPSBzcGxpbmUocik7XG4gICAgZyA9IHNwbGluZShnKTtcbiAgICBiID0gc3BsaW5lKGIpO1xuICAgIGNvbG9yLm9wYWNpdHkgPSAxO1xuICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgICBjb2xvci5yID0gcih0KTtcbiAgICAgIGNvbG9yLmcgPSBnKHQpO1xuICAgICAgY29sb3IuYiA9IGIodCk7XG4gICAgICByZXR1cm4gY29sb3IgKyBcIlwiO1xuICAgIH07XG4gIH07XG59XG5cbnZhciByZ2JCYXNpcyA9IHJnYlNwbGluZShiYXNpcyQxKTtcbnZhciByZ2JCYXNpc0Nsb3NlZCA9IHJnYlNwbGluZShiYXNpc0Nsb3NlZCk7XG5cbmZ1bmN0aW9uIG51bWJlckFycmF5KGEsIGIpIHtcbiAgaWYgKCFiKSBiID0gW107XG4gIHZhciBuID0gYSA/IE1hdGgubWluKGIubGVuZ3RoLCBhLmxlbmd0aCkgOiAwLFxuICAgICAgYyA9IGIuc2xpY2UoKSxcbiAgICAgIGk7XG4gIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkgY1tpXSA9IGFbaV0gKiAoMSAtIHQpICsgYltpXSAqIHQ7XG4gICAgcmV0dXJuIGM7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGlzTnVtYmVyQXJyYXkoeCkge1xuICByZXR1cm4gQXJyYXlCdWZmZXIuaXNWaWV3KHgpICYmICEoeCBpbnN0YW5jZW9mIERhdGFWaWV3KTtcbn1cblxuZnVuY3Rpb24gYXJyYXkoYSwgYikge1xuICByZXR1cm4gKGlzTnVtYmVyQXJyYXkoYikgPyBudW1iZXJBcnJheSA6IGdlbmVyaWNBcnJheSkoYSwgYik7XG59XG5cbmZ1bmN0aW9uIGdlbmVyaWNBcnJheShhLCBiKSB7XG4gIHZhciBuYiA9IGIgPyBiLmxlbmd0aCA6IDAsXG4gICAgICBuYSA9IGEgPyBNYXRoLm1pbihuYiwgYS5sZW5ndGgpIDogMCxcbiAgICAgIHggPSBuZXcgQXJyYXkobmEpLFxuICAgICAgYyA9IG5ldyBBcnJheShuYiksXG4gICAgICBpO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBuYTsgKytpKSB4W2ldID0gdmFsdWUoYVtpXSwgYltpXSk7XG4gIGZvciAoOyBpIDwgbmI7ICsraSkgY1tpXSA9IGJbaV07XG5cbiAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbmE7ICsraSkgY1tpXSA9IHhbaV0odCk7XG4gICAgcmV0dXJuIGM7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGRhdGUoYSwgYikge1xuICB2YXIgZCA9IG5ldyBEYXRlO1xuICByZXR1cm4gYSA9ICthLCBiID0gK2IsIGZ1bmN0aW9uKHQpIHtcbiAgICByZXR1cm4gZC5zZXRUaW1lKGEgKiAoMSAtIHQpICsgYiAqIHQpLCBkO1xuICB9O1xufVxuXG5mdW5jdGlvbiBudW1iZXIoYSwgYikge1xuICByZXR1cm4gYSA9ICthLCBiID0gK2IsIGZ1bmN0aW9uKHQpIHtcbiAgICByZXR1cm4gYSAqICgxIC0gdCkgKyBiICogdDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gb2JqZWN0KGEsIGIpIHtcbiAgdmFyIGkgPSB7fSxcbiAgICAgIGMgPSB7fSxcbiAgICAgIGs7XG5cbiAgaWYgKGEgPT09IG51bGwgfHwgdHlwZW9mIGEgIT09IFwib2JqZWN0XCIpIGEgPSB7fTtcbiAgaWYgKGIgPT09IG51bGwgfHwgdHlwZW9mIGIgIT09IFwib2JqZWN0XCIpIGIgPSB7fTtcblxuICBmb3IgKGsgaW4gYikge1xuICAgIGlmIChrIGluIGEpIHtcbiAgICAgIGlba10gPSB2YWx1ZShhW2tdLCBiW2tdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY1trXSA9IGJba107XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICBmb3IgKGsgaW4gaSkgY1trXSA9IGlba10odCk7XG4gICAgcmV0dXJuIGM7XG4gIH07XG59XG5cbnZhciByZUEgPSAvWy0rXT8oPzpcXGQrXFwuP1xcZCp8XFwuP1xcZCspKD86W2VFXVstK10/XFxkKyk/L2csXG4gICAgcmVCID0gbmV3IFJlZ0V4cChyZUEuc291cmNlLCBcImdcIik7XG5cbmZ1bmN0aW9uIHplcm8oYikge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGI7XG4gIH07XG59XG5cbmZ1bmN0aW9uIG9uZShiKSB7XG4gIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgcmV0dXJuIGIodCkgKyBcIlwiO1xuICB9O1xufVxuXG5mdW5jdGlvbiBzdHJpbmcoYSwgYikge1xuICB2YXIgYmkgPSByZUEubGFzdEluZGV4ID0gcmVCLmxhc3RJbmRleCA9IDAsIC8vIHNjYW4gaW5kZXggZm9yIG5leHQgbnVtYmVyIGluIGJcbiAgICAgIGFtLCAvLyBjdXJyZW50IG1hdGNoIGluIGFcbiAgICAgIGJtLCAvLyBjdXJyZW50IG1hdGNoIGluIGJcbiAgICAgIGJzLCAvLyBzdHJpbmcgcHJlY2VkaW5nIGN1cnJlbnQgbnVtYmVyIGluIGIsIGlmIGFueVxuICAgICAgaSA9IC0xLCAvLyBpbmRleCBpbiBzXG4gICAgICBzID0gW10sIC8vIHN0cmluZyBjb25zdGFudHMgYW5kIHBsYWNlaG9sZGVyc1xuICAgICAgcSA9IFtdOyAvLyBudW1iZXIgaW50ZXJwb2xhdG9yc1xuXG4gIC8vIENvZXJjZSBpbnB1dHMgdG8gc3RyaW5ncy5cbiAgYSA9IGEgKyBcIlwiLCBiID0gYiArIFwiXCI7XG5cbiAgLy8gSW50ZXJwb2xhdGUgcGFpcnMgb2YgbnVtYmVycyBpbiBhICYgYi5cbiAgd2hpbGUgKChhbSA9IHJlQS5leGVjKGEpKVxuICAgICAgJiYgKGJtID0gcmVCLmV4ZWMoYikpKSB7XG4gICAgaWYgKChicyA9IGJtLmluZGV4KSA+IGJpKSB7IC8vIGEgc3RyaW5nIHByZWNlZGVzIHRoZSBuZXh0IG51bWJlciBpbiBiXG4gICAgICBicyA9IGIuc2xpY2UoYmksIGJzKTtcbiAgICAgIGlmIChzW2ldKSBzW2ldICs9IGJzOyAvLyBjb2FsZXNjZSB3aXRoIHByZXZpb3VzIHN0cmluZ1xuICAgICAgZWxzZSBzWysraV0gPSBicztcbiAgICB9XG4gICAgaWYgKChhbSA9IGFtWzBdKSA9PT0gKGJtID0gYm1bMF0pKSB7IC8vIG51bWJlcnMgaW4gYSAmIGIgbWF0Y2hcbiAgICAgIGlmIChzW2ldKSBzW2ldICs9IGJtOyAvLyBjb2FsZXNjZSB3aXRoIHByZXZpb3VzIHN0cmluZ1xuICAgICAgZWxzZSBzWysraV0gPSBibTtcbiAgICB9IGVsc2UgeyAvLyBpbnRlcnBvbGF0ZSBub24tbWF0Y2hpbmcgbnVtYmVyc1xuICAgICAgc1srK2ldID0gbnVsbDtcbiAgICAgIHEucHVzaCh7aTogaSwgeDogbnVtYmVyKGFtLCBibSl9KTtcbiAgICB9XG4gICAgYmkgPSByZUIubGFzdEluZGV4O1xuICB9XG5cbiAgLy8gQWRkIHJlbWFpbnMgb2YgYi5cbiAgaWYgKGJpIDwgYi5sZW5ndGgpIHtcbiAgICBicyA9IGIuc2xpY2UoYmkpO1xuICAgIGlmIChzW2ldKSBzW2ldICs9IGJzOyAvLyBjb2FsZXNjZSB3aXRoIHByZXZpb3VzIHN0cmluZ1xuICAgIGVsc2Ugc1srK2ldID0gYnM7XG4gIH1cblxuICAvLyBTcGVjaWFsIG9wdGltaXphdGlvbiBmb3Igb25seSBhIHNpbmdsZSBtYXRjaC5cbiAgLy8gT3RoZXJ3aXNlLCBpbnRlcnBvbGF0ZSBlYWNoIG9mIHRoZSBudW1iZXJzIGFuZCByZWpvaW4gdGhlIHN0cmluZy5cbiAgcmV0dXJuIHMubGVuZ3RoIDwgMiA/IChxWzBdXG4gICAgICA/IG9uZShxWzBdLngpXG4gICAgICA6IHplcm8oYikpXG4gICAgICA6IChiID0gcS5sZW5ndGgsIGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbzsgaSA8IGI7ICsraSkgc1sobyA9IHFbaV0pLmldID0gby54KHQpO1xuICAgICAgICAgIHJldHVybiBzLmpvaW4oXCJcIik7XG4gICAgICAgIH0pO1xufVxuXG5mdW5jdGlvbiB2YWx1ZShhLCBiKSB7XG4gIHZhciB0ID0gdHlwZW9mIGIsIGM7XG4gIHJldHVybiBiID09IG51bGwgfHwgdCA9PT0gXCJib29sZWFuXCIgPyBjb25zdGFudChiKVxuICAgICAgOiAodCA9PT0gXCJudW1iZXJcIiA/IG51bWJlclxuICAgICAgOiB0ID09PSBcInN0cmluZ1wiID8gKChjID0gZDNDb2xvci5jb2xvcihiKSkgPyAoYiA9IGMsIHJnYikgOiBzdHJpbmcpXG4gICAgICA6IGIgaW5zdGFuY2VvZiBkM0NvbG9yLmNvbG9yID8gcmdiXG4gICAgICA6IGIgaW5zdGFuY2VvZiBEYXRlID8gZGF0ZVxuICAgICAgOiBpc051bWJlckFycmF5KGIpID8gbnVtYmVyQXJyYXlcbiAgICAgIDogQXJyYXkuaXNBcnJheShiKSA/IGdlbmVyaWNBcnJheVxuICAgICAgOiB0eXBlb2YgYi52YWx1ZU9mICE9PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIGIudG9TdHJpbmcgIT09IFwiZnVuY3Rpb25cIiB8fCBpc05hTihiKSA/IG9iamVjdFxuICAgICAgOiBudW1iZXIpKGEsIGIpO1xufVxuXG5mdW5jdGlvbiBkaXNjcmV0ZShyYW5nZSkge1xuICB2YXIgbiA9IHJhbmdlLmxlbmd0aDtcbiAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICByZXR1cm4gcmFuZ2VbTWF0aC5tYXgoMCwgTWF0aC5taW4obiAtIDEsIE1hdGguZmxvb3IodCAqIG4pKSldO1xuICB9O1xufVxuXG5mdW5jdGlvbiBodWUkMShhLCBiKSB7XG4gIHZhciBpID0gaHVlKCthLCArYik7XG4gIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgdmFyIHggPSBpKHQpO1xuICAgIHJldHVybiB4IC0gMzYwICogTWF0aC5mbG9vcih4IC8gMzYwKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gcm91bmQoYSwgYikge1xuICByZXR1cm4gYSA9ICthLCBiID0gK2IsIGZ1bmN0aW9uKHQpIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZChhICogKDEgLSB0KSArIGIgKiB0KTtcbiAgfTtcbn1cblxudmFyIGRlZ3JlZXMgPSAxODAgLyBNYXRoLlBJO1xuXG52YXIgaWRlbnRpdHkgPSB7XG4gIHRyYW5zbGF0ZVg6IDAsXG4gIHRyYW5zbGF0ZVk6IDAsXG4gIHJvdGF0ZTogMCxcbiAgc2tld1g6IDAsXG4gIHNjYWxlWDogMSxcbiAgc2NhbGVZOiAxXG59O1xuXG5mdW5jdGlvbiBkZWNvbXBvc2UoYSwgYiwgYywgZCwgZSwgZikge1xuICB2YXIgc2NhbGVYLCBzY2FsZVksIHNrZXdYO1xuICBpZiAoc2NhbGVYID0gTWF0aC5zcXJ0KGEgKiBhICsgYiAqIGIpKSBhIC89IHNjYWxlWCwgYiAvPSBzY2FsZVg7XG4gIGlmIChza2V3WCA9IGEgKiBjICsgYiAqIGQpIGMgLT0gYSAqIHNrZXdYLCBkIC09IGIgKiBza2V3WDtcbiAgaWYgKHNjYWxlWSA9IE1hdGguc3FydChjICogYyArIGQgKiBkKSkgYyAvPSBzY2FsZVksIGQgLz0gc2NhbGVZLCBza2V3WCAvPSBzY2FsZVk7XG4gIGlmIChhICogZCA8IGIgKiBjKSBhID0gLWEsIGIgPSAtYiwgc2tld1ggPSAtc2tld1gsIHNjYWxlWCA9IC1zY2FsZVg7XG4gIHJldHVybiB7XG4gICAgdHJhbnNsYXRlWDogZSxcbiAgICB0cmFuc2xhdGVZOiBmLFxuICAgIHJvdGF0ZTogTWF0aC5hdGFuMihiLCBhKSAqIGRlZ3JlZXMsXG4gICAgc2tld1g6IE1hdGguYXRhbihza2V3WCkgKiBkZWdyZWVzLFxuICAgIHNjYWxlWDogc2NhbGVYLFxuICAgIHNjYWxlWTogc2NhbGVZXG4gIH07XG59XG5cbnZhciBjc3NOb2RlLFxuICAgIGNzc1Jvb3QsXG4gICAgY3NzVmlldyxcbiAgICBzdmdOb2RlO1xuXG5mdW5jdGlvbiBwYXJzZUNzcyh2YWx1ZSkge1xuICBpZiAodmFsdWUgPT09IFwibm9uZVwiKSByZXR1cm4gaWRlbnRpdHk7XG4gIGlmICghY3NzTm9kZSkgY3NzTm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJESVZcIiksIGNzc1Jvb3QgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsIGNzc1ZpZXcgPSBkb2N1bWVudC5kZWZhdWx0VmlldztcbiAgY3NzTm9kZS5zdHlsZS50cmFuc2Zvcm0gPSB2YWx1ZTtcbiAgdmFsdWUgPSBjc3NWaWV3LmdldENvbXB1dGVkU3R5bGUoY3NzUm9vdC5hcHBlbmRDaGlsZChjc3NOb2RlKSwgbnVsbCkuZ2V0UHJvcGVydHlWYWx1ZShcInRyYW5zZm9ybVwiKTtcbiAgY3NzUm9vdC5yZW1vdmVDaGlsZChjc3NOb2RlKTtcbiAgdmFsdWUgPSB2YWx1ZS5zbGljZSg3LCAtMSkuc3BsaXQoXCIsXCIpO1xuICByZXR1cm4gZGVjb21wb3NlKCt2YWx1ZVswXSwgK3ZhbHVlWzFdLCArdmFsdWVbMl0sICt2YWx1ZVszXSwgK3ZhbHVlWzRdLCArdmFsdWVbNV0pO1xufVxuXG5mdW5jdGlvbiBwYXJzZVN2Zyh2YWx1ZSkge1xuICBpZiAodmFsdWUgPT0gbnVsbCkgcmV0dXJuIGlkZW50aXR5O1xuICBpZiAoIXN2Z05vZGUpIHN2Z05vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiLCBcImdcIik7XG4gIHN2Z05vZGUuc2V0QXR0cmlidXRlKFwidHJhbnNmb3JtXCIsIHZhbHVlKTtcbiAgaWYgKCEodmFsdWUgPSBzdmdOb2RlLnRyYW5zZm9ybS5iYXNlVmFsLmNvbnNvbGlkYXRlKCkpKSByZXR1cm4gaWRlbnRpdHk7XG4gIHZhbHVlID0gdmFsdWUubWF0cml4O1xuICByZXR1cm4gZGVjb21wb3NlKHZhbHVlLmEsIHZhbHVlLmIsIHZhbHVlLmMsIHZhbHVlLmQsIHZhbHVlLmUsIHZhbHVlLmYpO1xufVxuXG5mdW5jdGlvbiBpbnRlcnBvbGF0ZVRyYW5zZm9ybShwYXJzZSwgcHhDb21tYSwgcHhQYXJlbiwgZGVnUGFyZW4pIHtcblxuICBmdW5jdGlvbiBwb3Aocykge1xuICAgIHJldHVybiBzLmxlbmd0aCA/IHMucG9wKCkgKyBcIiBcIiA6IFwiXCI7XG4gIH1cblxuICBmdW5jdGlvbiB0cmFuc2xhdGUoeGEsIHlhLCB4YiwgeWIsIHMsIHEpIHtcbiAgICBpZiAoeGEgIT09IHhiIHx8IHlhICE9PSB5Yikge1xuICAgICAgdmFyIGkgPSBzLnB1c2goXCJ0cmFuc2xhdGUoXCIsIG51bGwsIHB4Q29tbWEsIG51bGwsIHB4UGFyZW4pO1xuICAgICAgcS5wdXNoKHtpOiBpIC0gNCwgeDogbnVtYmVyKHhhLCB4Yil9LCB7aTogaSAtIDIsIHg6IG51bWJlcih5YSwgeWIpfSk7XG4gICAgfSBlbHNlIGlmICh4YiB8fCB5Yikge1xuICAgICAgcy5wdXNoKFwidHJhbnNsYXRlKFwiICsgeGIgKyBweENvbW1hICsgeWIgKyBweFBhcmVuKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByb3RhdGUoYSwgYiwgcywgcSkge1xuICAgIGlmIChhICE9PSBiKSB7XG4gICAgICBpZiAoYSAtIGIgPiAxODApIGIgKz0gMzYwOyBlbHNlIGlmIChiIC0gYSA+IDE4MCkgYSArPSAzNjA7IC8vIHNob3J0ZXN0IHBhdGhcbiAgICAgIHEucHVzaCh7aTogcy5wdXNoKHBvcChzKSArIFwicm90YXRlKFwiLCBudWxsLCBkZWdQYXJlbikgLSAyLCB4OiBudW1iZXIoYSwgYil9KTtcbiAgICB9IGVsc2UgaWYgKGIpIHtcbiAgICAgIHMucHVzaChwb3AocykgKyBcInJvdGF0ZShcIiArIGIgKyBkZWdQYXJlbik7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gc2tld1goYSwgYiwgcywgcSkge1xuICAgIGlmIChhICE9PSBiKSB7XG4gICAgICBxLnB1c2goe2k6IHMucHVzaChwb3AocykgKyBcInNrZXdYKFwiLCBudWxsLCBkZWdQYXJlbikgLSAyLCB4OiBudW1iZXIoYSwgYil9KTtcbiAgICB9IGVsc2UgaWYgKGIpIHtcbiAgICAgIHMucHVzaChwb3AocykgKyBcInNrZXdYKFwiICsgYiArIGRlZ1BhcmVuKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBzY2FsZSh4YSwgeWEsIHhiLCB5YiwgcywgcSkge1xuICAgIGlmICh4YSAhPT0geGIgfHwgeWEgIT09IHliKSB7XG4gICAgICB2YXIgaSA9IHMucHVzaChwb3AocykgKyBcInNjYWxlKFwiLCBudWxsLCBcIixcIiwgbnVsbCwgXCIpXCIpO1xuICAgICAgcS5wdXNoKHtpOiBpIC0gNCwgeDogbnVtYmVyKHhhLCB4Yil9LCB7aTogaSAtIDIsIHg6IG51bWJlcih5YSwgeWIpfSk7XG4gICAgfSBlbHNlIGlmICh4YiAhPT0gMSB8fCB5YiAhPT0gMSkge1xuICAgICAgcy5wdXNoKHBvcChzKSArIFwic2NhbGUoXCIgKyB4YiArIFwiLFwiICsgeWIgKyBcIilcIik7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uKGEsIGIpIHtcbiAgICB2YXIgcyA9IFtdLCAvLyBzdHJpbmcgY29uc3RhbnRzIGFuZCBwbGFjZWhvbGRlcnNcbiAgICAgICAgcSA9IFtdOyAvLyBudW1iZXIgaW50ZXJwb2xhdG9yc1xuICAgIGEgPSBwYXJzZShhKSwgYiA9IHBhcnNlKGIpO1xuICAgIHRyYW5zbGF0ZShhLnRyYW5zbGF0ZVgsIGEudHJhbnNsYXRlWSwgYi50cmFuc2xhdGVYLCBiLnRyYW5zbGF0ZVksIHMsIHEpO1xuICAgIHJvdGF0ZShhLnJvdGF0ZSwgYi5yb3RhdGUsIHMsIHEpO1xuICAgIHNrZXdYKGEuc2tld1gsIGIuc2tld1gsIHMsIHEpO1xuICAgIHNjYWxlKGEuc2NhbGVYLCBhLnNjYWxlWSwgYi5zY2FsZVgsIGIuc2NhbGVZLCBzLCBxKTtcbiAgICBhID0gYiA9IG51bGw7IC8vIGdjXG4gICAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICAgIHZhciBpID0gLTEsIG4gPSBxLmxlbmd0aCwgbztcbiAgICAgIHdoaWxlICgrK2kgPCBuKSBzWyhvID0gcVtpXSkuaV0gPSBvLngodCk7XG4gICAgICByZXR1cm4gcy5qb2luKFwiXCIpO1xuICAgIH07XG4gIH07XG59XG5cbnZhciBpbnRlcnBvbGF0ZVRyYW5zZm9ybUNzcyA9IGludGVycG9sYXRlVHJhbnNmb3JtKHBhcnNlQ3NzLCBcInB4LCBcIiwgXCJweClcIiwgXCJkZWcpXCIpO1xudmFyIGludGVycG9sYXRlVHJhbnNmb3JtU3ZnID0gaW50ZXJwb2xhdGVUcmFuc2Zvcm0ocGFyc2VTdmcsIFwiLCBcIiwgXCIpXCIsIFwiKVwiKTtcblxudmFyIHJobyA9IE1hdGguU1FSVDIsXG4gICAgcmhvMiA9IDIsXG4gICAgcmhvNCA9IDQsXG4gICAgZXBzaWxvbjIgPSAxZS0xMjtcblxuZnVuY3Rpb24gY29zaCh4KSB7XG4gIHJldHVybiAoKHggPSBNYXRoLmV4cCh4KSkgKyAxIC8geCkgLyAyO1xufVxuXG5mdW5jdGlvbiBzaW5oKHgpIHtcbiAgcmV0dXJuICgoeCA9IE1hdGguZXhwKHgpKSAtIDEgLyB4KSAvIDI7XG59XG5cbmZ1bmN0aW9uIHRhbmgoeCkge1xuICByZXR1cm4gKCh4ID0gTWF0aC5leHAoMiAqIHgpKSAtIDEpIC8gKHggKyAxKTtcbn1cblxuLy8gcDAgPSBbdXgwLCB1eTAsIHcwXVxuLy8gcDEgPSBbdXgxLCB1eTEsIHcxXVxuZnVuY3Rpb24gem9vbShwMCwgcDEpIHtcbiAgdmFyIHV4MCA9IHAwWzBdLCB1eTAgPSBwMFsxXSwgdzAgPSBwMFsyXSxcbiAgICAgIHV4MSA9IHAxWzBdLCB1eTEgPSBwMVsxXSwgdzEgPSBwMVsyXSxcbiAgICAgIGR4ID0gdXgxIC0gdXgwLFxuICAgICAgZHkgPSB1eTEgLSB1eTAsXG4gICAgICBkMiA9IGR4ICogZHggKyBkeSAqIGR5LFxuICAgICAgaSxcbiAgICAgIFM7XG5cbiAgLy8gU3BlY2lhbCBjYXNlIGZvciB1MCDiiYUgdTEuXG4gIGlmIChkMiA8IGVwc2lsb24yKSB7XG4gICAgUyA9IE1hdGgubG9nKHcxIC8gdzApIC8gcmhvO1xuICAgIGkgPSBmdW5jdGlvbih0KSB7XG4gICAgICByZXR1cm4gW1xuICAgICAgICB1eDAgKyB0ICogZHgsXG4gICAgICAgIHV5MCArIHQgKiBkeSxcbiAgICAgICAgdzAgKiBNYXRoLmV4cChyaG8gKiB0ICogUylcbiAgICAgIF07XG4gICAgfTtcbiAgfVxuXG4gIC8vIEdlbmVyYWwgY2FzZS5cbiAgZWxzZSB7XG4gICAgdmFyIGQxID0gTWF0aC5zcXJ0KGQyKSxcbiAgICAgICAgYjAgPSAodzEgKiB3MSAtIHcwICogdzAgKyByaG80ICogZDIpIC8gKDIgKiB3MCAqIHJobzIgKiBkMSksXG4gICAgICAgIGIxID0gKHcxICogdzEgLSB3MCAqIHcwIC0gcmhvNCAqIGQyKSAvICgyICogdzEgKiByaG8yICogZDEpLFxuICAgICAgICByMCA9IE1hdGgubG9nKE1hdGguc3FydChiMCAqIGIwICsgMSkgLSBiMCksXG4gICAgICAgIHIxID0gTWF0aC5sb2coTWF0aC5zcXJ0KGIxICogYjEgKyAxKSAtIGIxKTtcbiAgICBTID0gKHIxIC0gcjApIC8gcmhvO1xuICAgIGkgPSBmdW5jdGlvbih0KSB7XG4gICAgICB2YXIgcyA9IHQgKiBTLFxuICAgICAgICAgIGNvc2hyMCA9IGNvc2gocjApLFxuICAgICAgICAgIHUgPSB3MCAvIChyaG8yICogZDEpICogKGNvc2hyMCAqIHRhbmgocmhvICogcyArIHIwKSAtIHNpbmgocjApKTtcbiAgICAgIHJldHVybiBbXG4gICAgICAgIHV4MCArIHUgKiBkeCxcbiAgICAgICAgdXkwICsgdSAqIGR5LFxuICAgICAgICB3MCAqIGNvc2hyMCAvIGNvc2gocmhvICogcyArIHIwKVxuICAgICAgXTtcbiAgICB9O1xuICB9XG5cbiAgaS5kdXJhdGlvbiA9IFMgKiAxMDAwO1xuXG4gIHJldHVybiBpO1xufVxuXG5mdW5jdGlvbiBoc2woaHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gICAgdmFyIGggPSBodWUoKHN0YXJ0ID0gZDNDb2xvci5oc2woc3RhcnQpKS5oLCAoZW5kID0gZDNDb2xvci5oc2woZW5kKSkuaCksXG4gICAgICAgIHMgPSBub2dhbW1hKHN0YXJ0LnMsIGVuZC5zKSxcbiAgICAgICAgbCA9IG5vZ2FtbWEoc3RhcnQubCwgZW5kLmwpLFxuICAgICAgICBvcGFjaXR5ID0gbm9nYW1tYShzdGFydC5vcGFjaXR5LCBlbmQub3BhY2l0eSk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICAgIHN0YXJ0LmggPSBoKHQpO1xuICAgICAgc3RhcnQucyA9IHModCk7XG4gICAgICBzdGFydC5sID0gbCh0KTtcbiAgICAgIHN0YXJ0Lm9wYWNpdHkgPSBvcGFjaXR5KHQpO1xuICAgICAgcmV0dXJuIHN0YXJ0ICsgXCJcIjtcbiAgICB9O1xuICB9XG59XG5cbnZhciBoc2wkMSA9IGhzbChodWUpO1xudmFyIGhzbExvbmcgPSBoc2wobm9nYW1tYSk7XG5cbmZ1bmN0aW9uIGxhYihzdGFydCwgZW5kKSB7XG4gIHZhciBsID0gbm9nYW1tYSgoc3RhcnQgPSBkM0NvbG9yLmxhYihzdGFydCkpLmwsIChlbmQgPSBkM0NvbG9yLmxhYihlbmQpKS5sKSxcbiAgICAgIGEgPSBub2dhbW1hKHN0YXJ0LmEsIGVuZC5hKSxcbiAgICAgIGIgPSBub2dhbW1hKHN0YXJ0LmIsIGVuZC5iKSxcbiAgICAgIG9wYWNpdHkgPSBub2dhbW1hKHN0YXJ0Lm9wYWNpdHksIGVuZC5vcGFjaXR5KTtcbiAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICBzdGFydC5sID0gbCh0KTtcbiAgICBzdGFydC5hID0gYSh0KTtcbiAgICBzdGFydC5iID0gYih0KTtcbiAgICBzdGFydC5vcGFjaXR5ID0gb3BhY2l0eSh0KTtcbiAgICByZXR1cm4gc3RhcnQgKyBcIlwiO1xuICB9O1xufVxuXG5mdW5jdGlvbiBoY2woaHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gICAgdmFyIGggPSBodWUoKHN0YXJ0ID0gZDNDb2xvci5oY2woc3RhcnQpKS5oLCAoZW5kID0gZDNDb2xvci5oY2woZW5kKSkuaCksXG4gICAgICAgIGMgPSBub2dhbW1hKHN0YXJ0LmMsIGVuZC5jKSxcbiAgICAgICAgbCA9IG5vZ2FtbWEoc3RhcnQubCwgZW5kLmwpLFxuICAgICAgICBvcGFjaXR5ID0gbm9nYW1tYShzdGFydC5vcGFjaXR5LCBlbmQub3BhY2l0eSk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICAgIHN0YXJ0LmggPSBoKHQpO1xuICAgICAgc3RhcnQuYyA9IGModCk7XG4gICAgICBzdGFydC5sID0gbCh0KTtcbiAgICAgIHN0YXJ0Lm9wYWNpdHkgPSBvcGFjaXR5KHQpO1xuICAgICAgcmV0dXJuIHN0YXJ0ICsgXCJcIjtcbiAgICB9O1xuICB9XG59XG5cbnZhciBoY2wkMSA9IGhjbChodWUpO1xudmFyIGhjbExvbmcgPSBoY2wobm9nYW1tYSk7XG5cbmZ1bmN0aW9uIGN1YmVoZWxpeChodWUpIHtcbiAgcmV0dXJuIChmdW5jdGlvbiBjdWJlaGVsaXhHYW1tYSh5KSB7XG4gICAgeSA9ICt5O1xuXG4gICAgZnVuY3Rpb24gY3ViZWhlbGl4KHN0YXJ0LCBlbmQpIHtcbiAgICAgIHZhciBoID0gaHVlKChzdGFydCA9IGQzQ29sb3IuY3ViZWhlbGl4KHN0YXJ0KSkuaCwgKGVuZCA9IGQzQ29sb3IuY3ViZWhlbGl4KGVuZCkpLmgpLFxuICAgICAgICAgIHMgPSBub2dhbW1hKHN0YXJ0LnMsIGVuZC5zKSxcbiAgICAgICAgICBsID0gbm9nYW1tYShzdGFydC5sLCBlbmQubCksXG4gICAgICAgICAgb3BhY2l0eSA9IG5vZ2FtbWEoc3RhcnQub3BhY2l0eSwgZW5kLm9wYWNpdHkpO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgc3RhcnQuaCA9IGgodCk7XG4gICAgICAgIHN0YXJ0LnMgPSBzKHQpO1xuICAgICAgICBzdGFydC5sID0gbChNYXRoLnBvdyh0LCB5KSk7XG4gICAgICAgIHN0YXJ0Lm9wYWNpdHkgPSBvcGFjaXR5KHQpO1xuICAgICAgICByZXR1cm4gc3RhcnQgKyBcIlwiO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICBjdWJlaGVsaXguZ2FtbWEgPSBjdWJlaGVsaXhHYW1tYTtcblxuICAgIHJldHVybiBjdWJlaGVsaXg7XG4gIH0pKDEpO1xufVxuXG52YXIgY3ViZWhlbGl4JDEgPSBjdWJlaGVsaXgoaHVlKTtcbnZhciBjdWJlaGVsaXhMb25nID0gY3ViZWhlbGl4KG5vZ2FtbWEpO1xuXG5mdW5jdGlvbiBwaWVjZXdpc2UoaW50ZXJwb2xhdGUsIHZhbHVlcykge1xuICB2YXIgaSA9IDAsIG4gPSB2YWx1ZXMubGVuZ3RoIC0gMSwgdiA9IHZhbHVlc1swXSwgSSA9IG5ldyBBcnJheShuIDwgMCA/IDAgOiBuKTtcbiAgd2hpbGUgKGkgPCBuKSBJW2ldID0gaW50ZXJwb2xhdGUodiwgdiA9IHZhbHVlc1srK2ldKTtcbiAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICB2YXIgaSA9IE1hdGgubWF4KDAsIE1hdGgubWluKG4gLSAxLCBNYXRoLmZsb29yKHQgKj0gbikpKTtcbiAgICByZXR1cm4gSVtpXSh0IC0gaSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHF1YW50aXplKGludGVycG9sYXRvciwgbikge1xuICB2YXIgc2FtcGxlcyA9IG5ldyBBcnJheShuKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBuOyArK2kpIHNhbXBsZXNbaV0gPSBpbnRlcnBvbGF0b3IoaSAvIChuIC0gMSkpO1xuICByZXR1cm4gc2FtcGxlcztcbn1cblxuZXhwb3J0cy5pbnRlcnBvbGF0ZSA9IHZhbHVlO1xuZXhwb3J0cy5pbnRlcnBvbGF0ZUFycmF5ID0gYXJyYXk7XG5leHBvcnRzLmludGVycG9sYXRlQmFzaXMgPSBiYXNpcyQxO1xuZXhwb3J0cy5pbnRlcnBvbGF0ZUJhc2lzQ2xvc2VkID0gYmFzaXNDbG9zZWQ7XG5leHBvcnRzLmludGVycG9sYXRlQ3ViZWhlbGl4ID0gY3ViZWhlbGl4JDE7XG5leHBvcnRzLmludGVycG9sYXRlQ3ViZWhlbGl4TG9uZyA9IGN1YmVoZWxpeExvbmc7XG5leHBvcnRzLmludGVycG9sYXRlRGF0ZSA9IGRhdGU7XG5leHBvcnRzLmludGVycG9sYXRlRGlzY3JldGUgPSBkaXNjcmV0ZTtcbmV4cG9ydHMuaW50ZXJwb2xhdGVIY2wgPSBoY2wkMTtcbmV4cG9ydHMuaW50ZXJwb2xhdGVIY2xMb25nID0gaGNsTG9uZztcbmV4cG9ydHMuaW50ZXJwb2xhdGVIc2wgPSBoc2wkMTtcbmV4cG9ydHMuaW50ZXJwb2xhdGVIc2xMb25nID0gaHNsTG9uZztcbmV4cG9ydHMuaW50ZXJwb2xhdGVIdWUgPSBodWUkMTtcbmV4cG9ydHMuaW50ZXJwb2xhdGVMYWIgPSBsYWI7XG5leHBvcnRzLmludGVycG9sYXRlTnVtYmVyID0gbnVtYmVyO1xuZXhwb3J0cy5pbnRlcnBvbGF0ZU51bWJlckFycmF5ID0gbnVtYmVyQXJyYXk7XG5leHBvcnRzLmludGVycG9sYXRlT2JqZWN0ID0gb2JqZWN0O1xuZXhwb3J0cy5pbnRlcnBvbGF0ZVJnYiA9IHJnYjtcbmV4cG9ydHMuaW50ZXJwb2xhdGVSZ2JCYXNpcyA9IHJnYkJhc2lzO1xuZXhwb3J0cy5pbnRlcnBvbGF0ZVJnYkJhc2lzQ2xvc2VkID0gcmdiQmFzaXNDbG9zZWQ7XG5leHBvcnRzLmludGVycG9sYXRlUm91bmQgPSByb3VuZDtcbmV4cG9ydHMuaW50ZXJwb2xhdGVTdHJpbmcgPSBzdHJpbmc7XG5leHBvcnRzLmludGVycG9sYXRlVHJhbnNmb3JtQ3NzID0gaW50ZXJwb2xhdGVUcmFuc2Zvcm1Dc3M7XG5leHBvcnRzLmludGVycG9sYXRlVHJhbnNmb3JtU3ZnID0gaW50ZXJwb2xhdGVUcmFuc2Zvcm1Tdmc7XG5leHBvcnRzLmludGVycG9sYXRlWm9vbSA9IHpvb207XG5leHBvcnRzLnBpZWNld2lzZSA9IHBpZWNld2lzZTtcbmV4cG9ydHMucXVhbnRpemUgPSBxdWFudGl6ZTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxufSkpO1xuIiwiLy8gaHR0cHM6Ly9kM2pzLm9yZy9kMy1wYXRoLyB2MS4wLjkgQ29weXJpZ2h0IDIwMTkgTWlrZSBCb3N0b2NrXG4oZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xudHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnID8gZmFjdG9yeShleHBvcnRzKSA6XG50eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWydleHBvcnRzJ10sIGZhY3RvcnkpIDpcbihnbG9iYWwgPSBnbG9iYWwgfHwgc2VsZiwgZmFjdG9yeShnbG9iYWwuZDMgPSBnbG9iYWwuZDMgfHwge30pKTtcbn0odGhpcywgZnVuY3Rpb24gKGV4cG9ydHMpIHsgJ3VzZSBzdHJpY3QnO1xuXG52YXIgcGkgPSBNYXRoLlBJLFxuICAgIHRhdSA9IDIgKiBwaSxcbiAgICBlcHNpbG9uID0gMWUtNixcbiAgICB0YXVFcHNpbG9uID0gdGF1IC0gZXBzaWxvbjtcblxuZnVuY3Rpb24gUGF0aCgpIHtcbiAgdGhpcy5feDAgPSB0aGlzLl95MCA9IC8vIHN0YXJ0IG9mIGN1cnJlbnQgc3VicGF0aFxuICB0aGlzLl94MSA9IHRoaXMuX3kxID0gbnVsbDsgLy8gZW5kIG9mIGN1cnJlbnQgc3VicGF0aFxuICB0aGlzLl8gPSBcIlwiO1xufVxuXG5mdW5jdGlvbiBwYXRoKCkge1xuICByZXR1cm4gbmV3IFBhdGg7XG59XG5cblBhdGgucHJvdG90eXBlID0gcGF0aC5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBQYXRoLFxuICBtb3ZlVG86IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICB0aGlzLl8gKz0gXCJNXCIgKyAodGhpcy5feDAgPSB0aGlzLl94MSA9ICt4KSArIFwiLFwiICsgKHRoaXMuX3kwID0gdGhpcy5feTEgPSAreSk7XG4gIH0sXG4gIGNsb3NlUGF0aDogZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMuX3gxICE9PSBudWxsKSB7XG4gICAgICB0aGlzLl94MSA9IHRoaXMuX3gwLCB0aGlzLl95MSA9IHRoaXMuX3kwO1xuICAgICAgdGhpcy5fICs9IFwiWlwiO1xuICAgIH1cbiAgfSxcbiAgbGluZVRvOiBmdW5jdGlvbih4LCB5KSB7XG4gICAgdGhpcy5fICs9IFwiTFwiICsgKHRoaXMuX3gxID0gK3gpICsgXCIsXCIgKyAodGhpcy5feTEgPSAreSk7XG4gIH0sXG4gIHF1YWRyYXRpY0N1cnZlVG86IGZ1bmN0aW9uKHgxLCB5MSwgeCwgeSkge1xuICAgIHRoaXMuXyArPSBcIlFcIiArICgreDEpICsgXCIsXCIgKyAoK3kxKSArIFwiLFwiICsgKHRoaXMuX3gxID0gK3gpICsgXCIsXCIgKyAodGhpcy5feTEgPSAreSk7XG4gIH0sXG4gIGJlemllckN1cnZlVG86IGZ1bmN0aW9uKHgxLCB5MSwgeDIsIHkyLCB4LCB5KSB7XG4gICAgdGhpcy5fICs9IFwiQ1wiICsgKCt4MSkgKyBcIixcIiArICgreTEpICsgXCIsXCIgKyAoK3gyKSArIFwiLFwiICsgKCt5MikgKyBcIixcIiArICh0aGlzLl94MSA9ICt4KSArIFwiLFwiICsgKHRoaXMuX3kxID0gK3kpO1xuICB9LFxuICBhcmNUbzogZnVuY3Rpb24oeDEsIHkxLCB4MiwgeTIsIHIpIHtcbiAgICB4MSA9ICt4MSwgeTEgPSAreTEsIHgyID0gK3gyLCB5MiA9ICt5MiwgciA9ICtyO1xuICAgIHZhciB4MCA9IHRoaXMuX3gxLFxuICAgICAgICB5MCA9IHRoaXMuX3kxLFxuICAgICAgICB4MjEgPSB4MiAtIHgxLFxuICAgICAgICB5MjEgPSB5MiAtIHkxLFxuICAgICAgICB4MDEgPSB4MCAtIHgxLFxuICAgICAgICB5MDEgPSB5MCAtIHkxLFxuICAgICAgICBsMDFfMiA9IHgwMSAqIHgwMSArIHkwMSAqIHkwMTtcblxuICAgIC8vIElzIHRoZSByYWRpdXMgbmVnYXRpdmU/IEVycm9yLlxuICAgIGlmIChyIDwgMCkgdGhyb3cgbmV3IEVycm9yKFwibmVnYXRpdmUgcmFkaXVzOiBcIiArIHIpO1xuXG4gICAgLy8gSXMgdGhpcyBwYXRoIGVtcHR5PyBNb3ZlIHRvICh4MSx5MSkuXG4gICAgaWYgKHRoaXMuX3gxID09PSBudWxsKSB7XG4gICAgICB0aGlzLl8gKz0gXCJNXCIgKyAodGhpcy5feDEgPSB4MSkgKyBcIixcIiArICh0aGlzLl95MSA9IHkxKTtcbiAgICB9XG5cbiAgICAvLyBPciwgaXMgKHgxLHkxKSBjb2luY2lkZW50IHdpdGggKHgwLHkwKT8gRG8gbm90aGluZy5cbiAgICBlbHNlIGlmICghKGwwMV8yID4gZXBzaWxvbikpO1xuXG4gICAgLy8gT3IsIGFyZSAoeDAseTApLCAoeDEseTEpIGFuZCAoeDIseTIpIGNvbGxpbmVhcj9cbiAgICAvLyBFcXVpdmFsZW50bHksIGlzICh4MSx5MSkgY29pbmNpZGVudCB3aXRoICh4Mix5Mik/XG4gICAgLy8gT3IsIGlzIHRoZSByYWRpdXMgemVybz8gTGluZSB0byAoeDEseTEpLlxuICAgIGVsc2UgaWYgKCEoTWF0aC5hYnMoeTAxICogeDIxIC0geTIxICogeDAxKSA+IGVwc2lsb24pIHx8ICFyKSB7XG4gICAgICB0aGlzLl8gKz0gXCJMXCIgKyAodGhpcy5feDEgPSB4MSkgKyBcIixcIiArICh0aGlzLl95MSA9IHkxKTtcbiAgICB9XG5cbiAgICAvLyBPdGhlcndpc2UsIGRyYXcgYW4gYXJjIVxuICAgIGVsc2Uge1xuICAgICAgdmFyIHgyMCA9IHgyIC0geDAsXG4gICAgICAgICAgeTIwID0geTIgLSB5MCxcbiAgICAgICAgICBsMjFfMiA9IHgyMSAqIHgyMSArIHkyMSAqIHkyMSxcbiAgICAgICAgICBsMjBfMiA9IHgyMCAqIHgyMCArIHkyMCAqIHkyMCxcbiAgICAgICAgICBsMjEgPSBNYXRoLnNxcnQobDIxXzIpLFxuICAgICAgICAgIGwwMSA9IE1hdGguc3FydChsMDFfMiksXG4gICAgICAgICAgbCA9IHIgKiBNYXRoLnRhbigocGkgLSBNYXRoLmFjb3MoKGwyMV8yICsgbDAxXzIgLSBsMjBfMikgLyAoMiAqIGwyMSAqIGwwMSkpKSAvIDIpLFxuICAgICAgICAgIHQwMSA9IGwgLyBsMDEsXG4gICAgICAgICAgdDIxID0gbCAvIGwyMTtcblxuICAgICAgLy8gSWYgdGhlIHN0YXJ0IHRhbmdlbnQgaXMgbm90IGNvaW5jaWRlbnQgd2l0aCAoeDAseTApLCBsaW5lIHRvLlxuICAgICAgaWYgKE1hdGguYWJzKHQwMSAtIDEpID4gZXBzaWxvbikge1xuICAgICAgICB0aGlzLl8gKz0gXCJMXCIgKyAoeDEgKyB0MDEgKiB4MDEpICsgXCIsXCIgKyAoeTEgKyB0MDEgKiB5MDEpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl8gKz0gXCJBXCIgKyByICsgXCIsXCIgKyByICsgXCIsMCwwLFwiICsgKCsoeTAxICogeDIwID4geDAxICogeTIwKSkgKyBcIixcIiArICh0aGlzLl94MSA9IHgxICsgdDIxICogeDIxKSArIFwiLFwiICsgKHRoaXMuX3kxID0geTEgKyB0MjEgKiB5MjEpO1xuICAgIH1cbiAgfSxcbiAgYXJjOiBmdW5jdGlvbih4LCB5LCByLCBhMCwgYTEsIGNjdykge1xuICAgIHggPSAreCwgeSA9ICt5LCByID0gK3IsIGNjdyA9ICEhY2N3O1xuICAgIHZhciBkeCA9IHIgKiBNYXRoLmNvcyhhMCksXG4gICAgICAgIGR5ID0gciAqIE1hdGguc2luKGEwKSxcbiAgICAgICAgeDAgPSB4ICsgZHgsXG4gICAgICAgIHkwID0geSArIGR5LFxuICAgICAgICBjdyA9IDEgXiBjY3csXG4gICAgICAgIGRhID0gY2N3ID8gYTAgLSBhMSA6IGExIC0gYTA7XG5cbiAgICAvLyBJcyB0aGUgcmFkaXVzIG5lZ2F0aXZlPyBFcnJvci5cbiAgICBpZiAociA8IDApIHRocm93IG5ldyBFcnJvcihcIm5lZ2F0aXZlIHJhZGl1czogXCIgKyByKTtcblxuICAgIC8vIElzIHRoaXMgcGF0aCBlbXB0eT8gTW92ZSB0byAoeDAseTApLlxuICAgIGlmICh0aGlzLl94MSA9PT0gbnVsbCkge1xuICAgICAgdGhpcy5fICs9IFwiTVwiICsgeDAgKyBcIixcIiArIHkwO1xuICAgIH1cblxuICAgIC8vIE9yLCBpcyAoeDAseTApIG5vdCBjb2luY2lkZW50IHdpdGggdGhlIHByZXZpb3VzIHBvaW50PyBMaW5lIHRvICh4MCx5MCkuXG4gICAgZWxzZSBpZiAoTWF0aC5hYnModGhpcy5feDEgLSB4MCkgPiBlcHNpbG9uIHx8IE1hdGguYWJzKHRoaXMuX3kxIC0geTApID4gZXBzaWxvbikge1xuICAgICAgdGhpcy5fICs9IFwiTFwiICsgeDAgKyBcIixcIiArIHkwO1xuICAgIH1cblxuICAgIC8vIElzIHRoaXMgYXJjIGVtcHR5PyBXZeKAmXJlIGRvbmUuXG4gICAgaWYgKCFyKSByZXR1cm47XG5cbiAgICAvLyBEb2VzIHRoZSBhbmdsZSBnbyB0aGUgd3Jvbmcgd2F5PyBGbGlwIHRoZSBkaXJlY3Rpb24uXG4gICAgaWYgKGRhIDwgMCkgZGEgPSBkYSAlIHRhdSArIHRhdTtcblxuICAgIC8vIElzIHRoaXMgYSBjb21wbGV0ZSBjaXJjbGU/IERyYXcgdHdvIGFyY3MgdG8gY29tcGxldGUgdGhlIGNpcmNsZS5cbiAgICBpZiAoZGEgPiB0YXVFcHNpbG9uKSB7XG4gICAgICB0aGlzLl8gKz0gXCJBXCIgKyByICsgXCIsXCIgKyByICsgXCIsMCwxLFwiICsgY3cgKyBcIixcIiArICh4IC0gZHgpICsgXCIsXCIgKyAoeSAtIGR5KSArIFwiQVwiICsgciArIFwiLFwiICsgciArIFwiLDAsMSxcIiArIGN3ICsgXCIsXCIgKyAodGhpcy5feDEgPSB4MCkgKyBcIixcIiArICh0aGlzLl95MSA9IHkwKTtcbiAgICB9XG5cbiAgICAvLyBJcyB0aGlzIGFyYyBub24tZW1wdHk/IERyYXcgYW4gYXJjIVxuICAgIGVsc2UgaWYgKGRhID4gZXBzaWxvbikge1xuICAgICAgdGhpcy5fICs9IFwiQVwiICsgciArIFwiLFwiICsgciArIFwiLDAsXCIgKyAoKyhkYSA+PSBwaSkpICsgXCIsXCIgKyBjdyArIFwiLFwiICsgKHRoaXMuX3gxID0geCArIHIgKiBNYXRoLmNvcyhhMSkpICsgXCIsXCIgKyAodGhpcy5feTEgPSB5ICsgciAqIE1hdGguc2luKGExKSk7XG4gICAgfVxuICB9LFxuICByZWN0OiBmdW5jdGlvbih4LCB5LCB3LCBoKSB7XG4gICAgdGhpcy5fICs9IFwiTVwiICsgKHRoaXMuX3gwID0gdGhpcy5feDEgPSAreCkgKyBcIixcIiArICh0aGlzLl95MCA9IHRoaXMuX3kxID0gK3kpICsgXCJoXCIgKyAoK3cpICsgXCJ2XCIgKyAoK2gpICsgXCJoXCIgKyAoLXcpICsgXCJaXCI7XG4gIH0sXG4gIHRvU3RyaW5nOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5fO1xuICB9XG59O1xuXG5leHBvcnRzLnBhdGggPSBwYXRoO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG59KSk7XG4iLCIvLyBodHRwczovL2QzanMub3JnL2QzLXNjYWxlLyB2Mi4yLjIgQ29weXJpZ2h0IDIwMTkgTWlrZSBCb3N0b2NrXG4oZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xudHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnID8gZmFjdG9yeShleHBvcnRzLCByZXF1aXJlKCdkMy1jb2xsZWN0aW9uJyksIHJlcXVpcmUoJ2QzLWFycmF5JyksIHJlcXVpcmUoJ2QzLWludGVycG9sYXRlJyksIHJlcXVpcmUoJ2QzLWZvcm1hdCcpLCByZXF1aXJlKCdkMy10aW1lJyksIHJlcXVpcmUoJ2QzLXRpbWUtZm9ybWF0JykpIDpcbnR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJ2V4cG9ydHMnLCAnZDMtY29sbGVjdGlvbicsICdkMy1hcnJheScsICdkMy1pbnRlcnBvbGF0ZScsICdkMy1mb3JtYXQnLCAnZDMtdGltZScsICdkMy10aW1lLWZvcm1hdCddLCBmYWN0b3J5KSA6XG4oZmFjdG9yeSgoZ2xvYmFsLmQzID0gZ2xvYmFsLmQzIHx8IHt9KSxnbG9iYWwuZDMsZ2xvYmFsLmQzLGdsb2JhbC5kMyxnbG9iYWwuZDMsZ2xvYmFsLmQzLGdsb2JhbC5kMykpO1xufSh0aGlzLCAoZnVuY3Rpb24gKGV4cG9ydHMsZDNDb2xsZWN0aW9uLGQzQXJyYXksZDNJbnRlcnBvbGF0ZSxkM0Zvcm1hdCxkM1RpbWUsZDNUaW1lRm9ybWF0KSB7ICd1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gaW5pdFJhbmdlKGRvbWFpbiwgcmFuZ2UpIHtcbiAgc3dpdGNoIChhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgY2FzZSAwOiBicmVhaztcbiAgICBjYXNlIDE6IHRoaXMucmFuZ2UoZG9tYWluKTsgYnJlYWs7XG4gICAgZGVmYXVsdDogdGhpcy5yYW5nZShyYW5nZSkuZG9tYWluKGRvbWFpbik7IGJyZWFrO1xuICB9XG4gIHJldHVybiB0aGlzO1xufVxuXG5mdW5jdGlvbiBpbml0SW50ZXJwb2xhdG9yKGRvbWFpbiwgaW50ZXJwb2xhdG9yKSB7XG4gIHN3aXRjaCAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgIGNhc2UgMDogYnJlYWs7XG4gICAgY2FzZSAxOiB0aGlzLmludGVycG9sYXRvcihkb21haW4pOyBicmVhaztcbiAgICBkZWZhdWx0OiB0aGlzLmludGVycG9sYXRvcihpbnRlcnBvbGF0b3IpLmRvbWFpbihkb21haW4pOyBicmVhaztcbiAgfVxuICByZXR1cm4gdGhpcztcbn1cblxudmFyIGFycmF5ID0gQXJyYXkucHJvdG90eXBlO1xuXG52YXIgbWFwID0gYXJyYXkubWFwO1xudmFyIHNsaWNlID0gYXJyYXkuc2xpY2U7XG5cbnZhciBpbXBsaWNpdCA9IHtuYW1lOiBcImltcGxpY2l0XCJ9O1xuXG5mdW5jdGlvbiBvcmRpbmFsKCkge1xuICB2YXIgaW5kZXggPSBkM0NvbGxlY3Rpb24ubWFwKCksXG4gICAgICBkb21haW4gPSBbXSxcbiAgICAgIHJhbmdlID0gW10sXG4gICAgICB1bmtub3duID0gaW1wbGljaXQ7XG5cbiAgZnVuY3Rpb24gc2NhbGUoZCkge1xuICAgIHZhciBrZXkgPSBkICsgXCJcIiwgaSA9IGluZGV4LmdldChrZXkpO1xuICAgIGlmICghaSkge1xuICAgICAgaWYgKHVua25vd24gIT09IGltcGxpY2l0KSByZXR1cm4gdW5rbm93bjtcbiAgICAgIGluZGV4LnNldChrZXksIGkgPSBkb21haW4ucHVzaChkKSk7XG4gICAgfVxuICAgIHJldHVybiByYW5nZVsoaSAtIDEpICUgcmFuZ2UubGVuZ3RoXTtcbiAgfVxuXG4gIHNjYWxlLmRvbWFpbiA9IGZ1bmN0aW9uKF8pIHtcbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBkb21haW4uc2xpY2UoKTtcbiAgICBkb21haW4gPSBbXSwgaW5kZXggPSBkM0NvbGxlY3Rpb24ubWFwKCk7XG4gICAgdmFyIGkgPSAtMSwgbiA9IF8ubGVuZ3RoLCBkLCBrZXk7XG4gICAgd2hpbGUgKCsraSA8IG4pIGlmICghaW5kZXguaGFzKGtleSA9IChkID0gX1tpXSkgKyBcIlwiKSkgaW5kZXguc2V0KGtleSwgZG9tYWluLnB1c2goZCkpO1xuICAgIHJldHVybiBzY2FsZTtcbiAgfTtcblxuICBzY2FsZS5yYW5nZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChyYW5nZSA9IHNsaWNlLmNhbGwoXyksIHNjYWxlKSA6IHJhbmdlLnNsaWNlKCk7XG4gIH07XG5cbiAgc2NhbGUudW5rbm93biA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh1bmtub3duID0gXywgc2NhbGUpIDogdW5rbm93bjtcbiAgfTtcblxuICBzY2FsZS5jb3B5ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIG9yZGluYWwoZG9tYWluLCByYW5nZSkudW5rbm93bih1bmtub3duKTtcbiAgfTtcblxuICBpbml0UmFuZ2UuYXBwbHkoc2NhbGUsIGFyZ3VtZW50cyk7XG5cbiAgcmV0dXJuIHNjYWxlO1xufVxuXG5mdW5jdGlvbiBiYW5kKCkge1xuICB2YXIgc2NhbGUgPSBvcmRpbmFsKCkudW5rbm93bih1bmRlZmluZWQpLFxuICAgICAgZG9tYWluID0gc2NhbGUuZG9tYWluLFxuICAgICAgb3JkaW5hbFJhbmdlID0gc2NhbGUucmFuZ2UsXG4gICAgICByYW5nZSA9IFswLCAxXSxcbiAgICAgIHN0ZXAsXG4gICAgICBiYW5kd2lkdGgsXG4gICAgICByb3VuZCA9IGZhbHNlLFxuICAgICAgcGFkZGluZ0lubmVyID0gMCxcbiAgICAgIHBhZGRpbmdPdXRlciA9IDAsXG4gICAgICBhbGlnbiA9IDAuNTtcblxuICBkZWxldGUgc2NhbGUudW5rbm93bjtcblxuICBmdW5jdGlvbiByZXNjYWxlKCkge1xuICAgIHZhciBuID0gZG9tYWluKCkubGVuZ3RoLFxuICAgICAgICByZXZlcnNlID0gcmFuZ2VbMV0gPCByYW5nZVswXSxcbiAgICAgICAgc3RhcnQgPSByYW5nZVtyZXZlcnNlIC0gMF0sXG4gICAgICAgIHN0b3AgPSByYW5nZVsxIC0gcmV2ZXJzZV07XG4gICAgc3RlcCA9IChzdG9wIC0gc3RhcnQpIC8gTWF0aC5tYXgoMSwgbiAtIHBhZGRpbmdJbm5lciArIHBhZGRpbmdPdXRlciAqIDIpO1xuICAgIGlmIChyb3VuZCkgc3RlcCA9IE1hdGguZmxvb3Ioc3RlcCk7XG4gICAgc3RhcnQgKz0gKHN0b3AgLSBzdGFydCAtIHN0ZXAgKiAobiAtIHBhZGRpbmdJbm5lcikpICogYWxpZ247XG4gICAgYmFuZHdpZHRoID0gc3RlcCAqICgxIC0gcGFkZGluZ0lubmVyKTtcbiAgICBpZiAocm91bmQpIHN0YXJ0ID0gTWF0aC5yb3VuZChzdGFydCksIGJhbmR3aWR0aCA9IE1hdGgucm91bmQoYmFuZHdpZHRoKTtcbiAgICB2YXIgdmFsdWVzID0gZDNBcnJheS5yYW5nZShuKS5tYXAoZnVuY3Rpb24oaSkgeyByZXR1cm4gc3RhcnQgKyBzdGVwICogaTsgfSk7XG4gICAgcmV0dXJuIG9yZGluYWxSYW5nZShyZXZlcnNlID8gdmFsdWVzLnJldmVyc2UoKSA6IHZhbHVlcyk7XG4gIH1cblxuICBzY2FsZS5kb21haW4gPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZG9tYWluKF8pLCByZXNjYWxlKCkpIDogZG9tYWluKCk7XG4gIH07XG5cbiAgc2NhbGUucmFuZ2UgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocmFuZ2UgPSBbK19bMF0sICtfWzFdXSwgcmVzY2FsZSgpKSA6IHJhbmdlLnNsaWNlKCk7XG4gIH07XG5cbiAgc2NhbGUucmFuZ2VSb3VuZCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gcmFuZ2UgPSBbK19bMF0sICtfWzFdXSwgcm91bmQgPSB0cnVlLCByZXNjYWxlKCk7XG4gIH07XG5cbiAgc2NhbGUuYmFuZHdpZHRoID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGJhbmR3aWR0aDtcbiAgfTtcblxuICBzY2FsZS5zdGVwID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHN0ZXA7XG4gIH07XG5cbiAgc2NhbGUucm91bmQgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocm91bmQgPSAhIV8sIHJlc2NhbGUoKSkgOiByb3VuZDtcbiAgfTtcblxuICBzY2FsZS5wYWRkaW5nID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHBhZGRpbmdJbm5lciA9IE1hdGgubWluKDEsIHBhZGRpbmdPdXRlciA9ICtfKSwgcmVzY2FsZSgpKSA6IHBhZGRpbmdJbm5lcjtcbiAgfTtcblxuICBzY2FsZS5wYWRkaW5nSW5uZXIgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocGFkZGluZ0lubmVyID0gTWF0aC5taW4oMSwgXyksIHJlc2NhbGUoKSkgOiBwYWRkaW5nSW5uZXI7XG4gIH07XG5cbiAgc2NhbGUucGFkZGluZ091dGVyID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHBhZGRpbmdPdXRlciA9ICtfLCByZXNjYWxlKCkpIDogcGFkZGluZ091dGVyO1xuICB9O1xuXG4gIHNjYWxlLmFsaWduID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGFsaWduID0gTWF0aC5tYXgoMCwgTWF0aC5taW4oMSwgXykpLCByZXNjYWxlKCkpIDogYWxpZ247XG4gIH07XG5cbiAgc2NhbGUuY29weSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBiYW5kKGRvbWFpbigpLCByYW5nZSlcbiAgICAgICAgLnJvdW5kKHJvdW5kKVxuICAgICAgICAucGFkZGluZ0lubmVyKHBhZGRpbmdJbm5lcilcbiAgICAgICAgLnBhZGRpbmdPdXRlcihwYWRkaW5nT3V0ZXIpXG4gICAgICAgIC5hbGlnbihhbGlnbik7XG4gIH07XG5cbiAgcmV0dXJuIGluaXRSYW5nZS5hcHBseShyZXNjYWxlKCksIGFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIHBvaW50aXNoKHNjYWxlKSB7XG4gIHZhciBjb3B5ID0gc2NhbGUuY29weTtcblxuICBzY2FsZS5wYWRkaW5nID0gc2NhbGUucGFkZGluZ091dGVyO1xuICBkZWxldGUgc2NhbGUucGFkZGluZ0lubmVyO1xuICBkZWxldGUgc2NhbGUucGFkZGluZ091dGVyO1xuXG4gIHNjYWxlLmNvcHkgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gcG9pbnRpc2goY29weSgpKTtcbiAgfTtcblxuICByZXR1cm4gc2NhbGU7XG59XG5cbmZ1bmN0aW9uIHBvaW50KCkge1xuICByZXR1cm4gcG9pbnRpc2goYmFuZC5hcHBseShudWxsLCBhcmd1bWVudHMpLnBhZGRpbmdJbm5lcigxKSk7XG59XG5cbmZ1bmN0aW9uIGNvbnN0YW50KHgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB4O1xuICB9O1xufVxuXG5mdW5jdGlvbiBudW1iZXIoeCkge1xuICByZXR1cm4gK3g7XG59XG5cbnZhciB1bml0ID0gWzAsIDFdO1xuXG5mdW5jdGlvbiBpZGVudGl0eSh4KSB7XG4gIHJldHVybiB4O1xufVxuXG5mdW5jdGlvbiBub3JtYWxpemUoYSwgYikge1xuICByZXR1cm4gKGIgLT0gKGEgPSArYSkpXG4gICAgICA/IGZ1bmN0aW9uKHgpIHsgcmV0dXJuICh4IC0gYSkgLyBiOyB9XG4gICAgICA6IGNvbnN0YW50KGlzTmFOKGIpID8gTmFOIDogMC41KTtcbn1cblxuZnVuY3Rpb24gY2xhbXBlcihkb21haW4pIHtcbiAgdmFyIGEgPSBkb21haW5bMF0sIGIgPSBkb21haW5bZG9tYWluLmxlbmd0aCAtIDFdLCB0O1xuICBpZiAoYSA+IGIpIHQgPSBhLCBhID0gYiwgYiA9IHQ7XG4gIHJldHVybiBmdW5jdGlvbih4KSB7IHJldHVybiBNYXRoLm1heChhLCBNYXRoLm1pbihiLCB4KSk7IH07XG59XG5cbi8vIG5vcm1hbGl6ZShhLCBiKSh4KSB0YWtlcyBhIGRvbWFpbiB2YWx1ZSB4IGluIFthLGJdIGFuZCByZXR1cm5zIHRoZSBjb3JyZXNwb25kaW5nIHBhcmFtZXRlciB0IGluIFswLDFdLlxuLy8gaW50ZXJwb2xhdGUoYSwgYikodCkgdGFrZXMgYSBwYXJhbWV0ZXIgdCBpbiBbMCwxXSBhbmQgcmV0dXJucyB0aGUgY29ycmVzcG9uZGluZyByYW5nZSB2YWx1ZSB4IGluIFthLGJdLlxuZnVuY3Rpb24gYmltYXAoZG9tYWluLCByYW5nZSwgaW50ZXJwb2xhdGUpIHtcbiAgdmFyIGQwID0gZG9tYWluWzBdLCBkMSA9IGRvbWFpblsxXSwgcjAgPSByYW5nZVswXSwgcjEgPSByYW5nZVsxXTtcbiAgaWYgKGQxIDwgZDApIGQwID0gbm9ybWFsaXplKGQxLCBkMCksIHIwID0gaW50ZXJwb2xhdGUocjEsIHIwKTtcbiAgZWxzZSBkMCA9IG5vcm1hbGl6ZShkMCwgZDEpLCByMCA9IGludGVycG9sYXRlKHIwLCByMSk7XG4gIHJldHVybiBmdW5jdGlvbih4KSB7IHJldHVybiByMChkMCh4KSk7IH07XG59XG5cbmZ1bmN0aW9uIHBvbHltYXAoZG9tYWluLCByYW5nZSwgaW50ZXJwb2xhdGUpIHtcbiAgdmFyIGogPSBNYXRoLm1pbihkb21haW4ubGVuZ3RoLCByYW5nZS5sZW5ndGgpIC0gMSxcbiAgICAgIGQgPSBuZXcgQXJyYXkoaiksXG4gICAgICByID0gbmV3IEFycmF5KGopLFxuICAgICAgaSA9IC0xO1xuXG4gIC8vIFJldmVyc2UgZGVzY2VuZGluZyBkb21haW5zLlxuICBpZiAoZG9tYWluW2pdIDwgZG9tYWluWzBdKSB7XG4gICAgZG9tYWluID0gZG9tYWluLnNsaWNlKCkucmV2ZXJzZSgpO1xuICAgIHJhbmdlID0gcmFuZ2Uuc2xpY2UoKS5yZXZlcnNlKCk7XG4gIH1cblxuICB3aGlsZSAoKytpIDwgaikge1xuICAgIGRbaV0gPSBub3JtYWxpemUoZG9tYWluW2ldLCBkb21haW5baSArIDFdKTtcbiAgICByW2ldID0gaW50ZXJwb2xhdGUocmFuZ2VbaV0sIHJhbmdlW2kgKyAxXSk7XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24oeCkge1xuICAgIHZhciBpID0gZDNBcnJheS5iaXNlY3QoZG9tYWluLCB4LCAxLCBqKSAtIDE7XG4gICAgcmV0dXJuIHJbaV0oZFtpXSh4KSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGNvcHkoc291cmNlLCB0YXJnZXQpIHtcbiAgcmV0dXJuIHRhcmdldFxuICAgICAgLmRvbWFpbihzb3VyY2UuZG9tYWluKCkpXG4gICAgICAucmFuZ2Uoc291cmNlLnJhbmdlKCkpXG4gICAgICAuaW50ZXJwb2xhdGUoc291cmNlLmludGVycG9sYXRlKCkpXG4gICAgICAuY2xhbXAoc291cmNlLmNsYW1wKCkpXG4gICAgICAudW5rbm93bihzb3VyY2UudW5rbm93bigpKTtcbn1cblxuZnVuY3Rpb24gdHJhbnNmb3JtZXIoKSB7XG4gIHZhciBkb21haW4gPSB1bml0LFxuICAgICAgcmFuZ2UgPSB1bml0LFxuICAgICAgaW50ZXJwb2xhdGUgPSBkM0ludGVycG9sYXRlLmludGVycG9sYXRlLFxuICAgICAgdHJhbnNmb3JtLFxuICAgICAgdW50cmFuc2Zvcm0sXG4gICAgICB1bmtub3duLFxuICAgICAgY2xhbXAgPSBpZGVudGl0eSxcbiAgICAgIHBpZWNld2lzZSxcbiAgICAgIG91dHB1dCxcbiAgICAgIGlucHV0O1xuXG4gIGZ1bmN0aW9uIHJlc2NhbGUoKSB7XG4gICAgcGllY2V3aXNlID0gTWF0aC5taW4oZG9tYWluLmxlbmd0aCwgcmFuZ2UubGVuZ3RoKSA+IDIgPyBwb2x5bWFwIDogYmltYXA7XG4gICAgb3V0cHV0ID0gaW5wdXQgPSBudWxsO1xuICAgIHJldHVybiBzY2FsZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNjYWxlKHgpIHtcbiAgICByZXR1cm4gaXNOYU4oeCA9ICt4KSA/IHVua25vd24gOiAob3V0cHV0IHx8IChvdXRwdXQgPSBwaWVjZXdpc2UoZG9tYWluLm1hcCh0cmFuc2Zvcm0pLCByYW5nZSwgaW50ZXJwb2xhdGUpKSkodHJhbnNmb3JtKGNsYW1wKHgpKSk7XG4gIH1cblxuICBzY2FsZS5pbnZlcnQgPSBmdW5jdGlvbih5KSB7XG4gICAgcmV0dXJuIGNsYW1wKHVudHJhbnNmb3JtKChpbnB1dCB8fCAoaW5wdXQgPSBwaWVjZXdpc2UocmFuZ2UsIGRvbWFpbi5tYXAodHJhbnNmb3JtKSwgZDNJbnRlcnBvbGF0ZS5pbnRlcnBvbGF0ZU51bWJlcikpKSh5KSkpO1xuICB9O1xuXG4gIHNjYWxlLmRvbWFpbiA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChkb21haW4gPSBtYXAuY2FsbChfLCBudW1iZXIpLCBjbGFtcCA9PT0gaWRlbnRpdHkgfHwgKGNsYW1wID0gY2xhbXBlcihkb21haW4pKSwgcmVzY2FsZSgpKSA6IGRvbWFpbi5zbGljZSgpO1xuICB9O1xuXG4gIHNjYWxlLnJhbmdlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHJhbmdlID0gc2xpY2UuY2FsbChfKSwgcmVzY2FsZSgpKSA6IHJhbmdlLnNsaWNlKCk7XG4gIH07XG5cbiAgc2NhbGUucmFuZ2VSb3VuZCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gcmFuZ2UgPSBzbGljZS5jYWxsKF8pLCBpbnRlcnBvbGF0ZSA9IGQzSW50ZXJwb2xhdGUuaW50ZXJwb2xhdGVSb3VuZCwgcmVzY2FsZSgpO1xuICB9O1xuXG4gIHNjYWxlLmNsYW1wID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGNsYW1wID0gXyA/IGNsYW1wZXIoZG9tYWluKSA6IGlkZW50aXR5LCBzY2FsZSkgOiBjbGFtcCAhPT0gaWRlbnRpdHk7XG4gIH07XG5cbiAgc2NhbGUuaW50ZXJwb2xhdGUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoaW50ZXJwb2xhdGUgPSBfLCByZXNjYWxlKCkpIDogaW50ZXJwb2xhdGU7XG4gIH07XG5cbiAgc2NhbGUudW5rbm93biA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh1bmtub3duID0gXywgc2NhbGUpIDogdW5rbm93bjtcbiAgfTtcblxuICByZXR1cm4gZnVuY3Rpb24odCwgdSkge1xuICAgIHRyYW5zZm9ybSA9IHQsIHVudHJhbnNmb3JtID0gdTtcbiAgICByZXR1cm4gcmVzY2FsZSgpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBjb250aW51b3VzKHRyYW5zZm9ybSwgdW50cmFuc2Zvcm0pIHtcbiAgcmV0dXJuIHRyYW5zZm9ybWVyKCkodHJhbnNmb3JtLCB1bnRyYW5zZm9ybSk7XG59XG5cbmZ1bmN0aW9uIHRpY2tGb3JtYXQoc3RhcnQsIHN0b3AsIGNvdW50LCBzcGVjaWZpZXIpIHtcbiAgdmFyIHN0ZXAgPSBkM0FycmF5LnRpY2tTdGVwKHN0YXJ0LCBzdG9wLCBjb3VudCksXG4gICAgICBwcmVjaXNpb247XG4gIHNwZWNpZmllciA9IGQzRm9ybWF0LmZvcm1hdFNwZWNpZmllcihzcGVjaWZpZXIgPT0gbnVsbCA/IFwiLGZcIiA6IHNwZWNpZmllcik7XG4gIHN3aXRjaCAoc3BlY2lmaWVyLnR5cGUpIHtcbiAgICBjYXNlIFwic1wiOiB7XG4gICAgICB2YXIgdmFsdWUgPSBNYXRoLm1heChNYXRoLmFicyhzdGFydCksIE1hdGguYWJzKHN0b3ApKTtcbiAgICAgIGlmIChzcGVjaWZpZXIucHJlY2lzaW9uID09IG51bGwgJiYgIWlzTmFOKHByZWNpc2lvbiA9IGQzRm9ybWF0LnByZWNpc2lvblByZWZpeChzdGVwLCB2YWx1ZSkpKSBzcGVjaWZpZXIucHJlY2lzaW9uID0gcHJlY2lzaW9uO1xuICAgICAgcmV0dXJuIGQzRm9ybWF0LmZvcm1hdFByZWZpeChzcGVjaWZpZXIsIHZhbHVlKTtcbiAgICB9XG4gICAgY2FzZSBcIlwiOlxuICAgIGNhc2UgXCJlXCI6XG4gICAgY2FzZSBcImdcIjpcbiAgICBjYXNlIFwicFwiOlxuICAgIGNhc2UgXCJyXCI6IHtcbiAgICAgIGlmIChzcGVjaWZpZXIucHJlY2lzaW9uID09IG51bGwgJiYgIWlzTmFOKHByZWNpc2lvbiA9IGQzRm9ybWF0LnByZWNpc2lvblJvdW5kKHN0ZXAsIE1hdGgubWF4KE1hdGguYWJzKHN0YXJ0KSwgTWF0aC5hYnMoc3RvcCkpKSkpIHNwZWNpZmllci5wcmVjaXNpb24gPSBwcmVjaXNpb24gLSAoc3BlY2lmaWVyLnR5cGUgPT09IFwiZVwiKTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBjYXNlIFwiZlwiOlxuICAgIGNhc2UgXCIlXCI6IHtcbiAgICAgIGlmIChzcGVjaWZpZXIucHJlY2lzaW9uID09IG51bGwgJiYgIWlzTmFOKHByZWNpc2lvbiA9IGQzRm9ybWF0LnByZWNpc2lvbkZpeGVkKHN0ZXApKSkgc3BlY2lmaWVyLnByZWNpc2lvbiA9IHByZWNpc2lvbiAtIChzcGVjaWZpZXIudHlwZSA9PT0gXCIlXCIpICogMjtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZDNGb3JtYXQuZm9ybWF0KHNwZWNpZmllcik7XG59XG5cbmZ1bmN0aW9uIGxpbmVhcmlzaChzY2FsZSkge1xuICB2YXIgZG9tYWluID0gc2NhbGUuZG9tYWluO1xuXG4gIHNjYWxlLnRpY2tzID0gZnVuY3Rpb24oY291bnQpIHtcbiAgICB2YXIgZCA9IGRvbWFpbigpO1xuICAgIHJldHVybiBkM0FycmF5LnRpY2tzKGRbMF0sIGRbZC5sZW5ndGggLSAxXSwgY291bnQgPT0gbnVsbCA/IDEwIDogY291bnQpO1xuICB9O1xuXG4gIHNjYWxlLnRpY2tGb3JtYXQgPSBmdW5jdGlvbihjb3VudCwgc3BlY2lmaWVyKSB7XG4gICAgdmFyIGQgPSBkb21haW4oKTtcbiAgICByZXR1cm4gdGlja0Zvcm1hdChkWzBdLCBkW2QubGVuZ3RoIC0gMV0sIGNvdW50ID09IG51bGwgPyAxMCA6IGNvdW50LCBzcGVjaWZpZXIpO1xuICB9O1xuXG4gIHNjYWxlLm5pY2UgPSBmdW5jdGlvbihjb3VudCkge1xuICAgIGlmIChjb3VudCA9PSBudWxsKSBjb3VudCA9IDEwO1xuXG4gICAgdmFyIGQgPSBkb21haW4oKSxcbiAgICAgICAgaTAgPSAwLFxuICAgICAgICBpMSA9IGQubGVuZ3RoIC0gMSxcbiAgICAgICAgc3RhcnQgPSBkW2kwXSxcbiAgICAgICAgc3RvcCA9IGRbaTFdLFxuICAgICAgICBzdGVwO1xuXG4gICAgaWYgKHN0b3AgPCBzdGFydCkge1xuICAgICAgc3RlcCA9IHN0YXJ0LCBzdGFydCA9IHN0b3AsIHN0b3AgPSBzdGVwO1xuICAgICAgc3RlcCA9IGkwLCBpMCA9IGkxLCBpMSA9IHN0ZXA7XG4gICAgfVxuXG4gICAgc3RlcCA9IGQzQXJyYXkudGlja0luY3JlbWVudChzdGFydCwgc3RvcCwgY291bnQpO1xuXG4gICAgaWYgKHN0ZXAgPiAwKSB7XG4gICAgICBzdGFydCA9IE1hdGguZmxvb3Ioc3RhcnQgLyBzdGVwKSAqIHN0ZXA7XG4gICAgICBzdG9wID0gTWF0aC5jZWlsKHN0b3AgLyBzdGVwKSAqIHN0ZXA7XG4gICAgICBzdGVwID0gZDNBcnJheS50aWNrSW5jcmVtZW50KHN0YXJ0LCBzdG9wLCBjb3VudCk7XG4gICAgfSBlbHNlIGlmIChzdGVwIDwgMCkge1xuICAgICAgc3RhcnQgPSBNYXRoLmNlaWwoc3RhcnQgKiBzdGVwKSAvIHN0ZXA7XG4gICAgICBzdG9wID0gTWF0aC5mbG9vcihzdG9wICogc3RlcCkgLyBzdGVwO1xuICAgICAgc3RlcCA9IGQzQXJyYXkudGlja0luY3JlbWVudChzdGFydCwgc3RvcCwgY291bnQpO1xuICAgIH1cblxuICAgIGlmIChzdGVwID4gMCkge1xuICAgICAgZFtpMF0gPSBNYXRoLmZsb29yKHN0YXJ0IC8gc3RlcCkgKiBzdGVwO1xuICAgICAgZFtpMV0gPSBNYXRoLmNlaWwoc3RvcCAvIHN0ZXApICogc3RlcDtcbiAgICAgIGRvbWFpbihkKTtcbiAgICB9IGVsc2UgaWYgKHN0ZXAgPCAwKSB7XG4gICAgICBkW2kwXSA9IE1hdGguY2VpbChzdGFydCAqIHN0ZXApIC8gc3RlcDtcbiAgICAgIGRbaTFdID0gTWF0aC5mbG9vcihzdG9wICogc3RlcCkgLyBzdGVwO1xuICAgICAgZG9tYWluKGQpO1xuICAgIH1cblxuICAgIHJldHVybiBzY2FsZTtcbiAgfTtcblxuICByZXR1cm4gc2NhbGU7XG59XG5cbmZ1bmN0aW9uIGxpbmVhcigpIHtcbiAgdmFyIHNjYWxlID0gY29udGludW91cyhpZGVudGl0eSwgaWRlbnRpdHkpO1xuXG4gIHNjYWxlLmNvcHkgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gY29weShzY2FsZSwgbGluZWFyKCkpO1xuICB9O1xuXG4gIGluaXRSYW5nZS5hcHBseShzY2FsZSwgYXJndW1lbnRzKTtcblxuICByZXR1cm4gbGluZWFyaXNoKHNjYWxlKTtcbn1cblxuZnVuY3Rpb24gaWRlbnRpdHkkMShkb21haW4pIHtcbiAgdmFyIHVua25vd247XG5cbiAgZnVuY3Rpb24gc2NhbGUoeCkge1xuICAgIHJldHVybiBpc05hTih4ID0gK3gpID8gdW5rbm93biA6IHg7XG4gIH1cblxuICBzY2FsZS5pbnZlcnQgPSBzY2FsZTtcblxuICBzY2FsZS5kb21haW4gPSBzY2FsZS5yYW5nZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChkb21haW4gPSBtYXAuY2FsbChfLCBudW1iZXIpLCBzY2FsZSkgOiBkb21haW4uc2xpY2UoKTtcbiAgfTtcblxuICBzY2FsZS51bmtub3duID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHVua25vd24gPSBfLCBzY2FsZSkgOiB1bmtub3duO1xuICB9O1xuXG4gIHNjYWxlLmNvcHkgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gaWRlbnRpdHkkMShkb21haW4pLnVua25vd24odW5rbm93bik7XG4gIH07XG5cbiAgZG9tYWluID0gYXJndW1lbnRzLmxlbmd0aCA/IG1hcC5jYWxsKGRvbWFpbiwgbnVtYmVyKSA6IFswLCAxXTtcblxuICByZXR1cm4gbGluZWFyaXNoKHNjYWxlKTtcbn1cblxuZnVuY3Rpb24gbmljZShkb21haW4sIGludGVydmFsKSB7XG4gIGRvbWFpbiA9IGRvbWFpbi5zbGljZSgpO1xuXG4gIHZhciBpMCA9IDAsXG4gICAgICBpMSA9IGRvbWFpbi5sZW5ndGggLSAxLFxuICAgICAgeDAgPSBkb21haW5baTBdLFxuICAgICAgeDEgPSBkb21haW5baTFdLFxuICAgICAgdDtcblxuICBpZiAoeDEgPCB4MCkge1xuICAgIHQgPSBpMCwgaTAgPSBpMSwgaTEgPSB0O1xuICAgIHQgPSB4MCwgeDAgPSB4MSwgeDEgPSB0O1xuICB9XG5cbiAgZG9tYWluW2kwXSA9IGludGVydmFsLmZsb29yKHgwKTtcbiAgZG9tYWluW2kxXSA9IGludGVydmFsLmNlaWwoeDEpO1xuICByZXR1cm4gZG9tYWluO1xufVxuXG5mdW5jdGlvbiB0cmFuc2Zvcm1Mb2coeCkge1xuICByZXR1cm4gTWF0aC5sb2coeCk7XG59XG5cbmZ1bmN0aW9uIHRyYW5zZm9ybUV4cCh4KSB7XG4gIHJldHVybiBNYXRoLmV4cCh4KTtcbn1cblxuZnVuY3Rpb24gdHJhbnNmb3JtTG9nbih4KSB7XG4gIHJldHVybiAtTWF0aC5sb2coLXgpO1xufVxuXG5mdW5jdGlvbiB0cmFuc2Zvcm1FeHBuKHgpIHtcbiAgcmV0dXJuIC1NYXRoLmV4cCgteCk7XG59XG5cbmZ1bmN0aW9uIHBvdzEwKHgpIHtcbiAgcmV0dXJuIGlzRmluaXRlKHgpID8gKyhcIjFlXCIgKyB4KSA6IHggPCAwID8gMCA6IHg7XG59XG5cbmZ1bmN0aW9uIHBvd3AoYmFzZSkge1xuICByZXR1cm4gYmFzZSA9PT0gMTAgPyBwb3cxMFxuICAgICAgOiBiYXNlID09PSBNYXRoLkUgPyBNYXRoLmV4cFxuICAgICAgOiBmdW5jdGlvbih4KSB7IHJldHVybiBNYXRoLnBvdyhiYXNlLCB4KTsgfTtcbn1cblxuZnVuY3Rpb24gbG9ncChiYXNlKSB7XG4gIHJldHVybiBiYXNlID09PSBNYXRoLkUgPyBNYXRoLmxvZ1xuICAgICAgOiBiYXNlID09PSAxMCAmJiBNYXRoLmxvZzEwXG4gICAgICB8fCBiYXNlID09PSAyICYmIE1hdGgubG9nMlxuICAgICAgfHwgKGJhc2UgPSBNYXRoLmxvZyhiYXNlKSwgZnVuY3Rpb24oeCkgeyByZXR1cm4gTWF0aC5sb2coeCkgLyBiYXNlOyB9KTtcbn1cblxuZnVuY3Rpb24gcmVmbGVjdChmKSB7XG4gIHJldHVybiBmdW5jdGlvbih4KSB7XG4gICAgcmV0dXJuIC1mKC14KTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gbG9nZ2lzaCh0cmFuc2Zvcm0pIHtcbiAgdmFyIHNjYWxlID0gdHJhbnNmb3JtKHRyYW5zZm9ybUxvZywgdHJhbnNmb3JtRXhwKSxcbiAgICAgIGRvbWFpbiA9IHNjYWxlLmRvbWFpbixcbiAgICAgIGJhc2UgPSAxMCxcbiAgICAgIGxvZ3MsXG4gICAgICBwb3dzO1xuXG4gIGZ1bmN0aW9uIHJlc2NhbGUoKSB7XG4gICAgbG9ncyA9IGxvZ3AoYmFzZSksIHBvd3MgPSBwb3dwKGJhc2UpO1xuICAgIGlmIChkb21haW4oKVswXSA8IDApIHtcbiAgICAgIGxvZ3MgPSByZWZsZWN0KGxvZ3MpLCBwb3dzID0gcmVmbGVjdChwb3dzKTtcbiAgICAgIHRyYW5zZm9ybSh0cmFuc2Zvcm1Mb2duLCB0cmFuc2Zvcm1FeHBuKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdHJhbnNmb3JtKHRyYW5zZm9ybUxvZywgdHJhbnNmb3JtRXhwKTtcbiAgICB9XG4gICAgcmV0dXJuIHNjYWxlO1xuICB9XG5cbiAgc2NhbGUuYmFzZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChiYXNlID0gK18sIHJlc2NhbGUoKSkgOiBiYXNlO1xuICB9O1xuXG4gIHNjYWxlLmRvbWFpbiA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChkb21haW4oXyksIHJlc2NhbGUoKSkgOiBkb21haW4oKTtcbiAgfTtcblxuICBzY2FsZS50aWNrcyA9IGZ1bmN0aW9uKGNvdW50KSB7XG4gICAgdmFyIGQgPSBkb21haW4oKSxcbiAgICAgICAgdSA9IGRbMF0sXG4gICAgICAgIHYgPSBkW2QubGVuZ3RoIC0gMV0sXG4gICAgICAgIHI7XG5cbiAgICBpZiAociA9IHYgPCB1KSBpID0gdSwgdSA9IHYsIHYgPSBpO1xuXG4gICAgdmFyIGkgPSBsb2dzKHUpLFxuICAgICAgICBqID0gbG9ncyh2KSxcbiAgICAgICAgcCxcbiAgICAgICAgayxcbiAgICAgICAgdCxcbiAgICAgICAgbiA9IGNvdW50ID09IG51bGwgPyAxMCA6ICtjb3VudCxcbiAgICAgICAgeiA9IFtdO1xuXG4gICAgaWYgKCEoYmFzZSAlIDEpICYmIGogLSBpIDwgbikge1xuICAgICAgaSA9IE1hdGgucm91bmQoaSkgLSAxLCBqID0gTWF0aC5yb3VuZChqKSArIDE7XG4gICAgICBpZiAodSA+IDApIGZvciAoOyBpIDwgajsgKytpKSB7XG4gICAgICAgIGZvciAoayA9IDEsIHAgPSBwb3dzKGkpOyBrIDwgYmFzZTsgKytrKSB7XG4gICAgICAgICAgdCA9IHAgKiBrO1xuICAgICAgICAgIGlmICh0IDwgdSkgY29udGludWU7XG4gICAgICAgICAgaWYgKHQgPiB2KSBicmVhaztcbiAgICAgICAgICB6LnB1c2godCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBmb3IgKDsgaSA8IGo7ICsraSkge1xuICAgICAgICBmb3IgKGsgPSBiYXNlIC0gMSwgcCA9IHBvd3MoaSk7IGsgPj0gMTsgLS1rKSB7XG4gICAgICAgICAgdCA9IHAgKiBrO1xuICAgICAgICAgIGlmICh0IDwgdSkgY29udGludWU7XG4gICAgICAgICAgaWYgKHQgPiB2KSBicmVhaztcbiAgICAgICAgICB6LnB1c2godCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgeiA9IGQzQXJyYXkudGlja3MoaSwgaiwgTWF0aC5taW4oaiAtIGksIG4pKS5tYXAocG93cyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHIgPyB6LnJldmVyc2UoKSA6IHo7XG4gIH07XG5cbiAgc2NhbGUudGlja0Zvcm1hdCA9IGZ1bmN0aW9uKGNvdW50LCBzcGVjaWZpZXIpIHtcbiAgICBpZiAoc3BlY2lmaWVyID09IG51bGwpIHNwZWNpZmllciA9IGJhc2UgPT09IDEwID8gXCIuMGVcIiA6IFwiLFwiO1xuICAgIGlmICh0eXBlb2Ygc3BlY2lmaWVyICE9PSBcImZ1bmN0aW9uXCIpIHNwZWNpZmllciA9IGQzRm9ybWF0LmZvcm1hdChzcGVjaWZpZXIpO1xuICAgIGlmIChjb3VudCA9PT0gSW5maW5pdHkpIHJldHVybiBzcGVjaWZpZXI7XG4gICAgaWYgKGNvdW50ID09IG51bGwpIGNvdW50ID0gMTA7XG4gICAgdmFyIGsgPSBNYXRoLm1heCgxLCBiYXNlICogY291bnQgLyBzY2FsZS50aWNrcygpLmxlbmd0aCk7IC8vIFRPRE8gZmFzdCBlc3RpbWF0ZT9cbiAgICByZXR1cm4gZnVuY3Rpb24oZCkge1xuICAgICAgdmFyIGkgPSBkIC8gcG93cyhNYXRoLnJvdW5kKGxvZ3MoZCkpKTtcbiAgICAgIGlmIChpICogYmFzZSA8IGJhc2UgLSAwLjUpIGkgKj0gYmFzZTtcbiAgICAgIHJldHVybiBpIDw9IGsgPyBzcGVjaWZpZXIoZCkgOiBcIlwiO1xuICAgIH07XG4gIH07XG5cbiAgc2NhbGUubmljZSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBkb21haW4obmljZShkb21haW4oKSwge1xuICAgICAgZmxvb3I6IGZ1bmN0aW9uKHgpIHsgcmV0dXJuIHBvd3MoTWF0aC5mbG9vcihsb2dzKHgpKSk7IH0sXG4gICAgICBjZWlsOiBmdW5jdGlvbih4KSB7IHJldHVybiBwb3dzKE1hdGguY2VpbChsb2dzKHgpKSk7IH1cbiAgICB9KSk7XG4gIH07XG5cbiAgcmV0dXJuIHNjYWxlO1xufVxuXG5mdW5jdGlvbiBsb2coKSB7XG4gIHZhciBzY2FsZSA9IGxvZ2dpc2godHJhbnNmb3JtZXIoKSkuZG9tYWluKFsxLCAxMF0pO1xuXG4gIHNjYWxlLmNvcHkgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gY29weShzY2FsZSwgbG9nKCkpLmJhc2Uoc2NhbGUuYmFzZSgpKTtcbiAgfTtcblxuICBpbml0UmFuZ2UuYXBwbHkoc2NhbGUsIGFyZ3VtZW50cyk7XG5cbiAgcmV0dXJuIHNjYWxlO1xufVxuXG5mdW5jdGlvbiB0cmFuc2Zvcm1TeW1sb2coYykge1xuICByZXR1cm4gZnVuY3Rpb24oeCkge1xuICAgIHJldHVybiBNYXRoLnNpZ24oeCkgKiBNYXRoLmxvZzFwKE1hdGguYWJzKHggLyBjKSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHRyYW5zZm9ybVN5bWV4cChjKSB7XG4gIHJldHVybiBmdW5jdGlvbih4KSB7XG4gICAgcmV0dXJuIE1hdGguc2lnbih4KSAqIE1hdGguZXhwbTEoTWF0aC5hYnMoeCkpICogYztcbiAgfTtcbn1cblxuZnVuY3Rpb24gc3ltbG9naXNoKHRyYW5zZm9ybSkge1xuICB2YXIgYyA9IDEsIHNjYWxlID0gdHJhbnNmb3JtKHRyYW5zZm9ybVN5bWxvZyhjKSwgdHJhbnNmb3JtU3ltZXhwKGMpKTtcblxuICBzY2FsZS5jb25zdGFudCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IHRyYW5zZm9ybSh0cmFuc2Zvcm1TeW1sb2coYyA9ICtfKSwgdHJhbnNmb3JtU3ltZXhwKGMpKSA6IGM7XG4gIH07XG5cbiAgcmV0dXJuIGxpbmVhcmlzaChzY2FsZSk7XG59XG5cbmZ1bmN0aW9uIHN5bWxvZygpIHtcbiAgdmFyIHNjYWxlID0gc3ltbG9naXNoKHRyYW5zZm9ybWVyKCkpO1xuXG4gIHNjYWxlLmNvcHkgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gY29weShzY2FsZSwgc3ltbG9nKCkpLmNvbnN0YW50KHNjYWxlLmNvbnN0YW50KCkpO1xuICB9O1xuXG4gIHJldHVybiBpbml0UmFuZ2UuYXBwbHkoc2NhbGUsIGFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIHRyYW5zZm9ybVBvdyhleHBvbmVudCkge1xuICByZXR1cm4gZnVuY3Rpb24oeCkge1xuICAgIHJldHVybiB4IDwgMCA/IC1NYXRoLnBvdygteCwgZXhwb25lbnQpIDogTWF0aC5wb3coeCwgZXhwb25lbnQpO1xuICB9O1xufVxuXG5mdW5jdGlvbiB0cmFuc2Zvcm1TcXJ0KHgpIHtcbiAgcmV0dXJuIHggPCAwID8gLU1hdGguc3FydCgteCkgOiBNYXRoLnNxcnQoeCk7XG59XG5cbmZ1bmN0aW9uIHRyYW5zZm9ybVNxdWFyZSh4KSB7XG4gIHJldHVybiB4IDwgMCA/IC14ICogeCA6IHggKiB4O1xufVxuXG5mdW5jdGlvbiBwb3dpc2godHJhbnNmb3JtKSB7XG4gIHZhciBzY2FsZSA9IHRyYW5zZm9ybShpZGVudGl0eSwgaWRlbnRpdHkpLFxuICAgICAgZXhwb25lbnQgPSAxO1xuXG4gIGZ1bmN0aW9uIHJlc2NhbGUoKSB7XG4gICAgcmV0dXJuIGV4cG9uZW50ID09PSAxID8gdHJhbnNmb3JtKGlkZW50aXR5LCBpZGVudGl0eSlcbiAgICAgICAgOiBleHBvbmVudCA9PT0gMC41ID8gdHJhbnNmb3JtKHRyYW5zZm9ybVNxcnQsIHRyYW5zZm9ybVNxdWFyZSlcbiAgICAgICAgOiB0cmFuc2Zvcm0odHJhbnNmb3JtUG93KGV4cG9uZW50KSwgdHJhbnNmb3JtUG93KDEgLyBleHBvbmVudCkpO1xuICB9XG5cbiAgc2NhbGUuZXhwb25lbnQgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZXhwb25lbnQgPSArXywgcmVzY2FsZSgpKSA6IGV4cG9uZW50O1xuICB9O1xuXG4gIHJldHVybiBsaW5lYXJpc2goc2NhbGUpO1xufVxuXG5mdW5jdGlvbiBwb3coKSB7XG4gIHZhciBzY2FsZSA9IHBvd2lzaCh0cmFuc2Zvcm1lcigpKTtcblxuICBzY2FsZS5jb3B5ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGNvcHkoc2NhbGUsIHBvdygpKS5leHBvbmVudChzY2FsZS5leHBvbmVudCgpKTtcbiAgfTtcblxuICBpbml0UmFuZ2UuYXBwbHkoc2NhbGUsIGFyZ3VtZW50cyk7XG5cbiAgcmV0dXJuIHNjYWxlO1xufVxuXG5mdW5jdGlvbiBzcXJ0KCkge1xuICByZXR1cm4gcG93LmFwcGx5KG51bGwsIGFyZ3VtZW50cykuZXhwb25lbnQoMC41KTtcbn1cblxuZnVuY3Rpb24gcXVhbnRpbGUoKSB7XG4gIHZhciBkb21haW4gPSBbXSxcbiAgICAgIHJhbmdlID0gW10sXG4gICAgICB0aHJlc2hvbGRzID0gW10sXG4gICAgICB1bmtub3duO1xuXG4gIGZ1bmN0aW9uIHJlc2NhbGUoKSB7XG4gICAgdmFyIGkgPSAwLCBuID0gTWF0aC5tYXgoMSwgcmFuZ2UubGVuZ3RoKTtcbiAgICB0aHJlc2hvbGRzID0gbmV3IEFycmF5KG4gLSAxKTtcbiAgICB3aGlsZSAoKytpIDwgbikgdGhyZXNob2xkc1tpIC0gMV0gPSBkM0FycmF5LnF1YW50aWxlKGRvbWFpbiwgaSAvIG4pO1xuICAgIHJldHVybiBzY2FsZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNjYWxlKHgpIHtcbiAgICByZXR1cm4gaXNOYU4oeCA9ICt4KSA/IHVua25vd24gOiByYW5nZVtkM0FycmF5LmJpc2VjdCh0aHJlc2hvbGRzLCB4KV07XG4gIH1cblxuICBzY2FsZS5pbnZlcnRFeHRlbnQgPSBmdW5jdGlvbih5KSB7XG4gICAgdmFyIGkgPSByYW5nZS5pbmRleE9mKHkpO1xuICAgIHJldHVybiBpIDwgMCA/IFtOYU4sIE5hTl0gOiBbXG4gICAgICBpID4gMCA/IHRocmVzaG9sZHNbaSAtIDFdIDogZG9tYWluWzBdLFxuICAgICAgaSA8IHRocmVzaG9sZHMubGVuZ3RoID8gdGhyZXNob2xkc1tpXSA6IGRvbWFpbltkb21haW4ubGVuZ3RoIC0gMV1cbiAgICBdO1xuICB9O1xuXG4gIHNjYWxlLmRvbWFpbiA9IGZ1bmN0aW9uKF8pIHtcbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBkb21haW4uc2xpY2UoKTtcbiAgICBkb21haW4gPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMCwgbiA9IF8ubGVuZ3RoLCBkOyBpIDwgbjsgKytpKSBpZiAoZCA9IF9baV0sIGQgIT0gbnVsbCAmJiAhaXNOYU4oZCA9ICtkKSkgZG9tYWluLnB1c2goZCk7XG4gICAgZG9tYWluLnNvcnQoZDNBcnJheS5hc2NlbmRpbmcpO1xuICAgIHJldHVybiByZXNjYWxlKCk7XG4gIH07XG5cbiAgc2NhbGUucmFuZ2UgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocmFuZ2UgPSBzbGljZS5jYWxsKF8pLCByZXNjYWxlKCkpIDogcmFuZ2Uuc2xpY2UoKTtcbiAgfTtcblxuICBzY2FsZS51bmtub3duID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHVua25vd24gPSBfLCBzY2FsZSkgOiB1bmtub3duO1xuICB9O1xuXG4gIHNjYWxlLnF1YW50aWxlcyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aHJlc2hvbGRzLnNsaWNlKCk7XG4gIH07XG5cbiAgc2NhbGUuY29weSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBxdWFudGlsZSgpXG4gICAgICAgIC5kb21haW4oZG9tYWluKVxuICAgICAgICAucmFuZ2UocmFuZ2UpXG4gICAgICAgIC51bmtub3duKHVua25vd24pO1xuICB9O1xuXG4gIHJldHVybiBpbml0UmFuZ2UuYXBwbHkoc2NhbGUsIGFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIHF1YW50aXplKCkge1xuICB2YXIgeDAgPSAwLFxuICAgICAgeDEgPSAxLFxuICAgICAgbiA9IDEsXG4gICAgICBkb21haW4gPSBbMC41XSxcbiAgICAgIHJhbmdlID0gWzAsIDFdLFxuICAgICAgdW5rbm93bjtcblxuICBmdW5jdGlvbiBzY2FsZSh4KSB7XG4gICAgcmV0dXJuIHggPD0geCA/IHJhbmdlW2QzQXJyYXkuYmlzZWN0KGRvbWFpbiwgeCwgMCwgbildIDogdW5rbm93bjtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlc2NhbGUoKSB7XG4gICAgdmFyIGkgPSAtMTtcbiAgICBkb21haW4gPSBuZXcgQXJyYXkobik7XG4gICAgd2hpbGUgKCsraSA8IG4pIGRvbWFpbltpXSA9ICgoaSArIDEpICogeDEgLSAoaSAtIG4pICogeDApIC8gKG4gKyAxKTtcbiAgICByZXR1cm4gc2NhbGU7XG4gIH1cblxuICBzY2FsZS5kb21haW4gPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoeDAgPSArX1swXSwgeDEgPSArX1sxXSwgcmVzY2FsZSgpKSA6IFt4MCwgeDFdO1xuICB9O1xuXG4gIHNjYWxlLnJhbmdlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKG4gPSAocmFuZ2UgPSBzbGljZS5jYWxsKF8pKS5sZW5ndGggLSAxLCByZXNjYWxlKCkpIDogcmFuZ2Uuc2xpY2UoKTtcbiAgfTtcblxuICBzY2FsZS5pbnZlcnRFeHRlbnQgPSBmdW5jdGlvbih5KSB7XG4gICAgdmFyIGkgPSByYW5nZS5pbmRleE9mKHkpO1xuICAgIHJldHVybiBpIDwgMCA/IFtOYU4sIE5hTl1cbiAgICAgICAgOiBpIDwgMSA/IFt4MCwgZG9tYWluWzBdXVxuICAgICAgICA6IGkgPj0gbiA/IFtkb21haW5bbiAtIDFdLCB4MV1cbiAgICAgICAgOiBbZG9tYWluW2kgLSAxXSwgZG9tYWluW2ldXTtcbiAgfTtcblxuICBzY2FsZS51bmtub3duID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHVua25vd24gPSBfLCBzY2FsZSkgOiBzY2FsZTtcbiAgfTtcblxuICBzY2FsZS50aHJlc2hvbGRzID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGRvbWFpbi5zbGljZSgpO1xuICB9O1xuXG4gIHNjYWxlLmNvcHkgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gcXVhbnRpemUoKVxuICAgICAgICAuZG9tYWluKFt4MCwgeDFdKVxuICAgICAgICAucmFuZ2UocmFuZ2UpXG4gICAgICAgIC51bmtub3duKHVua25vd24pO1xuICB9O1xuXG4gIHJldHVybiBpbml0UmFuZ2UuYXBwbHkobGluZWFyaXNoKHNjYWxlKSwgYXJndW1lbnRzKTtcbn1cblxuZnVuY3Rpb24gdGhyZXNob2xkKCkge1xuICB2YXIgZG9tYWluID0gWzAuNV0sXG4gICAgICByYW5nZSA9IFswLCAxXSxcbiAgICAgIHVua25vd24sXG4gICAgICBuID0gMTtcblxuICBmdW5jdGlvbiBzY2FsZSh4KSB7XG4gICAgcmV0dXJuIHggPD0geCA/IHJhbmdlW2QzQXJyYXkuYmlzZWN0KGRvbWFpbiwgeCwgMCwgbildIDogdW5rbm93bjtcbiAgfVxuXG4gIHNjYWxlLmRvbWFpbiA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChkb21haW4gPSBzbGljZS5jYWxsKF8pLCBuID0gTWF0aC5taW4oZG9tYWluLmxlbmd0aCwgcmFuZ2UubGVuZ3RoIC0gMSksIHNjYWxlKSA6IGRvbWFpbi5zbGljZSgpO1xuICB9O1xuXG4gIHNjYWxlLnJhbmdlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHJhbmdlID0gc2xpY2UuY2FsbChfKSwgbiA9IE1hdGgubWluKGRvbWFpbi5sZW5ndGgsIHJhbmdlLmxlbmd0aCAtIDEpLCBzY2FsZSkgOiByYW5nZS5zbGljZSgpO1xuICB9O1xuXG4gIHNjYWxlLmludmVydEV4dGVudCA9IGZ1bmN0aW9uKHkpIHtcbiAgICB2YXIgaSA9IHJhbmdlLmluZGV4T2YoeSk7XG4gICAgcmV0dXJuIFtkb21haW5baSAtIDFdLCBkb21haW5baV1dO1xuICB9O1xuXG4gIHNjYWxlLnVua25vd24gPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodW5rbm93biA9IF8sIHNjYWxlKSA6IHVua25vd247XG4gIH07XG5cbiAgc2NhbGUuY29weSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aHJlc2hvbGQoKVxuICAgICAgICAuZG9tYWluKGRvbWFpbilcbiAgICAgICAgLnJhbmdlKHJhbmdlKVxuICAgICAgICAudW5rbm93bih1bmtub3duKTtcbiAgfTtcblxuICByZXR1cm4gaW5pdFJhbmdlLmFwcGx5KHNjYWxlLCBhcmd1bWVudHMpO1xufVxuXG52YXIgZHVyYXRpb25TZWNvbmQgPSAxMDAwLFxuICAgIGR1cmF0aW9uTWludXRlID0gZHVyYXRpb25TZWNvbmQgKiA2MCxcbiAgICBkdXJhdGlvbkhvdXIgPSBkdXJhdGlvbk1pbnV0ZSAqIDYwLFxuICAgIGR1cmF0aW9uRGF5ID0gZHVyYXRpb25Ib3VyICogMjQsXG4gICAgZHVyYXRpb25XZWVrID0gZHVyYXRpb25EYXkgKiA3LFxuICAgIGR1cmF0aW9uTW9udGggPSBkdXJhdGlvbkRheSAqIDMwLFxuICAgIGR1cmF0aW9uWWVhciA9IGR1cmF0aW9uRGF5ICogMzY1O1xuXG5mdW5jdGlvbiBkYXRlKHQpIHtcbiAgcmV0dXJuIG5ldyBEYXRlKHQpO1xufVxuXG5mdW5jdGlvbiBudW1iZXIkMSh0KSB7XG4gIHJldHVybiB0IGluc3RhbmNlb2YgRGF0ZSA/ICt0IDogK25ldyBEYXRlKCt0KTtcbn1cblxuZnVuY3Rpb24gY2FsZW5kYXIoeWVhciwgbW9udGgsIHdlZWssIGRheSwgaG91ciwgbWludXRlLCBzZWNvbmQsIG1pbGxpc2Vjb25kLCBmb3JtYXQpIHtcbiAgdmFyIHNjYWxlID0gY29udGludW91cyhpZGVudGl0eSwgaWRlbnRpdHkpLFxuICAgICAgaW52ZXJ0ID0gc2NhbGUuaW52ZXJ0LFxuICAgICAgZG9tYWluID0gc2NhbGUuZG9tYWluO1xuXG4gIHZhciBmb3JtYXRNaWxsaXNlY29uZCA9IGZvcm1hdChcIi4lTFwiKSxcbiAgICAgIGZvcm1hdFNlY29uZCA9IGZvcm1hdChcIjolU1wiKSxcbiAgICAgIGZvcm1hdE1pbnV0ZSA9IGZvcm1hdChcIiVJOiVNXCIpLFxuICAgICAgZm9ybWF0SG91ciA9IGZvcm1hdChcIiVJICVwXCIpLFxuICAgICAgZm9ybWF0RGF5ID0gZm9ybWF0KFwiJWEgJWRcIiksXG4gICAgICBmb3JtYXRXZWVrID0gZm9ybWF0KFwiJWIgJWRcIiksXG4gICAgICBmb3JtYXRNb250aCA9IGZvcm1hdChcIiVCXCIpLFxuICAgICAgZm9ybWF0WWVhciA9IGZvcm1hdChcIiVZXCIpO1xuXG4gIHZhciB0aWNrSW50ZXJ2YWxzID0gW1xuICAgIFtzZWNvbmQsICAxLCAgICAgIGR1cmF0aW9uU2Vjb25kXSxcbiAgICBbc2Vjb25kLCAgNSwgIDUgKiBkdXJhdGlvblNlY29uZF0sXG4gICAgW3NlY29uZCwgMTUsIDE1ICogZHVyYXRpb25TZWNvbmRdLFxuICAgIFtzZWNvbmQsIDMwLCAzMCAqIGR1cmF0aW9uU2Vjb25kXSxcbiAgICBbbWludXRlLCAgMSwgICAgICBkdXJhdGlvbk1pbnV0ZV0sXG4gICAgW21pbnV0ZSwgIDUsICA1ICogZHVyYXRpb25NaW51dGVdLFxuICAgIFttaW51dGUsIDE1LCAxNSAqIGR1cmF0aW9uTWludXRlXSxcbiAgICBbbWludXRlLCAzMCwgMzAgKiBkdXJhdGlvbk1pbnV0ZV0sXG4gICAgWyAgaG91ciwgIDEsICAgICAgZHVyYXRpb25Ib3VyICBdLFxuICAgIFsgIGhvdXIsICAzLCAgMyAqIGR1cmF0aW9uSG91ciAgXSxcbiAgICBbICBob3VyLCAgNiwgIDYgKiBkdXJhdGlvbkhvdXIgIF0sXG4gICAgWyAgaG91ciwgMTIsIDEyICogZHVyYXRpb25Ib3VyICBdLFxuICAgIFsgICBkYXksICAxLCAgICAgIGR1cmF0aW9uRGF5ICAgXSxcbiAgICBbICAgZGF5LCAgMiwgIDIgKiBkdXJhdGlvbkRheSAgIF0sXG4gICAgWyAgd2VlaywgIDEsICAgICAgZHVyYXRpb25XZWVrICBdLFxuICAgIFsgbW9udGgsICAxLCAgICAgIGR1cmF0aW9uTW9udGggXSxcbiAgICBbIG1vbnRoLCAgMywgIDMgKiBkdXJhdGlvbk1vbnRoIF0sXG4gICAgWyAgeWVhciwgIDEsICAgICAgZHVyYXRpb25ZZWFyICBdXG4gIF07XG5cbiAgZnVuY3Rpb24gdGlja0Zvcm1hdChkYXRlKSB7XG4gICAgcmV0dXJuIChzZWNvbmQoZGF0ZSkgPCBkYXRlID8gZm9ybWF0TWlsbGlzZWNvbmRcbiAgICAgICAgOiBtaW51dGUoZGF0ZSkgPCBkYXRlID8gZm9ybWF0U2Vjb25kXG4gICAgICAgIDogaG91cihkYXRlKSA8IGRhdGUgPyBmb3JtYXRNaW51dGVcbiAgICAgICAgOiBkYXkoZGF0ZSkgPCBkYXRlID8gZm9ybWF0SG91clxuICAgICAgICA6IG1vbnRoKGRhdGUpIDwgZGF0ZSA/ICh3ZWVrKGRhdGUpIDwgZGF0ZSA/IGZvcm1hdERheSA6IGZvcm1hdFdlZWspXG4gICAgICAgIDogeWVhcihkYXRlKSA8IGRhdGUgPyBmb3JtYXRNb250aFxuICAgICAgICA6IGZvcm1hdFllYXIpKGRhdGUpO1xuICB9XG5cbiAgZnVuY3Rpb24gdGlja0ludGVydmFsKGludGVydmFsLCBzdGFydCwgc3RvcCwgc3RlcCkge1xuICAgIGlmIChpbnRlcnZhbCA9PSBudWxsKSBpbnRlcnZhbCA9IDEwO1xuXG4gICAgLy8gSWYgYSBkZXNpcmVkIHRpY2sgY291bnQgaXMgc3BlY2lmaWVkLCBwaWNrIGEgcmVhc29uYWJsZSB0aWNrIGludGVydmFsXG4gICAgLy8gYmFzZWQgb24gdGhlIGV4dGVudCBvZiB0aGUgZG9tYWluIGFuZCBhIHJvdWdoIGVzdGltYXRlIG9mIHRpY2sgc2l6ZS5cbiAgICAvLyBPdGhlcndpc2UsIGFzc3VtZSBpbnRlcnZhbCBpcyBhbHJlYWR5IGEgdGltZSBpbnRlcnZhbCBhbmQgdXNlIGl0LlxuICAgIGlmICh0eXBlb2YgaW50ZXJ2YWwgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgIHZhciB0YXJnZXQgPSBNYXRoLmFicyhzdG9wIC0gc3RhcnQpIC8gaW50ZXJ2YWwsXG4gICAgICAgICAgaSA9IGQzQXJyYXkuYmlzZWN0b3IoZnVuY3Rpb24oaSkgeyByZXR1cm4gaVsyXTsgfSkucmlnaHQodGlja0ludGVydmFscywgdGFyZ2V0KTtcbiAgICAgIGlmIChpID09PSB0aWNrSW50ZXJ2YWxzLmxlbmd0aCkge1xuICAgICAgICBzdGVwID0gZDNBcnJheS50aWNrU3RlcChzdGFydCAvIGR1cmF0aW9uWWVhciwgc3RvcCAvIGR1cmF0aW9uWWVhciwgaW50ZXJ2YWwpO1xuICAgICAgICBpbnRlcnZhbCA9IHllYXI7XG4gICAgICB9IGVsc2UgaWYgKGkpIHtcbiAgICAgICAgaSA9IHRpY2tJbnRlcnZhbHNbdGFyZ2V0IC8gdGlja0ludGVydmFsc1tpIC0gMV1bMl0gPCB0aWNrSW50ZXJ2YWxzW2ldWzJdIC8gdGFyZ2V0ID8gaSAtIDEgOiBpXTtcbiAgICAgICAgc3RlcCA9IGlbMV07XG4gICAgICAgIGludGVydmFsID0gaVswXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN0ZXAgPSBNYXRoLm1heChkM0FycmF5LnRpY2tTdGVwKHN0YXJ0LCBzdG9wLCBpbnRlcnZhbCksIDEpO1xuICAgICAgICBpbnRlcnZhbCA9IG1pbGxpc2Vjb25kO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBzdGVwID09IG51bGwgPyBpbnRlcnZhbCA6IGludGVydmFsLmV2ZXJ5KHN0ZXApO1xuICB9XG5cbiAgc2NhbGUuaW52ZXJ0ID0gZnVuY3Rpb24oeSkge1xuICAgIHJldHVybiBuZXcgRGF0ZShpbnZlcnQoeSkpO1xuICB9O1xuXG4gIHNjYWxlLmRvbWFpbiA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IGRvbWFpbihtYXAuY2FsbChfLCBudW1iZXIkMSkpIDogZG9tYWluKCkubWFwKGRhdGUpO1xuICB9O1xuXG4gIHNjYWxlLnRpY2tzID0gZnVuY3Rpb24oaW50ZXJ2YWwsIHN0ZXApIHtcbiAgICB2YXIgZCA9IGRvbWFpbigpLFxuICAgICAgICB0MCA9IGRbMF0sXG4gICAgICAgIHQxID0gZFtkLmxlbmd0aCAtIDFdLFxuICAgICAgICByID0gdDEgPCB0MCxcbiAgICAgICAgdDtcbiAgICBpZiAocikgdCA9IHQwLCB0MCA9IHQxLCB0MSA9IHQ7XG4gICAgdCA9IHRpY2tJbnRlcnZhbChpbnRlcnZhbCwgdDAsIHQxLCBzdGVwKTtcbiAgICB0ID0gdCA/IHQucmFuZ2UodDAsIHQxICsgMSkgOiBbXTsgLy8gaW5jbHVzaXZlIHN0b3BcbiAgICByZXR1cm4gciA/IHQucmV2ZXJzZSgpIDogdDtcbiAgfTtcblxuICBzY2FsZS50aWNrRm9ybWF0ID0gZnVuY3Rpb24oY291bnQsIHNwZWNpZmllcikge1xuICAgIHJldHVybiBzcGVjaWZpZXIgPT0gbnVsbCA/IHRpY2tGb3JtYXQgOiBmb3JtYXQoc3BlY2lmaWVyKTtcbiAgfTtcblxuICBzY2FsZS5uaWNlID0gZnVuY3Rpb24oaW50ZXJ2YWwsIHN0ZXApIHtcbiAgICB2YXIgZCA9IGRvbWFpbigpO1xuICAgIHJldHVybiAoaW50ZXJ2YWwgPSB0aWNrSW50ZXJ2YWwoaW50ZXJ2YWwsIGRbMF0sIGRbZC5sZW5ndGggLSAxXSwgc3RlcCkpXG4gICAgICAgID8gZG9tYWluKG5pY2UoZCwgaW50ZXJ2YWwpKVxuICAgICAgICA6IHNjYWxlO1xuICB9O1xuXG4gIHNjYWxlLmNvcHkgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gY29weShzY2FsZSwgY2FsZW5kYXIoeWVhciwgbW9udGgsIHdlZWssIGRheSwgaG91ciwgbWludXRlLCBzZWNvbmQsIG1pbGxpc2Vjb25kLCBmb3JtYXQpKTtcbiAgfTtcblxuICByZXR1cm4gc2NhbGU7XG59XG5cbmZ1bmN0aW9uIHRpbWUoKSB7XG4gIHJldHVybiBpbml0UmFuZ2UuYXBwbHkoY2FsZW5kYXIoZDNUaW1lLnRpbWVZZWFyLCBkM1RpbWUudGltZU1vbnRoLCBkM1RpbWUudGltZVdlZWssIGQzVGltZS50aW1lRGF5LCBkM1RpbWUudGltZUhvdXIsIGQzVGltZS50aW1lTWludXRlLCBkM1RpbWUudGltZVNlY29uZCwgZDNUaW1lLnRpbWVNaWxsaXNlY29uZCwgZDNUaW1lRm9ybWF0LnRpbWVGb3JtYXQpLmRvbWFpbihbbmV3IERhdGUoMjAwMCwgMCwgMSksIG5ldyBEYXRlKDIwMDAsIDAsIDIpXSksIGFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIHV0Y1RpbWUoKSB7XG4gIHJldHVybiBpbml0UmFuZ2UuYXBwbHkoY2FsZW5kYXIoZDNUaW1lLnV0Y1llYXIsIGQzVGltZS51dGNNb250aCwgZDNUaW1lLnV0Y1dlZWssIGQzVGltZS51dGNEYXksIGQzVGltZS51dGNIb3VyLCBkM1RpbWUudXRjTWludXRlLCBkM1RpbWUudXRjU2Vjb25kLCBkM1RpbWUudXRjTWlsbGlzZWNvbmQsIGQzVGltZUZvcm1hdC51dGNGb3JtYXQpLmRvbWFpbihbRGF0ZS5VVEMoMjAwMCwgMCwgMSksIERhdGUuVVRDKDIwMDAsIDAsIDIpXSksIGFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIHRyYW5zZm9ybWVyJDEoKSB7XG4gIHZhciB4MCA9IDAsXG4gICAgICB4MSA9IDEsXG4gICAgICB0MCxcbiAgICAgIHQxLFxuICAgICAgazEwLFxuICAgICAgdHJhbnNmb3JtLFxuICAgICAgaW50ZXJwb2xhdG9yID0gaWRlbnRpdHksXG4gICAgICBjbGFtcCA9IGZhbHNlLFxuICAgICAgdW5rbm93bjtcblxuICBmdW5jdGlvbiBzY2FsZSh4KSB7XG4gICAgcmV0dXJuIGlzTmFOKHggPSAreCkgPyB1bmtub3duIDogaW50ZXJwb2xhdG9yKGsxMCA9PT0gMCA/IDAuNSA6ICh4ID0gKHRyYW5zZm9ybSh4KSAtIHQwKSAqIGsxMCwgY2xhbXAgPyBNYXRoLm1heCgwLCBNYXRoLm1pbigxLCB4KSkgOiB4KSk7XG4gIH1cblxuICBzY2FsZS5kb21haW4gPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodDAgPSB0cmFuc2Zvcm0oeDAgPSArX1swXSksIHQxID0gdHJhbnNmb3JtKHgxID0gK19bMV0pLCBrMTAgPSB0MCA9PT0gdDEgPyAwIDogMSAvICh0MSAtIHQwKSwgc2NhbGUpIDogW3gwLCB4MV07XG4gIH07XG5cbiAgc2NhbGUuY2xhbXAgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoY2xhbXAgPSAhIV8sIHNjYWxlKSA6IGNsYW1wO1xuICB9O1xuXG4gIHNjYWxlLmludGVycG9sYXRvciA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChpbnRlcnBvbGF0b3IgPSBfLCBzY2FsZSkgOiBpbnRlcnBvbGF0b3I7XG4gIH07XG5cbiAgc2NhbGUudW5rbm93biA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh1bmtub3duID0gXywgc2NhbGUpIDogdW5rbm93bjtcbiAgfTtcblxuICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgIHRyYW5zZm9ybSA9IHQsIHQwID0gdCh4MCksIHQxID0gdCh4MSksIGsxMCA9IHQwID09PSB0MSA/IDAgOiAxIC8gKHQxIC0gdDApO1xuICAgIHJldHVybiBzY2FsZTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gY29weSQxKHNvdXJjZSwgdGFyZ2V0KSB7XG4gIHJldHVybiB0YXJnZXRcbiAgICAgIC5kb21haW4oc291cmNlLmRvbWFpbigpKVxuICAgICAgLmludGVycG9sYXRvcihzb3VyY2UuaW50ZXJwb2xhdG9yKCkpXG4gICAgICAuY2xhbXAoc291cmNlLmNsYW1wKCkpXG4gICAgICAudW5rbm93bihzb3VyY2UudW5rbm93bigpKTtcbn1cblxuZnVuY3Rpb24gc2VxdWVudGlhbCgpIHtcbiAgdmFyIHNjYWxlID0gbGluZWFyaXNoKHRyYW5zZm9ybWVyJDEoKShpZGVudGl0eSkpO1xuXG4gIHNjYWxlLmNvcHkgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gY29weSQxKHNjYWxlLCBzZXF1ZW50aWFsKCkpO1xuICB9O1xuXG4gIHJldHVybiBpbml0SW50ZXJwb2xhdG9yLmFwcGx5KHNjYWxlLCBhcmd1bWVudHMpO1xufVxuXG5mdW5jdGlvbiBzZXF1ZW50aWFsTG9nKCkge1xuICB2YXIgc2NhbGUgPSBsb2dnaXNoKHRyYW5zZm9ybWVyJDEoKSkuZG9tYWluKFsxLCAxMF0pO1xuXG4gIHNjYWxlLmNvcHkgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gY29weSQxKHNjYWxlLCBzZXF1ZW50aWFsTG9nKCkpLmJhc2Uoc2NhbGUuYmFzZSgpKTtcbiAgfTtcblxuICByZXR1cm4gaW5pdEludGVycG9sYXRvci5hcHBseShzY2FsZSwgYXJndW1lbnRzKTtcbn1cblxuZnVuY3Rpb24gc2VxdWVudGlhbFN5bWxvZygpIHtcbiAgdmFyIHNjYWxlID0gc3ltbG9naXNoKHRyYW5zZm9ybWVyJDEoKSk7XG5cbiAgc2NhbGUuY29weSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBjb3B5JDEoc2NhbGUsIHNlcXVlbnRpYWxTeW1sb2coKSkuY29uc3RhbnQoc2NhbGUuY29uc3RhbnQoKSk7XG4gIH07XG5cbiAgcmV0dXJuIGluaXRJbnRlcnBvbGF0b3IuYXBwbHkoc2NhbGUsIGFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIHNlcXVlbnRpYWxQb3coKSB7XG4gIHZhciBzY2FsZSA9IHBvd2lzaCh0cmFuc2Zvcm1lciQxKCkpO1xuXG4gIHNjYWxlLmNvcHkgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gY29weSQxKHNjYWxlLCBzZXF1ZW50aWFsUG93KCkpLmV4cG9uZW50KHNjYWxlLmV4cG9uZW50KCkpO1xuICB9O1xuXG4gIHJldHVybiBpbml0SW50ZXJwb2xhdG9yLmFwcGx5KHNjYWxlLCBhcmd1bWVudHMpO1xufVxuXG5mdW5jdGlvbiBzZXF1ZW50aWFsU3FydCgpIHtcbiAgcmV0dXJuIHNlcXVlbnRpYWxQb3cuYXBwbHkobnVsbCwgYXJndW1lbnRzKS5leHBvbmVudCgwLjUpO1xufVxuXG5mdW5jdGlvbiBzZXF1ZW50aWFsUXVhbnRpbGUoKSB7XG4gIHZhciBkb21haW4gPSBbXSxcbiAgICAgIGludGVycG9sYXRvciA9IGlkZW50aXR5O1xuXG4gIGZ1bmN0aW9uIHNjYWxlKHgpIHtcbiAgICBpZiAoIWlzTmFOKHggPSAreCkpIHJldHVybiBpbnRlcnBvbGF0b3IoKGQzQXJyYXkuYmlzZWN0KGRvbWFpbiwgeCkgLSAxKSAvIChkb21haW4ubGVuZ3RoIC0gMSkpO1xuICB9XG5cbiAgc2NhbGUuZG9tYWluID0gZnVuY3Rpb24oXykge1xuICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGRvbWFpbi5zbGljZSgpO1xuICAgIGRvbWFpbiA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwLCBuID0gXy5sZW5ndGgsIGQ7IGkgPCBuOyArK2kpIGlmIChkID0gX1tpXSwgZCAhPSBudWxsICYmICFpc05hTihkID0gK2QpKSBkb21haW4ucHVzaChkKTtcbiAgICBkb21haW4uc29ydChkM0FycmF5LmFzY2VuZGluZyk7XG4gICAgcmV0dXJuIHNjYWxlO1xuICB9O1xuXG4gIHNjYWxlLmludGVycG9sYXRvciA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChpbnRlcnBvbGF0b3IgPSBfLCBzY2FsZSkgOiBpbnRlcnBvbGF0b3I7XG4gIH07XG5cbiAgc2NhbGUuY29weSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBzZXF1ZW50aWFsUXVhbnRpbGUoaW50ZXJwb2xhdG9yKS5kb21haW4oZG9tYWluKTtcbiAgfTtcblxuICByZXR1cm4gaW5pdEludGVycG9sYXRvci5hcHBseShzY2FsZSwgYXJndW1lbnRzKTtcbn1cblxuZnVuY3Rpb24gdHJhbnNmb3JtZXIkMigpIHtcbiAgdmFyIHgwID0gMCxcbiAgICAgIHgxID0gMC41LFxuICAgICAgeDIgPSAxLFxuICAgICAgdDAsXG4gICAgICB0MSxcbiAgICAgIHQyLFxuICAgICAgazEwLFxuICAgICAgazIxLFxuICAgICAgaW50ZXJwb2xhdG9yID0gaWRlbnRpdHksXG4gICAgICB0cmFuc2Zvcm0sXG4gICAgICBjbGFtcCA9IGZhbHNlLFxuICAgICAgdW5rbm93bjtcblxuICBmdW5jdGlvbiBzY2FsZSh4KSB7XG4gICAgcmV0dXJuIGlzTmFOKHggPSAreCkgPyB1bmtub3duIDogKHggPSAwLjUgKyAoKHggPSArdHJhbnNmb3JtKHgpKSAtIHQxKSAqICh4IDwgdDEgPyBrMTAgOiBrMjEpLCBpbnRlcnBvbGF0b3IoY2xhbXAgPyBNYXRoLm1heCgwLCBNYXRoLm1pbigxLCB4KSkgOiB4KSk7XG4gIH1cblxuICBzY2FsZS5kb21haW4gPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodDAgPSB0cmFuc2Zvcm0oeDAgPSArX1swXSksIHQxID0gdHJhbnNmb3JtKHgxID0gK19bMV0pLCB0MiA9IHRyYW5zZm9ybSh4MiA9ICtfWzJdKSwgazEwID0gdDAgPT09IHQxID8gMCA6IDAuNSAvICh0MSAtIHQwKSwgazIxID0gdDEgPT09IHQyID8gMCA6IDAuNSAvICh0MiAtIHQxKSwgc2NhbGUpIDogW3gwLCB4MSwgeDJdO1xuICB9O1xuXG4gIHNjYWxlLmNsYW1wID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGNsYW1wID0gISFfLCBzY2FsZSkgOiBjbGFtcDtcbiAgfTtcblxuICBzY2FsZS5pbnRlcnBvbGF0b3IgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoaW50ZXJwb2xhdG9yID0gXywgc2NhbGUpIDogaW50ZXJwb2xhdG9yO1xuICB9O1xuXG4gIHNjYWxlLnVua25vd24gPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodW5rbm93biA9IF8sIHNjYWxlKSA6IHVua25vd247XG4gIH07XG5cbiAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICB0cmFuc2Zvcm0gPSB0LCB0MCA9IHQoeDApLCB0MSA9IHQoeDEpLCB0MiA9IHQoeDIpLCBrMTAgPSB0MCA9PT0gdDEgPyAwIDogMC41IC8gKHQxIC0gdDApLCBrMjEgPSB0MSA9PT0gdDIgPyAwIDogMC41IC8gKHQyIC0gdDEpO1xuICAgIHJldHVybiBzY2FsZTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZGl2ZXJnaW5nKCkge1xuICB2YXIgc2NhbGUgPSBsaW5lYXJpc2godHJhbnNmb3JtZXIkMigpKGlkZW50aXR5KSk7XG5cbiAgc2NhbGUuY29weSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBjb3B5JDEoc2NhbGUsIGRpdmVyZ2luZygpKTtcbiAgfTtcblxuICByZXR1cm4gaW5pdEludGVycG9sYXRvci5hcHBseShzY2FsZSwgYXJndW1lbnRzKTtcbn1cblxuZnVuY3Rpb24gZGl2ZXJnaW5nTG9nKCkge1xuICB2YXIgc2NhbGUgPSBsb2dnaXNoKHRyYW5zZm9ybWVyJDIoKSkuZG9tYWluKFswLjEsIDEsIDEwXSk7XG5cbiAgc2NhbGUuY29weSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBjb3B5JDEoc2NhbGUsIGRpdmVyZ2luZ0xvZygpKS5iYXNlKHNjYWxlLmJhc2UoKSk7XG4gIH07XG5cbiAgcmV0dXJuIGluaXRJbnRlcnBvbGF0b3IuYXBwbHkoc2NhbGUsIGFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIGRpdmVyZ2luZ1N5bWxvZygpIHtcbiAgdmFyIHNjYWxlID0gc3ltbG9naXNoKHRyYW5zZm9ybWVyJDIoKSk7XG5cbiAgc2NhbGUuY29weSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBjb3B5JDEoc2NhbGUsIGRpdmVyZ2luZ1N5bWxvZygpKS5jb25zdGFudChzY2FsZS5jb25zdGFudCgpKTtcbiAgfTtcblxuICByZXR1cm4gaW5pdEludGVycG9sYXRvci5hcHBseShzY2FsZSwgYXJndW1lbnRzKTtcbn1cblxuZnVuY3Rpb24gZGl2ZXJnaW5nUG93KCkge1xuICB2YXIgc2NhbGUgPSBwb3dpc2godHJhbnNmb3JtZXIkMigpKTtcblxuICBzY2FsZS5jb3B5ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGNvcHkkMShzY2FsZSwgZGl2ZXJnaW5nUG93KCkpLmV4cG9uZW50KHNjYWxlLmV4cG9uZW50KCkpO1xuICB9O1xuXG4gIHJldHVybiBpbml0SW50ZXJwb2xhdG9yLmFwcGx5KHNjYWxlLCBhcmd1bWVudHMpO1xufVxuXG5mdW5jdGlvbiBkaXZlcmdpbmdTcXJ0KCkge1xuICByZXR1cm4gZGl2ZXJnaW5nUG93LmFwcGx5KG51bGwsIGFyZ3VtZW50cykuZXhwb25lbnQoMC41KTtcbn1cblxuZXhwb3J0cy5zY2FsZUJhbmQgPSBiYW5kO1xuZXhwb3J0cy5zY2FsZVBvaW50ID0gcG9pbnQ7XG5leHBvcnRzLnNjYWxlSWRlbnRpdHkgPSBpZGVudGl0eSQxO1xuZXhwb3J0cy5zY2FsZUxpbmVhciA9IGxpbmVhcjtcbmV4cG9ydHMuc2NhbGVMb2cgPSBsb2c7XG5leHBvcnRzLnNjYWxlU3ltbG9nID0gc3ltbG9nO1xuZXhwb3J0cy5zY2FsZU9yZGluYWwgPSBvcmRpbmFsO1xuZXhwb3J0cy5zY2FsZUltcGxpY2l0ID0gaW1wbGljaXQ7XG5leHBvcnRzLnNjYWxlUG93ID0gcG93O1xuZXhwb3J0cy5zY2FsZVNxcnQgPSBzcXJ0O1xuZXhwb3J0cy5zY2FsZVF1YW50aWxlID0gcXVhbnRpbGU7XG5leHBvcnRzLnNjYWxlUXVhbnRpemUgPSBxdWFudGl6ZTtcbmV4cG9ydHMuc2NhbGVUaHJlc2hvbGQgPSB0aHJlc2hvbGQ7XG5leHBvcnRzLnNjYWxlVGltZSA9IHRpbWU7XG5leHBvcnRzLnNjYWxlVXRjID0gdXRjVGltZTtcbmV4cG9ydHMuc2NhbGVTZXF1ZW50aWFsID0gc2VxdWVudGlhbDtcbmV4cG9ydHMuc2NhbGVTZXF1ZW50aWFsTG9nID0gc2VxdWVudGlhbExvZztcbmV4cG9ydHMuc2NhbGVTZXF1ZW50aWFsUG93ID0gc2VxdWVudGlhbFBvdztcbmV4cG9ydHMuc2NhbGVTZXF1ZW50aWFsU3FydCA9IHNlcXVlbnRpYWxTcXJ0O1xuZXhwb3J0cy5zY2FsZVNlcXVlbnRpYWxTeW1sb2cgPSBzZXF1ZW50aWFsU3ltbG9nO1xuZXhwb3J0cy5zY2FsZVNlcXVlbnRpYWxRdWFudGlsZSA9IHNlcXVlbnRpYWxRdWFudGlsZTtcbmV4cG9ydHMuc2NhbGVEaXZlcmdpbmcgPSBkaXZlcmdpbmc7XG5leHBvcnRzLnNjYWxlRGl2ZXJnaW5nTG9nID0gZGl2ZXJnaW5nTG9nO1xuZXhwb3J0cy5zY2FsZURpdmVyZ2luZ1BvdyA9IGRpdmVyZ2luZ1BvdztcbmV4cG9ydHMuc2NhbGVEaXZlcmdpbmdTcXJ0ID0gZGl2ZXJnaW5nU3FydDtcbmV4cG9ydHMuc2NhbGVEaXZlcmdpbmdTeW1sb2cgPSBkaXZlcmdpbmdTeW1sb2c7XG5leHBvcnRzLnRpY2tGb3JtYXQgPSB0aWNrRm9ybWF0O1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG59KSkpO1xuIiwiLy8gaHR0cHM6Ly9kM2pzLm9yZy9kMy1zZWxlY3Rpb24vIHYxLjQuMiBDb3B5cmlnaHQgMjAyMCBNaWtlIEJvc3RvY2tcbihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG50eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgPyBmYWN0b3J5KGV4cG9ydHMpIDpcbnR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJ2V4cG9ydHMnXSwgZmFjdG9yeSkgOlxuKGdsb2JhbCA9IGdsb2JhbCB8fCBzZWxmLCBmYWN0b3J5KGdsb2JhbC5kMyA9IGdsb2JhbC5kMyB8fCB7fSkpO1xufSh0aGlzLCBmdW5jdGlvbiAoZXhwb3J0cykgeyAndXNlIHN0cmljdCc7XG5cbnZhciB4aHRtbCA9IFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiO1xuXG52YXIgbmFtZXNwYWNlcyA9IHtcbiAgc3ZnOiBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIsXG4gIHhodG1sOiB4aHRtbCxcbiAgeGxpbms6IFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiLFxuICB4bWw6IFwiaHR0cDovL3d3dy53My5vcmcvWE1MLzE5OTgvbmFtZXNwYWNlXCIsXG4gIHhtbG5zOiBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAveG1sbnMvXCJcbn07XG5cbmZ1bmN0aW9uIG5hbWVzcGFjZShuYW1lKSB7XG4gIHZhciBwcmVmaXggPSBuYW1lICs9IFwiXCIsIGkgPSBwcmVmaXguaW5kZXhPZihcIjpcIik7XG4gIGlmIChpID49IDAgJiYgKHByZWZpeCA9IG5hbWUuc2xpY2UoMCwgaSkpICE9PSBcInhtbG5zXCIpIG5hbWUgPSBuYW1lLnNsaWNlKGkgKyAxKTtcbiAgcmV0dXJuIG5hbWVzcGFjZXMuaGFzT3duUHJvcGVydHkocHJlZml4KSA/IHtzcGFjZTogbmFtZXNwYWNlc1twcmVmaXhdLCBsb2NhbDogbmFtZX0gOiBuYW1lO1xufVxuXG5mdW5jdGlvbiBjcmVhdG9ySW5oZXJpdChuYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgZG9jdW1lbnQgPSB0aGlzLm93bmVyRG9jdW1lbnQsXG4gICAgICAgIHVyaSA9IHRoaXMubmFtZXNwYWNlVVJJO1xuICAgIHJldHVybiB1cmkgPT09IHhodG1sICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5uYW1lc3BhY2VVUkkgPT09IHhodG1sXG4gICAgICAgID8gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChuYW1lKVxuICAgICAgICA6IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyh1cmksIG5hbWUpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBjcmVhdG9yRml4ZWQoZnVsbG5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLm93bmVyRG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbCk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGNyZWF0b3IobmFtZSkge1xuICB2YXIgZnVsbG5hbWUgPSBuYW1lc3BhY2UobmFtZSk7XG4gIHJldHVybiAoZnVsbG5hbWUubG9jYWxcbiAgICAgID8gY3JlYXRvckZpeGVkXG4gICAgICA6IGNyZWF0b3JJbmhlcml0KShmdWxsbmFtZSk7XG59XG5cbmZ1bmN0aW9uIG5vbmUoKSB7fVxuXG5mdW5jdGlvbiBzZWxlY3RvcihzZWxlY3Rvcikge1xuICByZXR1cm4gc2VsZWN0b3IgPT0gbnVsbCA/IG5vbmUgOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gc2VsZWN0aW9uX3NlbGVjdChzZWxlY3QpIHtcbiAgaWYgKHR5cGVvZiBzZWxlY3QgIT09IFwiZnVuY3Rpb25cIikgc2VsZWN0ID0gc2VsZWN0b3Ioc2VsZWN0KTtcblxuICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIG0gPSBncm91cHMubGVuZ3RoLCBzdWJncm91cHMgPSBuZXcgQXJyYXkobSksIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIG4gPSBncm91cC5sZW5ndGgsIHN1Ymdyb3VwID0gc3ViZ3JvdXBzW2pdID0gbmV3IEFycmF5KG4pLCBub2RlLCBzdWJub2RlLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKChub2RlID0gZ3JvdXBbaV0pICYmIChzdWJub2RlID0gc2VsZWN0LmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgaSwgZ3JvdXApKSkge1xuICAgICAgICBpZiAoXCJfX2RhdGFfX1wiIGluIG5vZGUpIHN1Ym5vZGUuX19kYXRhX18gPSBub2RlLl9fZGF0YV9fO1xuICAgICAgICBzdWJncm91cFtpXSA9IHN1Ym5vZGU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ldyBTZWxlY3Rpb24oc3ViZ3JvdXBzLCB0aGlzLl9wYXJlbnRzKTtcbn1cblxuZnVuY3Rpb24gZW1wdHkoKSB7XG4gIHJldHVybiBbXTtcbn1cblxuZnVuY3Rpb24gc2VsZWN0b3JBbGwoc2VsZWN0b3IpIHtcbiAgcmV0dXJuIHNlbGVjdG9yID09IG51bGwgPyBlbXB0eSA6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBzZWxlY3Rpb25fc2VsZWN0QWxsKHNlbGVjdCkge1xuICBpZiAodHlwZW9mIHNlbGVjdCAhPT0gXCJmdW5jdGlvblwiKSBzZWxlY3QgPSBzZWxlY3RvckFsbChzZWxlY3QpO1xuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgbSA9IGdyb3Vwcy5sZW5ndGgsIHN1Ymdyb3VwcyA9IFtdLCBwYXJlbnRzID0gW10sIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIG4gPSBncm91cC5sZW5ndGgsIG5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICAgIHN1Ymdyb3Vwcy5wdXNoKHNlbGVjdC5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGksIGdyb3VwKSk7XG4gICAgICAgIHBhcmVudHMucHVzaChub2RlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3IFNlbGVjdGlvbihzdWJncm91cHMsIHBhcmVudHMpO1xufVxuXG5mdW5jdGlvbiBtYXRjaGVyKHNlbGVjdG9yKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5tYXRjaGVzKHNlbGVjdG9yKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gc2VsZWN0aW9uX2ZpbHRlcihtYXRjaCkge1xuICBpZiAodHlwZW9mIG1hdGNoICE9PSBcImZ1bmN0aW9uXCIpIG1hdGNoID0gbWF0Y2hlcihtYXRjaCk7XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBtID0gZ3JvdXBzLmxlbmd0aCwgc3ViZ3JvdXBzID0gbmV3IEFycmF5KG0pLCBqID0gMDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBuID0gZ3JvdXAubGVuZ3RoLCBzdWJncm91cCA9IHN1Ymdyb3Vwc1tqXSA9IFtdLCBub2RlLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKChub2RlID0gZ3JvdXBbaV0pICYmIG1hdGNoLmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgaSwgZ3JvdXApKSB7XG4gICAgICAgIHN1Ymdyb3VwLnB1c2gobm9kZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ldyBTZWxlY3Rpb24oc3ViZ3JvdXBzLCB0aGlzLl9wYXJlbnRzKTtcbn1cblxuZnVuY3Rpb24gc3BhcnNlKHVwZGF0ZSkge1xuICByZXR1cm4gbmV3IEFycmF5KHVwZGF0ZS5sZW5ndGgpO1xufVxuXG5mdW5jdGlvbiBzZWxlY3Rpb25fZW50ZXIoKSB7XG4gIHJldHVybiBuZXcgU2VsZWN0aW9uKHRoaXMuX2VudGVyIHx8IHRoaXMuX2dyb3Vwcy5tYXAoc3BhcnNlKSwgdGhpcy5fcGFyZW50cyk7XG59XG5cbmZ1bmN0aW9uIEVudGVyTm9kZShwYXJlbnQsIGRhdHVtKSB7XG4gIHRoaXMub3duZXJEb2N1bWVudCA9IHBhcmVudC5vd25lckRvY3VtZW50O1xuICB0aGlzLm5hbWVzcGFjZVVSSSA9IHBhcmVudC5uYW1lc3BhY2VVUkk7XG4gIHRoaXMuX25leHQgPSBudWxsO1xuICB0aGlzLl9wYXJlbnQgPSBwYXJlbnQ7XG4gIHRoaXMuX19kYXRhX18gPSBkYXR1bTtcbn1cblxuRW50ZXJOb2RlLnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IEVudGVyTm9kZSxcbiAgYXBwZW5kQ2hpbGQ6IGZ1bmN0aW9uKGNoaWxkKSB7IHJldHVybiB0aGlzLl9wYXJlbnQuaW5zZXJ0QmVmb3JlKGNoaWxkLCB0aGlzLl9uZXh0KTsgfSxcbiAgaW5zZXJ0QmVmb3JlOiBmdW5jdGlvbihjaGlsZCwgbmV4dCkgeyByZXR1cm4gdGhpcy5fcGFyZW50Lmluc2VydEJlZm9yZShjaGlsZCwgbmV4dCk7IH0sXG4gIHF1ZXJ5U2VsZWN0b3I6IGZ1bmN0aW9uKHNlbGVjdG9yKSB7IHJldHVybiB0aGlzLl9wYXJlbnQucXVlcnlTZWxlY3RvcihzZWxlY3Rvcik7IH0sXG4gIHF1ZXJ5U2VsZWN0b3JBbGw6IGZ1bmN0aW9uKHNlbGVjdG9yKSB7IHJldHVybiB0aGlzLl9wYXJlbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3Rvcik7IH1cbn07XG5cbmZ1bmN0aW9uIGNvbnN0YW50KHgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB4O1xuICB9O1xufVxuXG52YXIga2V5UHJlZml4ID0gXCIkXCI7IC8vIFByb3RlY3QgYWdhaW5zdCBrZXlzIGxpa2Ug4oCcX19wcm90b19f4oCdLlxuXG5mdW5jdGlvbiBiaW5kSW5kZXgocGFyZW50LCBncm91cCwgZW50ZXIsIHVwZGF0ZSwgZXhpdCwgZGF0YSkge1xuICB2YXIgaSA9IDAsXG4gICAgICBub2RlLFxuICAgICAgZ3JvdXBMZW5ndGggPSBncm91cC5sZW5ndGgsXG4gICAgICBkYXRhTGVuZ3RoID0gZGF0YS5sZW5ndGg7XG5cbiAgLy8gUHV0IGFueSBub24tbnVsbCBub2RlcyB0aGF0IGZpdCBpbnRvIHVwZGF0ZS5cbiAgLy8gUHV0IGFueSBudWxsIG5vZGVzIGludG8gZW50ZXIuXG4gIC8vIFB1dCBhbnkgcmVtYWluaW5nIGRhdGEgaW50byBlbnRlci5cbiAgZm9yICg7IGkgPCBkYXRhTGVuZ3RoOyArK2kpIHtcbiAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICBub2RlLl9fZGF0YV9fID0gZGF0YVtpXTtcbiAgICAgIHVwZGF0ZVtpXSA9IG5vZGU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVudGVyW2ldID0gbmV3IEVudGVyTm9kZShwYXJlbnQsIGRhdGFbaV0pO1xuICAgIH1cbiAgfVxuXG4gIC8vIFB1dCBhbnkgbm9uLW51bGwgbm9kZXMgdGhhdCBkb27igJl0IGZpdCBpbnRvIGV4aXQuXG4gIGZvciAoOyBpIDwgZ3JvdXBMZW5ndGg7ICsraSkge1xuICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIHtcbiAgICAgIGV4aXRbaV0gPSBub2RlO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBiaW5kS2V5KHBhcmVudCwgZ3JvdXAsIGVudGVyLCB1cGRhdGUsIGV4aXQsIGRhdGEsIGtleSkge1xuICB2YXIgaSxcbiAgICAgIG5vZGUsXG4gICAgICBub2RlQnlLZXlWYWx1ZSA9IHt9LFxuICAgICAgZ3JvdXBMZW5ndGggPSBncm91cC5sZW5ndGgsXG4gICAgICBkYXRhTGVuZ3RoID0gZGF0YS5sZW5ndGgsXG4gICAgICBrZXlWYWx1ZXMgPSBuZXcgQXJyYXkoZ3JvdXBMZW5ndGgpLFxuICAgICAga2V5VmFsdWU7XG5cbiAgLy8gQ29tcHV0ZSB0aGUga2V5IGZvciBlYWNoIG5vZGUuXG4gIC8vIElmIG11bHRpcGxlIG5vZGVzIGhhdmUgdGhlIHNhbWUga2V5LCB0aGUgZHVwbGljYXRlcyBhcmUgYWRkZWQgdG8gZXhpdC5cbiAgZm9yIChpID0gMDsgaSA8IGdyb3VwTGVuZ3RoOyArK2kpIHtcbiAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICBrZXlWYWx1ZXNbaV0gPSBrZXlWYWx1ZSA9IGtleVByZWZpeCArIGtleS5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGksIGdyb3VwKTtcbiAgICAgIGlmIChrZXlWYWx1ZSBpbiBub2RlQnlLZXlWYWx1ZSkge1xuICAgICAgICBleGl0W2ldID0gbm9kZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5vZGVCeUtleVZhbHVlW2tleVZhbHVlXSA9IG5vZGU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gQ29tcHV0ZSB0aGUga2V5IGZvciBlYWNoIGRhdHVtLlxuICAvLyBJZiB0aGVyZSBhIG5vZGUgYXNzb2NpYXRlZCB3aXRoIHRoaXMga2V5LCBqb2luIGFuZCBhZGQgaXQgdG8gdXBkYXRlLlxuICAvLyBJZiB0aGVyZSBpcyBub3QgKG9yIHRoZSBrZXkgaXMgYSBkdXBsaWNhdGUpLCBhZGQgaXQgdG8gZW50ZXIuXG4gIGZvciAoaSA9IDA7IGkgPCBkYXRhTGVuZ3RoOyArK2kpIHtcbiAgICBrZXlWYWx1ZSA9IGtleVByZWZpeCArIGtleS5jYWxsKHBhcmVudCwgZGF0YVtpXSwgaSwgZGF0YSk7XG4gICAgaWYgKG5vZGUgPSBub2RlQnlLZXlWYWx1ZVtrZXlWYWx1ZV0pIHtcbiAgICAgIHVwZGF0ZVtpXSA9IG5vZGU7XG4gICAgICBub2RlLl9fZGF0YV9fID0gZGF0YVtpXTtcbiAgICAgIG5vZGVCeUtleVZhbHVlW2tleVZhbHVlXSA9IG51bGw7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVudGVyW2ldID0gbmV3IEVudGVyTm9kZShwYXJlbnQsIGRhdGFbaV0pO1xuICAgIH1cbiAgfVxuXG4gIC8vIEFkZCBhbnkgcmVtYWluaW5nIG5vZGVzIHRoYXQgd2VyZSBub3QgYm91bmQgdG8gZGF0YSB0byBleGl0LlxuICBmb3IgKGkgPSAwOyBpIDwgZ3JvdXBMZW5ndGg7ICsraSkge1xuICAgIGlmICgobm9kZSA9IGdyb3VwW2ldKSAmJiAobm9kZUJ5S2V5VmFsdWVba2V5VmFsdWVzW2ldXSA9PT0gbm9kZSkpIHtcbiAgICAgIGV4aXRbaV0gPSBub2RlO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBzZWxlY3Rpb25fZGF0YSh2YWx1ZSwga2V5KSB7XG4gIGlmICghdmFsdWUpIHtcbiAgICBkYXRhID0gbmV3IEFycmF5KHRoaXMuc2l6ZSgpKSwgaiA9IC0xO1xuICAgIHRoaXMuZWFjaChmdW5jdGlvbihkKSB7IGRhdGFbKytqXSA9IGQ7IH0pO1xuICAgIHJldHVybiBkYXRhO1xuICB9XG5cbiAgdmFyIGJpbmQgPSBrZXkgPyBiaW5kS2V5IDogYmluZEluZGV4LFxuICAgICAgcGFyZW50cyA9IHRoaXMuX3BhcmVudHMsXG4gICAgICBncm91cHMgPSB0aGlzLl9ncm91cHM7XG5cbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJmdW5jdGlvblwiKSB2YWx1ZSA9IGNvbnN0YW50KHZhbHVlKTtcblxuICBmb3IgKHZhciBtID0gZ3JvdXBzLmxlbmd0aCwgdXBkYXRlID0gbmV3IEFycmF5KG0pLCBlbnRlciA9IG5ldyBBcnJheShtKSwgZXhpdCA9IG5ldyBBcnJheShtKSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICB2YXIgcGFyZW50ID0gcGFyZW50c1tqXSxcbiAgICAgICAgZ3JvdXAgPSBncm91cHNbal0sXG4gICAgICAgIGdyb3VwTGVuZ3RoID0gZ3JvdXAubGVuZ3RoLFxuICAgICAgICBkYXRhID0gdmFsdWUuY2FsbChwYXJlbnQsIHBhcmVudCAmJiBwYXJlbnQuX19kYXRhX18sIGosIHBhcmVudHMpLFxuICAgICAgICBkYXRhTGVuZ3RoID0gZGF0YS5sZW5ndGgsXG4gICAgICAgIGVudGVyR3JvdXAgPSBlbnRlcltqXSA9IG5ldyBBcnJheShkYXRhTGVuZ3RoKSxcbiAgICAgICAgdXBkYXRlR3JvdXAgPSB1cGRhdGVbal0gPSBuZXcgQXJyYXkoZGF0YUxlbmd0aCksXG4gICAgICAgIGV4aXRHcm91cCA9IGV4aXRbal0gPSBuZXcgQXJyYXkoZ3JvdXBMZW5ndGgpO1xuXG4gICAgYmluZChwYXJlbnQsIGdyb3VwLCBlbnRlckdyb3VwLCB1cGRhdGVHcm91cCwgZXhpdEdyb3VwLCBkYXRhLCBrZXkpO1xuXG4gICAgLy8gTm93IGNvbm5lY3QgdGhlIGVudGVyIG5vZGVzIHRvIHRoZWlyIGZvbGxvd2luZyB1cGRhdGUgbm9kZSwgc3VjaCB0aGF0XG4gICAgLy8gYXBwZW5kQ2hpbGQgY2FuIGluc2VydCB0aGUgbWF0ZXJpYWxpemVkIGVudGVyIG5vZGUgYmVmb3JlIHRoaXMgbm9kZSxcbiAgICAvLyByYXRoZXIgdGhhbiBhdCB0aGUgZW5kIG9mIHRoZSBwYXJlbnQgbm9kZS5cbiAgICBmb3IgKHZhciBpMCA9IDAsIGkxID0gMCwgcHJldmlvdXMsIG5leHQ7IGkwIDwgZGF0YUxlbmd0aDsgKytpMCkge1xuICAgICAgaWYgKHByZXZpb3VzID0gZW50ZXJHcm91cFtpMF0pIHtcbiAgICAgICAgaWYgKGkwID49IGkxKSBpMSA9IGkwICsgMTtcbiAgICAgICAgd2hpbGUgKCEobmV4dCA9IHVwZGF0ZUdyb3VwW2kxXSkgJiYgKytpMSA8IGRhdGFMZW5ndGgpO1xuICAgICAgICBwcmV2aW91cy5fbmV4dCA9IG5leHQgfHwgbnVsbDtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB1cGRhdGUgPSBuZXcgU2VsZWN0aW9uKHVwZGF0ZSwgcGFyZW50cyk7XG4gIHVwZGF0ZS5fZW50ZXIgPSBlbnRlcjtcbiAgdXBkYXRlLl9leGl0ID0gZXhpdDtcbiAgcmV0dXJuIHVwZGF0ZTtcbn1cblxuZnVuY3Rpb24gc2VsZWN0aW9uX2V4aXQoKSB7XG4gIHJldHVybiBuZXcgU2VsZWN0aW9uKHRoaXMuX2V4aXQgfHwgdGhpcy5fZ3JvdXBzLm1hcChzcGFyc2UpLCB0aGlzLl9wYXJlbnRzKTtcbn1cblxuZnVuY3Rpb24gc2VsZWN0aW9uX2pvaW4ob25lbnRlciwgb251cGRhdGUsIG9uZXhpdCkge1xuICB2YXIgZW50ZXIgPSB0aGlzLmVudGVyKCksIHVwZGF0ZSA9IHRoaXMsIGV4aXQgPSB0aGlzLmV4aXQoKTtcbiAgZW50ZXIgPSB0eXBlb2Ygb25lbnRlciA9PT0gXCJmdW5jdGlvblwiID8gb25lbnRlcihlbnRlcikgOiBlbnRlci5hcHBlbmQob25lbnRlciArIFwiXCIpO1xuICBpZiAob251cGRhdGUgIT0gbnVsbCkgdXBkYXRlID0gb251cGRhdGUodXBkYXRlKTtcbiAgaWYgKG9uZXhpdCA9PSBudWxsKSBleGl0LnJlbW92ZSgpOyBlbHNlIG9uZXhpdChleGl0KTtcbiAgcmV0dXJuIGVudGVyICYmIHVwZGF0ZSA/IGVudGVyLm1lcmdlKHVwZGF0ZSkub3JkZXIoKSA6IHVwZGF0ZTtcbn1cblxuZnVuY3Rpb24gc2VsZWN0aW9uX21lcmdlKHNlbGVjdGlvbikge1xuXG4gIGZvciAodmFyIGdyb3VwczAgPSB0aGlzLl9ncm91cHMsIGdyb3VwczEgPSBzZWxlY3Rpb24uX2dyb3VwcywgbTAgPSBncm91cHMwLmxlbmd0aCwgbTEgPSBncm91cHMxLmxlbmd0aCwgbSA9IE1hdGgubWluKG0wLCBtMSksIG1lcmdlcyA9IG5ldyBBcnJheShtMCksIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAwID0gZ3JvdXBzMFtqXSwgZ3JvdXAxID0gZ3JvdXBzMVtqXSwgbiA9IGdyb3VwMC5sZW5ndGgsIG1lcmdlID0gbWVyZ2VzW2pdID0gbmV3IEFycmF5KG4pLCBub2RlLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKG5vZGUgPSBncm91cDBbaV0gfHwgZ3JvdXAxW2ldKSB7XG4gICAgICAgIG1lcmdlW2ldID0gbm9kZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmb3IgKDsgaiA8IG0wOyArK2opIHtcbiAgICBtZXJnZXNbal0gPSBncm91cHMwW2pdO1xuICB9XG5cbiAgcmV0dXJuIG5ldyBTZWxlY3Rpb24obWVyZ2VzLCB0aGlzLl9wYXJlbnRzKTtcbn1cblxuZnVuY3Rpb24gc2VsZWN0aW9uX29yZGVyKCkge1xuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgaiA9IC0xLCBtID0gZ3JvdXBzLmxlbmd0aDsgKytqIDwgbTspIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgaSA9IGdyb3VwLmxlbmd0aCAtIDEsIG5leHQgPSBncm91cFtpXSwgbm9kZTsgLS1pID49IDA7KSB7XG4gICAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICAgIGlmIChuZXh0ICYmIG5vZGUuY29tcGFyZURvY3VtZW50UG9zaXRpb24obmV4dCkgXiA0KSBuZXh0LnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKG5vZGUsIG5leHQpO1xuICAgICAgICBuZXh0ID0gbm9kZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn1cblxuZnVuY3Rpb24gc2VsZWN0aW9uX3NvcnQoY29tcGFyZSkge1xuICBpZiAoIWNvbXBhcmUpIGNvbXBhcmUgPSBhc2NlbmRpbmc7XG5cbiAgZnVuY3Rpb24gY29tcGFyZU5vZGUoYSwgYikge1xuICAgIHJldHVybiBhICYmIGIgPyBjb21wYXJlKGEuX19kYXRhX18sIGIuX19kYXRhX18pIDogIWEgLSAhYjtcbiAgfVxuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgbSA9IGdyb3Vwcy5sZW5ndGgsIHNvcnRncm91cHMgPSBuZXcgQXJyYXkobSksIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIG4gPSBncm91cC5sZW5ndGgsIHNvcnRncm91cCA9IHNvcnRncm91cHNbal0gPSBuZXcgQXJyYXkobiksIG5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICAgIHNvcnRncm91cFtpXSA9IG5vZGU7XG4gICAgICB9XG4gICAgfVxuICAgIHNvcnRncm91cC5zb3J0KGNvbXBhcmVOb2RlKTtcbiAgfVxuXG4gIHJldHVybiBuZXcgU2VsZWN0aW9uKHNvcnRncm91cHMsIHRoaXMuX3BhcmVudHMpLm9yZGVyKCk7XG59XG5cbmZ1bmN0aW9uIGFzY2VuZGluZyhhLCBiKSB7XG4gIHJldHVybiBhIDwgYiA/IC0xIDogYSA+IGIgPyAxIDogYSA+PSBiID8gMCA6IE5hTjtcbn1cblxuZnVuY3Rpb24gc2VsZWN0aW9uX2NhbGwoKSB7XG4gIHZhciBjYWxsYmFjayA9IGFyZ3VtZW50c1swXTtcbiAgYXJndW1lbnRzWzBdID0gdGhpcztcbiAgY2FsbGJhY2suYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbmZ1bmN0aW9uIHNlbGVjdGlvbl9ub2RlcygpIHtcbiAgdmFyIG5vZGVzID0gbmV3IEFycmF5KHRoaXMuc2l6ZSgpKSwgaSA9IC0xO1xuICB0aGlzLmVhY2goZnVuY3Rpb24oKSB7IG5vZGVzWysraV0gPSB0aGlzOyB9KTtcbiAgcmV0dXJuIG5vZGVzO1xufVxuXG5mdW5jdGlvbiBzZWxlY3Rpb25fbm9kZSgpIHtcblxuICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIGogPSAwLCBtID0gZ3JvdXBzLmxlbmd0aDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBpID0gMCwgbiA9IGdyb3VwLmxlbmd0aDsgaSA8IG47ICsraSkge1xuICAgICAgdmFyIG5vZGUgPSBncm91cFtpXTtcbiAgICAgIGlmIChub2RlKSByZXR1cm4gbm9kZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn1cblxuZnVuY3Rpb24gc2VsZWN0aW9uX3NpemUoKSB7XG4gIHZhciBzaXplID0gMDtcbiAgdGhpcy5lYWNoKGZ1bmN0aW9uKCkgeyArK3NpemU7IH0pO1xuICByZXR1cm4gc2l6ZTtcbn1cblxuZnVuY3Rpb24gc2VsZWN0aW9uX2VtcHR5KCkge1xuICByZXR1cm4gIXRoaXMubm9kZSgpO1xufVxuXG5mdW5jdGlvbiBzZWxlY3Rpb25fZWFjaChjYWxsYmFjaykge1xuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgaiA9IDAsIG0gPSBncm91cHMubGVuZ3RoOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIGkgPSAwLCBuID0gZ3JvdXAubGVuZ3RoLCBub2RlOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSBjYWxsYmFjay5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGksIGdyb3VwKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn1cblxuZnVuY3Rpb24gYXR0clJlbW92ZShuYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnJlbW92ZUF0dHJpYnV0ZShuYW1lKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYXR0clJlbW92ZU5TKGZ1bGxuYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnJlbW92ZUF0dHJpYnV0ZU5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbCk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGF0dHJDb25zdGFudChuYW1lLCB2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5zZXRBdHRyaWJ1dGUobmFtZSwgdmFsdWUpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhdHRyQ29uc3RhbnROUyhmdWxsbmFtZSwgdmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuc2V0QXR0cmlidXRlTlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsLCB2YWx1ZSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGF0dHJGdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHYgPSB2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIGlmICh2ID09IG51bGwpIHRoaXMucmVtb3ZlQXR0cmlidXRlKG5hbWUpO1xuICAgIGVsc2UgdGhpcy5zZXRBdHRyaWJ1dGUobmFtZSwgdik7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGF0dHJGdW5jdGlvbk5TKGZ1bGxuYW1lLCB2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHYgPSB2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIGlmICh2ID09IG51bGwpIHRoaXMucmVtb3ZlQXR0cmlidXRlTlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsKTtcbiAgICBlbHNlIHRoaXMuc2V0QXR0cmlidXRlTlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsLCB2KTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gc2VsZWN0aW9uX2F0dHIobmFtZSwgdmFsdWUpIHtcbiAgdmFyIGZ1bGxuYW1lID0gbmFtZXNwYWNlKG5hbWUpO1xuXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikge1xuICAgIHZhciBub2RlID0gdGhpcy5ub2RlKCk7XG4gICAgcmV0dXJuIGZ1bGxuYW1lLmxvY2FsXG4gICAgICAgID8gbm9kZS5nZXRBdHRyaWJ1dGVOUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwpXG4gICAgICAgIDogbm9kZS5nZXRBdHRyaWJ1dGUoZnVsbG5hbWUpO1xuICB9XG5cbiAgcmV0dXJuIHRoaXMuZWFjaCgodmFsdWUgPT0gbnVsbFxuICAgICAgPyAoZnVsbG5hbWUubG9jYWwgPyBhdHRyUmVtb3ZlTlMgOiBhdHRyUmVtb3ZlKSA6ICh0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgPyAoZnVsbG5hbWUubG9jYWwgPyBhdHRyRnVuY3Rpb25OUyA6IGF0dHJGdW5jdGlvbilcbiAgICAgIDogKGZ1bGxuYW1lLmxvY2FsID8gYXR0ckNvbnN0YW50TlMgOiBhdHRyQ29uc3RhbnQpKSkoZnVsbG5hbWUsIHZhbHVlKSk7XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRWaWV3KG5vZGUpIHtcbiAgcmV0dXJuIChub2RlLm93bmVyRG9jdW1lbnQgJiYgbm9kZS5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3KSAvLyBub2RlIGlzIGEgTm9kZVxuICAgICAgfHwgKG5vZGUuZG9jdW1lbnQgJiYgbm9kZSkgLy8gbm9kZSBpcyBhIFdpbmRvd1xuICAgICAgfHwgbm9kZS5kZWZhdWx0VmlldzsgLy8gbm9kZSBpcyBhIERvY3VtZW50XG59XG5cbmZ1bmN0aW9uIHN0eWxlUmVtb3ZlKG5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuc3R5bGUucmVtb3ZlUHJvcGVydHkobmFtZSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHN0eWxlQ29uc3RhbnQobmFtZSwgdmFsdWUsIHByaW9yaXR5KSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnN0eWxlLnNldFByb3BlcnR5KG5hbWUsIHZhbHVlLCBwcmlvcml0eSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHN0eWxlRnVuY3Rpb24obmFtZSwgdmFsdWUsIHByaW9yaXR5KSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdiA9IHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgaWYgKHYgPT0gbnVsbCkgdGhpcy5zdHlsZS5yZW1vdmVQcm9wZXJ0eShuYW1lKTtcbiAgICBlbHNlIHRoaXMuc3R5bGUuc2V0UHJvcGVydHkobmFtZSwgdiwgcHJpb3JpdHkpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBzZWxlY3Rpb25fc3R5bGUobmFtZSwgdmFsdWUsIHByaW9yaXR5KSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID4gMVxuICAgICAgPyB0aGlzLmVhY2goKHZhbHVlID09IG51bGxcbiAgICAgICAgICAgID8gc3R5bGVSZW1vdmUgOiB0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgICAgICAgPyBzdHlsZUZ1bmN0aW9uXG4gICAgICAgICAgICA6IHN0eWxlQ29uc3RhbnQpKG5hbWUsIHZhbHVlLCBwcmlvcml0eSA9PSBudWxsID8gXCJcIiA6IHByaW9yaXR5KSlcbiAgICAgIDogc3R5bGVWYWx1ZSh0aGlzLm5vZGUoKSwgbmFtZSk7XG59XG5cbmZ1bmN0aW9uIHN0eWxlVmFsdWUobm9kZSwgbmFtZSkge1xuICByZXR1cm4gbm9kZS5zdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKG5hbWUpXG4gICAgICB8fCBkZWZhdWx0Vmlldyhub2RlKS5nZXRDb21wdXRlZFN0eWxlKG5vZGUsIG51bGwpLmdldFByb3BlcnR5VmFsdWUobmFtZSk7XG59XG5cbmZ1bmN0aW9uIHByb3BlcnR5UmVtb3ZlKG5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIGRlbGV0ZSB0aGlzW25hbWVdO1xuICB9O1xufVxuXG5mdW5jdGlvbiBwcm9wZXJ0eUNvbnN0YW50KG5hbWUsIHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzW25hbWVdID0gdmFsdWU7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHByb3BlcnR5RnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciB2ID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICBpZiAodiA9PSBudWxsKSBkZWxldGUgdGhpc1tuYW1lXTtcbiAgICBlbHNlIHRoaXNbbmFtZV0gPSB2O1xuICB9O1xufVxuXG5mdW5jdGlvbiBzZWxlY3Rpb25fcHJvcGVydHkobmFtZSwgdmFsdWUpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPiAxXG4gICAgICA/IHRoaXMuZWFjaCgodmFsdWUgPT0gbnVsbFxuICAgICAgICAgID8gcHJvcGVydHlSZW1vdmUgOiB0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgICAgID8gcHJvcGVydHlGdW5jdGlvblxuICAgICAgICAgIDogcHJvcGVydHlDb25zdGFudCkobmFtZSwgdmFsdWUpKVxuICAgICAgOiB0aGlzLm5vZGUoKVtuYW1lXTtcbn1cblxuZnVuY3Rpb24gY2xhc3NBcnJheShzdHJpbmcpIHtcbiAgcmV0dXJuIHN0cmluZy50cmltKCkuc3BsaXQoL158XFxzKy8pO1xufVxuXG5mdW5jdGlvbiBjbGFzc0xpc3Qobm9kZSkge1xuICByZXR1cm4gbm9kZS5jbGFzc0xpc3QgfHwgbmV3IENsYXNzTGlzdChub2RlKTtcbn1cblxuZnVuY3Rpb24gQ2xhc3NMaXN0KG5vZGUpIHtcbiAgdGhpcy5fbm9kZSA9IG5vZGU7XG4gIHRoaXMuX25hbWVzID0gY2xhc3NBcnJheShub2RlLmdldEF0dHJpYnV0ZShcImNsYXNzXCIpIHx8IFwiXCIpO1xufVxuXG5DbGFzc0xpc3QucHJvdG90eXBlID0ge1xuICBhZGQ6IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICB2YXIgaSA9IHRoaXMuX25hbWVzLmluZGV4T2YobmFtZSk7XG4gICAgaWYgKGkgPCAwKSB7XG4gICAgICB0aGlzLl9uYW1lcy5wdXNoKG5hbWUpO1xuICAgICAgdGhpcy5fbm9kZS5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCB0aGlzLl9uYW1lcy5qb2luKFwiIFwiKSk7XG4gICAgfVxuICB9LFxuICByZW1vdmU6IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICB2YXIgaSA9IHRoaXMuX25hbWVzLmluZGV4T2YobmFtZSk7XG4gICAgaWYgKGkgPj0gMCkge1xuICAgICAgdGhpcy5fbmFtZXMuc3BsaWNlKGksIDEpO1xuICAgICAgdGhpcy5fbm9kZS5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCB0aGlzLl9uYW1lcy5qb2luKFwiIFwiKSk7XG4gICAgfVxuICB9LFxuICBjb250YWluczogZnVuY3Rpb24obmFtZSkge1xuICAgIHJldHVybiB0aGlzLl9uYW1lcy5pbmRleE9mKG5hbWUpID49IDA7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGNsYXNzZWRBZGQobm9kZSwgbmFtZXMpIHtcbiAgdmFyIGxpc3QgPSBjbGFzc0xpc3Qobm9kZSksIGkgPSAtMSwgbiA9IG5hbWVzLmxlbmd0aDtcbiAgd2hpbGUgKCsraSA8IG4pIGxpc3QuYWRkKG5hbWVzW2ldKTtcbn1cblxuZnVuY3Rpb24gY2xhc3NlZFJlbW92ZShub2RlLCBuYW1lcykge1xuICB2YXIgbGlzdCA9IGNsYXNzTGlzdChub2RlKSwgaSA9IC0xLCBuID0gbmFtZXMubGVuZ3RoO1xuICB3aGlsZSAoKytpIDwgbikgbGlzdC5yZW1vdmUobmFtZXNbaV0pO1xufVxuXG5mdW5jdGlvbiBjbGFzc2VkVHJ1ZShuYW1lcykge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgY2xhc3NlZEFkZCh0aGlzLCBuYW1lcyk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGNsYXNzZWRGYWxzZShuYW1lcykge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgY2xhc3NlZFJlbW92ZSh0aGlzLCBuYW1lcyk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGNsYXNzZWRGdW5jdGlvbihuYW1lcywgdmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICh2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpID8gY2xhc3NlZEFkZCA6IGNsYXNzZWRSZW1vdmUpKHRoaXMsIG5hbWVzKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gc2VsZWN0aW9uX2NsYXNzZWQobmFtZSwgdmFsdWUpIHtcbiAgdmFyIG5hbWVzID0gY2xhc3NBcnJheShuYW1lICsgXCJcIik7XG5cbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSB7XG4gICAgdmFyIGxpc3QgPSBjbGFzc0xpc3QodGhpcy5ub2RlKCkpLCBpID0gLTEsIG4gPSBuYW1lcy5sZW5ndGg7XG4gICAgd2hpbGUgKCsraSA8IG4pIGlmICghbGlzdC5jb250YWlucyhuYW1lc1tpXSkpIHJldHVybiBmYWxzZTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHJldHVybiB0aGlzLmVhY2goKHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiXG4gICAgICA/IGNsYXNzZWRGdW5jdGlvbiA6IHZhbHVlXG4gICAgICA/IGNsYXNzZWRUcnVlXG4gICAgICA6IGNsYXNzZWRGYWxzZSkobmFtZXMsIHZhbHVlKSk7XG59XG5cbmZ1bmN0aW9uIHRleHRSZW1vdmUoKSB7XG4gIHRoaXMudGV4dENvbnRlbnQgPSBcIlwiO1xufVxuXG5mdW5jdGlvbiB0ZXh0Q29uc3RhbnQodmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMudGV4dENvbnRlbnQgPSB2YWx1ZTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gdGV4dEZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdiA9IHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgdGhpcy50ZXh0Q29udGVudCA9IHYgPT0gbnVsbCA/IFwiXCIgOiB2O1xuICB9O1xufVxuXG5mdW5jdGlvbiBzZWxlY3Rpb25fdGV4dCh2YWx1ZSkge1xuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aFxuICAgICAgPyB0aGlzLmVhY2godmFsdWUgPT0gbnVsbFxuICAgICAgICAgID8gdGV4dFJlbW92ZSA6ICh0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgICAgID8gdGV4dEZ1bmN0aW9uXG4gICAgICAgICAgOiB0ZXh0Q29uc3RhbnQpKHZhbHVlKSlcbiAgICAgIDogdGhpcy5ub2RlKCkudGV4dENvbnRlbnQ7XG59XG5cbmZ1bmN0aW9uIGh0bWxSZW1vdmUoKSB7XG4gIHRoaXMuaW5uZXJIVE1MID0gXCJcIjtcbn1cblxuZnVuY3Rpb24gaHRtbENvbnN0YW50KHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLmlubmVySFRNTCA9IHZhbHVlO1xuICB9O1xufVxuXG5mdW5jdGlvbiBodG1sRnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciB2ID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB0aGlzLmlubmVySFRNTCA9IHYgPT0gbnVsbCA/IFwiXCIgOiB2O1xuICB9O1xufVxuXG5mdW5jdGlvbiBzZWxlY3Rpb25faHRtbCh2YWx1ZSkge1xuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aFxuICAgICAgPyB0aGlzLmVhY2godmFsdWUgPT0gbnVsbFxuICAgICAgICAgID8gaHRtbFJlbW92ZSA6ICh0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgICAgID8gaHRtbEZ1bmN0aW9uXG4gICAgICAgICAgOiBodG1sQ29uc3RhbnQpKHZhbHVlKSlcbiAgICAgIDogdGhpcy5ub2RlKCkuaW5uZXJIVE1MO1xufVxuXG5mdW5jdGlvbiByYWlzZSgpIHtcbiAgaWYgKHRoaXMubmV4dFNpYmxpbmcpIHRoaXMucGFyZW50Tm9kZS5hcHBlbmRDaGlsZCh0aGlzKTtcbn1cblxuZnVuY3Rpb24gc2VsZWN0aW9uX3JhaXNlKCkge1xuICByZXR1cm4gdGhpcy5lYWNoKHJhaXNlKTtcbn1cblxuZnVuY3Rpb24gbG93ZXIoKSB7XG4gIGlmICh0aGlzLnByZXZpb3VzU2libGluZykgdGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZSh0aGlzLCB0aGlzLnBhcmVudE5vZGUuZmlyc3RDaGlsZCk7XG59XG5cbmZ1bmN0aW9uIHNlbGVjdGlvbl9sb3dlcigpIHtcbiAgcmV0dXJuIHRoaXMuZWFjaChsb3dlcik7XG59XG5cbmZ1bmN0aW9uIHNlbGVjdGlvbl9hcHBlbmQobmFtZSkge1xuICB2YXIgY3JlYXRlID0gdHlwZW9mIG5hbWUgPT09IFwiZnVuY3Rpb25cIiA/IG5hbWUgOiBjcmVhdG9yKG5hbWUpO1xuICByZXR1cm4gdGhpcy5zZWxlY3QoZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuYXBwZW5kQ2hpbGQoY3JlYXRlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gY29uc3RhbnROdWxsKCkge1xuICByZXR1cm4gbnVsbDtcbn1cblxuZnVuY3Rpb24gc2VsZWN0aW9uX2luc2VydChuYW1lLCBiZWZvcmUpIHtcbiAgdmFyIGNyZWF0ZSA9IHR5cGVvZiBuYW1lID09PSBcImZ1bmN0aW9uXCIgPyBuYW1lIDogY3JlYXRvcihuYW1lKSxcbiAgICAgIHNlbGVjdCA9IGJlZm9yZSA9PSBudWxsID8gY29uc3RhbnROdWxsIDogdHlwZW9mIGJlZm9yZSA9PT0gXCJmdW5jdGlvblwiID8gYmVmb3JlIDogc2VsZWN0b3IoYmVmb3JlKTtcbiAgcmV0dXJuIHRoaXMuc2VsZWN0KGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLmluc2VydEJlZm9yZShjcmVhdGUuYXBwbHkodGhpcywgYXJndW1lbnRzKSwgc2VsZWN0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgbnVsbCk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiByZW1vdmUoKSB7XG4gIHZhciBwYXJlbnQgPSB0aGlzLnBhcmVudE5vZGU7XG4gIGlmIChwYXJlbnQpIHBhcmVudC5yZW1vdmVDaGlsZCh0aGlzKTtcbn1cblxuZnVuY3Rpb24gc2VsZWN0aW9uX3JlbW92ZSgpIHtcbiAgcmV0dXJuIHRoaXMuZWFjaChyZW1vdmUpO1xufVxuXG5mdW5jdGlvbiBzZWxlY3Rpb25fY2xvbmVTaGFsbG93KCkge1xuICB2YXIgY2xvbmUgPSB0aGlzLmNsb25lTm9kZShmYWxzZSksIHBhcmVudCA9IHRoaXMucGFyZW50Tm9kZTtcbiAgcmV0dXJuIHBhcmVudCA/IHBhcmVudC5pbnNlcnRCZWZvcmUoY2xvbmUsIHRoaXMubmV4dFNpYmxpbmcpIDogY2xvbmU7XG59XG5cbmZ1bmN0aW9uIHNlbGVjdGlvbl9jbG9uZURlZXAoKSB7XG4gIHZhciBjbG9uZSA9IHRoaXMuY2xvbmVOb2RlKHRydWUpLCBwYXJlbnQgPSB0aGlzLnBhcmVudE5vZGU7XG4gIHJldHVybiBwYXJlbnQgPyBwYXJlbnQuaW5zZXJ0QmVmb3JlKGNsb25lLCB0aGlzLm5leHRTaWJsaW5nKSA6IGNsb25lO1xufVxuXG5mdW5jdGlvbiBzZWxlY3Rpb25fY2xvbmUoZGVlcCkge1xuICByZXR1cm4gdGhpcy5zZWxlY3QoZGVlcCA/IHNlbGVjdGlvbl9jbG9uZURlZXAgOiBzZWxlY3Rpb25fY2xvbmVTaGFsbG93KTtcbn1cblxuZnVuY3Rpb24gc2VsZWN0aW9uX2RhdHVtKHZhbHVlKSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoXG4gICAgICA/IHRoaXMucHJvcGVydHkoXCJfX2RhdGFfX1wiLCB2YWx1ZSlcbiAgICAgIDogdGhpcy5ub2RlKCkuX19kYXRhX187XG59XG5cbnZhciBmaWx0ZXJFdmVudHMgPSB7fTtcblxuZXhwb3J0cy5ldmVudCA9IG51bGw7XG5cbmlmICh0eXBlb2YgZG9jdW1lbnQgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gIGlmICghKFwib25tb3VzZWVudGVyXCIgaW4gZWxlbWVudCkpIHtcbiAgICBmaWx0ZXJFdmVudHMgPSB7bW91c2VlbnRlcjogXCJtb3VzZW92ZXJcIiwgbW91c2VsZWF2ZTogXCJtb3VzZW91dFwifTtcbiAgfVxufVxuXG5mdW5jdGlvbiBmaWx0ZXJDb250ZXh0TGlzdGVuZXIobGlzdGVuZXIsIGluZGV4LCBncm91cCkge1xuICBsaXN0ZW5lciA9IGNvbnRleHRMaXN0ZW5lcihsaXN0ZW5lciwgaW5kZXgsIGdyb3VwKTtcbiAgcmV0dXJuIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgdmFyIHJlbGF0ZWQgPSBldmVudC5yZWxhdGVkVGFyZ2V0O1xuICAgIGlmICghcmVsYXRlZCB8fCAocmVsYXRlZCAhPT0gdGhpcyAmJiAhKHJlbGF0ZWQuY29tcGFyZURvY3VtZW50UG9zaXRpb24odGhpcykgJiA4KSkpIHtcbiAgICAgIGxpc3RlbmVyLmNhbGwodGhpcywgZXZlbnQpO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gY29udGV4dExpc3RlbmVyKGxpc3RlbmVyLCBpbmRleCwgZ3JvdXApIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGV2ZW50MSkge1xuICAgIHZhciBldmVudDAgPSBleHBvcnRzLmV2ZW50OyAvLyBFdmVudHMgY2FuIGJlIHJlZW50cmFudCAoZS5nLiwgZm9jdXMpLlxuICAgIGV4cG9ydHMuZXZlbnQgPSBldmVudDE7XG4gICAgdHJ5IHtcbiAgICAgIGxpc3RlbmVyLmNhbGwodGhpcywgdGhpcy5fX2RhdGFfXywgaW5kZXgsIGdyb3VwKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgZXhwb3J0cy5ldmVudCA9IGV2ZW50MDtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIHBhcnNlVHlwZW5hbWVzKHR5cGVuYW1lcykge1xuICByZXR1cm4gdHlwZW5hbWVzLnRyaW0oKS5zcGxpdCgvXnxcXHMrLykubWFwKGZ1bmN0aW9uKHQpIHtcbiAgICB2YXIgbmFtZSA9IFwiXCIsIGkgPSB0LmluZGV4T2YoXCIuXCIpO1xuICAgIGlmIChpID49IDApIG5hbWUgPSB0LnNsaWNlKGkgKyAxKSwgdCA9IHQuc2xpY2UoMCwgaSk7XG4gICAgcmV0dXJuIHt0eXBlOiB0LCBuYW1lOiBuYW1lfTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIG9uUmVtb3ZlKHR5cGVuYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgb24gPSB0aGlzLl9fb247XG4gICAgaWYgKCFvbikgcmV0dXJuO1xuICAgIGZvciAodmFyIGogPSAwLCBpID0gLTEsIG0gPSBvbi5sZW5ndGgsIG87IGogPCBtOyArK2opIHtcbiAgICAgIGlmIChvID0gb25bal0sICghdHlwZW5hbWUudHlwZSB8fCBvLnR5cGUgPT09IHR5cGVuYW1lLnR5cGUpICYmIG8ubmFtZSA9PT0gdHlwZW5hbWUubmFtZSkge1xuICAgICAgICB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIoby50eXBlLCBvLmxpc3RlbmVyLCBvLmNhcHR1cmUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb25bKytpXSA9IG87XG4gICAgICB9XG4gICAgfVxuICAgIGlmICgrK2kpIG9uLmxlbmd0aCA9IGk7XG4gICAgZWxzZSBkZWxldGUgdGhpcy5fX29uO1xuICB9O1xufVxuXG5mdW5jdGlvbiBvbkFkZCh0eXBlbmFtZSwgdmFsdWUsIGNhcHR1cmUpIHtcbiAgdmFyIHdyYXAgPSBmaWx0ZXJFdmVudHMuaGFzT3duUHJvcGVydHkodHlwZW5hbWUudHlwZSkgPyBmaWx0ZXJDb250ZXh0TGlzdGVuZXIgOiBjb250ZXh0TGlzdGVuZXI7XG4gIHJldHVybiBmdW5jdGlvbihkLCBpLCBncm91cCkge1xuICAgIHZhciBvbiA9IHRoaXMuX19vbiwgbywgbGlzdGVuZXIgPSB3cmFwKHZhbHVlLCBpLCBncm91cCk7XG4gICAgaWYgKG9uKSBmb3IgKHZhciBqID0gMCwgbSA9IG9uLmxlbmd0aDsgaiA8IG07ICsraikge1xuICAgICAgaWYgKChvID0gb25bal0pLnR5cGUgPT09IHR5cGVuYW1lLnR5cGUgJiYgby5uYW1lID09PSB0eXBlbmFtZS5uYW1lKSB7XG4gICAgICAgIHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcihvLnR5cGUsIG8ubGlzdGVuZXIsIG8uY2FwdHVyZSk7XG4gICAgICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcihvLnR5cGUsIG8ubGlzdGVuZXIgPSBsaXN0ZW5lciwgby5jYXB0dXJlID0gY2FwdHVyZSk7XG4gICAgICAgIG8udmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIodHlwZW5hbWUudHlwZSwgbGlzdGVuZXIsIGNhcHR1cmUpO1xuICAgIG8gPSB7dHlwZTogdHlwZW5hbWUudHlwZSwgbmFtZTogdHlwZW5hbWUubmFtZSwgdmFsdWU6IHZhbHVlLCBsaXN0ZW5lcjogbGlzdGVuZXIsIGNhcHR1cmU6IGNhcHR1cmV9O1xuICAgIGlmICghb24pIHRoaXMuX19vbiA9IFtvXTtcbiAgICBlbHNlIG9uLnB1c2gobyk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHNlbGVjdGlvbl9vbih0eXBlbmFtZSwgdmFsdWUsIGNhcHR1cmUpIHtcbiAgdmFyIHR5cGVuYW1lcyA9IHBhcnNlVHlwZW5hbWVzKHR5cGVuYW1lICsgXCJcIiksIGksIG4gPSB0eXBlbmFtZXMubGVuZ3RoLCB0O1xuXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikge1xuICAgIHZhciBvbiA9IHRoaXMubm9kZSgpLl9fb247XG4gICAgaWYgKG9uKSBmb3IgKHZhciBqID0gMCwgbSA9IG9uLmxlbmd0aCwgbzsgaiA8IG07ICsraikge1xuICAgICAgZm9yIChpID0gMCwgbyA9IG9uW2pdOyBpIDwgbjsgKytpKSB7XG4gICAgICAgIGlmICgodCA9IHR5cGVuYW1lc1tpXSkudHlwZSA9PT0gby50eXBlICYmIHQubmFtZSA9PT0gby5uYW1lKSB7XG4gICAgICAgICAgcmV0dXJuIG8udmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgb24gPSB2YWx1ZSA/IG9uQWRkIDogb25SZW1vdmU7XG4gIGlmIChjYXB0dXJlID09IG51bGwpIGNhcHR1cmUgPSBmYWxzZTtcbiAgZm9yIChpID0gMDsgaSA8IG47ICsraSkgdGhpcy5lYWNoKG9uKHR5cGVuYW1lc1tpXSwgdmFsdWUsIGNhcHR1cmUpKTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbmZ1bmN0aW9uIGN1c3RvbUV2ZW50KGV2ZW50MSwgbGlzdGVuZXIsIHRoYXQsIGFyZ3MpIHtcbiAgdmFyIGV2ZW50MCA9IGV4cG9ydHMuZXZlbnQ7XG4gIGV2ZW50MS5zb3VyY2VFdmVudCA9IGV4cG9ydHMuZXZlbnQ7XG4gIGV4cG9ydHMuZXZlbnQgPSBldmVudDE7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGxpc3RlbmVyLmFwcGx5KHRoYXQsIGFyZ3MpO1xuICB9IGZpbmFsbHkge1xuICAgIGV4cG9ydHMuZXZlbnQgPSBldmVudDA7XG4gIH1cbn1cblxuZnVuY3Rpb24gZGlzcGF0Y2hFdmVudChub2RlLCB0eXBlLCBwYXJhbXMpIHtcbiAgdmFyIHdpbmRvdyA9IGRlZmF1bHRWaWV3KG5vZGUpLFxuICAgICAgZXZlbnQgPSB3aW5kb3cuQ3VzdG9tRXZlbnQ7XG5cbiAgaWYgKHR5cGVvZiBldmVudCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgZXZlbnQgPSBuZXcgZXZlbnQodHlwZSwgcGFyYW1zKTtcbiAgfSBlbHNlIHtcbiAgICBldmVudCA9IHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFdmVudChcIkV2ZW50XCIpO1xuICAgIGlmIChwYXJhbXMpIGV2ZW50LmluaXRFdmVudCh0eXBlLCBwYXJhbXMuYnViYmxlcywgcGFyYW1zLmNhbmNlbGFibGUpLCBldmVudC5kZXRhaWwgPSBwYXJhbXMuZGV0YWlsO1xuICAgIGVsc2UgZXZlbnQuaW5pdEV2ZW50KHR5cGUsIGZhbHNlLCBmYWxzZSk7XG4gIH1cblxuICBub2RlLmRpc3BhdGNoRXZlbnQoZXZlbnQpO1xufVxuXG5mdW5jdGlvbiBkaXNwYXRjaENvbnN0YW50KHR5cGUsIHBhcmFtcykge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGRpc3BhdGNoRXZlbnQodGhpcywgdHlwZSwgcGFyYW1zKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZGlzcGF0Y2hGdW5jdGlvbih0eXBlLCBwYXJhbXMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBkaXNwYXRjaEV2ZW50KHRoaXMsIHR5cGUsIHBhcmFtcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gc2VsZWN0aW9uX2Rpc3BhdGNoKHR5cGUsIHBhcmFtcykge1xuICByZXR1cm4gdGhpcy5lYWNoKCh0eXBlb2YgcGFyYW1zID09PSBcImZ1bmN0aW9uXCJcbiAgICAgID8gZGlzcGF0Y2hGdW5jdGlvblxuICAgICAgOiBkaXNwYXRjaENvbnN0YW50KSh0eXBlLCBwYXJhbXMpKTtcbn1cblxudmFyIHJvb3QgPSBbbnVsbF07XG5cbmZ1bmN0aW9uIFNlbGVjdGlvbihncm91cHMsIHBhcmVudHMpIHtcbiAgdGhpcy5fZ3JvdXBzID0gZ3JvdXBzO1xuICB0aGlzLl9wYXJlbnRzID0gcGFyZW50cztcbn1cblxuZnVuY3Rpb24gc2VsZWN0aW9uKCkge1xuICByZXR1cm4gbmV3IFNlbGVjdGlvbihbW2RvY3VtZW50LmRvY3VtZW50RWxlbWVudF1dLCByb290KTtcbn1cblxuU2VsZWN0aW9uLnByb3RvdHlwZSA9IHNlbGVjdGlvbi5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBTZWxlY3Rpb24sXG4gIHNlbGVjdDogc2VsZWN0aW9uX3NlbGVjdCxcbiAgc2VsZWN0QWxsOiBzZWxlY3Rpb25fc2VsZWN0QWxsLFxuICBmaWx0ZXI6IHNlbGVjdGlvbl9maWx0ZXIsXG4gIGRhdGE6IHNlbGVjdGlvbl9kYXRhLFxuICBlbnRlcjogc2VsZWN0aW9uX2VudGVyLFxuICBleGl0OiBzZWxlY3Rpb25fZXhpdCxcbiAgam9pbjogc2VsZWN0aW9uX2pvaW4sXG4gIG1lcmdlOiBzZWxlY3Rpb25fbWVyZ2UsXG4gIG9yZGVyOiBzZWxlY3Rpb25fb3JkZXIsXG4gIHNvcnQ6IHNlbGVjdGlvbl9zb3J0LFxuICBjYWxsOiBzZWxlY3Rpb25fY2FsbCxcbiAgbm9kZXM6IHNlbGVjdGlvbl9ub2RlcyxcbiAgbm9kZTogc2VsZWN0aW9uX25vZGUsXG4gIHNpemU6IHNlbGVjdGlvbl9zaXplLFxuICBlbXB0eTogc2VsZWN0aW9uX2VtcHR5LFxuICBlYWNoOiBzZWxlY3Rpb25fZWFjaCxcbiAgYXR0cjogc2VsZWN0aW9uX2F0dHIsXG4gIHN0eWxlOiBzZWxlY3Rpb25fc3R5bGUsXG4gIHByb3BlcnR5OiBzZWxlY3Rpb25fcHJvcGVydHksXG4gIGNsYXNzZWQ6IHNlbGVjdGlvbl9jbGFzc2VkLFxuICB0ZXh0OiBzZWxlY3Rpb25fdGV4dCxcbiAgaHRtbDogc2VsZWN0aW9uX2h0bWwsXG4gIHJhaXNlOiBzZWxlY3Rpb25fcmFpc2UsXG4gIGxvd2VyOiBzZWxlY3Rpb25fbG93ZXIsXG4gIGFwcGVuZDogc2VsZWN0aW9uX2FwcGVuZCxcbiAgaW5zZXJ0OiBzZWxlY3Rpb25faW5zZXJ0LFxuICByZW1vdmU6IHNlbGVjdGlvbl9yZW1vdmUsXG4gIGNsb25lOiBzZWxlY3Rpb25fY2xvbmUsXG4gIGRhdHVtOiBzZWxlY3Rpb25fZGF0dW0sXG4gIG9uOiBzZWxlY3Rpb25fb24sXG4gIGRpc3BhdGNoOiBzZWxlY3Rpb25fZGlzcGF0Y2hcbn07XG5cbmZ1bmN0aW9uIHNlbGVjdChzZWxlY3Rvcikge1xuICByZXR1cm4gdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiXG4gICAgICA/IG5ldyBTZWxlY3Rpb24oW1tkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKV1dLCBbZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50XSlcbiAgICAgIDogbmV3IFNlbGVjdGlvbihbW3NlbGVjdG9yXV0sIHJvb3QpO1xufVxuXG5mdW5jdGlvbiBjcmVhdGUobmFtZSkge1xuICByZXR1cm4gc2VsZWN0KGNyZWF0b3IobmFtZSkuY2FsbChkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpKTtcbn1cblxudmFyIG5leHRJZCA9IDA7XG5cbmZ1bmN0aW9uIGxvY2FsKCkge1xuICByZXR1cm4gbmV3IExvY2FsO1xufVxuXG5mdW5jdGlvbiBMb2NhbCgpIHtcbiAgdGhpcy5fID0gXCJAXCIgKyAoKytuZXh0SWQpLnRvU3RyaW5nKDM2KTtcbn1cblxuTG9jYWwucHJvdG90eXBlID0gbG9jYWwucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogTG9jYWwsXG4gIGdldDogZnVuY3Rpb24obm9kZSkge1xuICAgIHZhciBpZCA9IHRoaXMuXztcbiAgICB3aGlsZSAoIShpZCBpbiBub2RlKSkgaWYgKCEobm9kZSA9IG5vZGUucGFyZW50Tm9kZSkpIHJldHVybjtcbiAgICByZXR1cm4gbm9kZVtpZF07XG4gIH0sXG4gIHNldDogZnVuY3Rpb24obm9kZSwgdmFsdWUpIHtcbiAgICByZXR1cm4gbm9kZVt0aGlzLl9dID0gdmFsdWU7XG4gIH0sXG4gIHJlbW92ZTogZnVuY3Rpb24obm9kZSkge1xuICAgIHJldHVybiB0aGlzLl8gaW4gbm9kZSAmJiBkZWxldGUgbm9kZVt0aGlzLl9dO1xuICB9LFxuICB0b1N0cmluZzogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuXztcbiAgfVxufTtcblxuZnVuY3Rpb24gc291cmNlRXZlbnQoKSB7XG4gIHZhciBjdXJyZW50ID0gZXhwb3J0cy5ldmVudCwgc291cmNlO1xuICB3aGlsZSAoc291cmNlID0gY3VycmVudC5zb3VyY2VFdmVudCkgY3VycmVudCA9IHNvdXJjZTtcbiAgcmV0dXJuIGN1cnJlbnQ7XG59XG5cbmZ1bmN0aW9uIHBvaW50KG5vZGUsIGV2ZW50KSB7XG4gIHZhciBzdmcgPSBub2RlLm93bmVyU1ZHRWxlbWVudCB8fCBub2RlO1xuXG4gIGlmIChzdmcuY3JlYXRlU1ZHUG9pbnQpIHtcbiAgICB2YXIgcG9pbnQgPSBzdmcuY3JlYXRlU1ZHUG9pbnQoKTtcbiAgICBwb2ludC54ID0gZXZlbnQuY2xpZW50WCwgcG9pbnQueSA9IGV2ZW50LmNsaWVudFk7XG4gICAgcG9pbnQgPSBwb2ludC5tYXRyaXhUcmFuc2Zvcm0obm9kZS5nZXRTY3JlZW5DVE0oKS5pbnZlcnNlKCkpO1xuICAgIHJldHVybiBbcG9pbnQueCwgcG9pbnQueV07XG4gIH1cblxuICB2YXIgcmVjdCA9IG5vZGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gIHJldHVybiBbZXZlbnQuY2xpZW50WCAtIHJlY3QubGVmdCAtIG5vZGUuY2xpZW50TGVmdCwgZXZlbnQuY2xpZW50WSAtIHJlY3QudG9wIC0gbm9kZS5jbGllbnRUb3BdO1xufVxuXG5mdW5jdGlvbiBtb3VzZShub2RlKSB7XG4gIHZhciBldmVudCA9IHNvdXJjZUV2ZW50KCk7XG4gIGlmIChldmVudC5jaGFuZ2VkVG91Y2hlcykgZXZlbnQgPSBldmVudC5jaGFuZ2VkVG91Y2hlc1swXTtcbiAgcmV0dXJuIHBvaW50KG5vZGUsIGV2ZW50KTtcbn1cblxuZnVuY3Rpb24gc2VsZWN0QWxsKHNlbGVjdG9yKSB7XG4gIHJldHVybiB0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCJcbiAgICAgID8gbmV3IFNlbGVjdGlvbihbZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3RvcildLCBbZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50XSlcbiAgICAgIDogbmV3IFNlbGVjdGlvbihbc2VsZWN0b3IgPT0gbnVsbCA/IFtdIDogc2VsZWN0b3JdLCByb290KTtcbn1cblxuZnVuY3Rpb24gdG91Y2gobm9kZSwgdG91Y2hlcywgaWRlbnRpZmllcikge1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDMpIGlkZW50aWZpZXIgPSB0b3VjaGVzLCB0b3VjaGVzID0gc291cmNlRXZlbnQoKS5jaGFuZ2VkVG91Y2hlcztcblxuICBmb3IgKHZhciBpID0gMCwgbiA9IHRvdWNoZXMgPyB0b3VjaGVzLmxlbmd0aCA6IDAsIHRvdWNoOyBpIDwgbjsgKytpKSB7XG4gICAgaWYgKCh0b3VjaCA9IHRvdWNoZXNbaV0pLmlkZW50aWZpZXIgPT09IGlkZW50aWZpZXIpIHtcbiAgICAgIHJldHVybiBwb2ludChub2RlLCB0b3VjaCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG5cbmZ1bmN0aW9uIHRvdWNoZXMobm9kZSwgdG91Y2hlcykge1xuICBpZiAodG91Y2hlcyA9PSBudWxsKSB0b3VjaGVzID0gc291cmNlRXZlbnQoKS50b3VjaGVzO1xuXG4gIGZvciAodmFyIGkgPSAwLCBuID0gdG91Y2hlcyA/IHRvdWNoZXMubGVuZ3RoIDogMCwgcG9pbnRzID0gbmV3IEFycmF5KG4pOyBpIDwgbjsgKytpKSB7XG4gICAgcG9pbnRzW2ldID0gcG9pbnQobm9kZSwgdG91Y2hlc1tpXSk7XG4gIH1cblxuICByZXR1cm4gcG9pbnRzO1xufVxuXG5leHBvcnRzLmNsaWVudFBvaW50ID0gcG9pbnQ7XG5leHBvcnRzLmNyZWF0ZSA9IGNyZWF0ZTtcbmV4cG9ydHMuY3JlYXRvciA9IGNyZWF0b3I7XG5leHBvcnRzLmN1c3RvbUV2ZW50ID0gY3VzdG9tRXZlbnQ7XG5leHBvcnRzLmxvY2FsID0gbG9jYWw7XG5leHBvcnRzLm1hdGNoZXIgPSBtYXRjaGVyO1xuZXhwb3J0cy5tb3VzZSA9IG1vdXNlO1xuZXhwb3J0cy5uYW1lc3BhY2UgPSBuYW1lc3BhY2U7XG5leHBvcnRzLm5hbWVzcGFjZXMgPSBuYW1lc3BhY2VzO1xuZXhwb3J0cy5zZWxlY3QgPSBzZWxlY3Q7XG5leHBvcnRzLnNlbGVjdEFsbCA9IHNlbGVjdEFsbDtcbmV4cG9ydHMuc2VsZWN0aW9uID0gc2VsZWN0aW9uO1xuZXhwb3J0cy5zZWxlY3RvciA9IHNlbGVjdG9yO1xuZXhwb3J0cy5zZWxlY3RvckFsbCA9IHNlbGVjdG9yQWxsO1xuZXhwb3J0cy5zdHlsZSA9IHN0eWxlVmFsdWU7XG5leHBvcnRzLnRvdWNoID0gdG91Y2g7XG5leHBvcnRzLnRvdWNoZXMgPSB0b3VjaGVzO1xuZXhwb3J0cy53aW5kb3cgPSBkZWZhdWx0VmlldztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxufSkpO1xuIiwiLy8gaHR0cHM6Ly9kM2pzLm9yZy9kMy1zaGFwZS8gdjEuMy43IENvcHlyaWdodCAyMDE5IE1pa2UgQm9zdG9ja1xuKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbnR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyA/IGZhY3RvcnkoZXhwb3J0cywgcmVxdWlyZSgnZDMtcGF0aCcpKSA6XG50eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWydleHBvcnRzJywgJ2QzLXBhdGgnXSwgZmFjdG9yeSkgOlxuKGdsb2JhbCA9IGdsb2JhbCB8fCBzZWxmLCBmYWN0b3J5KGdsb2JhbC5kMyA9IGdsb2JhbC5kMyB8fCB7fSwgZ2xvYmFsLmQzKSk7XG59KHRoaXMsIGZ1bmN0aW9uIChleHBvcnRzLCBkM1BhdGgpIHsgJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBjb25zdGFudCh4KSB7XG4gIHJldHVybiBmdW5jdGlvbiBjb25zdGFudCgpIHtcbiAgICByZXR1cm4geDtcbiAgfTtcbn1cblxudmFyIGFicyA9IE1hdGguYWJzO1xudmFyIGF0YW4yID0gTWF0aC5hdGFuMjtcbnZhciBjb3MgPSBNYXRoLmNvcztcbnZhciBtYXggPSBNYXRoLm1heDtcbnZhciBtaW4gPSBNYXRoLm1pbjtcbnZhciBzaW4gPSBNYXRoLnNpbjtcbnZhciBzcXJ0ID0gTWF0aC5zcXJ0O1xuXG52YXIgZXBzaWxvbiA9IDFlLTEyO1xudmFyIHBpID0gTWF0aC5QSTtcbnZhciBoYWxmUGkgPSBwaSAvIDI7XG52YXIgdGF1ID0gMiAqIHBpO1xuXG5mdW5jdGlvbiBhY29zKHgpIHtcbiAgcmV0dXJuIHggPiAxID8gMCA6IHggPCAtMSA/IHBpIDogTWF0aC5hY29zKHgpO1xufVxuXG5mdW5jdGlvbiBhc2luKHgpIHtcbiAgcmV0dXJuIHggPj0gMSA/IGhhbGZQaSA6IHggPD0gLTEgPyAtaGFsZlBpIDogTWF0aC5hc2luKHgpO1xufVxuXG5mdW5jdGlvbiBhcmNJbm5lclJhZGl1cyhkKSB7XG4gIHJldHVybiBkLmlubmVyUmFkaXVzO1xufVxuXG5mdW5jdGlvbiBhcmNPdXRlclJhZGl1cyhkKSB7XG4gIHJldHVybiBkLm91dGVyUmFkaXVzO1xufVxuXG5mdW5jdGlvbiBhcmNTdGFydEFuZ2xlKGQpIHtcbiAgcmV0dXJuIGQuc3RhcnRBbmdsZTtcbn1cblxuZnVuY3Rpb24gYXJjRW5kQW5nbGUoZCkge1xuICByZXR1cm4gZC5lbmRBbmdsZTtcbn1cblxuZnVuY3Rpb24gYXJjUGFkQW5nbGUoZCkge1xuICByZXR1cm4gZCAmJiBkLnBhZEFuZ2xlOyAvLyBOb3RlOiBvcHRpb25hbCFcbn1cblxuZnVuY3Rpb24gaW50ZXJzZWN0KHgwLCB5MCwgeDEsIHkxLCB4MiwgeTIsIHgzLCB5Mykge1xuICB2YXIgeDEwID0geDEgLSB4MCwgeTEwID0geTEgLSB5MCxcbiAgICAgIHgzMiA9IHgzIC0geDIsIHkzMiA9IHkzIC0geTIsXG4gICAgICB0ID0geTMyICogeDEwIC0geDMyICogeTEwO1xuICBpZiAodCAqIHQgPCBlcHNpbG9uKSByZXR1cm47XG4gIHQgPSAoeDMyICogKHkwIC0geTIpIC0geTMyICogKHgwIC0geDIpKSAvIHQ7XG4gIHJldHVybiBbeDAgKyB0ICogeDEwLCB5MCArIHQgKiB5MTBdO1xufVxuXG4vLyBDb21wdXRlIHBlcnBlbmRpY3VsYXIgb2Zmc2V0IGxpbmUgb2YgbGVuZ3RoIHJjLlxuLy8gaHR0cDovL21hdGh3b3JsZC53b2xmcmFtLmNvbS9DaXJjbGUtTGluZUludGVyc2VjdGlvbi5odG1sXG5mdW5jdGlvbiBjb3JuZXJUYW5nZW50cyh4MCwgeTAsIHgxLCB5MSwgcjEsIHJjLCBjdykge1xuICB2YXIgeDAxID0geDAgLSB4MSxcbiAgICAgIHkwMSA9IHkwIC0geTEsXG4gICAgICBsbyA9IChjdyA/IHJjIDogLXJjKSAvIHNxcnQoeDAxICogeDAxICsgeTAxICogeTAxKSxcbiAgICAgIG94ID0gbG8gKiB5MDEsXG4gICAgICBveSA9IC1sbyAqIHgwMSxcbiAgICAgIHgxMSA9IHgwICsgb3gsXG4gICAgICB5MTEgPSB5MCArIG95LFxuICAgICAgeDEwID0geDEgKyBveCxcbiAgICAgIHkxMCA9IHkxICsgb3ksXG4gICAgICB4MDAgPSAoeDExICsgeDEwKSAvIDIsXG4gICAgICB5MDAgPSAoeTExICsgeTEwKSAvIDIsXG4gICAgICBkeCA9IHgxMCAtIHgxMSxcbiAgICAgIGR5ID0geTEwIC0geTExLFxuICAgICAgZDIgPSBkeCAqIGR4ICsgZHkgKiBkeSxcbiAgICAgIHIgPSByMSAtIHJjLFxuICAgICAgRCA9IHgxMSAqIHkxMCAtIHgxMCAqIHkxMSxcbiAgICAgIGQgPSAoZHkgPCAwID8gLTEgOiAxKSAqIHNxcnQobWF4KDAsIHIgKiByICogZDIgLSBEICogRCkpLFxuICAgICAgY3gwID0gKEQgKiBkeSAtIGR4ICogZCkgLyBkMixcbiAgICAgIGN5MCA9ICgtRCAqIGR4IC0gZHkgKiBkKSAvIGQyLFxuICAgICAgY3gxID0gKEQgKiBkeSArIGR4ICogZCkgLyBkMixcbiAgICAgIGN5MSA9ICgtRCAqIGR4ICsgZHkgKiBkKSAvIGQyLFxuICAgICAgZHgwID0gY3gwIC0geDAwLFxuICAgICAgZHkwID0gY3kwIC0geTAwLFxuICAgICAgZHgxID0gY3gxIC0geDAwLFxuICAgICAgZHkxID0gY3kxIC0geTAwO1xuXG4gIC8vIFBpY2sgdGhlIGNsb3NlciBvZiB0aGUgdHdvIGludGVyc2VjdGlvbiBwb2ludHMuXG4gIC8vIFRPRE8gSXMgdGhlcmUgYSBmYXN0ZXIgd2F5IHRvIGRldGVybWluZSB3aGljaCBpbnRlcnNlY3Rpb24gdG8gdXNlP1xuICBpZiAoZHgwICogZHgwICsgZHkwICogZHkwID4gZHgxICogZHgxICsgZHkxICogZHkxKSBjeDAgPSBjeDEsIGN5MCA9IGN5MTtcblxuICByZXR1cm4ge1xuICAgIGN4OiBjeDAsXG4gICAgY3k6IGN5MCxcbiAgICB4MDE6IC1veCxcbiAgICB5MDE6IC1veSxcbiAgICB4MTE6IGN4MCAqIChyMSAvIHIgLSAxKSxcbiAgICB5MTE6IGN5MCAqIChyMSAvIHIgLSAxKVxuICB9O1xufVxuXG5mdW5jdGlvbiBhcmMoKSB7XG4gIHZhciBpbm5lclJhZGl1cyA9IGFyY0lubmVyUmFkaXVzLFxuICAgICAgb3V0ZXJSYWRpdXMgPSBhcmNPdXRlclJhZGl1cyxcbiAgICAgIGNvcm5lclJhZGl1cyA9IGNvbnN0YW50KDApLFxuICAgICAgcGFkUmFkaXVzID0gbnVsbCxcbiAgICAgIHN0YXJ0QW5nbGUgPSBhcmNTdGFydEFuZ2xlLFxuICAgICAgZW5kQW5nbGUgPSBhcmNFbmRBbmdsZSxcbiAgICAgIHBhZEFuZ2xlID0gYXJjUGFkQW5nbGUsXG4gICAgICBjb250ZXh0ID0gbnVsbDtcblxuICBmdW5jdGlvbiBhcmMoKSB7XG4gICAgdmFyIGJ1ZmZlcixcbiAgICAgICAgcixcbiAgICAgICAgcjAgPSAraW5uZXJSYWRpdXMuYXBwbHkodGhpcywgYXJndW1lbnRzKSxcbiAgICAgICAgcjEgPSArb3V0ZXJSYWRpdXMuYXBwbHkodGhpcywgYXJndW1lbnRzKSxcbiAgICAgICAgYTAgPSBzdGFydEFuZ2xlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgLSBoYWxmUGksXG4gICAgICAgIGExID0gZW5kQW5nbGUuYXBwbHkodGhpcywgYXJndW1lbnRzKSAtIGhhbGZQaSxcbiAgICAgICAgZGEgPSBhYnMoYTEgLSBhMCksXG4gICAgICAgIGN3ID0gYTEgPiBhMDtcblxuICAgIGlmICghY29udGV4dCkgY29udGV4dCA9IGJ1ZmZlciA9IGQzUGF0aC5wYXRoKCk7XG5cbiAgICAvLyBFbnN1cmUgdGhhdCB0aGUgb3V0ZXIgcmFkaXVzIGlzIGFsd2F5cyBsYXJnZXIgdGhhbiB0aGUgaW5uZXIgcmFkaXVzLlxuICAgIGlmIChyMSA8IHIwKSByID0gcjEsIHIxID0gcjAsIHIwID0gcjtcblxuICAgIC8vIElzIGl0IGEgcG9pbnQ/XG4gICAgaWYgKCEocjEgPiBlcHNpbG9uKSkgY29udGV4dC5tb3ZlVG8oMCwgMCk7XG5cbiAgICAvLyBPciBpcyBpdCBhIGNpcmNsZSBvciBhbm51bHVzP1xuICAgIGVsc2UgaWYgKGRhID4gdGF1IC0gZXBzaWxvbikge1xuICAgICAgY29udGV4dC5tb3ZlVG8ocjEgKiBjb3MoYTApLCByMSAqIHNpbihhMCkpO1xuICAgICAgY29udGV4dC5hcmMoMCwgMCwgcjEsIGEwLCBhMSwgIWN3KTtcbiAgICAgIGlmIChyMCA+IGVwc2lsb24pIHtcbiAgICAgICAgY29udGV4dC5tb3ZlVG8ocjAgKiBjb3MoYTEpLCByMCAqIHNpbihhMSkpO1xuICAgICAgICBjb250ZXh0LmFyYygwLCAwLCByMCwgYTEsIGEwLCBjdyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gT3IgaXMgaXQgYSBjaXJjdWxhciBvciBhbm51bGFyIHNlY3Rvcj9cbiAgICBlbHNlIHtcbiAgICAgIHZhciBhMDEgPSBhMCxcbiAgICAgICAgICBhMTEgPSBhMSxcbiAgICAgICAgICBhMDAgPSBhMCxcbiAgICAgICAgICBhMTAgPSBhMSxcbiAgICAgICAgICBkYTAgPSBkYSxcbiAgICAgICAgICBkYTEgPSBkYSxcbiAgICAgICAgICBhcCA9IHBhZEFuZ2xlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgLyAyLFxuICAgICAgICAgIHJwID0gKGFwID4gZXBzaWxvbikgJiYgKHBhZFJhZGl1cyA/ICtwYWRSYWRpdXMuYXBwbHkodGhpcywgYXJndW1lbnRzKSA6IHNxcnQocjAgKiByMCArIHIxICogcjEpKSxcbiAgICAgICAgICByYyA9IG1pbihhYnMocjEgLSByMCkgLyAyLCArY29ybmVyUmFkaXVzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpLFxuICAgICAgICAgIHJjMCA9IHJjLFxuICAgICAgICAgIHJjMSA9IHJjLFxuICAgICAgICAgIHQwLFxuICAgICAgICAgIHQxO1xuXG4gICAgICAvLyBBcHBseSBwYWRkaW5nPyBOb3RlIHRoYXQgc2luY2UgcjEg4omlIHIwLCBkYTEg4omlIGRhMC5cbiAgICAgIGlmIChycCA+IGVwc2lsb24pIHtcbiAgICAgICAgdmFyIHAwID0gYXNpbihycCAvIHIwICogc2luKGFwKSksXG4gICAgICAgICAgICBwMSA9IGFzaW4ocnAgLyByMSAqIHNpbihhcCkpO1xuICAgICAgICBpZiAoKGRhMCAtPSBwMCAqIDIpID4gZXBzaWxvbikgcDAgKj0gKGN3ID8gMSA6IC0xKSwgYTAwICs9IHAwLCBhMTAgLT0gcDA7XG4gICAgICAgIGVsc2UgZGEwID0gMCwgYTAwID0gYTEwID0gKGEwICsgYTEpIC8gMjtcbiAgICAgICAgaWYgKChkYTEgLT0gcDEgKiAyKSA+IGVwc2lsb24pIHAxICo9IChjdyA/IDEgOiAtMSksIGEwMSArPSBwMSwgYTExIC09IHAxO1xuICAgICAgICBlbHNlIGRhMSA9IDAsIGEwMSA9IGExMSA9IChhMCArIGExKSAvIDI7XG4gICAgICB9XG5cbiAgICAgIHZhciB4MDEgPSByMSAqIGNvcyhhMDEpLFxuICAgICAgICAgIHkwMSA9IHIxICogc2luKGEwMSksXG4gICAgICAgICAgeDEwID0gcjAgKiBjb3MoYTEwKSxcbiAgICAgICAgICB5MTAgPSByMCAqIHNpbihhMTApO1xuXG4gICAgICAvLyBBcHBseSByb3VuZGVkIGNvcm5lcnM/XG4gICAgICBpZiAocmMgPiBlcHNpbG9uKSB7XG4gICAgICAgIHZhciB4MTEgPSByMSAqIGNvcyhhMTEpLFxuICAgICAgICAgICAgeTExID0gcjEgKiBzaW4oYTExKSxcbiAgICAgICAgICAgIHgwMCA9IHIwICogY29zKGEwMCksXG4gICAgICAgICAgICB5MDAgPSByMCAqIHNpbihhMDApLFxuICAgICAgICAgICAgb2M7XG5cbiAgICAgICAgLy8gUmVzdHJpY3QgdGhlIGNvcm5lciByYWRpdXMgYWNjb3JkaW5nIHRvIHRoZSBzZWN0b3IgYW5nbGUuXG4gICAgICAgIGlmIChkYSA8IHBpICYmIChvYyA9IGludGVyc2VjdCh4MDEsIHkwMSwgeDAwLCB5MDAsIHgxMSwgeTExLCB4MTAsIHkxMCkpKSB7XG4gICAgICAgICAgdmFyIGF4ID0geDAxIC0gb2NbMF0sXG4gICAgICAgICAgICAgIGF5ID0geTAxIC0gb2NbMV0sXG4gICAgICAgICAgICAgIGJ4ID0geDExIC0gb2NbMF0sXG4gICAgICAgICAgICAgIGJ5ID0geTExIC0gb2NbMV0sXG4gICAgICAgICAgICAgIGtjID0gMSAvIHNpbihhY29zKChheCAqIGJ4ICsgYXkgKiBieSkgLyAoc3FydChheCAqIGF4ICsgYXkgKiBheSkgKiBzcXJ0KGJ4ICogYnggKyBieSAqIGJ5KSkpIC8gMiksXG4gICAgICAgICAgICAgIGxjID0gc3FydChvY1swXSAqIG9jWzBdICsgb2NbMV0gKiBvY1sxXSk7XG4gICAgICAgICAgcmMwID0gbWluKHJjLCAocjAgLSBsYykgLyAoa2MgLSAxKSk7XG4gICAgICAgICAgcmMxID0gbWluKHJjLCAocjEgLSBsYykgLyAoa2MgKyAxKSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gSXMgdGhlIHNlY3RvciBjb2xsYXBzZWQgdG8gYSBsaW5lP1xuICAgICAgaWYgKCEoZGExID4gZXBzaWxvbikpIGNvbnRleHQubW92ZVRvKHgwMSwgeTAxKTtcblxuICAgICAgLy8gRG9lcyB0aGUgc2VjdG9y4oCZcyBvdXRlciByaW5nIGhhdmUgcm91bmRlZCBjb3JuZXJzP1xuICAgICAgZWxzZSBpZiAocmMxID4gZXBzaWxvbikge1xuICAgICAgICB0MCA9IGNvcm5lclRhbmdlbnRzKHgwMCwgeTAwLCB4MDEsIHkwMSwgcjEsIHJjMSwgY3cpO1xuICAgICAgICB0MSA9IGNvcm5lclRhbmdlbnRzKHgxMSwgeTExLCB4MTAsIHkxMCwgcjEsIHJjMSwgY3cpO1xuXG4gICAgICAgIGNvbnRleHQubW92ZVRvKHQwLmN4ICsgdDAueDAxLCB0MC5jeSArIHQwLnkwMSk7XG5cbiAgICAgICAgLy8gSGF2ZSB0aGUgY29ybmVycyBtZXJnZWQ/XG4gICAgICAgIGlmIChyYzEgPCByYykgY29udGV4dC5hcmModDAuY3gsIHQwLmN5LCByYzEsIGF0YW4yKHQwLnkwMSwgdDAueDAxKSwgYXRhbjIodDEueTAxLCB0MS54MDEpLCAhY3cpO1xuXG4gICAgICAgIC8vIE90aGVyd2lzZSwgZHJhdyB0aGUgdHdvIGNvcm5lcnMgYW5kIHRoZSByaW5nLlxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBjb250ZXh0LmFyYyh0MC5jeCwgdDAuY3ksIHJjMSwgYXRhbjIodDAueTAxLCB0MC54MDEpLCBhdGFuMih0MC55MTEsIHQwLngxMSksICFjdyk7XG4gICAgICAgICAgY29udGV4dC5hcmMoMCwgMCwgcjEsIGF0YW4yKHQwLmN5ICsgdDAueTExLCB0MC5jeCArIHQwLngxMSksIGF0YW4yKHQxLmN5ICsgdDEueTExLCB0MS5jeCArIHQxLngxMSksICFjdyk7XG4gICAgICAgICAgY29udGV4dC5hcmModDEuY3gsIHQxLmN5LCByYzEsIGF0YW4yKHQxLnkxMSwgdDEueDExKSwgYXRhbjIodDEueTAxLCB0MS54MDEpLCAhY3cpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIE9yIGlzIHRoZSBvdXRlciByaW5nIGp1c3QgYSBjaXJjdWxhciBhcmM/XG4gICAgICBlbHNlIGNvbnRleHQubW92ZVRvKHgwMSwgeTAxKSwgY29udGV4dC5hcmMoMCwgMCwgcjEsIGEwMSwgYTExLCAhY3cpO1xuXG4gICAgICAvLyBJcyB0aGVyZSBubyBpbm5lciByaW5nLCBhbmQgaXTigJlzIGEgY2lyY3VsYXIgc2VjdG9yP1xuICAgICAgLy8gT3IgcGVyaGFwcyBpdOKAmXMgYW4gYW5udWxhciBzZWN0b3IgY29sbGFwc2VkIGR1ZSB0byBwYWRkaW5nP1xuICAgICAgaWYgKCEocjAgPiBlcHNpbG9uKSB8fCAhKGRhMCA+IGVwc2lsb24pKSBjb250ZXh0LmxpbmVUbyh4MTAsIHkxMCk7XG5cbiAgICAgIC8vIERvZXMgdGhlIHNlY3RvcuKAmXMgaW5uZXIgcmluZyAob3IgcG9pbnQpIGhhdmUgcm91bmRlZCBjb3JuZXJzP1xuICAgICAgZWxzZSBpZiAocmMwID4gZXBzaWxvbikge1xuICAgICAgICB0MCA9IGNvcm5lclRhbmdlbnRzKHgxMCwgeTEwLCB4MTEsIHkxMSwgcjAsIC1yYzAsIGN3KTtcbiAgICAgICAgdDEgPSBjb3JuZXJUYW5nZW50cyh4MDEsIHkwMSwgeDAwLCB5MDAsIHIwLCAtcmMwLCBjdyk7XG5cbiAgICAgICAgY29udGV4dC5saW5lVG8odDAuY3ggKyB0MC54MDEsIHQwLmN5ICsgdDAueTAxKTtcblxuICAgICAgICAvLyBIYXZlIHRoZSBjb3JuZXJzIG1lcmdlZD9cbiAgICAgICAgaWYgKHJjMCA8IHJjKSBjb250ZXh0LmFyYyh0MC5jeCwgdDAuY3ksIHJjMCwgYXRhbjIodDAueTAxLCB0MC54MDEpLCBhdGFuMih0MS55MDEsIHQxLngwMSksICFjdyk7XG5cbiAgICAgICAgLy8gT3RoZXJ3aXNlLCBkcmF3IHRoZSB0d28gY29ybmVycyBhbmQgdGhlIHJpbmcuXG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIGNvbnRleHQuYXJjKHQwLmN4LCB0MC5jeSwgcmMwLCBhdGFuMih0MC55MDEsIHQwLngwMSksIGF0YW4yKHQwLnkxMSwgdDAueDExKSwgIWN3KTtcbiAgICAgICAgICBjb250ZXh0LmFyYygwLCAwLCByMCwgYXRhbjIodDAuY3kgKyB0MC55MTEsIHQwLmN4ICsgdDAueDExKSwgYXRhbjIodDEuY3kgKyB0MS55MTEsIHQxLmN4ICsgdDEueDExKSwgY3cpO1xuICAgICAgICAgIGNvbnRleHQuYXJjKHQxLmN4LCB0MS5jeSwgcmMwLCBhdGFuMih0MS55MTEsIHQxLngxMSksIGF0YW4yKHQxLnkwMSwgdDEueDAxKSwgIWN3KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBPciBpcyB0aGUgaW5uZXIgcmluZyBqdXN0IGEgY2lyY3VsYXIgYXJjP1xuICAgICAgZWxzZSBjb250ZXh0LmFyYygwLCAwLCByMCwgYTEwLCBhMDAsIGN3KTtcbiAgICB9XG5cbiAgICBjb250ZXh0LmNsb3NlUGF0aCgpO1xuXG4gICAgaWYgKGJ1ZmZlcikgcmV0dXJuIGNvbnRleHQgPSBudWxsLCBidWZmZXIgKyBcIlwiIHx8IG51bGw7XG4gIH1cblxuICBhcmMuY2VudHJvaWQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgciA9ICgraW5uZXJSYWRpdXMuYXBwbHkodGhpcywgYXJndW1lbnRzKSArICtvdXRlclJhZGl1cy5hcHBseSh0aGlzLCBhcmd1bWVudHMpKSAvIDIsXG4gICAgICAgIGEgPSAoK3N0YXJ0QW5nbGUuYXBwbHkodGhpcywgYXJndW1lbnRzKSArICtlbmRBbmdsZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKSAvIDIgLSBwaSAvIDI7XG4gICAgcmV0dXJuIFtjb3MoYSkgKiByLCBzaW4oYSkgKiByXTtcbiAgfTtcblxuICBhcmMuaW5uZXJSYWRpdXMgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoaW5uZXJSYWRpdXMgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCtfKSwgYXJjKSA6IGlubmVyUmFkaXVzO1xuICB9O1xuXG4gIGFyYy5vdXRlclJhZGl1cyA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChvdXRlclJhZGl1cyA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCBhcmMpIDogb3V0ZXJSYWRpdXM7XG4gIH07XG5cbiAgYXJjLmNvcm5lclJhZGl1cyA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChjb3JuZXJSYWRpdXMgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCtfKSwgYXJjKSA6IGNvcm5lclJhZGl1cztcbiAgfTtcblxuICBhcmMucGFkUmFkaXVzID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHBhZFJhZGl1cyA9IF8gPT0gbnVsbCA/IG51bGwgOiB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCtfKSwgYXJjKSA6IHBhZFJhZGl1cztcbiAgfTtcblxuICBhcmMuc3RhcnRBbmdsZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChzdGFydEFuZ2xlID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCgrXyksIGFyYykgOiBzdGFydEFuZ2xlO1xuICB9O1xuXG4gIGFyYy5lbmRBbmdsZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChlbmRBbmdsZSA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCBhcmMpIDogZW5kQW5nbGU7XG4gIH07XG5cbiAgYXJjLnBhZEFuZ2xlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHBhZEFuZ2xlID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCgrXyksIGFyYykgOiBwYWRBbmdsZTtcbiAgfTtcblxuICBhcmMuY29udGV4dCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICgoY29udGV4dCA9IF8gPT0gbnVsbCA/IG51bGwgOiBfKSwgYXJjKSA6IGNvbnRleHQ7XG4gIH07XG5cbiAgcmV0dXJuIGFyYztcbn1cblxuZnVuY3Rpb24gTGluZWFyKGNvbnRleHQpIHtcbiAgdGhpcy5fY29udGV4dCA9IGNvbnRleHQ7XG59XG5cbkxpbmVhci5wcm90b3R5cGUgPSB7XG4gIGFyZWFTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fbGluZSA9IDA7XG4gIH0sXG4gIGFyZWFFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2xpbmUgPSBOYU47XG4gIH0sXG4gIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fcG9pbnQgPSAwO1xuICB9LFxuICBsaW5lRW5kOiBmdW5jdGlvbigpIHtcbiAgICBpZiAodGhpcy5fbGluZSB8fCAodGhpcy5fbGluZSAhPT0gMCAmJiB0aGlzLl9wb2ludCA9PT0gMSkpIHRoaXMuX2NvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgdGhpcy5fbGluZSA9IDEgLSB0aGlzLl9saW5lO1xuICB9LFxuICBwb2ludDogZnVuY3Rpb24oeCwgeSkge1xuICAgIHggPSAreCwgeSA9ICt5O1xuICAgIHN3aXRjaCAodGhpcy5fcG9pbnQpIHtcbiAgICAgIGNhc2UgMDogdGhpcy5fcG9pbnQgPSAxOyB0aGlzLl9saW5lID8gdGhpcy5fY29udGV4dC5saW5lVG8oeCwgeSkgOiB0aGlzLl9jb250ZXh0Lm1vdmVUbyh4LCB5KTsgYnJlYWs7XG4gICAgICBjYXNlIDE6IHRoaXMuX3BvaW50ID0gMjsgLy8gcHJvY2VlZFxuICAgICAgZGVmYXVsdDogdGhpcy5fY29udGV4dC5saW5lVG8oeCwgeSk7IGJyZWFrO1xuICAgIH1cbiAgfVxufTtcblxuZnVuY3Rpb24gY3VydmVMaW5lYXIoY29udGV4dCkge1xuICByZXR1cm4gbmV3IExpbmVhcihjb250ZXh0KTtcbn1cblxuZnVuY3Rpb24geChwKSB7XG4gIHJldHVybiBwWzBdO1xufVxuXG5mdW5jdGlvbiB5KHApIHtcbiAgcmV0dXJuIHBbMV07XG59XG5cbmZ1bmN0aW9uIGxpbmUoKSB7XG4gIHZhciB4JDEgPSB4LFxuICAgICAgeSQxID0geSxcbiAgICAgIGRlZmluZWQgPSBjb25zdGFudCh0cnVlKSxcbiAgICAgIGNvbnRleHQgPSBudWxsLFxuICAgICAgY3VydmUgPSBjdXJ2ZUxpbmVhcixcbiAgICAgIG91dHB1dCA9IG51bGw7XG5cbiAgZnVuY3Rpb24gbGluZShkYXRhKSB7XG4gICAgdmFyIGksXG4gICAgICAgIG4gPSBkYXRhLmxlbmd0aCxcbiAgICAgICAgZCxcbiAgICAgICAgZGVmaW5lZDAgPSBmYWxzZSxcbiAgICAgICAgYnVmZmVyO1xuXG4gICAgaWYgKGNvbnRleHQgPT0gbnVsbCkgb3V0cHV0ID0gY3VydmUoYnVmZmVyID0gZDNQYXRoLnBhdGgoKSk7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDw9IG47ICsraSkge1xuICAgICAgaWYgKCEoaSA8IG4gJiYgZGVmaW5lZChkID0gZGF0YVtpXSwgaSwgZGF0YSkpID09PSBkZWZpbmVkMCkge1xuICAgICAgICBpZiAoZGVmaW5lZDAgPSAhZGVmaW5lZDApIG91dHB1dC5saW5lU3RhcnQoKTtcbiAgICAgICAgZWxzZSBvdXRwdXQubGluZUVuZCgpO1xuICAgICAgfVxuICAgICAgaWYgKGRlZmluZWQwKSBvdXRwdXQucG9pbnQoK3gkMShkLCBpLCBkYXRhKSwgK3kkMShkLCBpLCBkYXRhKSk7XG4gICAgfVxuXG4gICAgaWYgKGJ1ZmZlcikgcmV0dXJuIG91dHB1dCA9IG51bGwsIGJ1ZmZlciArIFwiXCIgfHwgbnVsbDtcbiAgfVxuXG4gIGxpbmUueCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh4JDEgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCtfKSwgbGluZSkgOiB4JDE7XG4gIH07XG5cbiAgbGluZS55ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHkkMSA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCBsaW5lKSA6IHkkMTtcbiAgfTtcblxuICBsaW5lLmRlZmluZWQgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZGVmaW5lZCA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoISFfKSwgbGluZSkgOiBkZWZpbmVkO1xuICB9O1xuXG4gIGxpbmUuY3VydmUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoY3VydmUgPSBfLCBjb250ZXh0ICE9IG51bGwgJiYgKG91dHB1dCA9IGN1cnZlKGNvbnRleHQpKSwgbGluZSkgOiBjdXJ2ZTtcbiAgfTtcblxuICBsaW5lLmNvbnRleHQgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoXyA9PSBudWxsID8gY29udGV4dCA9IG91dHB1dCA9IG51bGwgOiBvdXRwdXQgPSBjdXJ2ZShjb250ZXh0ID0gXyksIGxpbmUpIDogY29udGV4dDtcbiAgfTtcblxuICByZXR1cm4gbGluZTtcbn1cblxuZnVuY3Rpb24gYXJlYSgpIHtcbiAgdmFyIHgwID0geCxcbiAgICAgIHgxID0gbnVsbCxcbiAgICAgIHkwID0gY29uc3RhbnQoMCksXG4gICAgICB5MSA9IHksXG4gICAgICBkZWZpbmVkID0gY29uc3RhbnQodHJ1ZSksXG4gICAgICBjb250ZXh0ID0gbnVsbCxcbiAgICAgIGN1cnZlID0gY3VydmVMaW5lYXIsXG4gICAgICBvdXRwdXQgPSBudWxsO1xuXG4gIGZ1bmN0aW9uIGFyZWEoZGF0YSkge1xuICAgIHZhciBpLFxuICAgICAgICBqLFxuICAgICAgICBrLFxuICAgICAgICBuID0gZGF0YS5sZW5ndGgsXG4gICAgICAgIGQsXG4gICAgICAgIGRlZmluZWQwID0gZmFsc2UsXG4gICAgICAgIGJ1ZmZlcixcbiAgICAgICAgeDB6ID0gbmV3IEFycmF5KG4pLFxuICAgICAgICB5MHogPSBuZXcgQXJyYXkobik7XG5cbiAgICBpZiAoY29udGV4dCA9PSBudWxsKSBvdXRwdXQgPSBjdXJ2ZShidWZmZXIgPSBkM1BhdGgucGF0aCgpKTtcblxuICAgIGZvciAoaSA9IDA7IGkgPD0gbjsgKytpKSB7XG4gICAgICBpZiAoIShpIDwgbiAmJiBkZWZpbmVkKGQgPSBkYXRhW2ldLCBpLCBkYXRhKSkgPT09IGRlZmluZWQwKSB7XG4gICAgICAgIGlmIChkZWZpbmVkMCA9ICFkZWZpbmVkMCkge1xuICAgICAgICAgIGogPSBpO1xuICAgICAgICAgIG91dHB1dC5hcmVhU3RhcnQoKTtcbiAgICAgICAgICBvdXRwdXQubGluZVN0YXJ0KCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb3V0cHV0LmxpbmVFbmQoKTtcbiAgICAgICAgICBvdXRwdXQubGluZVN0YXJ0KCk7XG4gICAgICAgICAgZm9yIChrID0gaSAtIDE7IGsgPj0gajsgLS1rKSB7XG4gICAgICAgICAgICBvdXRwdXQucG9pbnQoeDB6W2tdLCB5MHpba10pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBvdXRwdXQubGluZUVuZCgpO1xuICAgICAgICAgIG91dHB1dC5hcmVhRW5kKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChkZWZpbmVkMCkge1xuICAgICAgICB4MHpbaV0gPSAreDAoZCwgaSwgZGF0YSksIHkweltpXSA9ICt5MChkLCBpLCBkYXRhKTtcbiAgICAgICAgb3V0cHV0LnBvaW50KHgxID8gK3gxKGQsIGksIGRhdGEpIDogeDB6W2ldLCB5MSA/ICt5MShkLCBpLCBkYXRhKSA6IHkweltpXSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGJ1ZmZlcikgcmV0dXJuIG91dHB1dCA9IG51bGwsIGJ1ZmZlciArIFwiXCIgfHwgbnVsbDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGFyZWFsaW5lKCkge1xuICAgIHJldHVybiBsaW5lKCkuZGVmaW5lZChkZWZpbmVkKS5jdXJ2ZShjdXJ2ZSkuY29udGV4dChjb250ZXh0KTtcbiAgfVxuXG4gIGFyZWEueCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh4MCA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCB4MSA9IG51bGwsIGFyZWEpIDogeDA7XG4gIH07XG5cbiAgYXJlYS54MCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh4MCA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCBhcmVhKSA6IHgwO1xuICB9O1xuXG4gIGFyZWEueDEgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoeDEgPSBfID09IG51bGwgPyBudWxsIDogdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCgrXyksIGFyZWEpIDogeDE7XG4gIH07XG5cbiAgYXJlYS55ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHkwID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCgrXyksIHkxID0gbnVsbCwgYXJlYSkgOiB5MDtcbiAgfTtcblxuICBhcmVhLnkwID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHkwID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCgrXyksIGFyZWEpIDogeTA7XG4gIH07XG5cbiAgYXJlYS55MSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh5MSA9IF8gPT0gbnVsbCA/IG51bGwgOiB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCtfKSwgYXJlYSkgOiB5MTtcbiAgfTtcblxuICBhcmVhLmxpbmVYMCA9XG4gIGFyZWEubGluZVkwID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGFyZWFsaW5lKCkueCh4MCkueSh5MCk7XG4gIH07XG5cbiAgYXJlYS5saW5lWTEgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gYXJlYWxpbmUoKS54KHgwKS55KHkxKTtcbiAgfTtcblxuICBhcmVhLmxpbmVYMSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBhcmVhbGluZSgpLngoeDEpLnkoeTApO1xuICB9O1xuXG4gIGFyZWEuZGVmaW5lZCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChkZWZpbmVkID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCghIV8pLCBhcmVhKSA6IGRlZmluZWQ7XG4gIH07XG5cbiAgYXJlYS5jdXJ2ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChjdXJ2ZSA9IF8sIGNvbnRleHQgIT0gbnVsbCAmJiAob3V0cHV0ID0gY3VydmUoY29udGV4dCkpLCBhcmVhKSA6IGN1cnZlO1xuICB9O1xuXG4gIGFyZWEuY29udGV4dCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChfID09IG51bGwgPyBjb250ZXh0ID0gb3V0cHV0ID0gbnVsbCA6IG91dHB1dCA9IGN1cnZlKGNvbnRleHQgPSBfKSwgYXJlYSkgOiBjb250ZXh0O1xuICB9O1xuXG4gIHJldHVybiBhcmVhO1xufVxuXG5mdW5jdGlvbiBkZXNjZW5kaW5nKGEsIGIpIHtcbiAgcmV0dXJuIGIgPCBhID8gLTEgOiBiID4gYSA/IDEgOiBiID49IGEgPyAwIDogTmFOO1xufVxuXG5mdW5jdGlvbiBpZGVudGl0eShkKSB7XG4gIHJldHVybiBkO1xufVxuXG5mdW5jdGlvbiBwaWUoKSB7XG4gIHZhciB2YWx1ZSA9IGlkZW50aXR5LFxuICAgICAgc29ydFZhbHVlcyA9IGRlc2NlbmRpbmcsXG4gICAgICBzb3J0ID0gbnVsbCxcbiAgICAgIHN0YXJ0QW5nbGUgPSBjb25zdGFudCgwKSxcbiAgICAgIGVuZEFuZ2xlID0gY29uc3RhbnQodGF1KSxcbiAgICAgIHBhZEFuZ2xlID0gY29uc3RhbnQoMCk7XG5cbiAgZnVuY3Rpb24gcGllKGRhdGEpIHtcbiAgICB2YXIgaSxcbiAgICAgICAgbiA9IGRhdGEubGVuZ3RoLFxuICAgICAgICBqLFxuICAgICAgICBrLFxuICAgICAgICBzdW0gPSAwLFxuICAgICAgICBpbmRleCA9IG5ldyBBcnJheShuKSxcbiAgICAgICAgYXJjcyA9IG5ldyBBcnJheShuKSxcbiAgICAgICAgYTAgPSArc3RhcnRBbmdsZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpLFxuICAgICAgICBkYSA9IE1hdGgubWluKHRhdSwgTWF0aC5tYXgoLXRhdSwgZW5kQW5nbGUuYXBwbHkodGhpcywgYXJndW1lbnRzKSAtIGEwKSksXG4gICAgICAgIGExLFxuICAgICAgICBwID0gTWF0aC5taW4oTWF0aC5hYnMoZGEpIC8gbiwgcGFkQW5nbGUuYXBwbHkodGhpcywgYXJndW1lbnRzKSksXG4gICAgICAgIHBhID0gcCAqIChkYSA8IDAgPyAtMSA6IDEpLFxuICAgICAgICB2O1xuXG4gICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKCh2ID0gYXJjc1tpbmRleFtpXSA9IGldID0gK3ZhbHVlKGRhdGFbaV0sIGksIGRhdGEpKSA+IDApIHtcbiAgICAgICAgc3VtICs9IHY7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gT3B0aW9uYWxseSBzb3J0IHRoZSBhcmNzIGJ5IHByZXZpb3VzbHktY29tcHV0ZWQgdmFsdWVzIG9yIGJ5IGRhdGEuXG4gICAgaWYgKHNvcnRWYWx1ZXMgIT0gbnVsbCkgaW5kZXguc29ydChmdW5jdGlvbihpLCBqKSB7IHJldHVybiBzb3J0VmFsdWVzKGFyY3NbaV0sIGFyY3Nbal0pOyB9KTtcbiAgICBlbHNlIGlmIChzb3J0ICE9IG51bGwpIGluZGV4LnNvcnQoZnVuY3Rpb24oaSwgaikgeyByZXR1cm4gc29ydChkYXRhW2ldLCBkYXRhW2pdKTsgfSk7XG5cbiAgICAvLyBDb21wdXRlIHRoZSBhcmNzISBUaGV5IGFyZSBzdG9yZWQgaW4gdGhlIG9yaWdpbmFsIGRhdGEncyBvcmRlci5cbiAgICBmb3IgKGkgPSAwLCBrID0gc3VtID8gKGRhIC0gbiAqIHBhKSAvIHN1bSA6IDA7IGkgPCBuOyArK2ksIGEwID0gYTEpIHtcbiAgICAgIGogPSBpbmRleFtpXSwgdiA9IGFyY3Nbal0sIGExID0gYTAgKyAodiA+IDAgPyB2ICogayA6IDApICsgcGEsIGFyY3Nbal0gPSB7XG4gICAgICAgIGRhdGE6IGRhdGFbal0sXG4gICAgICAgIGluZGV4OiBpLFxuICAgICAgICB2YWx1ZTogdixcbiAgICAgICAgc3RhcnRBbmdsZTogYTAsXG4gICAgICAgIGVuZEFuZ2xlOiBhMSxcbiAgICAgICAgcGFkQW5nbGU6IHBcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIGFyY3M7XG4gIH1cblxuICBwaWUudmFsdWUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodmFsdWUgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCtfKSwgcGllKSA6IHZhbHVlO1xuICB9O1xuXG4gIHBpZS5zb3J0VmFsdWVzID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHNvcnRWYWx1ZXMgPSBfLCBzb3J0ID0gbnVsbCwgcGllKSA6IHNvcnRWYWx1ZXM7XG4gIH07XG5cbiAgcGllLnNvcnQgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoc29ydCA9IF8sIHNvcnRWYWx1ZXMgPSBudWxsLCBwaWUpIDogc29ydDtcbiAgfTtcblxuICBwaWUuc3RhcnRBbmdsZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChzdGFydEFuZ2xlID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCgrXyksIHBpZSkgOiBzdGFydEFuZ2xlO1xuICB9O1xuXG4gIHBpZS5lbmRBbmdsZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChlbmRBbmdsZSA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCBwaWUpIDogZW5kQW5nbGU7XG4gIH07XG5cbiAgcGllLnBhZEFuZ2xlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHBhZEFuZ2xlID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCgrXyksIHBpZSkgOiBwYWRBbmdsZTtcbiAgfTtcblxuICByZXR1cm4gcGllO1xufVxuXG52YXIgY3VydmVSYWRpYWxMaW5lYXIgPSBjdXJ2ZVJhZGlhbChjdXJ2ZUxpbmVhcik7XG5cbmZ1bmN0aW9uIFJhZGlhbChjdXJ2ZSkge1xuICB0aGlzLl9jdXJ2ZSA9IGN1cnZlO1xufVxuXG5SYWRpYWwucHJvdG90eXBlID0ge1xuICBhcmVhU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2N1cnZlLmFyZWFTdGFydCgpO1xuICB9LFxuICBhcmVhRW5kOiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9jdXJ2ZS5hcmVhRW5kKCk7XG4gIH0sXG4gIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fY3VydmUubGluZVN0YXJ0KCk7XG4gIH0sXG4gIGxpbmVFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2N1cnZlLmxpbmVFbmQoKTtcbiAgfSxcbiAgcG9pbnQ6IGZ1bmN0aW9uKGEsIHIpIHtcbiAgICB0aGlzLl9jdXJ2ZS5wb2ludChyICogTWF0aC5zaW4oYSksIHIgKiAtTWF0aC5jb3MoYSkpO1xuICB9XG59O1xuXG5mdW5jdGlvbiBjdXJ2ZVJhZGlhbChjdXJ2ZSkge1xuXG4gIGZ1bmN0aW9uIHJhZGlhbChjb250ZXh0KSB7XG4gICAgcmV0dXJuIG5ldyBSYWRpYWwoY3VydmUoY29udGV4dCkpO1xuICB9XG5cbiAgcmFkaWFsLl9jdXJ2ZSA9IGN1cnZlO1xuXG4gIHJldHVybiByYWRpYWw7XG59XG5cbmZ1bmN0aW9uIGxpbmVSYWRpYWwobCkge1xuICB2YXIgYyA9IGwuY3VydmU7XG5cbiAgbC5hbmdsZSA9IGwueCwgZGVsZXRlIGwueDtcbiAgbC5yYWRpdXMgPSBsLnksIGRlbGV0ZSBsLnk7XG5cbiAgbC5jdXJ2ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IGMoY3VydmVSYWRpYWwoXykpIDogYygpLl9jdXJ2ZTtcbiAgfTtcblxuICByZXR1cm4gbDtcbn1cblxuZnVuY3Rpb24gbGluZVJhZGlhbCQxKCkge1xuICByZXR1cm4gbGluZVJhZGlhbChsaW5lKCkuY3VydmUoY3VydmVSYWRpYWxMaW5lYXIpKTtcbn1cblxuZnVuY3Rpb24gYXJlYVJhZGlhbCgpIHtcbiAgdmFyIGEgPSBhcmVhKCkuY3VydmUoY3VydmVSYWRpYWxMaW5lYXIpLFxuICAgICAgYyA9IGEuY3VydmUsXG4gICAgICB4MCA9IGEubGluZVgwLFxuICAgICAgeDEgPSBhLmxpbmVYMSxcbiAgICAgIHkwID0gYS5saW5lWTAsXG4gICAgICB5MSA9IGEubGluZVkxO1xuXG4gIGEuYW5nbGUgPSBhLngsIGRlbGV0ZSBhLng7XG4gIGEuc3RhcnRBbmdsZSA9IGEueDAsIGRlbGV0ZSBhLngwO1xuICBhLmVuZEFuZ2xlID0gYS54MSwgZGVsZXRlIGEueDE7XG4gIGEucmFkaXVzID0gYS55LCBkZWxldGUgYS55O1xuICBhLmlubmVyUmFkaXVzID0gYS55MCwgZGVsZXRlIGEueTA7XG4gIGEub3V0ZXJSYWRpdXMgPSBhLnkxLCBkZWxldGUgYS55MTtcbiAgYS5saW5lU3RhcnRBbmdsZSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gbGluZVJhZGlhbCh4MCgpKTsgfSwgZGVsZXRlIGEubGluZVgwO1xuICBhLmxpbmVFbmRBbmdsZSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gbGluZVJhZGlhbCh4MSgpKTsgfSwgZGVsZXRlIGEubGluZVgxO1xuICBhLmxpbmVJbm5lclJhZGl1cyA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gbGluZVJhZGlhbCh5MCgpKTsgfSwgZGVsZXRlIGEubGluZVkwO1xuICBhLmxpbmVPdXRlclJhZGl1cyA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gbGluZVJhZGlhbCh5MSgpKTsgfSwgZGVsZXRlIGEubGluZVkxO1xuXG4gIGEuY3VydmUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyBjKGN1cnZlUmFkaWFsKF8pKSA6IGMoKS5fY3VydmU7XG4gIH07XG5cbiAgcmV0dXJuIGE7XG59XG5cbmZ1bmN0aW9uIHBvaW50UmFkaWFsKHgsIHkpIHtcbiAgcmV0dXJuIFsoeSA9ICt5KSAqIE1hdGguY29zKHggLT0gTWF0aC5QSSAvIDIpLCB5ICogTWF0aC5zaW4oeCldO1xufVxuXG52YXIgc2xpY2UgPSBBcnJheS5wcm90b3R5cGUuc2xpY2U7XG5cbmZ1bmN0aW9uIGxpbmtTb3VyY2UoZCkge1xuICByZXR1cm4gZC5zb3VyY2U7XG59XG5cbmZ1bmN0aW9uIGxpbmtUYXJnZXQoZCkge1xuICByZXR1cm4gZC50YXJnZXQ7XG59XG5cbmZ1bmN0aW9uIGxpbmsoY3VydmUpIHtcbiAgdmFyIHNvdXJjZSA9IGxpbmtTb3VyY2UsXG4gICAgICB0YXJnZXQgPSBsaW5rVGFyZ2V0LFxuICAgICAgeCQxID0geCxcbiAgICAgIHkkMSA9IHksXG4gICAgICBjb250ZXh0ID0gbnVsbDtcblxuICBmdW5jdGlvbiBsaW5rKCkge1xuICAgIHZhciBidWZmZXIsIGFyZ3YgPSBzbGljZS5jYWxsKGFyZ3VtZW50cyksIHMgPSBzb3VyY2UuYXBwbHkodGhpcywgYXJndiksIHQgPSB0YXJnZXQuYXBwbHkodGhpcywgYXJndik7XG4gICAgaWYgKCFjb250ZXh0KSBjb250ZXh0ID0gYnVmZmVyID0gZDNQYXRoLnBhdGgoKTtcbiAgICBjdXJ2ZShjb250ZXh0LCAreCQxLmFwcGx5KHRoaXMsIChhcmd2WzBdID0gcywgYXJndikpLCAreSQxLmFwcGx5KHRoaXMsIGFyZ3YpLCAreCQxLmFwcGx5KHRoaXMsIChhcmd2WzBdID0gdCwgYXJndikpLCAreSQxLmFwcGx5KHRoaXMsIGFyZ3YpKTtcbiAgICBpZiAoYnVmZmVyKSByZXR1cm4gY29udGV4dCA9IG51bGwsIGJ1ZmZlciArIFwiXCIgfHwgbnVsbDtcbiAgfVxuXG4gIGxpbmsuc291cmNlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHNvdXJjZSA9IF8sIGxpbmspIDogc291cmNlO1xuICB9O1xuXG4gIGxpbmsudGFyZ2V0ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRhcmdldCA9IF8sIGxpbmspIDogdGFyZ2V0O1xuICB9O1xuXG4gIGxpbmsueCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh4JDEgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCtfKSwgbGluaykgOiB4JDE7XG4gIH07XG5cbiAgbGluay55ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHkkMSA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCBsaW5rKSA6IHkkMTtcbiAgfTtcblxuICBsaW5rLmNvbnRleHQgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoKGNvbnRleHQgPSBfID09IG51bGwgPyBudWxsIDogXyksIGxpbmspIDogY29udGV4dDtcbiAgfTtcblxuICByZXR1cm4gbGluaztcbn1cblxuZnVuY3Rpb24gY3VydmVIb3Jpem9udGFsKGNvbnRleHQsIHgwLCB5MCwgeDEsIHkxKSB7XG4gIGNvbnRleHQubW92ZVRvKHgwLCB5MCk7XG4gIGNvbnRleHQuYmV6aWVyQ3VydmVUbyh4MCA9ICh4MCArIHgxKSAvIDIsIHkwLCB4MCwgeTEsIHgxLCB5MSk7XG59XG5cbmZ1bmN0aW9uIGN1cnZlVmVydGljYWwoY29udGV4dCwgeDAsIHkwLCB4MSwgeTEpIHtcbiAgY29udGV4dC5tb3ZlVG8oeDAsIHkwKTtcbiAgY29udGV4dC5iZXppZXJDdXJ2ZVRvKHgwLCB5MCA9ICh5MCArIHkxKSAvIDIsIHgxLCB5MCwgeDEsIHkxKTtcbn1cblxuZnVuY3Rpb24gY3VydmVSYWRpYWwkMShjb250ZXh0LCB4MCwgeTAsIHgxLCB5MSkge1xuICB2YXIgcDAgPSBwb2ludFJhZGlhbCh4MCwgeTApLFxuICAgICAgcDEgPSBwb2ludFJhZGlhbCh4MCwgeTAgPSAoeTAgKyB5MSkgLyAyKSxcbiAgICAgIHAyID0gcG9pbnRSYWRpYWwoeDEsIHkwKSxcbiAgICAgIHAzID0gcG9pbnRSYWRpYWwoeDEsIHkxKTtcbiAgY29udGV4dC5tb3ZlVG8ocDBbMF0sIHAwWzFdKTtcbiAgY29udGV4dC5iZXppZXJDdXJ2ZVRvKHAxWzBdLCBwMVsxXSwgcDJbMF0sIHAyWzFdLCBwM1swXSwgcDNbMV0pO1xufVxuXG5mdW5jdGlvbiBsaW5rSG9yaXpvbnRhbCgpIHtcbiAgcmV0dXJuIGxpbmsoY3VydmVIb3Jpem9udGFsKTtcbn1cblxuZnVuY3Rpb24gbGlua1ZlcnRpY2FsKCkge1xuICByZXR1cm4gbGluayhjdXJ2ZVZlcnRpY2FsKTtcbn1cblxuZnVuY3Rpb24gbGlua1JhZGlhbCgpIHtcbiAgdmFyIGwgPSBsaW5rKGN1cnZlUmFkaWFsJDEpO1xuICBsLmFuZ2xlID0gbC54LCBkZWxldGUgbC54O1xuICBsLnJhZGl1cyA9IGwueSwgZGVsZXRlIGwueTtcbiAgcmV0dXJuIGw7XG59XG5cbnZhciBjaXJjbGUgPSB7XG4gIGRyYXc6IGZ1bmN0aW9uKGNvbnRleHQsIHNpemUpIHtcbiAgICB2YXIgciA9IE1hdGguc3FydChzaXplIC8gcGkpO1xuICAgIGNvbnRleHQubW92ZVRvKHIsIDApO1xuICAgIGNvbnRleHQuYXJjKDAsIDAsIHIsIDAsIHRhdSk7XG4gIH1cbn07XG5cbnZhciBjcm9zcyA9IHtcbiAgZHJhdzogZnVuY3Rpb24oY29udGV4dCwgc2l6ZSkge1xuICAgIHZhciByID0gTWF0aC5zcXJ0KHNpemUgLyA1KSAvIDI7XG4gICAgY29udGV4dC5tb3ZlVG8oLTMgKiByLCAtcik7XG4gICAgY29udGV4dC5saW5lVG8oLXIsIC1yKTtcbiAgICBjb250ZXh0LmxpbmVUbygtciwgLTMgKiByKTtcbiAgICBjb250ZXh0LmxpbmVUbyhyLCAtMyAqIHIpO1xuICAgIGNvbnRleHQubGluZVRvKHIsIC1yKTtcbiAgICBjb250ZXh0LmxpbmVUbygzICogciwgLXIpO1xuICAgIGNvbnRleHQubGluZVRvKDMgKiByLCByKTtcbiAgICBjb250ZXh0LmxpbmVUbyhyLCByKTtcbiAgICBjb250ZXh0LmxpbmVUbyhyLCAzICogcik7XG4gICAgY29udGV4dC5saW5lVG8oLXIsIDMgKiByKTtcbiAgICBjb250ZXh0LmxpbmVUbygtciwgcik7XG4gICAgY29udGV4dC5saW5lVG8oLTMgKiByLCByKTtcbiAgICBjb250ZXh0LmNsb3NlUGF0aCgpO1xuICB9XG59O1xuXG52YXIgdGFuMzAgPSBNYXRoLnNxcnQoMSAvIDMpLFxuICAgIHRhbjMwXzIgPSB0YW4zMCAqIDI7XG5cbnZhciBkaWFtb25kID0ge1xuICBkcmF3OiBmdW5jdGlvbihjb250ZXh0LCBzaXplKSB7XG4gICAgdmFyIHkgPSBNYXRoLnNxcnQoc2l6ZSAvIHRhbjMwXzIpLFxuICAgICAgICB4ID0geSAqIHRhbjMwO1xuICAgIGNvbnRleHQubW92ZVRvKDAsIC15KTtcbiAgICBjb250ZXh0LmxpbmVUbyh4LCAwKTtcbiAgICBjb250ZXh0LmxpbmVUbygwLCB5KTtcbiAgICBjb250ZXh0LmxpbmVUbygteCwgMCk7XG4gICAgY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgfVxufTtcblxudmFyIGthID0gMC44OTA4MTMwOTE1MjkyODUyMjgxMCxcbiAgICBrciA9IE1hdGguc2luKHBpIC8gMTApIC8gTWF0aC5zaW4oNyAqIHBpIC8gMTApLFxuICAgIGt4ID0gTWF0aC5zaW4odGF1IC8gMTApICoga3IsXG4gICAga3kgPSAtTWF0aC5jb3ModGF1IC8gMTApICoga3I7XG5cbnZhciBzdGFyID0ge1xuICBkcmF3OiBmdW5jdGlvbihjb250ZXh0LCBzaXplKSB7XG4gICAgdmFyIHIgPSBNYXRoLnNxcnQoc2l6ZSAqIGthKSxcbiAgICAgICAgeCA9IGt4ICogcixcbiAgICAgICAgeSA9IGt5ICogcjtcbiAgICBjb250ZXh0Lm1vdmVUbygwLCAtcik7XG4gICAgY29udGV4dC5saW5lVG8oeCwgeSk7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCA1OyArK2kpIHtcbiAgICAgIHZhciBhID0gdGF1ICogaSAvIDUsXG4gICAgICAgICAgYyA9IE1hdGguY29zKGEpLFxuICAgICAgICAgIHMgPSBNYXRoLnNpbihhKTtcbiAgICAgIGNvbnRleHQubGluZVRvKHMgKiByLCAtYyAqIHIpO1xuICAgICAgY29udGV4dC5saW5lVG8oYyAqIHggLSBzICogeSwgcyAqIHggKyBjICogeSk7XG4gICAgfVxuICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XG4gIH1cbn07XG5cbnZhciBzcXVhcmUgPSB7XG4gIGRyYXc6IGZ1bmN0aW9uKGNvbnRleHQsIHNpemUpIHtcbiAgICB2YXIgdyA9IE1hdGguc3FydChzaXplKSxcbiAgICAgICAgeCA9IC13IC8gMjtcbiAgICBjb250ZXh0LnJlY3QoeCwgeCwgdywgdyk7XG4gIH1cbn07XG5cbnZhciBzcXJ0MyA9IE1hdGguc3FydCgzKTtcblxudmFyIHRyaWFuZ2xlID0ge1xuICBkcmF3OiBmdW5jdGlvbihjb250ZXh0LCBzaXplKSB7XG4gICAgdmFyIHkgPSAtTWF0aC5zcXJ0KHNpemUgLyAoc3FydDMgKiAzKSk7XG4gICAgY29udGV4dC5tb3ZlVG8oMCwgeSAqIDIpO1xuICAgIGNvbnRleHQubGluZVRvKC1zcXJ0MyAqIHksIC15KTtcbiAgICBjb250ZXh0LmxpbmVUbyhzcXJ0MyAqIHksIC15KTtcbiAgICBjb250ZXh0LmNsb3NlUGF0aCgpO1xuICB9XG59O1xuXG52YXIgYyA9IC0wLjUsXG4gICAgcyA9IE1hdGguc3FydCgzKSAvIDIsXG4gICAgayA9IDEgLyBNYXRoLnNxcnQoMTIpLFxuICAgIGEgPSAoayAvIDIgKyAxKSAqIDM7XG5cbnZhciB3eWUgPSB7XG4gIGRyYXc6IGZ1bmN0aW9uKGNvbnRleHQsIHNpemUpIHtcbiAgICB2YXIgciA9IE1hdGguc3FydChzaXplIC8gYSksXG4gICAgICAgIHgwID0gciAvIDIsXG4gICAgICAgIHkwID0gciAqIGssXG4gICAgICAgIHgxID0geDAsXG4gICAgICAgIHkxID0gciAqIGsgKyByLFxuICAgICAgICB4MiA9IC14MSxcbiAgICAgICAgeTIgPSB5MTtcbiAgICBjb250ZXh0Lm1vdmVUbyh4MCwgeTApO1xuICAgIGNvbnRleHQubGluZVRvKHgxLCB5MSk7XG4gICAgY29udGV4dC5saW5lVG8oeDIsIHkyKTtcbiAgICBjb250ZXh0LmxpbmVUbyhjICogeDAgLSBzICogeTAsIHMgKiB4MCArIGMgKiB5MCk7XG4gICAgY29udGV4dC5saW5lVG8oYyAqIHgxIC0gcyAqIHkxLCBzICogeDEgKyBjICogeTEpO1xuICAgIGNvbnRleHQubGluZVRvKGMgKiB4MiAtIHMgKiB5MiwgcyAqIHgyICsgYyAqIHkyKTtcbiAgICBjb250ZXh0LmxpbmVUbyhjICogeDAgKyBzICogeTAsIGMgKiB5MCAtIHMgKiB4MCk7XG4gICAgY29udGV4dC5saW5lVG8oYyAqIHgxICsgcyAqIHkxLCBjICogeTEgLSBzICogeDEpO1xuICAgIGNvbnRleHQubGluZVRvKGMgKiB4MiArIHMgKiB5MiwgYyAqIHkyIC0gcyAqIHgyKTtcbiAgICBjb250ZXh0LmNsb3NlUGF0aCgpO1xuICB9XG59O1xuXG52YXIgc3ltYm9scyA9IFtcbiAgY2lyY2xlLFxuICBjcm9zcyxcbiAgZGlhbW9uZCxcbiAgc3F1YXJlLFxuICBzdGFyLFxuICB0cmlhbmdsZSxcbiAgd3llXG5dO1xuXG5mdW5jdGlvbiBzeW1ib2woKSB7XG4gIHZhciB0eXBlID0gY29uc3RhbnQoY2lyY2xlKSxcbiAgICAgIHNpemUgPSBjb25zdGFudCg2NCksXG4gICAgICBjb250ZXh0ID0gbnVsbDtcblxuICBmdW5jdGlvbiBzeW1ib2woKSB7XG4gICAgdmFyIGJ1ZmZlcjtcbiAgICBpZiAoIWNvbnRleHQpIGNvbnRleHQgPSBidWZmZXIgPSBkM1BhdGgucGF0aCgpO1xuICAgIHR5cGUuYXBwbHkodGhpcywgYXJndW1lbnRzKS5kcmF3KGNvbnRleHQsICtzaXplLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICAgIGlmIChidWZmZXIpIHJldHVybiBjb250ZXh0ID0gbnVsbCwgYnVmZmVyICsgXCJcIiB8fCBudWxsO1xuICB9XG5cbiAgc3ltYm9sLnR5cGUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodHlwZSA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoXyksIHN5bWJvbCkgOiB0eXBlO1xuICB9O1xuXG4gIHN5bWJvbC5zaXplID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHNpemUgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCtfKSwgc3ltYm9sKSA6IHNpemU7XG4gIH07XG5cbiAgc3ltYm9sLmNvbnRleHQgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoY29udGV4dCA9IF8gPT0gbnVsbCA/IG51bGwgOiBfLCBzeW1ib2wpIDogY29udGV4dDtcbiAgfTtcblxuICByZXR1cm4gc3ltYm9sO1xufVxuXG5mdW5jdGlvbiBub29wKCkge31cblxuZnVuY3Rpb24gcG9pbnQodGhhdCwgeCwgeSkge1xuICB0aGF0Ll9jb250ZXh0LmJlemllckN1cnZlVG8oXG4gICAgKDIgKiB0aGF0Ll94MCArIHRoYXQuX3gxKSAvIDMsXG4gICAgKDIgKiB0aGF0Ll95MCArIHRoYXQuX3kxKSAvIDMsXG4gICAgKHRoYXQuX3gwICsgMiAqIHRoYXQuX3gxKSAvIDMsXG4gICAgKHRoYXQuX3kwICsgMiAqIHRoYXQuX3kxKSAvIDMsXG4gICAgKHRoYXQuX3gwICsgNCAqIHRoYXQuX3gxICsgeCkgLyA2LFxuICAgICh0aGF0Ll95MCArIDQgKiB0aGF0Ll95MSArIHkpIC8gNlxuICApO1xufVxuXG5mdW5jdGlvbiBCYXNpcyhjb250ZXh0KSB7XG4gIHRoaXMuX2NvbnRleHQgPSBjb250ZXh0O1xufVxuXG5CYXNpcy5wcm90b3R5cGUgPSB7XG4gIGFyZWFTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fbGluZSA9IDA7XG4gIH0sXG4gIGFyZWFFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2xpbmUgPSBOYU47XG4gIH0sXG4gIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5feDAgPSB0aGlzLl94MSA9XG4gICAgdGhpcy5feTAgPSB0aGlzLl95MSA9IE5hTjtcbiAgICB0aGlzLl9wb2ludCA9IDA7XG4gIH0sXG4gIGxpbmVFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIHN3aXRjaCAodGhpcy5fcG9pbnQpIHtcbiAgICAgIGNhc2UgMzogcG9pbnQodGhpcywgdGhpcy5feDEsIHRoaXMuX3kxKTsgLy8gcHJvY2VlZFxuICAgICAgY2FzZSAyOiB0aGlzLl9jb250ZXh0LmxpbmVUbyh0aGlzLl94MSwgdGhpcy5feTEpOyBicmVhaztcbiAgICB9XG4gICAgaWYgKHRoaXMuX2xpbmUgfHwgKHRoaXMuX2xpbmUgIT09IDAgJiYgdGhpcy5fcG9pbnQgPT09IDEpKSB0aGlzLl9jb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgIHRoaXMuX2xpbmUgPSAxIC0gdGhpcy5fbGluZTtcbiAgfSxcbiAgcG9pbnQ6IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICB4ID0gK3gsIHkgPSAreTtcbiAgICBzd2l0Y2ggKHRoaXMuX3BvaW50KSB7XG4gICAgICBjYXNlIDA6IHRoaXMuX3BvaW50ID0gMTsgdGhpcy5fbGluZSA/IHRoaXMuX2NvbnRleHQubGluZVRvKHgsIHkpIDogdGhpcy5fY29udGV4dC5tb3ZlVG8oeCwgeSk7IGJyZWFrO1xuICAgICAgY2FzZSAxOiB0aGlzLl9wb2ludCA9IDI7IGJyZWFrO1xuICAgICAgY2FzZSAyOiB0aGlzLl9wb2ludCA9IDM7IHRoaXMuX2NvbnRleHQubGluZVRvKCg1ICogdGhpcy5feDAgKyB0aGlzLl94MSkgLyA2LCAoNSAqIHRoaXMuX3kwICsgdGhpcy5feTEpIC8gNik7IC8vIHByb2NlZWRcbiAgICAgIGRlZmF1bHQ6IHBvaW50KHRoaXMsIHgsIHkpOyBicmVhaztcbiAgICB9XG4gICAgdGhpcy5feDAgPSB0aGlzLl94MSwgdGhpcy5feDEgPSB4O1xuICAgIHRoaXMuX3kwID0gdGhpcy5feTEsIHRoaXMuX3kxID0geTtcbiAgfVxufTtcblxuZnVuY3Rpb24gYmFzaXMoY29udGV4dCkge1xuICByZXR1cm4gbmV3IEJhc2lzKGNvbnRleHQpO1xufVxuXG5mdW5jdGlvbiBCYXNpc0Nsb3NlZChjb250ZXh0KSB7XG4gIHRoaXMuX2NvbnRleHQgPSBjb250ZXh0O1xufVxuXG5CYXNpc0Nsb3NlZC5wcm90b3R5cGUgPSB7XG4gIGFyZWFTdGFydDogbm9vcCxcbiAgYXJlYUVuZDogbm9vcCxcbiAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl94MCA9IHRoaXMuX3gxID0gdGhpcy5feDIgPSB0aGlzLl94MyA9IHRoaXMuX3g0ID1cbiAgICB0aGlzLl95MCA9IHRoaXMuX3kxID0gdGhpcy5feTIgPSB0aGlzLl95MyA9IHRoaXMuX3k0ID0gTmFOO1xuICAgIHRoaXMuX3BvaW50ID0gMDtcbiAgfSxcbiAgbGluZUVuZDogZnVuY3Rpb24oKSB7XG4gICAgc3dpdGNoICh0aGlzLl9wb2ludCkge1xuICAgICAgY2FzZSAxOiB7XG4gICAgICAgIHRoaXMuX2NvbnRleHQubW92ZVRvKHRoaXMuX3gyLCB0aGlzLl95Mik7XG4gICAgICAgIHRoaXMuX2NvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY2FzZSAyOiB7XG4gICAgICAgIHRoaXMuX2NvbnRleHQubW92ZVRvKCh0aGlzLl94MiArIDIgKiB0aGlzLl94MykgLyAzLCAodGhpcy5feTIgKyAyICogdGhpcy5feTMpIC8gMyk7XG4gICAgICAgIHRoaXMuX2NvbnRleHQubGluZVRvKCh0aGlzLl94MyArIDIgKiB0aGlzLl94MikgLyAzLCAodGhpcy5feTMgKyAyICogdGhpcy5feTIpIC8gMyk7XG4gICAgICAgIHRoaXMuX2NvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY2FzZSAzOiB7XG4gICAgICAgIHRoaXMucG9pbnQodGhpcy5feDIsIHRoaXMuX3kyKTtcbiAgICAgICAgdGhpcy5wb2ludCh0aGlzLl94MywgdGhpcy5feTMpO1xuICAgICAgICB0aGlzLnBvaW50KHRoaXMuX3g0LCB0aGlzLl95NCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgcG9pbnQ6IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICB4ID0gK3gsIHkgPSAreTtcbiAgICBzd2l0Y2ggKHRoaXMuX3BvaW50KSB7XG4gICAgICBjYXNlIDA6IHRoaXMuX3BvaW50ID0gMTsgdGhpcy5feDIgPSB4LCB0aGlzLl95MiA9IHk7IGJyZWFrO1xuICAgICAgY2FzZSAxOiB0aGlzLl9wb2ludCA9IDI7IHRoaXMuX3gzID0geCwgdGhpcy5feTMgPSB5OyBicmVhaztcbiAgICAgIGNhc2UgMjogdGhpcy5fcG9pbnQgPSAzOyB0aGlzLl94NCA9IHgsIHRoaXMuX3k0ID0geTsgdGhpcy5fY29udGV4dC5tb3ZlVG8oKHRoaXMuX3gwICsgNCAqIHRoaXMuX3gxICsgeCkgLyA2LCAodGhpcy5feTAgKyA0ICogdGhpcy5feTEgKyB5KSAvIDYpOyBicmVhaztcbiAgICAgIGRlZmF1bHQ6IHBvaW50KHRoaXMsIHgsIHkpOyBicmVhaztcbiAgICB9XG4gICAgdGhpcy5feDAgPSB0aGlzLl94MSwgdGhpcy5feDEgPSB4O1xuICAgIHRoaXMuX3kwID0gdGhpcy5feTEsIHRoaXMuX3kxID0geTtcbiAgfVxufTtcblxuZnVuY3Rpb24gYmFzaXNDbG9zZWQoY29udGV4dCkge1xuICByZXR1cm4gbmV3IEJhc2lzQ2xvc2VkKGNvbnRleHQpO1xufVxuXG5mdW5jdGlvbiBCYXNpc09wZW4oY29udGV4dCkge1xuICB0aGlzLl9jb250ZXh0ID0gY29udGV4dDtcbn1cblxuQmFzaXNPcGVuLnByb3RvdHlwZSA9IHtcbiAgYXJlYVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9saW5lID0gMDtcbiAgfSxcbiAgYXJlYUVuZDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fbGluZSA9IE5hTjtcbiAgfSxcbiAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl94MCA9IHRoaXMuX3gxID1cbiAgICB0aGlzLl95MCA9IHRoaXMuX3kxID0gTmFOO1xuICAgIHRoaXMuX3BvaW50ID0gMDtcbiAgfSxcbiAgbGluZUVuZDogZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMuX2xpbmUgfHwgKHRoaXMuX2xpbmUgIT09IDAgJiYgdGhpcy5fcG9pbnQgPT09IDMpKSB0aGlzLl9jb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgIHRoaXMuX2xpbmUgPSAxIC0gdGhpcy5fbGluZTtcbiAgfSxcbiAgcG9pbnQ6IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICB4ID0gK3gsIHkgPSAreTtcbiAgICBzd2l0Y2ggKHRoaXMuX3BvaW50KSB7XG4gICAgICBjYXNlIDA6IHRoaXMuX3BvaW50ID0gMTsgYnJlYWs7XG4gICAgICBjYXNlIDE6IHRoaXMuX3BvaW50ID0gMjsgYnJlYWs7XG4gICAgICBjYXNlIDI6IHRoaXMuX3BvaW50ID0gMzsgdmFyIHgwID0gKHRoaXMuX3gwICsgNCAqIHRoaXMuX3gxICsgeCkgLyA2LCB5MCA9ICh0aGlzLl95MCArIDQgKiB0aGlzLl95MSArIHkpIC8gNjsgdGhpcy5fbGluZSA/IHRoaXMuX2NvbnRleHQubGluZVRvKHgwLCB5MCkgOiB0aGlzLl9jb250ZXh0Lm1vdmVUbyh4MCwgeTApOyBicmVhaztcbiAgICAgIGNhc2UgMzogdGhpcy5fcG9pbnQgPSA0OyAvLyBwcm9jZWVkXG4gICAgICBkZWZhdWx0OiBwb2ludCh0aGlzLCB4LCB5KTsgYnJlYWs7XG4gICAgfVxuICAgIHRoaXMuX3gwID0gdGhpcy5feDEsIHRoaXMuX3gxID0geDtcbiAgICB0aGlzLl95MCA9IHRoaXMuX3kxLCB0aGlzLl95MSA9IHk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGJhc2lzT3Blbihjb250ZXh0KSB7XG4gIHJldHVybiBuZXcgQmFzaXNPcGVuKGNvbnRleHQpO1xufVxuXG5mdW5jdGlvbiBCdW5kbGUoY29udGV4dCwgYmV0YSkge1xuICB0aGlzLl9iYXNpcyA9IG5ldyBCYXNpcyhjb250ZXh0KTtcbiAgdGhpcy5fYmV0YSA9IGJldGE7XG59XG5cbkJ1bmRsZS5wcm90b3R5cGUgPSB7XG4gIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5feCA9IFtdO1xuICAgIHRoaXMuX3kgPSBbXTtcbiAgICB0aGlzLl9iYXNpcy5saW5lU3RhcnQoKTtcbiAgfSxcbiAgbGluZUVuZDogZnVuY3Rpb24oKSB7XG4gICAgdmFyIHggPSB0aGlzLl94LFxuICAgICAgICB5ID0gdGhpcy5feSxcbiAgICAgICAgaiA9IHgubGVuZ3RoIC0gMTtcblxuICAgIGlmIChqID4gMCkge1xuICAgICAgdmFyIHgwID0geFswXSxcbiAgICAgICAgICB5MCA9IHlbMF0sXG4gICAgICAgICAgZHggPSB4W2pdIC0geDAsXG4gICAgICAgICAgZHkgPSB5W2pdIC0geTAsXG4gICAgICAgICAgaSA9IC0xLFxuICAgICAgICAgIHQ7XG5cbiAgICAgIHdoaWxlICgrK2kgPD0gaikge1xuICAgICAgICB0ID0gaSAvIGo7XG4gICAgICAgIHRoaXMuX2Jhc2lzLnBvaW50KFxuICAgICAgICAgIHRoaXMuX2JldGEgKiB4W2ldICsgKDEgLSB0aGlzLl9iZXRhKSAqICh4MCArIHQgKiBkeCksXG4gICAgICAgICAgdGhpcy5fYmV0YSAqIHlbaV0gKyAoMSAtIHRoaXMuX2JldGEpICogKHkwICsgdCAqIGR5KVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuX3ggPSB0aGlzLl95ID0gbnVsbDtcbiAgICB0aGlzLl9iYXNpcy5saW5lRW5kKCk7XG4gIH0sXG4gIHBvaW50OiBmdW5jdGlvbih4LCB5KSB7XG4gICAgdGhpcy5feC5wdXNoKCt4KTtcbiAgICB0aGlzLl95LnB1c2goK3kpO1xuICB9XG59O1xuXG52YXIgYnVuZGxlID0gKGZ1bmN0aW9uIGN1c3RvbShiZXRhKSB7XG5cbiAgZnVuY3Rpb24gYnVuZGxlKGNvbnRleHQpIHtcbiAgICByZXR1cm4gYmV0YSA9PT0gMSA/IG5ldyBCYXNpcyhjb250ZXh0KSA6IG5ldyBCdW5kbGUoY29udGV4dCwgYmV0YSk7XG4gIH1cblxuICBidW5kbGUuYmV0YSA9IGZ1bmN0aW9uKGJldGEpIHtcbiAgICByZXR1cm4gY3VzdG9tKCtiZXRhKTtcbiAgfTtcblxuICByZXR1cm4gYnVuZGxlO1xufSkoMC44NSk7XG5cbmZ1bmN0aW9uIHBvaW50JDEodGhhdCwgeCwgeSkge1xuICB0aGF0Ll9jb250ZXh0LmJlemllckN1cnZlVG8oXG4gICAgdGhhdC5feDEgKyB0aGF0Ll9rICogKHRoYXQuX3gyIC0gdGhhdC5feDApLFxuICAgIHRoYXQuX3kxICsgdGhhdC5fayAqICh0aGF0Ll95MiAtIHRoYXQuX3kwKSxcbiAgICB0aGF0Ll94MiArIHRoYXQuX2sgKiAodGhhdC5feDEgLSB4KSxcbiAgICB0aGF0Ll95MiArIHRoYXQuX2sgKiAodGhhdC5feTEgLSB5KSxcbiAgICB0aGF0Ll94MixcbiAgICB0aGF0Ll95MlxuICApO1xufVxuXG5mdW5jdGlvbiBDYXJkaW5hbChjb250ZXh0LCB0ZW5zaW9uKSB7XG4gIHRoaXMuX2NvbnRleHQgPSBjb250ZXh0O1xuICB0aGlzLl9rID0gKDEgLSB0ZW5zaW9uKSAvIDY7XG59XG5cbkNhcmRpbmFsLnByb3RvdHlwZSA9IHtcbiAgYXJlYVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9saW5lID0gMDtcbiAgfSxcbiAgYXJlYUVuZDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fbGluZSA9IE5hTjtcbiAgfSxcbiAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl94MCA9IHRoaXMuX3gxID0gdGhpcy5feDIgPVxuICAgIHRoaXMuX3kwID0gdGhpcy5feTEgPSB0aGlzLl95MiA9IE5hTjtcbiAgICB0aGlzLl9wb2ludCA9IDA7XG4gIH0sXG4gIGxpbmVFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIHN3aXRjaCAodGhpcy5fcG9pbnQpIHtcbiAgICAgIGNhc2UgMjogdGhpcy5fY29udGV4dC5saW5lVG8odGhpcy5feDIsIHRoaXMuX3kyKTsgYnJlYWs7XG4gICAgICBjYXNlIDM6IHBvaW50JDEodGhpcywgdGhpcy5feDEsIHRoaXMuX3kxKTsgYnJlYWs7XG4gICAgfVxuICAgIGlmICh0aGlzLl9saW5lIHx8ICh0aGlzLl9saW5lICE9PSAwICYmIHRoaXMuX3BvaW50ID09PSAxKSkgdGhpcy5fY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICB0aGlzLl9saW5lID0gMSAtIHRoaXMuX2xpbmU7XG4gIH0sXG4gIHBvaW50OiBmdW5jdGlvbih4LCB5KSB7XG4gICAgeCA9ICt4LCB5ID0gK3k7XG4gICAgc3dpdGNoICh0aGlzLl9wb2ludCkge1xuICAgICAgY2FzZSAwOiB0aGlzLl9wb2ludCA9IDE7IHRoaXMuX2xpbmUgPyB0aGlzLl9jb250ZXh0LmxpbmVUbyh4LCB5KSA6IHRoaXMuX2NvbnRleHQubW92ZVRvKHgsIHkpOyBicmVhaztcbiAgICAgIGNhc2UgMTogdGhpcy5fcG9pbnQgPSAyOyB0aGlzLl94MSA9IHgsIHRoaXMuX3kxID0geTsgYnJlYWs7XG4gICAgICBjYXNlIDI6IHRoaXMuX3BvaW50ID0gMzsgLy8gcHJvY2VlZFxuICAgICAgZGVmYXVsdDogcG9pbnQkMSh0aGlzLCB4LCB5KTsgYnJlYWs7XG4gICAgfVxuICAgIHRoaXMuX3gwID0gdGhpcy5feDEsIHRoaXMuX3gxID0gdGhpcy5feDIsIHRoaXMuX3gyID0geDtcbiAgICB0aGlzLl95MCA9IHRoaXMuX3kxLCB0aGlzLl95MSA9IHRoaXMuX3kyLCB0aGlzLl95MiA9IHk7XG4gIH1cbn07XG5cbnZhciBjYXJkaW5hbCA9IChmdW5jdGlvbiBjdXN0b20odGVuc2lvbikge1xuXG4gIGZ1bmN0aW9uIGNhcmRpbmFsKGNvbnRleHQpIHtcbiAgICByZXR1cm4gbmV3IENhcmRpbmFsKGNvbnRleHQsIHRlbnNpb24pO1xuICB9XG5cbiAgY2FyZGluYWwudGVuc2lvbiA9IGZ1bmN0aW9uKHRlbnNpb24pIHtcbiAgICByZXR1cm4gY3VzdG9tKCt0ZW5zaW9uKTtcbiAgfTtcblxuICByZXR1cm4gY2FyZGluYWw7XG59KSgwKTtcblxuZnVuY3Rpb24gQ2FyZGluYWxDbG9zZWQoY29udGV4dCwgdGVuc2lvbikge1xuICB0aGlzLl9jb250ZXh0ID0gY29udGV4dDtcbiAgdGhpcy5fayA9ICgxIC0gdGVuc2lvbikgLyA2O1xufVxuXG5DYXJkaW5hbENsb3NlZC5wcm90b3R5cGUgPSB7XG4gIGFyZWFTdGFydDogbm9vcCxcbiAgYXJlYUVuZDogbm9vcCxcbiAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl94MCA9IHRoaXMuX3gxID0gdGhpcy5feDIgPSB0aGlzLl94MyA9IHRoaXMuX3g0ID0gdGhpcy5feDUgPVxuICAgIHRoaXMuX3kwID0gdGhpcy5feTEgPSB0aGlzLl95MiA9IHRoaXMuX3kzID0gdGhpcy5feTQgPSB0aGlzLl95NSA9IE5hTjtcbiAgICB0aGlzLl9wb2ludCA9IDA7XG4gIH0sXG4gIGxpbmVFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIHN3aXRjaCAodGhpcy5fcG9pbnQpIHtcbiAgICAgIGNhc2UgMToge1xuICAgICAgICB0aGlzLl9jb250ZXh0Lm1vdmVUbyh0aGlzLl94MywgdGhpcy5feTMpO1xuICAgICAgICB0aGlzLl9jb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNhc2UgMjoge1xuICAgICAgICB0aGlzLl9jb250ZXh0LmxpbmVUbyh0aGlzLl94MywgdGhpcy5feTMpO1xuICAgICAgICB0aGlzLl9jb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNhc2UgMzoge1xuICAgICAgICB0aGlzLnBvaW50KHRoaXMuX3gzLCB0aGlzLl95Myk7XG4gICAgICAgIHRoaXMucG9pbnQodGhpcy5feDQsIHRoaXMuX3k0KTtcbiAgICAgICAgdGhpcy5wb2ludCh0aGlzLl94NSwgdGhpcy5feTUpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIHBvaW50OiBmdW5jdGlvbih4LCB5KSB7XG4gICAgeCA9ICt4LCB5ID0gK3k7XG4gICAgc3dpdGNoICh0aGlzLl9wb2ludCkge1xuICAgICAgY2FzZSAwOiB0aGlzLl9wb2ludCA9IDE7IHRoaXMuX3gzID0geCwgdGhpcy5feTMgPSB5OyBicmVhaztcbiAgICAgIGNhc2UgMTogdGhpcy5fcG9pbnQgPSAyOyB0aGlzLl9jb250ZXh0Lm1vdmVUbyh0aGlzLl94NCA9IHgsIHRoaXMuX3k0ID0geSk7IGJyZWFrO1xuICAgICAgY2FzZSAyOiB0aGlzLl9wb2ludCA9IDM7IHRoaXMuX3g1ID0geCwgdGhpcy5feTUgPSB5OyBicmVhaztcbiAgICAgIGRlZmF1bHQ6IHBvaW50JDEodGhpcywgeCwgeSk7IGJyZWFrO1xuICAgIH1cbiAgICB0aGlzLl94MCA9IHRoaXMuX3gxLCB0aGlzLl94MSA9IHRoaXMuX3gyLCB0aGlzLl94MiA9IHg7XG4gICAgdGhpcy5feTAgPSB0aGlzLl95MSwgdGhpcy5feTEgPSB0aGlzLl95MiwgdGhpcy5feTIgPSB5O1xuICB9XG59O1xuXG52YXIgY2FyZGluYWxDbG9zZWQgPSAoZnVuY3Rpb24gY3VzdG9tKHRlbnNpb24pIHtcblxuICBmdW5jdGlvbiBjYXJkaW5hbChjb250ZXh0KSB7XG4gICAgcmV0dXJuIG5ldyBDYXJkaW5hbENsb3NlZChjb250ZXh0LCB0ZW5zaW9uKTtcbiAgfVxuXG4gIGNhcmRpbmFsLnRlbnNpb24gPSBmdW5jdGlvbih0ZW5zaW9uKSB7XG4gICAgcmV0dXJuIGN1c3RvbSgrdGVuc2lvbik7XG4gIH07XG5cbiAgcmV0dXJuIGNhcmRpbmFsO1xufSkoMCk7XG5cbmZ1bmN0aW9uIENhcmRpbmFsT3Blbihjb250ZXh0LCB0ZW5zaW9uKSB7XG4gIHRoaXMuX2NvbnRleHQgPSBjb250ZXh0O1xuICB0aGlzLl9rID0gKDEgLSB0ZW5zaW9uKSAvIDY7XG59XG5cbkNhcmRpbmFsT3Blbi5wcm90b3R5cGUgPSB7XG4gIGFyZWFTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fbGluZSA9IDA7XG4gIH0sXG4gIGFyZWFFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2xpbmUgPSBOYU47XG4gIH0sXG4gIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5feDAgPSB0aGlzLl94MSA9IHRoaXMuX3gyID1cbiAgICB0aGlzLl95MCA9IHRoaXMuX3kxID0gdGhpcy5feTIgPSBOYU47XG4gICAgdGhpcy5fcG9pbnQgPSAwO1xuICB9LFxuICBsaW5lRW5kOiBmdW5jdGlvbigpIHtcbiAgICBpZiAodGhpcy5fbGluZSB8fCAodGhpcy5fbGluZSAhPT0gMCAmJiB0aGlzLl9wb2ludCA9PT0gMykpIHRoaXMuX2NvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgdGhpcy5fbGluZSA9IDEgLSB0aGlzLl9saW5lO1xuICB9LFxuICBwb2ludDogZnVuY3Rpb24oeCwgeSkge1xuICAgIHggPSAreCwgeSA9ICt5O1xuICAgIHN3aXRjaCAodGhpcy5fcG9pbnQpIHtcbiAgICAgIGNhc2UgMDogdGhpcy5fcG9pbnQgPSAxOyBicmVhaztcbiAgICAgIGNhc2UgMTogdGhpcy5fcG9pbnQgPSAyOyBicmVhaztcbiAgICAgIGNhc2UgMjogdGhpcy5fcG9pbnQgPSAzOyB0aGlzLl9saW5lID8gdGhpcy5fY29udGV4dC5saW5lVG8odGhpcy5feDIsIHRoaXMuX3kyKSA6IHRoaXMuX2NvbnRleHQubW92ZVRvKHRoaXMuX3gyLCB0aGlzLl95Mik7IGJyZWFrO1xuICAgICAgY2FzZSAzOiB0aGlzLl9wb2ludCA9IDQ7IC8vIHByb2NlZWRcbiAgICAgIGRlZmF1bHQ6IHBvaW50JDEodGhpcywgeCwgeSk7IGJyZWFrO1xuICAgIH1cbiAgICB0aGlzLl94MCA9IHRoaXMuX3gxLCB0aGlzLl94MSA9IHRoaXMuX3gyLCB0aGlzLl94MiA9IHg7XG4gICAgdGhpcy5feTAgPSB0aGlzLl95MSwgdGhpcy5feTEgPSB0aGlzLl95MiwgdGhpcy5feTIgPSB5O1xuICB9XG59O1xuXG52YXIgY2FyZGluYWxPcGVuID0gKGZ1bmN0aW9uIGN1c3RvbSh0ZW5zaW9uKSB7XG5cbiAgZnVuY3Rpb24gY2FyZGluYWwoY29udGV4dCkge1xuICAgIHJldHVybiBuZXcgQ2FyZGluYWxPcGVuKGNvbnRleHQsIHRlbnNpb24pO1xuICB9XG5cbiAgY2FyZGluYWwudGVuc2lvbiA9IGZ1bmN0aW9uKHRlbnNpb24pIHtcbiAgICByZXR1cm4gY3VzdG9tKCt0ZW5zaW9uKTtcbiAgfTtcblxuICByZXR1cm4gY2FyZGluYWw7XG59KSgwKTtcblxuZnVuY3Rpb24gcG9pbnQkMih0aGF0LCB4LCB5KSB7XG4gIHZhciB4MSA9IHRoYXQuX3gxLFxuICAgICAgeTEgPSB0aGF0Ll95MSxcbiAgICAgIHgyID0gdGhhdC5feDIsXG4gICAgICB5MiA9IHRoYXQuX3kyO1xuXG4gIGlmICh0aGF0Ll9sMDFfYSA+IGVwc2lsb24pIHtcbiAgICB2YXIgYSA9IDIgKiB0aGF0Ll9sMDFfMmEgKyAzICogdGhhdC5fbDAxX2EgKiB0aGF0Ll9sMTJfYSArIHRoYXQuX2wxMl8yYSxcbiAgICAgICAgbiA9IDMgKiB0aGF0Ll9sMDFfYSAqICh0aGF0Ll9sMDFfYSArIHRoYXQuX2wxMl9hKTtcbiAgICB4MSA9ICh4MSAqIGEgLSB0aGF0Ll94MCAqIHRoYXQuX2wxMl8yYSArIHRoYXQuX3gyICogdGhhdC5fbDAxXzJhKSAvIG47XG4gICAgeTEgPSAoeTEgKiBhIC0gdGhhdC5feTAgKiB0aGF0Ll9sMTJfMmEgKyB0aGF0Ll95MiAqIHRoYXQuX2wwMV8yYSkgLyBuO1xuICB9XG5cbiAgaWYgKHRoYXQuX2wyM19hID4gZXBzaWxvbikge1xuICAgIHZhciBiID0gMiAqIHRoYXQuX2wyM18yYSArIDMgKiB0aGF0Ll9sMjNfYSAqIHRoYXQuX2wxMl9hICsgdGhhdC5fbDEyXzJhLFxuICAgICAgICBtID0gMyAqIHRoYXQuX2wyM19hICogKHRoYXQuX2wyM19hICsgdGhhdC5fbDEyX2EpO1xuICAgIHgyID0gKHgyICogYiArIHRoYXQuX3gxICogdGhhdC5fbDIzXzJhIC0geCAqIHRoYXQuX2wxMl8yYSkgLyBtO1xuICAgIHkyID0gKHkyICogYiArIHRoYXQuX3kxICogdGhhdC5fbDIzXzJhIC0geSAqIHRoYXQuX2wxMl8yYSkgLyBtO1xuICB9XG5cbiAgdGhhdC5fY29udGV4dC5iZXppZXJDdXJ2ZVRvKHgxLCB5MSwgeDIsIHkyLCB0aGF0Ll94MiwgdGhhdC5feTIpO1xufVxuXG5mdW5jdGlvbiBDYXRtdWxsUm9tKGNvbnRleHQsIGFscGhhKSB7XG4gIHRoaXMuX2NvbnRleHQgPSBjb250ZXh0O1xuICB0aGlzLl9hbHBoYSA9IGFscGhhO1xufVxuXG5DYXRtdWxsUm9tLnByb3RvdHlwZSA9IHtcbiAgYXJlYVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9saW5lID0gMDtcbiAgfSxcbiAgYXJlYUVuZDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fbGluZSA9IE5hTjtcbiAgfSxcbiAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl94MCA9IHRoaXMuX3gxID0gdGhpcy5feDIgPVxuICAgIHRoaXMuX3kwID0gdGhpcy5feTEgPSB0aGlzLl95MiA9IE5hTjtcbiAgICB0aGlzLl9sMDFfYSA9IHRoaXMuX2wxMl9hID0gdGhpcy5fbDIzX2EgPVxuICAgIHRoaXMuX2wwMV8yYSA9IHRoaXMuX2wxMl8yYSA9IHRoaXMuX2wyM18yYSA9XG4gICAgdGhpcy5fcG9pbnQgPSAwO1xuICB9LFxuICBsaW5lRW5kOiBmdW5jdGlvbigpIHtcbiAgICBzd2l0Y2ggKHRoaXMuX3BvaW50KSB7XG4gICAgICBjYXNlIDI6IHRoaXMuX2NvbnRleHQubGluZVRvKHRoaXMuX3gyLCB0aGlzLl95Mik7IGJyZWFrO1xuICAgICAgY2FzZSAzOiB0aGlzLnBvaW50KHRoaXMuX3gyLCB0aGlzLl95Mik7IGJyZWFrO1xuICAgIH1cbiAgICBpZiAodGhpcy5fbGluZSB8fCAodGhpcy5fbGluZSAhPT0gMCAmJiB0aGlzLl9wb2ludCA9PT0gMSkpIHRoaXMuX2NvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgdGhpcy5fbGluZSA9IDEgLSB0aGlzLl9saW5lO1xuICB9LFxuICBwb2ludDogZnVuY3Rpb24oeCwgeSkge1xuICAgIHggPSAreCwgeSA9ICt5O1xuXG4gICAgaWYgKHRoaXMuX3BvaW50KSB7XG4gICAgICB2YXIgeDIzID0gdGhpcy5feDIgLSB4LFxuICAgICAgICAgIHkyMyA9IHRoaXMuX3kyIC0geTtcbiAgICAgIHRoaXMuX2wyM19hID0gTWF0aC5zcXJ0KHRoaXMuX2wyM18yYSA9IE1hdGgucG93KHgyMyAqIHgyMyArIHkyMyAqIHkyMywgdGhpcy5fYWxwaGEpKTtcbiAgICB9XG5cbiAgICBzd2l0Y2ggKHRoaXMuX3BvaW50KSB7XG4gICAgICBjYXNlIDA6IHRoaXMuX3BvaW50ID0gMTsgdGhpcy5fbGluZSA/IHRoaXMuX2NvbnRleHQubGluZVRvKHgsIHkpIDogdGhpcy5fY29udGV4dC5tb3ZlVG8oeCwgeSk7IGJyZWFrO1xuICAgICAgY2FzZSAxOiB0aGlzLl9wb2ludCA9IDI7IGJyZWFrO1xuICAgICAgY2FzZSAyOiB0aGlzLl9wb2ludCA9IDM7IC8vIHByb2NlZWRcbiAgICAgIGRlZmF1bHQ6IHBvaW50JDIodGhpcywgeCwgeSk7IGJyZWFrO1xuICAgIH1cblxuICAgIHRoaXMuX2wwMV9hID0gdGhpcy5fbDEyX2EsIHRoaXMuX2wxMl9hID0gdGhpcy5fbDIzX2E7XG4gICAgdGhpcy5fbDAxXzJhID0gdGhpcy5fbDEyXzJhLCB0aGlzLl9sMTJfMmEgPSB0aGlzLl9sMjNfMmE7XG4gICAgdGhpcy5feDAgPSB0aGlzLl94MSwgdGhpcy5feDEgPSB0aGlzLl94MiwgdGhpcy5feDIgPSB4O1xuICAgIHRoaXMuX3kwID0gdGhpcy5feTEsIHRoaXMuX3kxID0gdGhpcy5feTIsIHRoaXMuX3kyID0geTtcbiAgfVxufTtcblxudmFyIGNhdG11bGxSb20gPSAoZnVuY3Rpb24gY3VzdG9tKGFscGhhKSB7XG5cbiAgZnVuY3Rpb24gY2F0bXVsbFJvbShjb250ZXh0KSB7XG4gICAgcmV0dXJuIGFscGhhID8gbmV3IENhdG11bGxSb20oY29udGV4dCwgYWxwaGEpIDogbmV3IENhcmRpbmFsKGNvbnRleHQsIDApO1xuICB9XG5cbiAgY2F0bXVsbFJvbS5hbHBoYSA9IGZ1bmN0aW9uKGFscGhhKSB7XG4gICAgcmV0dXJuIGN1c3RvbSgrYWxwaGEpO1xuICB9O1xuXG4gIHJldHVybiBjYXRtdWxsUm9tO1xufSkoMC41KTtcblxuZnVuY3Rpb24gQ2F0bXVsbFJvbUNsb3NlZChjb250ZXh0LCBhbHBoYSkge1xuICB0aGlzLl9jb250ZXh0ID0gY29udGV4dDtcbiAgdGhpcy5fYWxwaGEgPSBhbHBoYTtcbn1cblxuQ2F0bXVsbFJvbUNsb3NlZC5wcm90b3R5cGUgPSB7XG4gIGFyZWFTdGFydDogbm9vcCxcbiAgYXJlYUVuZDogbm9vcCxcbiAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl94MCA9IHRoaXMuX3gxID0gdGhpcy5feDIgPSB0aGlzLl94MyA9IHRoaXMuX3g0ID0gdGhpcy5feDUgPVxuICAgIHRoaXMuX3kwID0gdGhpcy5feTEgPSB0aGlzLl95MiA9IHRoaXMuX3kzID0gdGhpcy5feTQgPSB0aGlzLl95NSA9IE5hTjtcbiAgICB0aGlzLl9sMDFfYSA9IHRoaXMuX2wxMl9hID0gdGhpcy5fbDIzX2EgPVxuICAgIHRoaXMuX2wwMV8yYSA9IHRoaXMuX2wxMl8yYSA9IHRoaXMuX2wyM18yYSA9XG4gICAgdGhpcy5fcG9pbnQgPSAwO1xuICB9LFxuICBsaW5lRW5kOiBmdW5jdGlvbigpIHtcbiAgICBzd2l0Y2ggKHRoaXMuX3BvaW50KSB7XG4gICAgICBjYXNlIDE6IHtcbiAgICAgICAgdGhpcy5fY29udGV4dC5tb3ZlVG8odGhpcy5feDMsIHRoaXMuX3kzKTtcbiAgICAgICAgdGhpcy5fY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBjYXNlIDI6IHtcbiAgICAgICAgdGhpcy5fY29udGV4dC5saW5lVG8odGhpcy5feDMsIHRoaXMuX3kzKTtcbiAgICAgICAgdGhpcy5fY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBjYXNlIDM6IHtcbiAgICAgICAgdGhpcy5wb2ludCh0aGlzLl94MywgdGhpcy5feTMpO1xuICAgICAgICB0aGlzLnBvaW50KHRoaXMuX3g0LCB0aGlzLl95NCk7XG4gICAgICAgIHRoaXMucG9pbnQodGhpcy5feDUsIHRoaXMuX3k1KTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9LFxuICBwb2ludDogZnVuY3Rpb24oeCwgeSkge1xuICAgIHggPSAreCwgeSA9ICt5O1xuXG4gICAgaWYgKHRoaXMuX3BvaW50KSB7XG4gICAgICB2YXIgeDIzID0gdGhpcy5feDIgLSB4LFxuICAgICAgICAgIHkyMyA9IHRoaXMuX3kyIC0geTtcbiAgICAgIHRoaXMuX2wyM19hID0gTWF0aC5zcXJ0KHRoaXMuX2wyM18yYSA9IE1hdGgucG93KHgyMyAqIHgyMyArIHkyMyAqIHkyMywgdGhpcy5fYWxwaGEpKTtcbiAgICB9XG5cbiAgICBzd2l0Y2ggKHRoaXMuX3BvaW50KSB7XG4gICAgICBjYXNlIDA6IHRoaXMuX3BvaW50ID0gMTsgdGhpcy5feDMgPSB4LCB0aGlzLl95MyA9IHk7IGJyZWFrO1xuICAgICAgY2FzZSAxOiB0aGlzLl9wb2ludCA9IDI7IHRoaXMuX2NvbnRleHQubW92ZVRvKHRoaXMuX3g0ID0geCwgdGhpcy5feTQgPSB5KTsgYnJlYWs7XG4gICAgICBjYXNlIDI6IHRoaXMuX3BvaW50ID0gMzsgdGhpcy5feDUgPSB4LCB0aGlzLl95NSA9IHk7IGJyZWFrO1xuICAgICAgZGVmYXVsdDogcG9pbnQkMih0aGlzLCB4LCB5KTsgYnJlYWs7XG4gICAgfVxuXG4gICAgdGhpcy5fbDAxX2EgPSB0aGlzLl9sMTJfYSwgdGhpcy5fbDEyX2EgPSB0aGlzLl9sMjNfYTtcbiAgICB0aGlzLl9sMDFfMmEgPSB0aGlzLl9sMTJfMmEsIHRoaXMuX2wxMl8yYSA9IHRoaXMuX2wyM18yYTtcbiAgICB0aGlzLl94MCA9IHRoaXMuX3gxLCB0aGlzLl94MSA9IHRoaXMuX3gyLCB0aGlzLl94MiA9IHg7XG4gICAgdGhpcy5feTAgPSB0aGlzLl95MSwgdGhpcy5feTEgPSB0aGlzLl95MiwgdGhpcy5feTIgPSB5O1xuICB9XG59O1xuXG52YXIgY2F0bXVsbFJvbUNsb3NlZCA9IChmdW5jdGlvbiBjdXN0b20oYWxwaGEpIHtcblxuICBmdW5jdGlvbiBjYXRtdWxsUm9tKGNvbnRleHQpIHtcbiAgICByZXR1cm4gYWxwaGEgPyBuZXcgQ2F0bXVsbFJvbUNsb3NlZChjb250ZXh0LCBhbHBoYSkgOiBuZXcgQ2FyZGluYWxDbG9zZWQoY29udGV4dCwgMCk7XG4gIH1cblxuICBjYXRtdWxsUm9tLmFscGhhID0gZnVuY3Rpb24oYWxwaGEpIHtcbiAgICByZXR1cm4gY3VzdG9tKCthbHBoYSk7XG4gIH07XG5cbiAgcmV0dXJuIGNhdG11bGxSb207XG59KSgwLjUpO1xuXG5mdW5jdGlvbiBDYXRtdWxsUm9tT3Blbihjb250ZXh0LCBhbHBoYSkge1xuICB0aGlzLl9jb250ZXh0ID0gY29udGV4dDtcbiAgdGhpcy5fYWxwaGEgPSBhbHBoYTtcbn1cblxuQ2F0bXVsbFJvbU9wZW4ucHJvdG90eXBlID0ge1xuICBhcmVhU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2xpbmUgPSAwO1xuICB9LFxuICBhcmVhRW5kOiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9saW5lID0gTmFOO1xuICB9LFxuICBsaW5lU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX3gwID0gdGhpcy5feDEgPSB0aGlzLl94MiA9XG4gICAgdGhpcy5feTAgPSB0aGlzLl95MSA9IHRoaXMuX3kyID0gTmFOO1xuICAgIHRoaXMuX2wwMV9hID0gdGhpcy5fbDEyX2EgPSB0aGlzLl9sMjNfYSA9XG4gICAgdGhpcy5fbDAxXzJhID0gdGhpcy5fbDEyXzJhID0gdGhpcy5fbDIzXzJhID1cbiAgICB0aGlzLl9wb2ludCA9IDA7XG4gIH0sXG4gIGxpbmVFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLl9saW5lIHx8ICh0aGlzLl9saW5lICE9PSAwICYmIHRoaXMuX3BvaW50ID09PSAzKSkgdGhpcy5fY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICB0aGlzLl9saW5lID0gMSAtIHRoaXMuX2xpbmU7XG4gIH0sXG4gIHBvaW50OiBmdW5jdGlvbih4LCB5KSB7XG4gICAgeCA9ICt4LCB5ID0gK3k7XG5cbiAgICBpZiAodGhpcy5fcG9pbnQpIHtcbiAgICAgIHZhciB4MjMgPSB0aGlzLl94MiAtIHgsXG4gICAgICAgICAgeTIzID0gdGhpcy5feTIgLSB5O1xuICAgICAgdGhpcy5fbDIzX2EgPSBNYXRoLnNxcnQodGhpcy5fbDIzXzJhID0gTWF0aC5wb3coeDIzICogeDIzICsgeTIzICogeTIzLCB0aGlzLl9hbHBoYSkpO1xuICAgIH1cblxuICAgIHN3aXRjaCAodGhpcy5fcG9pbnQpIHtcbiAgICAgIGNhc2UgMDogdGhpcy5fcG9pbnQgPSAxOyBicmVhaztcbiAgICAgIGNhc2UgMTogdGhpcy5fcG9pbnQgPSAyOyBicmVhaztcbiAgICAgIGNhc2UgMjogdGhpcy5fcG9pbnQgPSAzOyB0aGlzLl9saW5lID8gdGhpcy5fY29udGV4dC5saW5lVG8odGhpcy5feDIsIHRoaXMuX3kyKSA6IHRoaXMuX2NvbnRleHQubW92ZVRvKHRoaXMuX3gyLCB0aGlzLl95Mik7IGJyZWFrO1xuICAgICAgY2FzZSAzOiB0aGlzLl9wb2ludCA9IDQ7IC8vIHByb2NlZWRcbiAgICAgIGRlZmF1bHQ6IHBvaW50JDIodGhpcywgeCwgeSk7IGJyZWFrO1xuICAgIH1cblxuICAgIHRoaXMuX2wwMV9hID0gdGhpcy5fbDEyX2EsIHRoaXMuX2wxMl9hID0gdGhpcy5fbDIzX2E7XG4gICAgdGhpcy5fbDAxXzJhID0gdGhpcy5fbDEyXzJhLCB0aGlzLl9sMTJfMmEgPSB0aGlzLl9sMjNfMmE7XG4gICAgdGhpcy5feDAgPSB0aGlzLl94MSwgdGhpcy5feDEgPSB0aGlzLl94MiwgdGhpcy5feDIgPSB4O1xuICAgIHRoaXMuX3kwID0gdGhpcy5feTEsIHRoaXMuX3kxID0gdGhpcy5feTIsIHRoaXMuX3kyID0geTtcbiAgfVxufTtcblxudmFyIGNhdG11bGxSb21PcGVuID0gKGZ1bmN0aW9uIGN1c3RvbShhbHBoYSkge1xuXG4gIGZ1bmN0aW9uIGNhdG11bGxSb20oY29udGV4dCkge1xuICAgIHJldHVybiBhbHBoYSA/IG5ldyBDYXRtdWxsUm9tT3Blbihjb250ZXh0LCBhbHBoYSkgOiBuZXcgQ2FyZGluYWxPcGVuKGNvbnRleHQsIDApO1xuICB9XG5cbiAgY2F0bXVsbFJvbS5hbHBoYSA9IGZ1bmN0aW9uKGFscGhhKSB7XG4gICAgcmV0dXJuIGN1c3RvbSgrYWxwaGEpO1xuICB9O1xuXG4gIHJldHVybiBjYXRtdWxsUm9tO1xufSkoMC41KTtcblxuZnVuY3Rpb24gTGluZWFyQ2xvc2VkKGNvbnRleHQpIHtcbiAgdGhpcy5fY29udGV4dCA9IGNvbnRleHQ7XG59XG5cbkxpbmVhckNsb3NlZC5wcm90b3R5cGUgPSB7XG4gIGFyZWFTdGFydDogbm9vcCxcbiAgYXJlYUVuZDogbm9vcCxcbiAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9wb2ludCA9IDA7XG4gIH0sXG4gIGxpbmVFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLl9wb2ludCkgdGhpcy5fY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgfSxcbiAgcG9pbnQ6IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICB4ID0gK3gsIHkgPSAreTtcbiAgICBpZiAodGhpcy5fcG9pbnQpIHRoaXMuX2NvbnRleHQubGluZVRvKHgsIHkpO1xuICAgIGVsc2UgdGhpcy5fcG9pbnQgPSAxLCB0aGlzLl9jb250ZXh0Lm1vdmVUbyh4LCB5KTtcbiAgfVxufTtcblxuZnVuY3Rpb24gbGluZWFyQ2xvc2VkKGNvbnRleHQpIHtcbiAgcmV0dXJuIG5ldyBMaW5lYXJDbG9zZWQoY29udGV4dCk7XG59XG5cbmZ1bmN0aW9uIHNpZ24oeCkge1xuICByZXR1cm4geCA8IDAgPyAtMSA6IDE7XG59XG5cbi8vIENhbGN1bGF0ZSB0aGUgc2xvcGVzIG9mIHRoZSB0YW5nZW50cyAoSGVybWl0ZS10eXBlIGludGVycG9sYXRpb24pIGJhc2VkIG9uXG4vLyB0aGUgZm9sbG93aW5nIHBhcGVyOiBTdGVmZmVuLCBNLiAxOTkwLiBBIFNpbXBsZSBNZXRob2QgZm9yIE1vbm90b25pY1xuLy8gSW50ZXJwb2xhdGlvbiBpbiBPbmUgRGltZW5zaW9uLiBBc3Ryb25vbXkgYW5kIEFzdHJvcGh5c2ljcywgVm9sLiAyMzksIE5PLlxuLy8gTk9WKElJKSwgUC4gNDQzLCAxOTkwLlxuZnVuY3Rpb24gc2xvcGUzKHRoYXQsIHgyLCB5Mikge1xuICB2YXIgaDAgPSB0aGF0Ll94MSAtIHRoYXQuX3gwLFxuICAgICAgaDEgPSB4MiAtIHRoYXQuX3gxLFxuICAgICAgczAgPSAodGhhdC5feTEgLSB0aGF0Ll95MCkgLyAoaDAgfHwgaDEgPCAwICYmIC0wKSxcbiAgICAgIHMxID0gKHkyIC0gdGhhdC5feTEpIC8gKGgxIHx8IGgwIDwgMCAmJiAtMCksXG4gICAgICBwID0gKHMwICogaDEgKyBzMSAqIGgwKSAvIChoMCArIGgxKTtcbiAgcmV0dXJuIChzaWduKHMwKSArIHNpZ24oczEpKSAqIE1hdGgubWluKE1hdGguYWJzKHMwKSwgTWF0aC5hYnMoczEpLCAwLjUgKiBNYXRoLmFicyhwKSkgfHwgMDtcbn1cblxuLy8gQ2FsY3VsYXRlIGEgb25lLXNpZGVkIHNsb3BlLlxuZnVuY3Rpb24gc2xvcGUyKHRoYXQsIHQpIHtcbiAgdmFyIGggPSB0aGF0Ll94MSAtIHRoYXQuX3gwO1xuICByZXR1cm4gaCA/ICgzICogKHRoYXQuX3kxIC0gdGhhdC5feTApIC8gaCAtIHQpIC8gMiA6IHQ7XG59XG5cbi8vIEFjY29yZGluZyB0byBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9DdWJpY19IZXJtaXRlX3NwbGluZSNSZXByZXNlbnRhdGlvbnNcbi8vIFwieW91IGNhbiBleHByZXNzIGN1YmljIEhlcm1pdGUgaW50ZXJwb2xhdGlvbiBpbiB0ZXJtcyBvZiBjdWJpYyBCw6l6aWVyIGN1cnZlc1xuLy8gd2l0aCByZXNwZWN0IHRvIHRoZSBmb3VyIHZhbHVlcyBwMCwgcDAgKyBtMCAvIDMsIHAxIC0gbTEgLyAzLCBwMVwiLlxuZnVuY3Rpb24gcG9pbnQkMyh0aGF0LCB0MCwgdDEpIHtcbiAgdmFyIHgwID0gdGhhdC5feDAsXG4gICAgICB5MCA9IHRoYXQuX3kwLFxuICAgICAgeDEgPSB0aGF0Ll94MSxcbiAgICAgIHkxID0gdGhhdC5feTEsXG4gICAgICBkeCA9ICh4MSAtIHgwKSAvIDM7XG4gIHRoYXQuX2NvbnRleHQuYmV6aWVyQ3VydmVUbyh4MCArIGR4LCB5MCArIGR4ICogdDAsIHgxIC0gZHgsIHkxIC0gZHggKiB0MSwgeDEsIHkxKTtcbn1cblxuZnVuY3Rpb24gTW9ub3RvbmVYKGNvbnRleHQpIHtcbiAgdGhpcy5fY29udGV4dCA9IGNvbnRleHQ7XG59XG5cbk1vbm90b25lWC5wcm90b3R5cGUgPSB7XG4gIGFyZWFTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fbGluZSA9IDA7XG4gIH0sXG4gIGFyZWFFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2xpbmUgPSBOYU47XG4gIH0sXG4gIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5feDAgPSB0aGlzLl94MSA9XG4gICAgdGhpcy5feTAgPSB0aGlzLl95MSA9XG4gICAgdGhpcy5fdDAgPSBOYU47XG4gICAgdGhpcy5fcG9pbnQgPSAwO1xuICB9LFxuICBsaW5lRW5kOiBmdW5jdGlvbigpIHtcbiAgICBzd2l0Y2ggKHRoaXMuX3BvaW50KSB7XG4gICAgICBjYXNlIDI6IHRoaXMuX2NvbnRleHQubGluZVRvKHRoaXMuX3gxLCB0aGlzLl95MSk7IGJyZWFrO1xuICAgICAgY2FzZSAzOiBwb2ludCQzKHRoaXMsIHRoaXMuX3QwLCBzbG9wZTIodGhpcywgdGhpcy5fdDApKTsgYnJlYWs7XG4gICAgfVxuICAgIGlmICh0aGlzLl9saW5lIHx8ICh0aGlzLl9saW5lICE9PSAwICYmIHRoaXMuX3BvaW50ID09PSAxKSkgdGhpcy5fY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICB0aGlzLl9saW5lID0gMSAtIHRoaXMuX2xpbmU7XG4gIH0sXG4gIHBvaW50OiBmdW5jdGlvbih4LCB5KSB7XG4gICAgdmFyIHQxID0gTmFOO1xuXG4gICAgeCA9ICt4LCB5ID0gK3k7XG4gICAgaWYgKHggPT09IHRoaXMuX3gxICYmIHkgPT09IHRoaXMuX3kxKSByZXR1cm47IC8vIElnbm9yZSBjb2luY2lkZW50IHBvaW50cy5cbiAgICBzd2l0Y2ggKHRoaXMuX3BvaW50KSB7XG4gICAgICBjYXNlIDA6IHRoaXMuX3BvaW50ID0gMTsgdGhpcy5fbGluZSA/IHRoaXMuX2NvbnRleHQubGluZVRvKHgsIHkpIDogdGhpcy5fY29udGV4dC5tb3ZlVG8oeCwgeSk7IGJyZWFrO1xuICAgICAgY2FzZSAxOiB0aGlzLl9wb2ludCA9IDI7IGJyZWFrO1xuICAgICAgY2FzZSAyOiB0aGlzLl9wb2ludCA9IDM7IHBvaW50JDModGhpcywgc2xvcGUyKHRoaXMsIHQxID0gc2xvcGUzKHRoaXMsIHgsIHkpKSwgdDEpOyBicmVhaztcbiAgICAgIGRlZmF1bHQ6IHBvaW50JDModGhpcywgdGhpcy5fdDAsIHQxID0gc2xvcGUzKHRoaXMsIHgsIHkpKTsgYnJlYWs7XG4gICAgfVxuXG4gICAgdGhpcy5feDAgPSB0aGlzLl94MSwgdGhpcy5feDEgPSB4O1xuICAgIHRoaXMuX3kwID0gdGhpcy5feTEsIHRoaXMuX3kxID0geTtcbiAgICB0aGlzLl90MCA9IHQxO1xuICB9XG59O1xuXG5mdW5jdGlvbiBNb25vdG9uZVkoY29udGV4dCkge1xuICB0aGlzLl9jb250ZXh0ID0gbmV3IFJlZmxlY3RDb250ZXh0KGNvbnRleHQpO1xufVxuXG4oTW9ub3RvbmVZLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoTW9ub3RvbmVYLnByb3RvdHlwZSkpLnBvaW50ID0gZnVuY3Rpb24oeCwgeSkge1xuICBNb25vdG9uZVgucHJvdG90eXBlLnBvaW50LmNhbGwodGhpcywgeSwgeCk7XG59O1xuXG5mdW5jdGlvbiBSZWZsZWN0Q29udGV4dChjb250ZXh0KSB7XG4gIHRoaXMuX2NvbnRleHQgPSBjb250ZXh0O1xufVxuXG5SZWZsZWN0Q29udGV4dC5wcm90b3R5cGUgPSB7XG4gIG1vdmVUbzogZnVuY3Rpb24oeCwgeSkgeyB0aGlzLl9jb250ZXh0Lm1vdmVUbyh5LCB4KTsgfSxcbiAgY2xvc2VQYXRoOiBmdW5jdGlvbigpIHsgdGhpcy5fY29udGV4dC5jbG9zZVBhdGgoKTsgfSxcbiAgbGluZVRvOiBmdW5jdGlvbih4LCB5KSB7IHRoaXMuX2NvbnRleHQubGluZVRvKHksIHgpOyB9LFxuICBiZXppZXJDdXJ2ZVRvOiBmdW5jdGlvbih4MSwgeTEsIHgyLCB5MiwgeCwgeSkgeyB0aGlzLl9jb250ZXh0LmJlemllckN1cnZlVG8oeTEsIHgxLCB5MiwgeDIsIHksIHgpOyB9XG59O1xuXG5mdW5jdGlvbiBtb25vdG9uZVgoY29udGV4dCkge1xuICByZXR1cm4gbmV3IE1vbm90b25lWChjb250ZXh0KTtcbn1cblxuZnVuY3Rpb24gbW9ub3RvbmVZKGNvbnRleHQpIHtcbiAgcmV0dXJuIG5ldyBNb25vdG9uZVkoY29udGV4dCk7XG59XG5cbmZ1bmN0aW9uIE5hdHVyYWwoY29udGV4dCkge1xuICB0aGlzLl9jb250ZXh0ID0gY29udGV4dDtcbn1cblxuTmF0dXJhbC5wcm90b3R5cGUgPSB7XG4gIGFyZWFTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fbGluZSA9IDA7XG4gIH0sXG4gIGFyZWFFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2xpbmUgPSBOYU47XG4gIH0sXG4gIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5feCA9IFtdO1xuICAgIHRoaXMuX3kgPSBbXTtcbiAgfSxcbiAgbGluZUVuZDogZnVuY3Rpb24oKSB7XG4gICAgdmFyIHggPSB0aGlzLl94LFxuICAgICAgICB5ID0gdGhpcy5feSxcbiAgICAgICAgbiA9IHgubGVuZ3RoO1xuXG4gICAgaWYgKG4pIHtcbiAgICAgIHRoaXMuX2xpbmUgPyB0aGlzLl9jb250ZXh0LmxpbmVUbyh4WzBdLCB5WzBdKSA6IHRoaXMuX2NvbnRleHQubW92ZVRvKHhbMF0sIHlbMF0pO1xuICAgICAgaWYgKG4gPT09IDIpIHtcbiAgICAgICAgdGhpcy5fY29udGV4dC5saW5lVG8oeFsxXSwgeVsxXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgcHggPSBjb250cm9sUG9pbnRzKHgpLFxuICAgICAgICAgICAgcHkgPSBjb250cm9sUG9pbnRzKHkpO1xuICAgICAgICBmb3IgKHZhciBpMCA9IDAsIGkxID0gMTsgaTEgPCBuOyArK2kwLCArK2kxKSB7XG4gICAgICAgICAgdGhpcy5fY29udGV4dC5iZXppZXJDdXJ2ZVRvKHB4WzBdW2kwXSwgcHlbMF1baTBdLCBweFsxXVtpMF0sIHB5WzFdW2kwXSwgeFtpMV0sIHlbaTFdKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0aGlzLl9saW5lIHx8ICh0aGlzLl9saW5lICE9PSAwICYmIG4gPT09IDEpKSB0aGlzLl9jb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgIHRoaXMuX2xpbmUgPSAxIC0gdGhpcy5fbGluZTtcbiAgICB0aGlzLl94ID0gdGhpcy5feSA9IG51bGw7XG4gIH0sXG4gIHBvaW50OiBmdW5jdGlvbih4LCB5KSB7XG4gICAgdGhpcy5feC5wdXNoKCt4KTtcbiAgICB0aGlzLl95LnB1c2goK3kpO1xuICB9XG59O1xuXG4vLyBTZWUgaHR0cHM6Ly93d3cucGFydGljbGVpbmNlbGwuY29tLzIwMTIvYmV6aWVyLXNwbGluZXMvIGZvciBkZXJpdmF0aW9uLlxuZnVuY3Rpb24gY29udHJvbFBvaW50cyh4KSB7XG4gIHZhciBpLFxuICAgICAgbiA9IHgubGVuZ3RoIC0gMSxcbiAgICAgIG0sXG4gICAgICBhID0gbmV3IEFycmF5KG4pLFxuICAgICAgYiA9IG5ldyBBcnJheShuKSxcbiAgICAgIHIgPSBuZXcgQXJyYXkobik7XG4gIGFbMF0gPSAwLCBiWzBdID0gMiwgclswXSA9IHhbMF0gKyAyICogeFsxXTtcbiAgZm9yIChpID0gMTsgaSA8IG4gLSAxOyArK2kpIGFbaV0gPSAxLCBiW2ldID0gNCwgcltpXSA9IDQgKiB4W2ldICsgMiAqIHhbaSArIDFdO1xuICBhW24gLSAxXSA9IDIsIGJbbiAtIDFdID0gNywgcltuIC0gMV0gPSA4ICogeFtuIC0gMV0gKyB4W25dO1xuICBmb3IgKGkgPSAxOyBpIDwgbjsgKytpKSBtID0gYVtpXSAvIGJbaSAtIDFdLCBiW2ldIC09IG0sIHJbaV0gLT0gbSAqIHJbaSAtIDFdO1xuICBhW24gLSAxXSA9IHJbbiAtIDFdIC8gYltuIC0gMV07XG4gIGZvciAoaSA9IG4gLSAyOyBpID49IDA7IC0taSkgYVtpXSA9IChyW2ldIC0gYVtpICsgMV0pIC8gYltpXTtcbiAgYltuIC0gMV0gPSAoeFtuXSArIGFbbiAtIDFdKSAvIDI7XG4gIGZvciAoaSA9IDA7IGkgPCBuIC0gMTsgKytpKSBiW2ldID0gMiAqIHhbaSArIDFdIC0gYVtpICsgMV07XG4gIHJldHVybiBbYSwgYl07XG59XG5cbmZ1bmN0aW9uIG5hdHVyYWwoY29udGV4dCkge1xuICByZXR1cm4gbmV3IE5hdHVyYWwoY29udGV4dCk7XG59XG5cbmZ1bmN0aW9uIFN0ZXAoY29udGV4dCwgdCkge1xuICB0aGlzLl9jb250ZXh0ID0gY29udGV4dDtcbiAgdGhpcy5fdCA9IHQ7XG59XG5cblN0ZXAucHJvdG90eXBlID0ge1xuICBhcmVhU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2xpbmUgPSAwO1xuICB9LFxuICBhcmVhRW5kOiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9saW5lID0gTmFOO1xuICB9LFxuICBsaW5lU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX3ggPSB0aGlzLl95ID0gTmFOO1xuICAgIHRoaXMuX3BvaW50ID0gMDtcbiAgfSxcbiAgbGluZUVuZDogZnVuY3Rpb24oKSB7XG4gICAgaWYgKDAgPCB0aGlzLl90ICYmIHRoaXMuX3QgPCAxICYmIHRoaXMuX3BvaW50ID09PSAyKSB0aGlzLl9jb250ZXh0LmxpbmVUbyh0aGlzLl94LCB0aGlzLl95KTtcbiAgICBpZiAodGhpcy5fbGluZSB8fCAodGhpcy5fbGluZSAhPT0gMCAmJiB0aGlzLl9wb2ludCA9PT0gMSkpIHRoaXMuX2NvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgaWYgKHRoaXMuX2xpbmUgPj0gMCkgdGhpcy5fdCA9IDEgLSB0aGlzLl90LCB0aGlzLl9saW5lID0gMSAtIHRoaXMuX2xpbmU7XG4gIH0sXG4gIHBvaW50OiBmdW5jdGlvbih4LCB5KSB7XG4gICAgeCA9ICt4LCB5ID0gK3k7XG4gICAgc3dpdGNoICh0aGlzLl9wb2ludCkge1xuICAgICAgY2FzZSAwOiB0aGlzLl9wb2ludCA9IDE7IHRoaXMuX2xpbmUgPyB0aGlzLl9jb250ZXh0LmxpbmVUbyh4LCB5KSA6IHRoaXMuX2NvbnRleHQubW92ZVRvKHgsIHkpOyBicmVhaztcbiAgICAgIGNhc2UgMTogdGhpcy5fcG9pbnQgPSAyOyAvLyBwcm9jZWVkXG4gICAgICBkZWZhdWx0OiB7XG4gICAgICAgIGlmICh0aGlzLl90IDw9IDApIHtcbiAgICAgICAgICB0aGlzLl9jb250ZXh0LmxpbmVUbyh0aGlzLl94LCB5KTtcbiAgICAgICAgICB0aGlzLl9jb250ZXh0LmxpbmVUbyh4LCB5KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgeDEgPSB0aGlzLl94ICogKDEgLSB0aGlzLl90KSArIHggKiB0aGlzLl90O1xuICAgICAgICAgIHRoaXMuX2NvbnRleHQubGluZVRvKHgxLCB0aGlzLl95KTtcbiAgICAgICAgICB0aGlzLl9jb250ZXh0LmxpbmVUbyh4MSwgeSk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMuX3ggPSB4LCB0aGlzLl95ID0geTtcbiAgfVxufTtcblxuZnVuY3Rpb24gc3RlcChjb250ZXh0KSB7XG4gIHJldHVybiBuZXcgU3RlcChjb250ZXh0LCAwLjUpO1xufVxuXG5mdW5jdGlvbiBzdGVwQmVmb3JlKGNvbnRleHQpIHtcbiAgcmV0dXJuIG5ldyBTdGVwKGNvbnRleHQsIDApO1xufVxuXG5mdW5jdGlvbiBzdGVwQWZ0ZXIoY29udGV4dCkge1xuICByZXR1cm4gbmV3IFN0ZXAoY29udGV4dCwgMSk7XG59XG5cbmZ1bmN0aW9uIG5vbmUoc2VyaWVzLCBvcmRlcikge1xuICBpZiAoISgobiA9IHNlcmllcy5sZW5ndGgpID4gMSkpIHJldHVybjtcbiAgZm9yICh2YXIgaSA9IDEsIGosIHMwLCBzMSA9IHNlcmllc1tvcmRlclswXV0sIG4sIG0gPSBzMS5sZW5ndGg7IGkgPCBuOyArK2kpIHtcbiAgICBzMCA9IHMxLCBzMSA9IHNlcmllc1tvcmRlcltpXV07XG4gICAgZm9yIChqID0gMDsgaiA8IG07ICsraikge1xuICAgICAgczFbal1bMV0gKz0gczFbal1bMF0gPSBpc05hTihzMFtqXVsxXSkgPyBzMFtqXVswXSA6IHMwW2pdWzFdO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBub25lJDEoc2VyaWVzKSB7XG4gIHZhciBuID0gc2VyaWVzLmxlbmd0aCwgbyA9IG5ldyBBcnJheShuKTtcbiAgd2hpbGUgKC0tbiA+PSAwKSBvW25dID0gbjtcbiAgcmV0dXJuIG87XG59XG5cbmZ1bmN0aW9uIHN0YWNrVmFsdWUoZCwga2V5KSB7XG4gIHJldHVybiBkW2tleV07XG59XG5cbmZ1bmN0aW9uIHN0YWNrKCkge1xuICB2YXIga2V5cyA9IGNvbnN0YW50KFtdKSxcbiAgICAgIG9yZGVyID0gbm9uZSQxLFxuICAgICAgb2Zmc2V0ID0gbm9uZSxcbiAgICAgIHZhbHVlID0gc3RhY2tWYWx1ZTtcblxuICBmdW5jdGlvbiBzdGFjayhkYXRhKSB7XG4gICAgdmFyIGt6ID0ga2V5cy5hcHBseSh0aGlzLCBhcmd1bWVudHMpLFxuICAgICAgICBpLFxuICAgICAgICBtID0gZGF0YS5sZW5ndGgsXG4gICAgICAgIG4gPSBrei5sZW5ndGgsXG4gICAgICAgIHN6ID0gbmV3IEFycmF5KG4pLFxuICAgICAgICBvejtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGZvciAodmFyIGtpID0ga3pbaV0sIHNpID0gc3pbaV0gPSBuZXcgQXJyYXkobSksIGogPSAwLCBzaWo7IGogPCBtOyArK2opIHtcbiAgICAgICAgc2lbal0gPSBzaWogPSBbMCwgK3ZhbHVlKGRhdGFbal0sIGtpLCBqLCBkYXRhKV07XG4gICAgICAgIHNpai5kYXRhID0gZGF0YVtqXTtcbiAgICAgIH1cbiAgICAgIHNpLmtleSA9IGtpO1xuICAgIH1cblxuICAgIGZvciAoaSA9IDAsIG96ID0gb3JkZXIoc3opOyBpIDwgbjsgKytpKSB7XG4gICAgICBzeltveltpXV0uaW5kZXggPSBpO1xuICAgIH1cblxuICAgIG9mZnNldChzeiwgb3opO1xuICAgIHJldHVybiBzejtcbiAgfVxuXG4gIHN0YWNrLmtleXMgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoa2V5cyA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoc2xpY2UuY2FsbChfKSksIHN0YWNrKSA6IGtleXM7XG4gIH07XG5cbiAgc3RhY2sudmFsdWUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodmFsdWUgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCtfKSwgc3RhY2spIDogdmFsdWU7XG4gIH07XG5cbiAgc3RhY2sub3JkZXIgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAob3JkZXIgPSBfID09IG51bGwgPyBub25lJDEgOiB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KHNsaWNlLmNhbGwoXykpLCBzdGFjaykgOiBvcmRlcjtcbiAgfTtcblxuICBzdGFjay5vZmZzZXQgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAob2Zmc2V0ID0gXyA9PSBudWxsID8gbm9uZSA6IF8sIHN0YWNrKSA6IG9mZnNldDtcbiAgfTtcblxuICByZXR1cm4gc3RhY2s7XG59XG5cbmZ1bmN0aW9uIGV4cGFuZChzZXJpZXMsIG9yZGVyKSB7XG4gIGlmICghKChuID0gc2VyaWVzLmxlbmd0aCkgPiAwKSkgcmV0dXJuO1xuICBmb3IgKHZhciBpLCBuLCBqID0gMCwgbSA9IHNlcmllc1swXS5sZW5ndGgsIHk7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHkgPSBpID0gMDsgaSA8IG47ICsraSkgeSArPSBzZXJpZXNbaV1bal1bMV0gfHwgMDtcbiAgICBpZiAoeSkgZm9yIChpID0gMDsgaSA8IG47ICsraSkgc2VyaWVzW2ldW2pdWzFdIC89IHk7XG4gIH1cbiAgbm9uZShzZXJpZXMsIG9yZGVyKTtcbn1cblxuZnVuY3Rpb24gZGl2ZXJnaW5nKHNlcmllcywgb3JkZXIpIHtcbiAgaWYgKCEoKG4gPSBzZXJpZXMubGVuZ3RoKSA+IDApKSByZXR1cm47XG4gIGZvciAodmFyIGksIGogPSAwLCBkLCBkeSwgeXAsIHluLCBuLCBtID0gc2VyaWVzW29yZGVyWzBdXS5sZW5ndGg7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHlwID0geW4gPSAwLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKChkeSA9IChkID0gc2VyaWVzW29yZGVyW2ldXVtqXSlbMV0gLSBkWzBdKSA+IDApIHtcbiAgICAgICAgZFswXSA9IHlwLCBkWzFdID0geXAgKz0gZHk7XG4gICAgICB9IGVsc2UgaWYgKGR5IDwgMCkge1xuICAgICAgICBkWzFdID0geW4sIGRbMF0gPSB5biArPSBkeTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRbMF0gPSAwLCBkWzFdID0gZHk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHNpbGhvdWV0dGUoc2VyaWVzLCBvcmRlcikge1xuICBpZiAoISgobiA9IHNlcmllcy5sZW5ndGgpID4gMCkpIHJldHVybjtcbiAgZm9yICh2YXIgaiA9IDAsIHMwID0gc2VyaWVzW29yZGVyWzBdXSwgbiwgbSA9IHMwLmxlbmd0aDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGkgPSAwLCB5ID0gMDsgaSA8IG47ICsraSkgeSArPSBzZXJpZXNbaV1bal1bMV0gfHwgMDtcbiAgICBzMFtqXVsxXSArPSBzMFtqXVswXSA9IC15IC8gMjtcbiAgfVxuICBub25lKHNlcmllcywgb3JkZXIpO1xufVxuXG5mdW5jdGlvbiB3aWdnbGUoc2VyaWVzLCBvcmRlcikge1xuICBpZiAoISgobiA9IHNlcmllcy5sZW5ndGgpID4gMCkgfHwgISgobSA9IChzMCA9IHNlcmllc1tvcmRlclswXV0pLmxlbmd0aCkgPiAwKSkgcmV0dXJuO1xuICBmb3IgKHZhciB5ID0gMCwgaiA9IDEsIHMwLCBtLCBuOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIHMxID0gMCwgczIgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICB2YXIgc2kgPSBzZXJpZXNbb3JkZXJbaV1dLFxuICAgICAgICAgIHNpajAgPSBzaVtqXVsxXSB8fCAwLFxuICAgICAgICAgIHNpajEgPSBzaVtqIC0gMV1bMV0gfHwgMCxcbiAgICAgICAgICBzMyA9IChzaWowIC0gc2lqMSkgLyAyO1xuICAgICAgZm9yICh2YXIgayA9IDA7IGsgPCBpOyArK2spIHtcbiAgICAgICAgdmFyIHNrID0gc2VyaWVzW29yZGVyW2tdXSxcbiAgICAgICAgICAgIHNrajAgPSBza1tqXVsxXSB8fCAwLFxuICAgICAgICAgICAgc2tqMSA9IHNrW2ogLSAxXVsxXSB8fCAwO1xuICAgICAgICBzMyArPSBza2owIC0gc2tqMTtcbiAgICAgIH1cbiAgICAgIHMxICs9IHNpajAsIHMyICs9IHMzICogc2lqMDtcbiAgICB9XG4gICAgczBbaiAtIDFdWzFdICs9IHMwW2ogLSAxXVswXSA9IHk7XG4gICAgaWYgKHMxKSB5IC09IHMyIC8gczE7XG4gIH1cbiAgczBbaiAtIDFdWzFdICs9IHMwW2ogLSAxXVswXSA9IHk7XG4gIG5vbmUoc2VyaWVzLCBvcmRlcik7XG59XG5cbmZ1bmN0aW9uIGFwcGVhcmFuY2Uoc2VyaWVzKSB7XG4gIHZhciBwZWFrcyA9IHNlcmllcy5tYXAocGVhayk7XG4gIHJldHVybiBub25lJDEoc2VyaWVzKS5zb3J0KGZ1bmN0aW9uKGEsIGIpIHsgcmV0dXJuIHBlYWtzW2FdIC0gcGVha3NbYl07IH0pO1xufVxuXG5mdW5jdGlvbiBwZWFrKHNlcmllcykge1xuICB2YXIgaSA9IC0xLCBqID0gMCwgbiA9IHNlcmllcy5sZW5ndGgsIHZpLCB2aiA9IC1JbmZpbml0eTtcbiAgd2hpbGUgKCsraSA8IG4pIGlmICgodmkgPSArc2VyaWVzW2ldWzFdKSA+IHZqKSB2aiA9IHZpLCBqID0gaTtcbiAgcmV0dXJuIGo7XG59XG5cbmZ1bmN0aW9uIGFzY2VuZGluZyhzZXJpZXMpIHtcbiAgdmFyIHN1bXMgPSBzZXJpZXMubWFwKHN1bSk7XG4gIHJldHVybiBub25lJDEoc2VyaWVzKS5zb3J0KGZ1bmN0aW9uKGEsIGIpIHsgcmV0dXJuIHN1bXNbYV0gLSBzdW1zW2JdOyB9KTtcbn1cblxuZnVuY3Rpb24gc3VtKHNlcmllcykge1xuICB2YXIgcyA9IDAsIGkgPSAtMSwgbiA9IHNlcmllcy5sZW5ndGgsIHY7XG4gIHdoaWxlICgrK2kgPCBuKSBpZiAodiA9ICtzZXJpZXNbaV1bMV0pIHMgKz0gdjtcbiAgcmV0dXJuIHM7XG59XG5cbmZ1bmN0aW9uIGRlc2NlbmRpbmckMShzZXJpZXMpIHtcbiAgcmV0dXJuIGFzY2VuZGluZyhzZXJpZXMpLnJldmVyc2UoKTtcbn1cblxuZnVuY3Rpb24gaW5zaWRlT3V0KHNlcmllcykge1xuICB2YXIgbiA9IHNlcmllcy5sZW5ndGgsXG4gICAgICBpLFxuICAgICAgaixcbiAgICAgIHN1bXMgPSBzZXJpZXMubWFwKHN1bSksXG4gICAgICBvcmRlciA9IGFwcGVhcmFuY2Uoc2VyaWVzKSxcbiAgICAgIHRvcCA9IDAsXG4gICAgICBib3R0b20gPSAwLFxuICAgICAgdG9wcyA9IFtdLFxuICAgICAgYm90dG9tcyA9IFtdO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICBqID0gb3JkZXJbaV07XG4gICAgaWYgKHRvcCA8IGJvdHRvbSkge1xuICAgICAgdG9wICs9IHN1bXNbal07XG4gICAgICB0b3BzLnB1c2goaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGJvdHRvbSArPSBzdW1zW2pdO1xuICAgICAgYm90dG9tcy5wdXNoKGopO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBib3R0b21zLnJldmVyc2UoKS5jb25jYXQodG9wcyk7XG59XG5cbmZ1bmN0aW9uIHJldmVyc2Uoc2VyaWVzKSB7XG4gIHJldHVybiBub25lJDEoc2VyaWVzKS5yZXZlcnNlKCk7XG59XG5cbmV4cG9ydHMuYXJjID0gYXJjO1xuZXhwb3J0cy5hcmVhID0gYXJlYTtcbmV4cG9ydHMuYXJlYVJhZGlhbCA9IGFyZWFSYWRpYWw7XG5leHBvcnRzLmN1cnZlQmFzaXMgPSBiYXNpcztcbmV4cG9ydHMuY3VydmVCYXNpc0Nsb3NlZCA9IGJhc2lzQ2xvc2VkO1xuZXhwb3J0cy5jdXJ2ZUJhc2lzT3BlbiA9IGJhc2lzT3BlbjtcbmV4cG9ydHMuY3VydmVCdW5kbGUgPSBidW5kbGU7XG5leHBvcnRzLmN1cnZlQ2FyZGluYWwgPSBjYXJkaW5hbDtcbmV4cG9ydHMuY3VydmVDYXJkaW5hbENsb3NlZCA9IGNhcmRpbmFsQ2xvc2VkO1xuZXhwb3J0cy5jdXJ2ZUNhcmRpbmFsT3BlbiA9IGNhcmRpbmFsT3BlbjtcbmV4cG9ydHMuY3VydmVDYXRtdWxsUm9tID0gY2F0bXVsbFJvbTtcbmV4cG9ydHMuY3VydmVDYXRtdWxsUm9tQ2xvc2VkID0gY2F0bXVsbFJvbUNsb3NlZDtcbmV4cG9ydHMuY3VydmVDYXRtdWxsUm9tT3BlbiA9IGNhdG11bGxSb21PcGVuO1xuZXhwb3J0cy5jdXJ2ZUxpbmVhciA9IGN1cnZlTGluZWFyO1xuZXhwb3J0cy5jdXJ2ZUxpbmVhckNsb3NlZCA9IGxpbmVhckNsb3NlZDtcbmV4cG9ydHMuY3VydmVNb25vdG9uZVggPSBtb25vdG9uZVg7XG5leHBvcnRzLmN1cnZlTW9ub3RvbmVZID0gbW9ub3RvbmVZO1xuZXhwb3J0cy5jdXJ2ZU5hdHVyYWwgPSBuYXR1cmFsO1xuZXhwb3J0cy5jdXJ2ZVN0ZXAgPSBzdGVwO1xuZXhwb3J0cy5jdXJ2ZVN0ZXBBZnRlciA9IHN0ZXBBZnRlcjtcbmV4cG9ydHMuY3VydmVTdGVwQmVmb3JlID0gc3RlcEJlZm9yZTtcbmV4cG9ydHMubGluZSA9IGxpbmU7XG5leHBvcnRzLmxpbmVSYWRpYWwgPSBsaW5lUmFkaWFsJDE7XG5leHBvcnRzLmxpbmtIb3Jpem9udGFsID0gbGlua0hvcml6b250YWw7XG5leHBvcnRzLmxpbmtSYWRpYWwgPSBsaW5rUmFkaWFsO1xuZXhwb3J0cy5saW5rVmVydGljYWwgPSBsaW5rVmVydGljYWw7XG5leHBvcnRzLnBpZSA9IHBpZTtcbmV4cG9ydHMucG9pbnRSYWRpYWwgPSBwb2ludFJhZGlhbDtcbmV4cG9ydHMucmFkaWFsQXJlYSA9IGFyZWFSYWRpYWw7XG5leHBvcnRzLnJhZGlhbExpbmUgPSBsaW5lUmFkaWFsJDE7XG5leHBvcnRzLnN0YWNrID0gc3RhY2s7XG5leHBvcnRzLnN0YWNrT2Zmc2V0RGl2ZXJnaW5nID0gZGl2ZXJnaW5nO1xuZXhwb3J0cy5zdGFja09mZnNldEV4cGFuZCA9IGV4cGFuZDtcbmV4cG9ydHMuc3RhY2tPZmZzZXROb25lID0gbm9uZTtcbmV4cG9ydHMuc3RhY2tPZmZzZXRTaWxob3VldHRlID0gc2lsaG91ZXR0ZTtcbmV4cG9ydHMuc3RhY2tPZmZzZXRXaWdnbGUgPSB3aWdnbGU7XG5leHBvcnRzLnN0YWNrT3JkZXJBcHBlYXJhbmNlID0gYXBwZWFyYW5jZTtcbmV4cG9ydHMuc3RhY2tPcmRlckFzY2VuZGluZyA9IGFzY2VuZGluZztcbmV4cG9ydHMuc3RhY2tPcmRlckRlc2NlbmRpbmcgPSBkZXNjZW5kaW5nJDE7XG5leHBvcnRzLnN0YWNrT3JkZXJJbnNpZGVPdXQgPSBpbnNpZGVPdXQ7XG5leHBvcnRzLnN0YWNrT3JkZXJOb25lID0gbm9uZSQxO1xuZXhwb3J0cy5zdGFja09yZGVyUmV2ZXJzZSA9IHJldmVyc2U7XG5leHBvcnRzLnN5bWJvbCA9IHN5bWJvbDtcbmV4cG9ydHMuc3ltYm9sQ2lyY2xlID0gY2lyY2xlO1xuZXhwb3J0cy5zeW1ib2xDcm9zcyA9IGNyb3NzO1xuZXhwb3J0cy5zeW1ib2xEaWFtb25kID0gZGlhbW9uZDtcbmV4cG9ydHMuc3ltYm9sU3F1YXJlID0gc3F1YXJlO1xuZXhwb3J0cy5zeW1ib2xTdGFyID0gc3RhcjtcbmV4cG9ydHMuc3ltYm9sVHJpYW5nbGUgPSB0cmlhbmdsZTtcbmV4cG9ydHMuc3ltYm9sV3llID0gd3llO1xuZXhwb3J0cy5zeW1ib2xzID0gc3ltYm9scztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxufSkpO1xuIiwiLy8gaHR0cHM6Ly9kM2pzLm9yZy9kMy10aW1lLWZvcm1hdC8gdjIuMy4wIENvcHlyaWdodCAyMDIwIE1pa2UgQm9zdG9ja1xuKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbnR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyA/IGZhY3RvcnkoZXhwb3J0cywgcmVxdWlyZSgnZDMtdGltZScpKSA6XG50eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWydleHBvcnRzJywgJ2QzLXRpbWUnXSwgZmFjdG9yeSkgOlxuKGdsb2JhbCA9IGdsb2JhbCB8fCBzZWxmLCBmYWN0b3J5KGdsb2JhbC5kMyA9IGdsb2JhbC5kMyB8fCB7fSwgZ2xvYmFsLmQzKSk7XG59KHRoaXMsIGZ1bmN0aW9uIChleHBvcnRzLCBkM1RpbWUpIHsgJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBsb2NhbERhdGUoZCkge1xuICBpZiAoMCA8PSBkLnkgJiYgZC55IDwgMTAwKSB7XG4gICAgdmFyIGRhdGUgPSBuZXcgRGF0ZSgtMSwgZC5tLCBkLmQsIGQuSCwgZC5NLCBkLlMsIGQuTCk7XG4gICAgZGF0ZS5zZXRGdWxsWWVhcihkLnkpO1xuICAgIHJldHVybiBkYXRlO1xuICB9XG4gIHJldHVybiBuZXcgRGF0ZShkLnksIGQubSwgZC5kLCBkLkgsIGQuTSwgZC5TLCBkLkwpO1xufVxuXG5mdW5jdGlvbiB1dGNEYXRlKGQpIHtcbiAgaWYgKDAgPD0gZC55ICYmIGQueSA8IDEwMCkge1xuICAgIHZhciBkYXRlID0gbmV3IERhdGUoRGF0ZS5VVEMoLTEsIGQubSwgZC5kLCBkLkgsIGQuTSwgZC5TLCBkLkwpKTtcbiAgICBkYXRlLnNldFVUQ0Z1bGxZZWFyKGQueSk7XG4gICAgcmV0dXJuIGRhdGU7XG4gIH1cbiAgcmV0dXJuIG5ldyBEYXRlKERhdGUuVVRDKGQueSwgZC5tLCBkLmQsIGQuSCwgZC5NLCBkLlMsIGQuTCkpO1xufVxuXG5mdW5jdGlvbiBuZXdEYXRlKHksIG0sIGQpIHtcbiAgcmV0dXJuIHt5OiB5LCBtOiBtLCBkOiBkLCBIOiAwLCBNOiAwLCBTOiAwLCBMOiAwfTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0TG9jYWxlKGxvY2FsZSkge1xuICB2YXIgbG9jYWxlX2RhdGVUaW1lID0gbG9jYWxlLmRhdGVUaW1lLFxuICAgICAgbG9jYWxlX2RhdGUgPSBsb2NhbGUuZGF0ZSxcbiAgICAgIGxvY2FsZV90aW1lID0gbG9jYWxlLnRpbWUsXG4gICAgICBsb2NhbGVfcGVyaW9kcyA9IGxvY2FsZS5wZXJpb2RzLFxuICAgICAgbG9jYWxlX3dlZWtkYXlzID0gbG9jYWxlLmRheXMsXG4gICAgICBsb2NhbGVfc2hvcnRXZWVrZGF5cyA9IGxvY2FsZS5zaG9ydERheXMsXG4gICAgICBsb2NhbGVfbW9udGhzID0gbG9jYWxlLm1vbnRocyxcbiAgICAgIGxvY2FsZV9zaG9ydE1vbnRocyA9IGxvY2FsZS5zaG9ydE1vbnRocztcblxuICB2YXIgcGVyaW9kUmUgPSBmb3JtYXRSZShsb2NhbGVfcGVyaW9kcyksXG4gICAgICBwZXJpb2RMb29rdXAgPSBmb3JtYXRMb29rdXAobG9jYWxlX3BlcmlvZHMpLFxuICAgICAgd2Vla2RheVJlID0gZm9ybWF0UmUobG9jYWxlX3dlZWtkYXlzKSxcbiAgICAgIHdlZWtkYXlMb29rdXAgPSBmb3JtYXRMb29rdXAobG9jYWxlX3dlZWtkYXlzKSxcbiAgICAgIHNob3J0V2Vla2RheVJlID0gZm9ybWF0UmUobG9jYWxlX3Nob3J0V2Vla2RheXMpLFxuICAgICAgc2hvcnRXZWVrZGF5TG9va3VwID0gZm9ybWF0TG9va3VwKGxvY2FsZV9zaG9ydFdlZWtkYXlzKSxcbiAgICAgIG1vbnRoUmUgPSBmb3JtYXRSZShsb2NhbGVfbW9udGhzKSxcbiAgICAgIG1vbnRoTG9va3VwID0gZm9ybWF0TG9va3VwKGxvY2FsZV9tb250aHMpLFxuICAgICAgc2hvcnRNb250aFJlID0gZm9ybWF0UmUobG9jYWxlX3Nob3J0TW9udGhzKSxcbiAgICAgIHNob3J0TW9udGhMb29rdXAgPSBmb3JtYXRMb29rdXAobG9jYWxlX3Nob3J0TW9udGhzKTtcblxuICB2YXIgZm9ybWF0cyA9IHtcbiAgICBcImFcIjogZm9ybWF0U2hvcnRXZWVrZGF5LFxuICAgIFwiQVwiOiBmb3JtYXRXZWVrZGF5LFxuICAgIFwiYlwiOiBmb3JtYXRTaG9ydE1vbnRoLFxuICAgIFwiQlwiOiBmb3JtYXRNb250aCxcbiAgICBcImNcIjogbnVsbCxcbiAgICBcImRcIjogZm9ybWF0RGF5T2ZNb250aCxcbiAgICBcImVcIjogZm9ybWF0RGF5T2ZNb250aCxcbiAgICBcImZcIjogZm9ybWF0TWljcm9zZWNvbmRzLFxuICAgIFwiZ1wiOiBmb3JtYXRZZWFySVNPLFxuICAgIFwiR1wiOiBmb3JtYXRGdWxsWWVhcklTTyxcbiAgICBcIkhcIjogZm9ybWF0SG91cjI0LFxuICAgIFwiSVwiOiBmb3JtYXRIb3VyMTIsXG4gICAgXCJqXCI6IGZvcm1hdERheU9mWWVhcixcbiAgICBcIkxcIjogZm9ybWF0TWlsbGlzZWNvbmRzLFxuICAgIFwibVwiOiBmb3JtYXRNb250aE51bWJlcixcbiAgICBcIk1cIjogZm9ybWF0TWludXRlcyxcbiAgICBcInBcIjogZm9ybWF0UGVyaW9kLFxuICAgIFwicVwiOiBmb3JtYXRRdWFydGVyLFxuICAgIFwiUVwiOiBmb3JtYXRVbml4VGltZXN0YW1wLFxuICAgIFwic1wiOiBmb3JtYXRVbml4VGltZXN0YW1wU2Vjb25kcyxcbiAgICBcIlNcIjogZm9ybWF0U2Vjb25kcyxcbiAgICBcInVcIjogZm9ybWF0V2Vla2RheU51bWJlck1vbmRheSxcbiAgICBcIlVcIjogZm9ybWF0V2Vla051bWJlclN1bmRheSxcbiAgICBcIlZcIjogZm9ybWF0V2Vla051bWJlcklTTyxcbiAgICBcIndcIjogZm9ybWF0V2Vla2RheU51bWJlclN1bmRheSxcbiAgICBcIldcIjogZm9ybWF0V2Vla051bWJlck1vbmRheSxcbiAgICBcInhcIjogbnVsbCxcbiAgICBcIlhcIjogbnVsbCxcbiAgICBcInlcIjogZm9ybWF0WWVhcixcbiAgICBcIllcIjogZm9ybWF0RnVsbFllYXIsXG4gICAgXCJaXCI6IGZvcm1hdFpvbmUsXG4gICAgXCIlXCI6IGZvcm1hdExpdGVyYWxQZXJjZW50XG4gIH07XG5cbiAgdmFyIHV0Y0Zvcm1hdHMgPSB7XG4gICAgXCJhXCI6IGZvcm1hdFVUQ1Nob3J0V2Vla2RheSxcbiAgICBcIkFcIjogZm9ybWF0VVRDV2Vla2RheSxcbiAgICBcImJcIjogZm9ybWF0VVRDU2hvcnRNb250aCxcbiAgICBcIkJcIjogZm9ybWF0VVRDTW9udGgsXG4gICAgXCJjXCI6IG51bGwsXG4gICAgXCJkXCI6IGZvcm1hdFVUQ0RheU9mTW9udGgsXG4gICAgXCJlXCI6IGZvcm1hdFVUQ0RheU9mTW9udGgsXG4gICAgXCJmXCI6IGZvcm1hdFVUQ01pY3Jvc2Vjb25kcyxcbiAgICBcImdcIjogZm9ybWF0VVRDWWVhcklTTyxcbiAgICBcIkdcIjogZm9ybWF0VVRDRnVsbFllYXJJU08sXG4gICAgXCJIXCI6IGZvcm1hdFVUQ0hvdXIyNCxcbiAgICBcIklcIjogZm9ybWF0VVRDSG91cjEyLFxuICAgIFwialwiOiBmb3JtYXRVVENEYXlPZlllYXIsXG4gICAgXCJMXCI6IGZvcm1hdFVUQ01pbGxpc2Vjb25kcyxcbiAgICBcIm1cIjogZm9ybWF0VVRDTW9udGhOdW1iZXIsXG4gICAgXCJNXCI6IGZvcm1hdFVUQ01pbnV0ZXMsXG4gICAgXCJwXCI6IGZvcm1hdFVUQ1BlcmlvZCxcbiAgICBcInFcIjogZm9ybWF0VVRDUXVhcnRlcixcbiAgICBcIlFcIjogZm9ybWF0VW5peFRpbWVzdGFtcCxcbiAgICBcInNcIjogZm9ybWF0VW5peFRpbWVzdGFtcFNlY29uZHMsXG4gICAgXCJTXCI6IGZvcm1hdFVUQ1NlY29uZHMsXG4gICAgXCJ1XCI6IGZvcm1hdFVUQ1dlZWtkYXlOdW1iZXJNb25kYXksXG4gICAgXCJVXCI6IGZvcm1hdFVUQ1dlZWtOdW1iZXJTdW5kYXksXG4gICAgXCJWXCI6IGZvcm1hdFVUQ1dlZWtOdW1iZXJJU08sXG4gICAgXCJ3XCI6IGZvcm1hdFVUQ1dlZWtkYXlOdW1iZXJTdW5kYXksXG4gICAgXCJXXCI6IGZvcm1hdFVUQ1dlZWtOdW1iZXJNb25kYXksXG4gICAgXCJ4XCI6IG51bGwsXG4gICAgXCJYXCI6IG51bGwsXG4gICAgXCJ5XCI6IGZvcm1hdFVUQ1llYXIsXG4gICAgXCJZXCI6IGZvcm1hdFVUQ0Z1bGxZZWFyLFxuICAgIFwiWlwiOiBmb3JtYXRVVENab25lLFxuICAgIFwiJVwiOiBmb3JtYXRMaXRlcmFsUGVyY2VudFxuICB9O1xuXG4gIHZhciBwYXJzZXMgPSB7XG4gICAgXCJhXCI6IHBhcnNlU2hvcnRXZWVrZGF5LFxuICAgIFwiQVwiOiBwYXJzZVdlZWtkYXksXG4gICAgXCJiXCI6IHBhcnNlU2hvcnRNb250aCxcbiAgICBcIkJcIjogcGFyc2VNb250aCxcbiAgICBcImNcIjogcGFyc2VMb2NhbGVEYXRlVGltZSxcbiAgICBcImRcIjogcGFyc2VEYXlPZk1vbnRoLFxuICAgIFwiZVwiOiBwYXJzZURheU9mTW9udGgsXG4gICAgXCJmXCI6IHBhcnNlTWljcm9zZWNvbmRzLFxuICAgIFwiZ1wiOiBwYXJzZVllYXIsXG4gICAgXCJHXCI6IHBhcnNlRnVsbFllYXIsXG4gICAgXCJIXCI6IHBhcnNlSG91cjI0LFxuICAgIFwiSVwiOiBwYXJzZUhvdXIyNCxcbiAgICBcImpcIjogcGFyc2VEYXlPZlllYXIsXG4gICAgXCJMXCI6IHBhcnNlTWlsbGlzZWNvbmRzLFxuICAgIFwibVwiOiBwYXJzZU1vbnRoTnVtYmVyLFxuICAgIFwiTVwiOiBwYXJzZU1pbnV0ZXMsXG4gICAgXCJwXCI6IHBhcnNlUGVyaW9kLFxuICAgIFwicVwiOiBwYXJzZVF1YXJ0ZXIsXG4gICAgXCJRXCI6IHBhcnNlVW5peFRpbWVzdGFtcCxcbiAgICBcInNcIjogcGFyc2VVbml4VGltZXN0YW1wU2Vjb25kcyxcbiAgICBcIlNcIjogcGFyc2VTZWNvbmRzLFxuICAgIFwidVwiOiBwYXJzZVdlZWtkYXlOdW1iZXJNb25kYXksXG4gICAgXCJVXCI6IHBhcnNlV2Vla051bWJlclN1bmRheSxcbiAgICBcIlZcIjogcGFyc2VXZWVrTnVtYmVySVNPLFxuICAgIFwid1wiOiBwYXJzZVdlZWtkYXlOdW1iZXJTdW5kYXksXG4gICAgXCJXXCI6IHBhcnNlV2Vla051bWJlck1vbmRheSxcbiAgICBcInhcIjogcGFyc2VMb2NhbGVEYXRlLFxuICAgIFwiWFwiOiBwYXJzZUxvY2FsZVRpbWUsXG4gICAgXCJ5XCI6IHBhcnNlWWVhcixcbiAgICBcIllcIjogcGFyc2VGdWxsWWVhcixcbiAgICBcIlpcIjogcGFyc2Vab25lLFxuICAgIFwiJVwiOiBwYXJzZUxpdGVyYWxQZXJjZW50XG4gIH07XG5cbiAgLy8gVGhlc2UgcmVjdXJzaXZlIGRpcmVjdGl2ZSBkZWZpbml0aW9ucyBtdXN0IGJlIGRlZmVycmVkLlxuICBmb3JtYXRzLnggPSBuZXdGb3JtYXQobG9jYWxlX2RhdGUsIGZvcm1hdHMpO1xuICBmb3JtYXRzLlggPSBuZXdGb3JtYXQobG9jYWxlX3RpbWUsIGZvcm1hdHMpO1xuICBmb3JtYXRzLmMgPSBuZXdGb3JtYXQobG9jYWxlX2RhdGVUaW1lLCBmb3JtYXRzKTtcbiAgdXRjRm9ybWF0cy54ID0gbmV3Rm9ybWF0KGxvY2FsZV9kYXRlLCB1dGNGb3JtYXRzKTtcbiAgdXRjRm9ybWF0cy5YID0gbmV3Rm9ybWF0KGxvY2FsZV90aW1lLCB1dGNGb3JtYXRzKTtcbiAgdXRjRm9ybWF0cy5jID0gbmV3Rm9ybWF0KGxvY2FsZV9kYXRlVGltZSwgdXRjRm9ybWF0cyk7XG5cbiAgZnVuY3Rpb24gbmV3Rm9ybWF0KHNwZWNpZmllciwgZm9ybWF0cykge1xuICAgIHJldHVybiBmdW5jdGlvbihkYXRlKSB7XG4gICAgICB2YXIgc3RyaW5nID0gW10sXG4gICAgICAgICAgaSA9IC0xLFxuICAgICAgICAgIGogPSAwLFxuICAgICAgICAgIG4gPSBzcGVjaWZpZXIubGVuZ3RoLFxuICAgICAgICAgIGMsXG4gICAgICAgICAgcGFkLFxuICAgICAgICAgIGZvcm1hdDtcblxuICAgICAgaWYgKCEoZGF0ZSBpbnN0YW5jZW9mIERhdGUpKSBkYXRlID0gbmV3IERhdGUoK2RhdGUpO1xuXG4gICAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgICBpZiAoc3BlY2lmaWVyLmNoYXJDb2RlQXQoaSkgPT09IDM3KSB7XG4gICAgICAgICAgc3RyaW5nLnB1c2goc3BlY2lmaWVyLnNsaWNlKGosIGkpKTtcbiAgICAgICAgICBpZiAoKHBhZCA9IHBhZHNbYyA9IHNwZWNpZmllci5jaGFyQXQoKytpKV0pICE9IG51bGwpIGMgPSBzcGVjaWZpZXIuY2hhckF0KCsraSk7XG4gICAgICAgICAgZWxzZSBwYWQgPSBjID09PSBcImVcIiA/IFwiIFwiIDogXCIwXCI7XG4gICAgICAgICAgaWYgKGZvcm1hdCA9IGZvcm1hdHNbY10pIGMgPSBmb3JtYXQoZGF0ZSwgcGFkKTtcbiAgICAgICAgICBzdHJpbmcucHVzaChjKTtcbiAgICAgICAgICBqID0gaSArIDE7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgc3RyaW5nLnB1c2goc3BlY2lmaWVyLnNsaWNlKGosIGkpKTtcbiAgICAgIHJldHVybiBzdHJpbmcuam9pbihcIlwiKTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gbmV3UGFyc2Uoc3BlY2lmaWVyLCBaKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHN0cmluZykge1xuICAgICAgdmFyIGQgPSBuZXdEYXRlKDE5MDAsIHVuZGVmaW5lZCwgMSksXG4gICAgICAgICAgaSA9IHBhcnNlU3BlY2lmaWVyKGQsIHNwZWNpZmllciwgc3RyaW5nICs9IFwiXCIsIDApLFxuICAgICAgICAgIHdlZWssIGRheTtcbiAgICAgIGlmIChpICE9IHN0cmluZy5sZW5ndGgpIHJldHVybiBudWxsO1xuXG4gICAgICAvLyBJZiBhIFVOSVggdGltZXN0YW1wIGlzIHNwZWNpZmllZCwgcmV0dXJuIGl0LlxuICAgICAgaWYgKFwiUVwiIGluIGQpIHJldHVybiBuZXcgRGF0ZShkLlEpO1xuICAgICAgaWYgKFwic1wiIGluIGQpIHJldHVybiBuZXcgRGF0ZShkLnMgKiAxMDAwICsgKFwiTFwiIGluIGQgPyBkLkwgOiAwKSk7XG5cbiAgICAgIC8vIElmIHRoaXMgaXMgdXRjUGFyc2UsIG5ldmVyIHVzZSB0aGUgbG9jYWwgdGltZXpvbmUuXG4gICAgICBpZiAoWiAmJiAhKFwiWlwiIGluIGQpKSBkLlogPSAwO1xuXG4gICAgICAvLyBUaGUgYW0tcG0gZmxhZyBpcyAwIGZvciBBTSwgYW5kIDEgZm9yIFBNLlxuICAgICAgaWYgKFwicFwiIGluIGQpIGQuSCA9IGQuSCAlIDEyICsgZC5wICogMTI7XG5cbiAgICAgIC8vIElmIHRoZSBtb250aCB3YXMgbm90IHNwZWNpZmllZCwgaW5oZXJpdCBmcm9tIHRoZSBxdWFydGVyLlxuICAgICAgaWYgKGQubSA9PT0gdW5kZWZpbmVkKSBkLm0gPSBcInFcIiBpbiBkID8gZC5xIDogMDtcblxuICAgICAgLy8gQ29udmVydCBkYXktb2Ytd2VlayBhbmQgd2Vlay1vZi15ZWFyIHRvIGRheS1vZi15ZWFyLlxuICAgICAgaWYgKFwiVlwiIGluIGQpIHtcbiAgICAgICAgaWYgKGQuViA8IDEgfHwgZC5WID4gNTMpIHJldHVybiBudWxsO1xuICAgICAgICBpZiAoIShcIndcIiBpbiBkKSkgZC53ID0gMTtcbiAgICAgICAgaWYgKFwiWlwiIGluIGQpIHtcbiAgICAgICAgICB3ZWVrID0gdXRjRGF0ZShuZXdEYXRlKGQueSwgMCwgMSkpLCBkYXkgPSB3ZWVrLmdldFVUQ0RheSgpO1xuICAgICAgICAgIHdlZWsgPSBkYXkgPiA0IHx8IGRheSA9PT0gMCA/IGQzVGltZS51dGNNb25kYXkuY2VpbCh3ZWVrKSA6IGQzVGltZS51dGNNb25kYXkod2Vlayk7XG4gICAgICAgICAgd2VlayA9IGQzVGltZS51dGNEYXkub2Zmc2V0KHdlZWssIChkLlYgLSAxKSAqIDcpO1xuICAgICAgICAgIGQueSA9IHdlZWsuZ2V0VVRDRnVsbFllYXIoKTtcbiAgICAgICAgICBkLm0gPSB3ZWVrLmdldFVUQ01vbnRoKCk7XG4gICAgICAgICAgZC5kID0gd2Vlay5nZXRVVENEYXRlKCkgKyAoZC53ICsgNikgJSA3O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHdlZWsgPSBsb2NhbERhdGUobmV3RGF0ZShkLnksIDAsIDEpKSwgZGF5ID0gd2Vlay5nZXREYXkoKTtcbiAgICAgICAgICB3ZWVrID0gZGF5ID4gNCB8fCBkYXkgPT09IDAgPyBkM1RpbWUudGltZU1vbmRheS5jZWlsKHdlZWspIDogZDNUaW1lLnRpbWVNb25kYXkod2Vlayk7XG4gICAgICAgICAgd2VlayA9IGQzVGltZS50aW1lRGF5Lm9mZnNldCh3ZWVrLCAoZC5WIC0gMSkgKiA3KTtcbiAgICAgICAgICBkLnkgPSB3ZWVrLmdldEZ1bGxZZWFyKCk7XG4gICAgICAgICAgZC5tID0gd2Vlay5nZXRNb250aCgpO1xuICAgICAgICAgIGQuZCA9IHdlZWsuZ2V0RGF0ZSgpICsgKGQudyArIDYpICUgNztcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChcIldcIiBpbiBkIHx8IFwiVVwiIGluIGQpIHtcbiAgICAgICAgaWYgKCEoXCJ3XCIgaW4gZCkpIGQudyA9IFwidVwiIGluIGQgPyBkLnUgJSA3IDogXCJXXCIgaW4gZCA/IDEgOiAwO1xuICAgICAgICBkYXkgPSBcIlpcIiBpbiBkID8gdXRjRGF0ZShuZXdEYXRlKGQueSwgMCwgMSkpLmdldFVUQ0RheSgpIDogbG9jYWxEYXRlKG5ld0RhdGUoZC55LCAwLCAxKSkuZ2V0RGF5KCk7XG4gICAgICAgIGQubSA9IDA7XG4gICAgICAgIGQuZCA9IFwiV1wiIGluIGQgPyAoZC53ICsgNikgJSA3ICsgZC5XICogNyAtIChkYXkgKyA1KSAlIDcgOiBkLncgKyBkLlUgKiA3IC0gKGRheSArIDYpICUgNztcbiAgICAgIH1cblxuICAgICAgLy8gSWYgYSB0aW1lIHpvbmUgaXMgc3BlY2lmaWVkLCBhbGwgZmllbGRzIGFyZSBpbnRlcnByZXRlZCBhcyBVVEMgYW5kIHRoZW5cbiAgICAgIC8vIG9mZnNldCBhY2NvcmRpbmcgdG8gdGhlIHNwZWNpZmllZCB0aW1lIHpvbmUuXG4gICAgICBpZiAoXCJaXCIgaW4gZCkge1xuICAgICAgICBkLkggKz0gZC5aIC8gMTAwIHwgMDtcbiAgICAgICAgZC5NICs9IGQuWiAlIDEwMDtcbiAgICAgICAgcmV0dXJuIHV0Y0RhdGUoZCk7XG4gICAgICB9XG5cbiAgICAgIC8vIE90aGVyd2lzZSwgYWxsIGZpZWxkcyBhcmUgaW4gbG9jYWwgdGltZS5cbiAgICAgIHJldHVybiBsb2NhbERhdGUoZCk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlU3BlY2lmaWVyKGQsIHNwZWNpZmllciwgc3RyaW5nLCBqKSB7XG4gICAgdmFyIGkgPSAwLFxuICAgICAgICBuID0gc3BlY2lmaWVyLmxlbmd0aCxcbiAgICAgICAgbSA9IHN0cmluZy5sZW5ndGgsXG4gICAgICAgIGMsXG4gICAgICAgIHBhcnNlO1xuXG4gICAgd2hpbGUgKGkgPCBuKSB7XG4gICAgICBpZiAoaiA+PSBtKSByZXR1cm4gLTE7XG4gICAgICBjID0gc3BlY2lmaWVyLmNoYXJDb2RlQXQoaSsrKTtcbiAgICAgIGlmIChjID09PSAzNykge1xuICAgICAgICBjID0gc3BlY2lmaWVyLmNoYXJBdChpKyspO1xuICAgICAgICBwYXJzZSA9IHBhcnNlc1tjIGluIHBhZHMgPyBzcGVjaWZpZXIuY2hhckF0KGkrKykgOiBjXTtcbiAgICAgICAgaWYgKCFwYXJzZSB8fCAoKGogPSBwYXJzZShkLCBzdHJpbmcsIGopKSA8IDApKSByZXR1cm4gLTE7XG4gICAgICB9IGVsc2UgaWYgKGMgIT0gc3RyaW5nLmNoYXJDb2RlQXQoaisrKSkge1xuICAgICAgICByZXR1cm4gLTE7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGo7XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZVBlcmlvZChkLCBzdHJpbmcsIGkpIHtcbiAgICB2YXIgbiA9IHBlcmlvZFJlLmV4ZWMoc3RyaW5nLnNsaWNlKGkpKTtcbiAgICByZXR1cm4gbiA/IChkLnAgPSBwZXJpb2RMb29rdXBbblswXS50b0xvd2VyQ2FzZSgpXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VTaG9ydFdlZWtkYXkoZCwgc3RyaW5nLCBpKSB7XG4gICAgdmFyIG4gPSBzaG9ydFdlZWtkYXlSZS5leGVjKHN0cmluZy5zbGljZShpKSk7XG4gICAgcmV0dXJuIG4gPyAoZC53ID0gc2hvcnRXZWVrZGF5TG9va3VwW25bMF0udG9Mb3dlckNhc2UoKV0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlV2Vla2RheShkLCBzdHJpbmcsIGkpIHtcbiAgICB2YXIgbiA9IHdlZWtkYXlSZS5leGVjKHN0cmluZy5zbGljZShpKSk7XG4gICAgcmV0dXJuIG4gPyAoZC53ID0gd2Vla2RheUxvb2t1cFtuWzBdLnRvTG93ZXJDYXNlKCldLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZVNob3J0TW9udGgoZCwgc3RyaW5nLCBpKSB7XG4gICAgdmFyIG4gPSBzaG9ydE1vbnRoUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSkpO1xuICAgIHJldHVybiBuID8gKGQubSA9IHNob3J0TW9udGhMb29rdXBbblswXS50b0xvd2VyQ2FzZSgpXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VNb250aChkLCBzdHJpbmcsIGkpIHtcbiAgICB2YXIgbiA9IG1vbnRoUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSkpO1xuICAgIHJldHVybiBuID8gKGQubSA9IG1vbnRoTG9va3VwW25bMF0udG9Mb3dlckNhc2UoKV0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlTG9jYWxlRGF0ZVRpbWUoZCwgc3RyaW5nLCBpKSB7XG4gICAgcmV0dXJuIHBhcnNlU3BlY2lmaWVyKGQsIGxvY2FsZV9kYXRlVGltZSwgc3RyaW5nLCBpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlTG9jYWxlRGF0ZShkLCBzdHJpbmcsIGkpIHtcbiAgICByZXR1cm4gcGFyc2VTcGVjaWZpZXIoZCwgbG9jYWxlX2RhdGUsIHN0cmluZywgaSk7XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZUxvY2FsZVRpbWUoZCwgc3RyaW5nLCBpKSB7XG4gICAgcmV0dXJuIHBhcnNlU3BlY2lmaWVyKGQsIGxvY2FsZV90aW1lLCBzdHJpbmcsIGkpO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0U2hvcnRXZWVrZGF5KGQpIHtcbiAgICByZXR1cm4gbG9jYWxlX3Nob3J0V2Vla2RheXNbZC5nZXREYXkoKV07XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRXZWVrZGF5KGQpIHtcbiAgICByZXR1cm4gbG9jYWxlX3dlZWtkYXlzW2QuZ2V0RGF5KCldO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0U2hvcnRNb250aChkKSB7XG4gICAgcmV0dXJuIGxvY2FsZV9zaG9ydE1vbnRoc1tkLmdldE1vbnRoKCldO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0TW9udGgoZCkge1xuICAgIHJldHVybiBsb2NhbGVfbW9udGhzW2QuZ2V0TW9udGgoKV07XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRQZXJpb2QoZCkge1xuICAgIHJldHVybiBsb2NhbGVfcGVyaW9kc1srKGQuZ2V0SG91cnMoKSA+PSAxMildO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0UXVhcnRlcihkKSB7XG4gICAgcmV0dXJuIDEgKyB+fihkLmdldE1vbnRoKCkgLyAzKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFVUQ1Nob3J0V2Vla2RheShkKSB7XG4gICAgcmV0dXJuIGxvY2FsZV9zaG9ydFdlZWtkYXlzW2QuZ2V0VVRDRGF5KCldO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0VVRDV2Vla2RheShkKSB7XG4gICAgcmV0dXJuIGxvY2FsZV93ZWVrZGF5c1tkLmdldFVUQ0RheSgpXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFVUQ1Nob3J0TW9udGgoZCkge1xuICAgIHJldHVybiBsb2NhbGVfc2hvcnRNb250aHNbZC5nZXRVVENNb250aCgpXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFVUQ01vbnRoKGQpIHtcbiAgICByZXR1cm4gbG9jYWxlX21vbnRoc1tkLmdldFVUQ01vbnRoKCldO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0VVRDUGVyaW9kKGQpIHtcbiAgICByZXR1cm4gbG9jYWxlX3BlcmlvZHNbKyhkLmdldFVUQ0hvdXJzKCkgPj0gMTIpXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFVUQ1F1YXJ0ZXIoZCkge1xuICAgIHJldHVybiAxICsgfn4oZC5nZXRVVENNb250aCgpIC8gMyk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGZvcm1hdDogZnVuY3Rpb24oc3BlY2lmaWVyKSB7XG4gICAgICB2YXIgZiA9IG5ld0Zvcm1hdChzcGVjaWZpZXIgKz0gXCJcIiwgZm9ybWF0cyk7XG4gICAgICBmLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7IHJldHVybiBzcGVjaWZpZXI7IH07XG4gICAgICByZXR1cm4gZjtcbiAgICB9LFxuICAgIHBhcnNlOiBmdW5jdGlvbihzcGVjaWZpZXIpIHtcbiAgICAgIHZhciBwID0gbmV3UGFyc2Uoc3BlY2lmaWVyICs9IFwiXCIsIGZhbHNlKTtcbiAgICAgIHAudG9TdHJpbmcgPSBmdW5jdGlvbigpIHsgcmV0dXJuIHNwZWNpZmllcjsgfTtcbiAgICAgIHJldHVybiBwO1xuICAgIH0sXG4gICAgdXRjRm9ybWF0OiBmdW5jdGlvbihzcGVjaWZpZXIpIHtcbiAgICAgIHZhciBmID0gbmV3Rm9ybWF0KHNwZWNpZmllciArPSBcIlwiLCB1dGNGb3JtYXRzKTtcbiAgICAgIGYudG9TdHJpbmcgPSBmdW5jdGlvbigpIHsgcmV0dXJuIHNwZWNpZmllcjsgfTtcbiAgICAgIHJldHVybiBmO1xuICAgIH0sXG4gICAgdXRjUGFyc2U6IGZ1bmN0aW9uKHNwZWNpZmllcikge1xuICAgICAgdmFyIHAgPSBuZXdQYXJzZShzcGVjaWZpZXIgKz0gXCJcIiwgdHJ1ZSk7XG4gICAgICBwLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7IHJldHVybiBzcGVjaWZpZXI7IH07XG4gICAgICByZXR1cm4gcDtcbiAgICB9XG4gIH07XG59XG5cbnZhciBwYWRzID0ge1wiLVwiOiBcIlwiLCBcIl9cIjogXCIgXCIsIFwiMFwiOiBcIjBcIn0sXG4gICAgbnVtYmVyUmUgPSAvXlxccypcXGQrLywgLy8gbm90ZTogaWdub3JlcyBuZXh0IGRpcmVjdGl2ZVxuICAgIHBlcmNlbnRSZSA9IC9eJS8sXG4gICAgcmVxdW90ZVJlID0gL1tcXFxcXiQqKz98W1xcXSgpLnt9XS9nO1xuXG5mdW5jdGlvbiBwYWQodmFsdWUsIGZpbGwsIHdpZHRoKSB7XG4gIHZhciBzaWduID0gdmFsdWUgPCAwID8gXCItXCIgOiBcIlwiLFxuICAgICAgc3RyaW5nID0gKHNpZ24gPyAtdmFsdWUgOiB2YWx1ZSkgKyBcIlwiLFxuICAgICAgbGVuZ3RoID0gc3RyaW5nLmxlbmd0aDtcbiAgcmV0dXJuIHNpZ24gKyAobGVuZ3RoIDwgd2lkdGggPyBuZXcgQXJyYXkod2lkdGggLSBsZW5ndGggKyAxKS5qb2luKGZpbGwpICsgc3RyaW5nIDogc3RyaW5nKTtcbn1cblxuZnVuY3Rpb24gcmVxdW90ZShzKSB7XG4gIHJldHVybiBzLnJlcGxhY2UocmVxdW90ZVJlLCBcIlxcXFwkJlwiKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0UmUobmFtZXMpIHtcbiAgcmV0dXJuIG5ldyBSZWdFeHAoXCJeKD86XCIgKyBuYW1lcy5tYXAocmVxdW90ZSkuam9pbihcInxcIikgKyBcIilcIiwgXCJpXCIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRMb29rdXAobmFtZXMpIHtcbiAgdmFyIG1hcCA9IHt9LCBpID0gLTEsIG4gPSBuYW1lcy5sZW5ndGg7XG4gIHdoaWxlICgrK2kgPCBuKSBtYXBbbmFtZXNbaV0udG9Mb3dlckNhc2UoKV0gPSBpO1xuICByZXR1cm4gbWFwO1xufVxuXG5mdW5jdGlvbiBwYXJzZVdlZWtkYXlOdW1iZXJTdW5kYXkoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDEpKTtcbiAgcmV0dXJuIG4gPyAoZC53ID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VXZWVrZGF5TnVtYmVyTW9uZGF5KGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAxKSk7XG4gIHJldHVybiBuID8gKGQudSA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlV2Vla051bWJlclN1bmRheShkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMikpO1xuICByZXR1cm4gbiA/IChkLlUgPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZVdlZWtOdW1iZXJJU08oZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDIpKTtcbiAgcmV0dXJuIG4gPyAoZC5WID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VXZWVrTnVtYmVyTW9uZGF5KGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAyKSk7XG4gIHJldHVybiBuID8gKGQuVyA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlRnVsbFllYXIoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDQpKTtcbiAgcmV0dXJuIG4gPyAoZC55ID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VZZWFyKGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAyKSk7XG4gIHJldHVybiBuID8gKGQueSA9ICtuWzBdICsgKCtuWzBdID4gNjggPyAxOTAwIDogMjAwMCksIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2Vab25lKGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IC9eKFopfChbKy1dXFxkXFxkKSg/Ojo/KFxcZFxcZCkpPy8uZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDYpKTtcbiAgcmV0dXJuIG4gPyAoZC5aID0gblsxXSA/IDAgOiAtKG5bMl0gKyAoblszXSB8fCBcIjAwXCIpKSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZVF1YXJ0ZXIoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDEpKTtcbiAgcmV0dXJuIG4gPyAoZC5xID0gblswXSAqIDMgLSAzLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlTW9udGhOdW1iZXIoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDIpKTtcbiAgcmV0dXJuIG4gPyAoZC5tID0gblswXSAtIDEsIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VEYXlPZk1vbnRoKGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAyKSk7XG4gIHJldHVybiBuID8gKGQuZCA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlRGF5T2ZZZWFyKGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAzKSk7XG4gIHJldHVybiBuID8gKGQubSA9IDAsIGQuZCA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlSG91cjI0KGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAyKSk7XG4gIHJldHVybiBuID8gKGQuSCA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlTWludXRlcyhkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMikpO1xuICByZXR1cm4gbiA/IChkLk0gPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZVNlY29uZHMoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDIpKTtcbiAgcmV0dXJuIG4gPyAoZC5TID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VNaWxsaXNlY29uZHMoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDMpKTtcbiAgcmV0dXJuIG4gPyAoZC5MID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VNaWNyb3NlY29uZHMoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDYpKTtcbiAgcmV0dXJuIG4gPyAoZC5MID0gTWF0aC5mbG9vcihuWzBdIC8gMTAwMCksIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VMaXRlcmFsUGVyY2VudChkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBwZXJjZW50UmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDEpKTtcbiAgcmV0dXJuIG4gPyBpICsgblswXS5sZW5ndGggOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VVbml4VGltZXN0YW1wKGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGkpKTtcbiAgcmV0dXJuIG4gPyAoZC5RID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VVbml4VGltZXN0YW1wU2Vjb25kcyhkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpKSk7XG4gIHJldHVybiBuID8gKGQucyA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdERheU9mTW9udGgoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0RGF0ZSgpLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0SG91cjI0KGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldEhvdXJzKCksIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRIb3VyMTIoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0SG91cnMoKSAlIDEyIHx8IDEyLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0RGF5T2ZZZWFyKGQsIHApIHtcbiAgcmV0dXJuIHBhZCgxICsgZDNUaW1lLnRpbWVEYXkuY291bnQoZDNUaW1lLnRpbWVZZWFyKGQpLCBkKSwgcCwgMyk7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdE1pbGxpc2Vjb25kcyhkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRNaWxsaXNlY29uZHMoKSwgcCwgMyk7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdE1pY3Jvc2Vjb25kcyhkLCBwKSB7XG4gIHJldHVybiBmb3JtYXRNaWxsaXNlY29uZHMoZCwgcCkgKyBcIjAwMFwiO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRNb250aE51bWJlcihkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRNb250aCgpICsgMSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdE1pbnV0ZXMoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0TWludXRlcygpLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0U2Vjb25kcyhkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRTZWNvbmRzKCksIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRXZWVrZGF5TnVtYmVyTW9uZGF5KGQpIHtcbiAgdmFyIGRheSA9IGQuZ2V0RGF5KCk7XG4gIHJldHVybiBkYXkgPT09IDAgPyA3IDogZGF5O1xufVxuXG5mdW5jdGlvbiBmb3JtYXRXZWVrTnVtYmVyU3VuZGF5KGQsIHApIHtcbiAgcmV0dXJuIHBhZChkM1RpbWUudGltZVN1bmRheS5jb3VudChkM1RpbWUudGltZVllYXIoZCkgLSAxLCBkKSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGRJU08oZCkge1xuICB2YXIgZGF5ID0gZC5nZXREYXkoKTtcbiAgcmV0dXJuIChkYXkgPj0gNCB8fCBkYXkgPT09IDApID8gZDNUaW1lLnRpbWVUaHVyc2RheShkKSA6IGQzVGltZS50aW1lVGh1cnNkYXkuY2VpbChkKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0V2Vla051bWJlcklTTyhkLCBwKSB7XG4gIGQgPSBkSVNPKGQpO1xuICByZXR1cm4gcGFkKGQzVGltZS50aW1lVGh1cnNkYXkuY291bnQoZDNUaW1lLnRpbWVZZWFyKGQpLCBkKSArIChkM1RpbWUudGltZVllYXIoZCkuZ2V0RGF5KCkgPT09IDQpLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0V2Vla2RheU51bWJlclN1bmRheShkKSB7XG4gIHJldHVybiBkLmdldERheSgpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRXZWVrTnVtYmVyTW9uZGF5KGQsIHApIHtcbiAgcmV0dXJuIHBhZChkM1RpbWUudGltZU1vbmRheS5jb3VudChkM1RpbWUudGltZVllYXIoZCkgLSAxLCBkKSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFllYXIoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0RnVsbFllYXIoKSAlIDEwMCwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFllYXJJU08oZCwgcCkge1xuICBkID0gZElTTyhkKTtcbiAgcmV0dXJuIHBhZChkLmdldEZ1bGxZZWFyKCkgJSAxMDAsIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRGdWxsWWVhcihkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRGdWxsWWVhcigpICUgMTAwMDAsIHAsIDQpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRGdWxsWWVhcklTTyhkLCBwKSB7XG4gIHZhciBkYXkgPSBkLmdldERheSgpO1xuICBkID0gKGRheSA+PSA0IHx8IGRheSA9PT0gMCkgPyBkM1RpbWUudGltZVRodXJzZGF5KGQpIDogZDNUaW1lLnRpbWVUaHVyc2RheS5jZWlsKGQpO1xuICByZXR1cm4gcGFkKGQuZ2V0RnVsbFllYXIoKSAlIDEwMDAwLCBwLCA0KTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0Wm9uZShkKSB7XG4gIHZhciB6ID0gZC5nZXRUaW1lem9uZU9mZnNldCgpO1xuICByZXR1cm4gKHogPiAwID8gXCItXCIgOiAoeiAqPSAtMSwgXCIrXCIpKVxuICAgICAgKyBwYWQoeiAvIDYwIHwgMCwgXCIwXCIsIDIpXG4gICAgICArIHBhZCh6ICUgNjAsIFwiMFwiLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDRGF5T2ZNb250aChkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRVVENEYXRlKCksIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENIb3VyMjQoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0VVRDSG91cnMoKSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ0hvdXIxMihkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRVVENIb3VycygpICUgMTIgfHwgMTIsIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENEYXlPZlllYXIoZCwgcCkge1xuICByZXR1cm4gcGFkKDEgKyBkM1RpbWUudXRjRGF5LmNvdW50KGQzVGltZS51dGNZZWFyKGQpLCBkKSwgcCwgMyk7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ01pbGxpc2Vjb25kcyhkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRVVENNaWxsaXNlY29uZHMoKSwgcCwgMyk7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ01pY3Jvc2Vjb25kcyhkLCBwKSB7XG4gIHJldHVybiBmb3JtYXRVVENNaWxsaXNlY29uZHMoZCwgcCkgKyBcIjAwMFwiO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENNb250aE51bWJlcihkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRVVENNb250aCgpICsgMSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ01pbnV0ZXMoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0VVRDTWludXRlcygpLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDU2Vjb25kcyhkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRVVENTZWNvbmRzKCksIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENXZWVrZGF5TnVtYmVyTW9uZGF5KGQpIHtcbiAgdmFyIGRvdyA9IGQuZ2V0VVRDRGF5KCk7XG4gIHJldHVybiBkb3cgPT09IDAgPyA3IDogZG93O1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENXZWVrTnVtYmVyU3VuZGF5KGQsIHApIHtcbiAgcmV0dXJuIHBhZChkM1RpbWUudXRjU3VuZGF5LmNvdW50KGQzVGltZS51dGNZZWFyKGQpIC0gMSwgZCksIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBVVENkSVNPKGQpIHtcbiAgdmFyIGRheSA9IGQuZ2V0VVRDRGF5KCk7XG4gIHJldHVybiAoZGF5ID49IDQgfHwgZGF5ID09PSAwKSA/IGQzVGltZS51dGNUaHVyc2RheShkKSA6IGQzVGltZS51dGNUaHVyc2RheS5jZWlsKGQpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENXZWVrTnVtYmVySVNPKGQsIHApIHtcbiAgZCA9IFVUQ2RJU08oZCk7XG4gIHJldHVybiBwYWQoZDNUaW1lLnV0Y1RodXJzZGF5LmNvdW50KGQzVGltZS51dGNZZWFyKGQpLCBkKSArIChkM1RpbWUudXRjWWVhcihkKS5nZXRVVENEYXkoKSA9PT0gNCksIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENXZWVrZGF5TnVtYmVyU3VuZGF5KGQpIHtcbiAgcmV0dXJuIGQuZ2V0VVRDRGF5KCk7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ1dlZWtOdW1iZXJNb25kYXkoZCwgcCkge1xuICByZXR1cm4gcGFkKGQzVGltZS51dGNNb25kYXkuY291bnQoZDNUaW1lLnV0Y1llYXIoZCkgLSAxLCBkKSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ1llYXIoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0VVRDRnVsbFllYXIoKSAlIDEwMCwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ1llYXJJU08oZCwgcCkge1xuICBkID0gVVRDZElTTyhkKTtcbiAgcmV0dXJuIHBhZChkLmdldFVUQ0Z1bGxZZWFyKCkgJSAxMDAsIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENGdWxsWWVhcihkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRVVENGdWxsWWVhcigpICUgMTAwMDAsIHAsIDQpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENGdWxsWWVhcklTTyhkLCBwKSB7XG4gIHZhciBkYXkgPSBkLmdldFVUQ0RheSgpO1xuICBkID0gKGRheSA+PSA0IHx8IGRheSA9PT0gMCkgPyBkM1RpbWUudXRjVGh1cnNkYXkoZCkgOiBkM1RpbWUudXRjVGh1cnNkYXkuY2VpbChkKTtcbiAgcmV0dXJuIHBhZChkLmdldFVUQ0Z1bGxZZWFyKCkgJSAxMDAwMCwgcCwgNCk7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ1pvbmUoKSB7XG4gIHJldHVybiBcIiswMDAwXCI7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdExpdGVyYWxQZXJjZW50KCkge1xuICByZXR1cm4gXCIlXCI7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVuaXhUaW1lc3RhbXAoZCkge1xuICByZXR1cm4gK2Q7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVuaXhUaW1lc3RhbXBTZWNvbmRzKGQpIHtcbiAgcmV0dXJuIE1hdGguZmxvb3IoK2QgLyAxMDAwKTtcbn1cblxudmFyIGxvY2FsZTtcblxuZGVmYXVsdExvY2FsZSh7XG4gIGRhdGVUaW1lOiBcIiV4LCAlWFwiLFxuICBkYXRlOiBcIiUtbS8lLWQvJVlcIixcbiAgdGltZTogXCIlLUk6JU06JVMgJXBcIixcbiAgcGVyaW9kczogW1wiQU1cIiwgXCJQTVwiXSxcbiAgZGF5czogW1wiU3VuZGF5XCIsIFwiTW9uZGF5XCIsIFwiVHVlc2RheVwiLCBcIldlZG5lc2RheVwiLCBcIlRodXJzZGF5XCIsIFwiRnJpZGF5XCIsIFwiU2F0dXJkYXlcIl0sXG4gIHNob3J0RGF5czogW1wiU3VuXCIsIFwiTW9uXCIsIFwiVHVlXCIsIFwiV2VkXCIsIFwiVGh1XCIsIFwiRnJpXCIsIFwiU2F0XCJdLFxuICBtb250aHM6IFtcIkphbnVhcnlcIiwgXCJGZWJydWFyeVwiLCBcIk1hcmNoXCIsIFwiQXByaWxcIiwgXCJNYXlcIiwgXCJKdW5lXCIsIFwiSnVseVwiLCBcIkF1Z3VzdFwiLCBcIlNlcHRlbWJlclwiLCBcIk9jdG9iZXJcIiwgXCJOb3ZlbWJlclwiLCBcIkRlY2VtYmVyXCJdLFxuICBzaG9ydE1vbnRoczogW1wiSmFuXCIsIFwiRmViXCIsIFwiTWFyXCIsIFwiQXByXCIsIFwiTWF5XCIsIFwiSnVuXCIsIFwiSnVsXCIsIFwiQXVnXCIsIFwiU2VwXCIsIFwiT2N0XCIsIFwiTm92XCIsIFwiRGVjXCJdXG59KTtcblxuZnVuY3Rpb24gZGVmYXVsdExvY2FsZShkZWZpbml0aW9uKSB7XG4gIGxvY2FsZSA9IGZvcm1hdExvY2FsZShkZWZpbml0aW9uKTtcbiAgZXhwb3J0cy50aW1lRm9ybWF0ID0gbG9jYWxlLmZvcm1hdDtcbiAgZXhwb3J0cy50aW1lUGFyc2UgPSBsb2NhbGUucGFyc2U7XG4gIGV4cG9ydHMudXRjRm9ybWF0ID0gbG9jYWxlLnV0Y0Zvcm1hdDtcbiAgZXhwb3J0cy51dGNQYXJzZSA9IGxvY2FsZS51dGNQYXJzZTtcbiAgcmV0dXJuIGxvY2FsZTtcbn1cblxudmFyIGlzb1NwZWNpZmllciA9IFwiJVktJW0tJWRUJUg6JU06JVMuJUxaXCI7XG5cbmZ1bmN0aW9uIGZvcm1hdElzb05hdGl2ZShkYXRlKSB7XG4gIHJldHVybiBkYXRlLnRvSVNPU3RyaW5nKCk7XG59XG5cbnZhciBmb3JtYXRJc28gPSBEYXRlLnByb3RvdHlwZS50b0lTT1N0cmluZ1xuICAgID8gZm9ybWF0SXNvTmF0aXZlXG4gICAgOiBleHBvcnRzLnV0Y0Zvcm1hdChpc29TcGVjaWZpZXIpO1xuXG5mdW5jdGlvbiBwYXJzZUlzb05hdGl2ZShzdHJpbmcpIHtcbiAgdmFyIGRhdGUgPSBuZXcgRGF0ZShzdHJpbmcpO1xuICByZXR1cm4gaXNOYU4oZGF0ZSkgPyBudWxsIDogZGF0ZTtcbn1cblxudmFyIHBhcnNlSXNvID0gK25ldyBEYXRlKFwiMjAwMC0wMS0wMVQwMDowMDowMC4wMDBaXCIpXG4gICAgPyBwYXJzZUlzb05hdGl2ZVxuICAgIDogZXhwb3J0cy51dGNQYXJzZShpc29TcGVjaWZpZXIpO1xuXG5leHBvcnRzLmlzb0Zvcm1hdCA9IGZvcm1hdElzbztcbmV4cG9ydHMuaXNvUGFyc2UgPSBwYXJzZUlzbztcbmV4cG9ydHMudGltZUZvcm1hdERlZmF1bHRMb2NhbGUgPSBkZWZhdWx0TG9jYWxlO1xuZXhwb3J0cy50aW1lRm9ybWF0TG9jYWxlID0gZm9ybWF0TG9jYWxlO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG59KSk7XG4iLCIvLyBodHRwczovL2QzanMub3JnL2QzLXRpbWUvIHYxLjEuMCBDb3B5cmlnaHQgMjAxOSBNaWtlIEJvc3RvY2tcbihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG50eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgPyBmYWN0b3J5KGV4cG9ydHMpIDpcbnR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJ2V4cG9ydHMnXSwgZmFjdG9yeSkgOlxuKGdsb2JhbCA9IGdsb2JhbCB8fCBzZWxmLCBmYWN0b3J5KGdsb2JhbC5kMyA9IGdsb2JhbC5kMyB8fCB7fSkpO1xufSh0aGlzLCBmdW5jdGlvbiAoZXhwb3J0cykgeyAndXNlIHN0cmljdCc7XG5cbnZhciB0MCA9IG5ldyBEYXRlLFxuICAgIHQxID0gbmV3IERhdGU7XG5cbmZ1bmN0aW9uIG5ld0ludGVydmFsKGZsb29yaSwgb2Zmc2V0aSwgY291bnQsIGZpZWxkKSB7XG5cbiAgZnVuY3Rpb24gaW50ZXJ2YWwoZGF0ZSkge1xuICAgIHJldHVybiBmbG9vcmkoZGF0ZSA9IGFyZ3VtZW50cy5sZW5ndGggPT09IDAgPyBuZXcgRGF0ZSA6IG5ldyBEYXRlKCtkYXRlKSksIGRhdGU7XG4gIH1cblxuICBpbnRlcnZhbC5mbG9vciA9IGZ1bmN0aW9uKGRhdGUpIHtcbiAgICByZXR1cm4gZmxvb3JpKGRhdGUgPSBuZXcgRGF0ZSgrZGF0ZSkpLCBkYXRlO1xuICB9O1xuXG4gIGludGVydmFsLmNlaWwgPSBmdW5jdGlvbihkYXRlKSB7XG4gICAgcmV0dXJuIGZsb29yaShkYXRlID0gbmV3IERhdGUoZGF0ZSAtIDEpKSwgb2Zmc2V0aShkYXRlLCAxKSwgZmxvb3JpKGRhdGUpLCBkYXRlO1xuICB9O1xuXG4gIGludGVydmFsLnJvdW5kID0gZnVuY3Rpb24oZGF0ZSkge1xuICAgIHZhciBkMCA9IGludGVydmFsKGRhdGUpLFxuICAgICAgICBkMSA9IGludGVydmFsLmNlaWwoZGF0ZSk7XG4gICAgcmV0dXJuIGRhdGUgLSBkMCA8IGQxIC0gZGF0ZSA/IGQwIDogZDE7XG4gIH07XG5cbiAgaW50ZXJ2YWwub2Zmc2V0ID0gZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICAgIHJldHVybiBvZmZzZXRpKGRhdGUgPSBuZXcgRGF0ZSgrZGF0ZSksIHN0ZXAgPT0gbnVsbCA/IDEgOiBNYXRoLmZsb29yKHN0ZXApKSwgZGF0ZTtcbiAgfTtcblxuICBpbnRlcnZhbC5yYW5nZSA9IGZ1bmN0aW9uKHN0YXJ0LCBzdG9wLCBzdGVwKSB7XG4gICAgdmFyIHJhbmdlID0gW10sIHByZXZpb3VzO1xuICAgIHN0YXJ0ID0gaW50ZXJ2YWwuY2VpbChzdGFydCk7XG4gICAgc3RlcCA9IHN0ZXAgPT0gbnVsbCA/IDEgOiBNYXRoLmZsb29yKHN0ZXApO1xuICAgIGlmICghKHN0YXJ0IDwgc3RvcCkgfHwgIShzdGVwID4gMCkpIHJldHVybiByYW5nZTsgLy8gYWxzbyBoYW5kbGVzIEludmFsaWQgRGF0ZVxuICAgIGRvIHJhbmdlLnB1c2gocHJldmlvdXMgPSBuZXcgRGF0ZSgrc3RhcnQpKSwgb2Zmc2V0aShzdGFydCwgc3RlcCksIGZsb29yaShzdGFydCk7XG4gICAgd2hpbGUgKHByZXZpb3VzIDwgc3RhcnQgJiYgc3RhcnQgPCBzdG9wKTtcbiAgICByZXR1cm4gcmFuZ2U7XG4gIH07XG5cbiAgaW50ZXJ2YWwuZmlsdGVyID0gZnVuY3Rpb24odGVzdCkge1xuICAgIHJldHVybiBuZXdJbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gICAgICBpZiAoZGF0ZSA+PSBkYXRlKSB3aGlsZSAoZmxvb3JpKGRhdGUpLCAhdGVzdChkYXRlKSkgZGF0ZS5zZXRUaW1lKGRhdGUgLSAxKTtcbiAgICB9LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gICAgICBpZiAoZGF0ZSA+PSBkYXRlKSB7XG4gICAgICAgIGlmIChzdGVwIDwgMCkgd2hpbGUgKCsrc3RlcCA8PSAwKSB7XG4gICAgICAgICAgd2hpbGUgKG9mZnNldGkoZGF0ZSwgLTEpLCAhdGVzdChkYXRlKSkge30gLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1lbXB0eVxuICAgICAgICB9IGVsc2Ugd2hpbGUgKC0tc3RlcCA+PSAwKSB7XG4gICAgICAgICAgd2hpbGUgKG9mZnNldGkoZGF0ZSwgKzEpLCAhdGVzdChkYXRlKSkge30gLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1lbXB0eVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgaWYgKGNvdW50KSB7XG4gICAgaW50ZXJ2YWwuY291bnQgPSBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gICAgICB0MC5zZXRUaW1lKCtzdGFydCksIHQxLnNldFRpbWUoK2VuZCk7XG4gICAgICBmbG9vcmkodDApLCBmbG9vcmkodDEpO1xuICAgICAgcmV0dXJuIE1hdGguZmxvb3IoY291bnQodDAsIHQxKSk7XG4gICAgfTtcblxuICAgIGludGVydmFsLmV2ZXJ5ID0gZnVuY3Rpb24oc3RlcCkge1xuICAgICAgc3RlcCA9IE1hdGguZmxvb3Ioc3RlcCk7XG4gICAgICByZXR1cm4gIWlzRmluaXRlKHN0ZXApIHx8ICEoc3RlcCA+IDApID8gbnVsbFxuICAgICAgICAgIDogIShzdGVwID4gMSkgPyBpbnRlcnZhbFxuICAgICAgICAgIDogaW50ZXJ2YWwuZmlsdGVyKGZpZWxkXG4gICAgICAgICAgICAgID8gZnVuY3Rpb24oZCkgeyByZXR1cm4gZmllbGQoZCkgJSBzdGVwID09PSAwOyB9XG4gICAgICAgICAgICAgIDogZnVuY3Rpb24oZCkgeyByZXR1cm4gaW50ZXJ2YWwuY291bnQoMCwgZCkgJSBzdGVwID09PSAwOyB9KTtcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIGludGVydmFsO1xufVxuXG52YXIgbWlsbGlzZWNvbmQgPSBuZXdJbnRlcnZhbChmdW5jdGlvbigpIHtcbiAgLy8gbm9vcFxufSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICBkYXRlLnNldFRpbWUoK2RhdGUgKyBzdGVwKTtcbn0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgcmV0dXJuIGVuZCAtIHN0YXJ0O1xufSk7XG5cbi8vIEFuIG9wdGltaXplZCBpbXBsZW1lbnRhdGlvbiBmb3IgdGhpcyBzaW1wbGUgY2FzZS5cbm1pbGxpc2Vjb25kLmV2ZXJ5ID0gZnVuY3Rpb24oaykge1xuICBrID0gTWF0aC5mbG9vcihrKTtcbiAgaWYgKCFpc0Zpbml0ZShrKSB8fCAhKGsgPiAwKSkgcmV0dXJuIG51bGw7XG4gIGlmICghKGsgPiAxKSkgcmV0dXJuIG1pbGxpc2Vjb25kO1xuICByZXR1cm4gbmV3SW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICAgIGRhdGUuc2V0VGltZShNYXRoLmZsb29yKGRhdGUgLyBrKSAqIGspO1xuICB9LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gICAgZGF0ZS5zZXRUaW1lKCtkYXRlICsgc3RlcCAqIGspO1xuICB9LCBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gICAgcmV0dXJuIChlbmQgLSBzdGFydCkgLyBrO1xuICB9KTtcbn07XG52YXIgbWlsbGlzZWNvbmRzID0gbWlsbGlzZWNvbmQucmFuZ2U7XG5cbnZhciBkdXJhdGlvblNlY29uZCA9IDFlMztcbnZhciBkdXJhdGlvbk1pbnV0ZSA9IDZlNDtcbnZhciBkdXJhdGlvbkhvdXIgPSAzNmU1O1xudmFyIGR1cmF0aW9uRGF5ID0gODY0ZTU7XG52YXIgZHVyYXRpb25XZWVrID0gNjA0OGU1O1xuXG52YXIgc2Vjb25kID0gbmV3SW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICBkYXRlLnNldFRpbWUoZGF0ZSAtIGRhdGUuZ2V0TWlsbGlzZWNvbmRzKCkpO1xufSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICBkYXRlLnNldFRpbWUoK2RhdGUgKyBzdGVwICogZHVyYXRpb25TZWNvbmQpO1xufSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICByZXR1cm4gKGVuZCAtIHN0YXJ0KSAvIGR1cmF0aW9uU2Vjb25kO1xufSwgZnVuY3Rpb24oZGF0ZSkge1xuICByZXR1cm4gZGF0ZS5nZXRVVENTZWNvbmRzKCk7XG59KTtcbnZhciBzZWNvbmRzID0gc2Vjb25kLnJhbmdlO1xuXG52YXIgbWludXRlID0gbmV3SW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICBkYXRlLnNldFRpbWUoZGF0ZSAtIGRhdGUuZ2V0TWlsbGlzZWNvbmRzKCkgLSBkYXRlLmdldFNlY29uZHMoKSAqIGR1cmF0aW9uU2Vjb25kKTtcbn0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgZGF0ZS5zZXRUaW1lKCtkYXRlICsgc3RlcCAqIGR1cmF0aW9uTWludXRlKTtcbn0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgcmV0dXJuIChlbmQgLSBzdGFydCkgLyBkdXJhdGlvbk1pbnV0ZTtcbn0sIGZ1bmN0aW9uKGRhdGUpIHtcbiAgcmV0dXJuIGRhdGUuZ2V0TWludXRlcygpO1xufSk7XG52YXIgbWludXRlcyA9IG1pbnV0ZS5yYW5nZTtcblxudmFyIGhvdXIgPSBuZXdJbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gIGRhdGUuc2V0VGltZShkYXRlIC0gZGF0ZS5nZXRNaWxsaXNlY29uZHMoKSAtIGRhdGUuZ2V0U2Vjb25kcygpICogZHVyYXRpb25TZWNvbmQgLSBkYXRlLmdldE1pbnV0ZXMoKSAqIGR1cmF0aW9uTWludXRlKTtcbn0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgZGF0ZS5zZXRUaW1lKCtkYXRlICsgc3RlcCAqIGR1cmF0aW9uSG91cik7XG59LCBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gIHJldHVybiAoZW5kIC0gc3RhcnQpIC8gZHVyYXRpb25Ib3VyO1xufSwgZnVuY3Rpb24oZGF0ZSkge1xuICByZXR1cm4gZGF0ZS5nZXRIb3VycygpO1xufSk7XG52YXIgaG91cnMgPSBob3VyLnJhbmdlO1xuXG52YXIgZGF5ID0gbmV3SW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICBkYXRlLnNldEhvdXJzKDAsIDAsIDAsIDApO1xufSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICBkYXRlLnNldERhdGUoZGF0ZS5nZXREYXRlKCkgKyBzdGVwKTtcbn0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgcmV0dXJuIChlbmQgLSBzdGFydCAtIChlbmQuZ2V0VGltZXpvbmVPZmZzZXQoKSAtIHN0YXJ0LmdldFRpbWV6b25lT2Zmc2V0KCkpICogZHVyYXRpb25NaW51dGUpIC8gZHVyYXRpb25EYXk7XG59LCBmdW5jdGlvbihkYXRlKSB7XG4gIHJldHVybiBkYXRlLmdldERhdGUoKSAtIDE7XG59KTtcbnZhciBkYXlzID0gZGF5LnJhbmdlO1xuXG5mdW5jdGlvbiB3ZWVrZGF5KGkpIHtcbiAgcmV0dXJuIG5ld0ludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgICBkYXRlLnNldERhdGUoZGF0ZS5nZXREYXRlKCkgLSAoZGF0ZS5nZXREYXkoKSArIDcgLSBpKSAlIDcpO1xuICAgIGRhdGUuc2V0SG91cnMoMCwgMCwgMCwgMCk7XG4gIH0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgICBkYXRlLnNldERhdGUoZGF0ZS5nZXREYXRlKCkgKyBzdGVwICogNyk7XG4gIH0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgICByZXR1cm4gKGVuZCAtIHN0YXJ0IC0gKGVuZC5nZXRUaW1lem9uZU9mZnNldCgpIC0gc3RhcnQuZ2V0VGltZXpvbmVPZmZzZXQoKSkgKiBkdXJhdGlvbk1pbnV0ZSkgLyBkdXJhdGlvbldlZWs7XG4gIH0pO1xufVxuXG52YXIgc3VuZGF5ID0gd2Vla2RheSgwKTtcbnZhciBtb25kYXkgPSB3ZWVrZGF5KDEpO1xudmFyIHR1ZXNkYXkgPSB3ZWVrZGF5KDIpO1xudmFyIHdlZG5lc2RheSA9IHdlZWtkYXkoMyk7XG52YXIgdGh1cnNkYXkgPSB3ZWVrZGF5KDQpO1xudmFyIGZyaWRheSA9IHdlZWtkYXkoNSk7XG52YXIgc2F0dXJkYXkgPSB3ZWVrZGF5KDYpO1xuXG52YXIgc3VuZGF5cyA9IHN1bmRheS5yYW5nZTtcbnZhciBtb25kYXlzID0gbW9uZGF5LnJhbmdlO1xudmFyIHR1ZXNkYXlzID0gdHVlc2RheS5yYW5nZTtcbnZhciB3ZWRuZXNkYXlzID0gd2VkbmVzZGF5LnJhbmdlO1xudmFyIHRodXJzZGF5cyA9IHRodXJzZGF5LnJhbmdlO1xudmFyIGZyaWRheXMgPSBmcmlkYXkucmFuZ2U7XG52YXIgc2F0dXJkYXlzID0gc2F0dXJkYXkucmFuZ2U7XG5cbnZhciBtb250aCA9IG5ld0ludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgZGF0ZS5zZXREYXRlKDEpO1xuICBkYXRlLnNldEhvdXJzKDAsIDAsIDAsIDApO1xufSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICBkYXRlLnNldE1vbnRoKGRhdGUuZ2V0TW9udGgoKSArIHN0ZXApO1xufSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICByZXR1cm4gZW5kLmdldE1vbnRoKCkgLSBzdGFydC5nZXRNb250aCgpICsgKGVuZC5nZXRGdWxsWWVhcigpIC0gc3RhcnQuZ2V0RnVsbFllYXIoKSkgKiAxMjtcbn0sIGZ1bmN0aW9uKGRhdGUpIHtcbiAgcmV0dXJuIGRhdGUuZ2V0TW9udGgoKTtcbn0pO1xudmFyIG1vbnRocyA9IG1vbnRoLnJhbmdlO1xuXG52YXIgeWVhciA9IG5ld0ludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgZGF0ZS5zZXRNb250aCgwLCAxKTtcbiAgZGF0ZS5zZXRIb3VycygwLCAwLCAwLCAwKTtcbn0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgZGF0ZS5zZXRGdWxsWWVhcihkYXRlLmdldEZ1bGxZZWFyKCkgKyBzdGVwKTtcbn0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgcmV0dXJuIGVuZC5nZXRGdWxsWWVhcigpIC0gc3RhcnQuZ2V0RnVsbFllYXIoKTtcbn0sIGZ1bmN0aW9uKGRhdGUpIHtcbiAgcmV0dXJuIGRhdGUuZ2V0RnVsbFllYXIoKTtcbn0pO1xuXG4vLyBBbiBvcHRpbWl6ZWQgaW1wbGVtZW50YXRpb24gZm9yIHRoaXMgc2ltcGxlIGNhc2UuXG55ZWFyLmV2ZXJ5ID0gZnVuY3Rpb24oaykge1xuICByZXR1cm4gIWlzRmluaXRlKGsgPSBNYXRoLmZsb29yKGspKSB8fCAhKGsgPiAwKSA/IG51bGwgOiBuZXdJbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gICAgZGF0ZS5zZXRGdWxsWWVhcihNYXRoLmZsb29yKGRhdGUuZ2V0RnVsbFllYXIoKSAvIGspICogayk7XG4gICAgZGF0ZS5zZXRNb250aCgwLCAxKTtcbiAgICBkYXRlLnNldEhvdXJzKDAsIDAsIDAsIDApO1xuICB9LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gICAgZGF0ZS5zZXRGdWxsWWVhcihkYXRlLmdldEZ1bGxZZWFyKCkgKyBzdGVwICogayk7XG4gIH0pO1xufTtcbnZhciB5ZWFycyA9IHllYXIucmFuZ2U7XG5cbnZhciB1dGNNaW51dGUgPSBuZXdJbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gIGRhdGUuc2V0VVRDU2Vjb25kcygwLCAwKTtcbn0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgZGF0ZS5zZXRUaW1lKCtkYXRlICsgc3RlcCAqIGR1cmF0aW9uTWludXRlKTtcbn0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgcmV0dXJuIChlbmQgLSBzdGFydCkgLyBkdXJhdGlvbk1pbnV0ZTtcbn0sIGZ1bmN0aW9uKGRhdGUpIHtcbiAgcmV0dXJuIGRhdGUuZ2V0VVRDTWludXRlcygpO1xufSk7XG52YXIgdXRjTWludXRlcyA9IHV0Y01pbnV0ZS5yYW5nZTtcblxudmFyIHV0Y0hvdXIgPSBuZXdJbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gIGRhdGUuc2V0VVRDTWludXRlcygwLCAwLCAwKTtcbn0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgZGF0ZS5zZXRUaW1lKCtkYXRlICsgc3RlcCAqIGR1cmF0aW9uSG91cik7XG59LCBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gIHJldHVybiAoZW5kIC0gc3RhcnQpIC8gZHVyYXRpb25Ib3VyO1xufSwgZnVuY3Rpb24oZGF0ZSkge1xuICByZXR1cm4gZGF0ZS5nZXRVVENIb3VycygpO1xufSk7XG52YXIgdXRjSG91cnMgPSB1dGNIb3VyLnJhbmdlO1xuXG52YXIgdXRjRGF5ID0gbmV3SW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICBkYXRlLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xufSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICBkYXRlLnNldFVUQ0RhdGUoZGF0ZS5nZXRVVENEYXRlKCkgKyBzdGVwKTtcbn0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgcmV0dXJuIChlbmQgLSBzdGFydCkgLyBkdXJhdGlvbkRheTtcbn0sIGZ1bmN0aW9uKGRhdGUpIHtcbiAgcmV0dXJuIGRhdGUuZ2V0VVRDRGF0ZSgpIC0gMTtcbn0pO1xudmFyIHV0Y0RheXMgPSB1dGNEYXkucmFuZ2U7XG5cbmZ1bmN0aW9uIHV0Y1dlZWtkYXkoaSkge1xuICByZXR1cm4gbmV3SW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICAgIGRhdGUuc2V0VVRDRGF0ZShkYXRlLmdldFVUQ0RhdGUoKSAtIChkYXRlLmdldFVUQ0RheSgpICsgNyAtIGkpICUgNyk7XG4gICAgZGF0ZS5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgfSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICAgIGRhdGUuc2V0VVRDRGF0ZShkYXRlLmdldFVUQ0RhdGUoKSArIHN0ZXAgKiA3KTtcbiAgfSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICAgIHJldHVybiAoZW5kIC0gc3RhcnQpIC8gZHVyYXRpb25XZWVrO1xuICB9KTtcbn1cblxudmFyIHV0Y1N1bmRheSA9IHV0Y1dlZWtkYXkoMCk7XG52YXIgdXRjTW9uZGF5ID0gdXRjV2Vla2RheSgxKTtcbnZhciB1dGNUdWVzZGF5ID0gdXRjV2Vla2RheSgyKTtcbnZhciB1dGNXZWRuZXNkYXkgPSB1dGNXZWVrZGF5KDMpO1xudmFyIHV0Y1RodXJzZGF5ID0gdXRjV2Vla2RheSg0KTtcbnZhciB1dGNGcmlkYXkgPSB1dGNXZWVrZGF5KDUpO1xudmFyIHV0Y1NhdHVyZGF5ID0gdXRjV2Vla2RheSg2KTtcblxudmFyIHV0Y1N1bmRheXMgPSB1dGNTdW5kYXkucmFuZ2U7XG52YXIgdXRjTW9uZGF5cyA9IHV0Y01vbmRheS5yYW5nZTtcbnZhciB1dGNUdWVzZGF5cyA9IHV0Y1R1ZXNkYXkucmFuZ2U7XG52YXIgdXRjV2VkbmVzZGF5cyA9IHV0Y1dlZG5lc2RheS5yYW5nZTtcbnZhciB1dGNUaHVyc2RheXMgPSB1dGNUaHVyc2RheS5yYW5nZTtcbnZhciB1dGNGcmlkYXlzID0gdXRjRnJpZGF5LnJhbmdlO1xudmFyIHV0Y1NhdHVyZGF5cyA9IHV0Y1NhdHVyZGF5LnJhbmdlO1xuXG52YXIgdXRjTW9udGggPSBuZXdJbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gIGRhdGUuc2V0VVRDRGF0ZSgxKTtcbiAgZGF0ZS5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbn0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgZGF0ZS5zZXRVVENNb250aChkYXRlLmdldFVUQ01vbnRoKCkgKyBzdGVwKTtcbn0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgcmV0dXJuIGVuZC5nZXRVVENNb250aCgpIC0gc3RhcnQuZ2V0VVRDTW9udGgoKSArIChlbmQuZ2V0VVRDRnVsbFllYXIoKSAtIHN0YXJ0LmdldFVUQ0Z1bGxZZWFyKCkpICogMTI7XG59LCBmdW5jdGlvbihkYXRlKSB7XG4gIHJldHVybiBkYXRlLmdldFVUQ01vbnRoKCk7XG59KTtcbnZhciB1dGNNb250aHMgPSB1dGNNb250aC5yYW5nZTtcblxudmFyIHV0Y1llYXIgPSBuZXdJbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gIGRhdGUuc2V0VVRDTW9udGgoMCwgMSk7XG4gIGRhdGUuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG59LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gIGRhdGUuc2V0VVRDRnVsbFllYXIoZGF0ZS5nZXRVVENGdWxsWWVhcigpICsgc3RlcCk7XG59LCBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gIHJldHVybiBlbmQuZ2V0VVRDRnVsbFllYXIoKSAtIHN0YXJ0LmdldFVUQ0Z1bGxZZWFyKCk7XG59LCBmdW5jdGlvbihkYXRlKSB7XG4gIHJldHVybiBkYXRlLmdldFVUQ0Z1bGxZZWFyKCk7XG59KTtcblxuLy8gQW4gb3B0aW1pemVkIGltcGxlbWVudGF0aW9uIGZvciB0aGlzIHNpbXBsZSBjYXNlLlxudXRjWWVhci5ldmVyeSA9IGZ1bmN0aW9uKGspIHtcbiAgcmV0dXJuICFpc0Zpbml0ZShrID0gTWF0aC5mbG9vcihrKSkgfHwgIShrID4gMCkgPyBudWxsIDogbmV3SW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICAgIGRhdGUuc2V0VVRDRnVsbFllYXIoTWF0aC5mbG9vcihkYXRlLmdldFVUQ0Z1bGxZZWFyKCkgLyBrKSAqIGspO1xuICAgIGRhdGUuc2V0VVRDTW9udGgoMCwgMSk7XG4gICAgZGF0ZS5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgfSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICAgIGRhdGUuc2V0VVRDRnVsbFllYXIoZGF0ZS5nZXRVVENGdWxsWWVhcigpICsgc3RlcCAqIGspO1xuICB9KTtcbn07XG52YXIgdXRjWWVhcnMgPSB1dGNZZWFyLnJhbmdlO1xuXG5leHBvcnRzLnRpbWVEYXkgPSBkYXk7XG5leHBvcnRzLnRpbWVEYXlzID0gZGF5cztcbmV4cG9ydHMudGltZUZyaWRheSA9IGZyaWRheTtcbmV4cG9ydHMudGltZUZyaWRheXMgPSBmcmlkYXlzO1xuZXhwb3J0cy50aW1lSG91ciA9IGhvdXI7XG5leHBvcnRzLnRpbWVIb3VycyA9IGhvdXJzO1xuZXhwb3J0cy50aW1lSW50ZXJ2YWwgPSBuZXdJbnRlcnZhbDtcbmV4cG9ydHMudGltZU1pbGxpc2Vjb25kID0gbWlsbGlzZWNvbmQ7XG5leHBvcnRzLnRpbWVNaWxsaXNlY29uZHMgPSBtaWxsaXNlY29uZHM7XG5leHBvcnRzLnRpbWVNaW51dGUgPSBtaW51dGU7XG5leHBvcnRzLnRpbWVNaW51dGVzID0gbWludXRlcztcbmV4cG9ydHMudGltZU1vbmRheSA9IG1vbmRheTtcbmV4cG9ydHMudGltZU1vbmRheXMgPSBtb25kYXlzO1xuZXhwb3J0cy50aW1lTW9udGggPSBtb250aDtcbmV4cG9ydHMudGltZU1vbnRocyA9IG1vbnRocztcbmV4cG9ydHMudGltZVNhdHVyZGF5ID0gc2F0dXJkYXk7XG5leHBvcnRzLnRpbWVTYXR1cmRheXMgPSBzYXR1cmRheXM7XG5leHBvcnRzLnRpbWVTZWNvbmQgPSBzZWNvbmQ7XG5leHBvcnRzLnRpbWVTZWNvbmRzID0gc2Vjb25kcztcbmV4cG9ydHMudGltZVN1bmRheSA9IHN1bmRheTtcbmV4cG9ydHMudGltZVN1bmRheXMgPSBzdW5kYXlzO1xuZXhwb3J0cy50aW1lVGh1cnNkYXkgPSB0aHVyc2RheTtcbmV4cG9ydHMudGltZVRodXJzZGF5cyA9IHRodXJzZGF5cztcbmV4cG9ydHMudGltZVR1ZXNkYXkgPSB0dWVzZGF5O1xuZXhwb3J0cy50aW1lVHVlc2RheXMgPSB0dWVzZGF5cztcbmV4cG9ydHMudGltZVdlZG5lc2RheSA9IHdlZG5lc2RheTtcbmV4cG9ydHMudGltZVdlZG5lc2RheXMgPSB3ZWRuZXNkYXlzO1xuZXhwb3J0cy50aW1lV2VlayA9IHN1bmRheTtcbmV4cG9ydHMudGltZVdlZWtzID0gc3VuZGF5cztcbmV4cG9ydHMudGltZVllYXIgPSB5ZWFyO1xuZXhwb3J0cy50aW1lWWVhcnMgPSB5ZWFycztcbmV4cG9ydHMudXRjRGF5ID0gdXRjRGF5O1xuZXhwb3J0cy51dGNEYXlzID0gdXRjRGF5cztcbmV4cG9ydHMudXRjRnJpZGF5ID0gdXRjRnJpZGF5O1xuZXhwb3J0cy51dGNGcmlkYXlzID0gdXRjRnJpZGF5cztcbmV4cG9ydHMudXRjSG91ciA9IHV0Y0hvdXI7XG5leHBvcnRzLnV0Y0hvdXJzID0gdXRjSG91cnM7XG5leHBvcnRzLnV0Y01pbGxpc2Vjb25kID0gbWlsbGlzZWNvbmQ7XG5leHBvcnRzLnV0Y01pbGxpc2Vjb25kcyA9IG1pbGxpc2Vjb25kcztcbmV4cG9ydHMudXRjTWludXRlID0gdXRjTWludXRlO1xuZXhwb3J0cy51dGNNaW51dGVzID0gdXRjTWludXRlcztcbmV4cG9ydHMudXRjTW9uZGF5ID0gdXRjTW9uZGF5O1xuZXhwb3J0cy51dGNNb25kYXlzID0gdXRjTW9uZGF5cztcbmV4cG9ydHMudXRjTW9udGggPSB1dGNNb250aDtcbmV4cG9ydHMudXRjTW9udGhzID0gdXRjTW9udGhzO1xuZXhwb3J0cy51dGNTYXR1cmRheSA9IHV0Y1NhdHVyZGF5O1xuZXhwb3J0cy51dGNTYXR1cmRheXMgPSB1dGNTYXR1cmRheXM7XG5leHBvcnRzLnV0Y1NlY29uZCA9IHNlY29uZDtcbmV4cG9ydHMudXRjU2Vjb25kcyA9IHNlY29uZHM7XG5leHBvcnRzLnV0Y1N1bmRheSA9IHV0Y1N1bmRheTtcbmV4cG9ydHMudXRjU3VuZGF5cyA9IHV0Y1N1bmRheXM7XG5leHBvcnRzLnV0Y1RodXJzZGF5ID0gdXRjVGh1cnNkYXk7XG5leHBvcnRzLnV0Y1RodXJzZGF5cyA9IHV0Y1RodXJzZGF5cztcbmV4cG9ydHMudXRjVHVlc2RheSA9IHV0Y1R1ZXNkYXk7XG5leHBvcnRzLnV0Y1R1ZXNkYXlzID0gdXRjVHVlc2RheXM7XG5leHBvcnRzLnV0Y1dlZG5lc2RheSA9IHV0Y1dlZG5lc2RheTtcbmV4cG9ydHMudXRjV2VkbmVzZGF5cyA9IHV0Y1dlZG5lc2RheXM7XG5leHBvcnRzLnV0Y1dlZWsgPSB1dGNTdW5kYXk7XG5leHBvcnRzLnV0Y1dlZWtzID0gdXRjU3VuZGF5cztcbmV4cG9ydHMudXRjWWVhciA9IHV0Y1llYXI7XG5leHBvcnRzLnV0Y1llYXJzID0gdXRjWWVhcnM7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbn0pKTtcbiIsImltcG9ydCB7IGJhclZhbHVlcyB9IGZyb20gXCIuL2Jhcl9jaGFydF92YWx1ZXMuanNcIjtcclxuaW1wb3J0IHsgc2VsZWN0LCBzZWxlY3RBbGwgfSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XHJcblxyXG5jb25zdCBkMyA9IHsgc2VsZWN0LCBzZWxlY3RBbGwgfTtcclxuXHJcbiQoXCIjYmFyX2JhY2tncm91bmRfY3BcIikuc3BlY3RydW0oe1xyXG4gIHR5cGU6IFwiY29sb3JcIixcclxuICBwcmVmZXJyZWRGb3JtYXQ6IFwicmdiXCIsXHJcbiAgc2hvd0lucHV0OiB0cnVlLFxyXG4gIHNob3dCdXR0b25zOiBmYWxzZSxcclxuICBhbGxvd0VtcHR5OiBmYWxzZSxcclxuICBtb3ZlOiBmdW5jdGlvbiAoY29sb3IpIHtcclxuICAgIGJhclZhbHVlcy5iYWNrZ3JvdWRDUCA9IGNvbG9yLnRvUmdiU3RyaW5nKCk7XHJcblxyXG4gICAgZDMuc2VsZWN0KFwiI2Jhcl9jaGFydFwiKS5zdHlsZShcImJhY2tncm91bmQtY29sb3JcIiwgYmFyVmFsdWVzLmJhY2tncm91ZENQKTtcclxuXHJcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImJhcl9iYWNrZ3JvdW5kX2NwX3NwYW5cIikuaW5uZXJIVE1MID1cclxuICAgICAgYmFyVmFsdWVzLmJhY2tncm91ZENQO1xyXG4gIH0sXHJcbn0pO1xyXG4kKFwiI2JhcnNfY3BcIikuc3BlY3RydW0oe1xyXG4gIHR5cGU6IFwiY29sb3JcIixcclxuICBwcmVmZXJyZWRGb3JtYXQ6IFwicmdiXCIsXHJcbiAgc2hvd0lucHV0OiB0cnVlLFxyXG4gIHNob3dCdXR0b25zOiBmYWxzZSxcclxuICBhbGxvd0VtcHR5OiBmYWxzZSxcclxuICBtb3ZlOiBmdW5jdGlvbiAoY29sb3IpIHtcclxuICAgIGJhclZhbHVlcy5iYXJzQ1AgPSBjb2xvci50b1JnYlN0cmluZygpO1xyXG5cclxuICAgIGQzLnNlbGVjdEFsbChcIi5iYXJzXCIpLnN0eWxlKFwiZmlsbFwiLCBiYXJWYWx1ZXMuYmFyc0NQKTtcclxuXHJcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImJhcl9jcF9zcGFuXCIpLmlubmVySFRNTCA9IGJhclZhbHVlcy5iYXJzQ1A7XHJcbiAgfSxcclxufSk7XHJcbiQoXCIjYmFyX3RpY2tfY3BcIikuc3BlY3RydW0oe1xyXG4gIHR5cGU6IFwiY29sb3JcIixcclxuICBwcmVmZXJyZWRGb3JtYXQ6IFwicmdiXCIsXHJcbiAgc2hvd0lucHV0OiB0cnVlLFxyXG4gIHNob3dCdXR0b25zOiBmYWxzZSxcclxuICBhbGxvd0VtcHR5OiBmYWxzZSxcclxuICBtb3ZlOiBmdW5jdGlvbiAoY29sb3IpIHtcclxuICAgIGJhclZhbHVlcy50aWNrQ1AgPSBjb2xvci50b1JnYlN0cmluZygpO1xyXG5cclxuICAgIGQzLnNlbGVjdEFsbChcIiNiYXJfY2hhcnQgPiBnID4gZyA+IC50aWNrID4gdGV4dFwiKS5zdHlsZShcclxuICAgICAgXCJmaWxsXCIsXHJcbiAgICAgIGJhclZhbHVlcy50aWNrQ1BcclxuICAgICk7XHJcblxyXG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJiYXJfdGlja19jcF9zcGFuXCIpLmlubmVySFRNTCA9IGJhclZhbHVlcy50aWNrQ1A7XHJcbiAgfSxcclxufSk7XHJcbiQoXCIjYmFyX3RpdGxlX2NwXCIpLnNwZWN0cnVtKHtcclxuICB0eXBlOiBcImNvbG9yXCIsXHJcbiAgcHJlZmVycmVkRm9ybWF0OiBcInJnYlwiLFxyXG4gIHNob3dJbnB1dDogdHJ1ZSxcclxuICBzaG93QnV0dG9uczogZmFsc2UsXHJcbiAgYWxsb3dFbXB0eTogZmFsc2UsXHJcbiAgbW92ZTogZnVuY3Rpb24gKGNvbG9yKSB7XHJcbiAgICBiYXJWYWx1ZXMudGl0bGVDUCA9IGNvbG9yLnRvUmdiU3RyaW5nKCk7XHJcblxyXG4gICAgZDMuc2VsZWN0KFwiI2Jhcl90aXRsZVwiKS5zdHlsZShcImZpbGxcIiwgYmFyVmFsdWVzLnRpdGxlQ1ApO1xyXG5cclxuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYmFyX3RpdGxlX2NwX3NwYW5cIikuaW5uZXJIVE1MID0gYmFyVmFsdWVzLnRpdGxlQ1A7XHJcbiAgfSxcclxufSk7XHJcbiQoXCIjYmFyX3hheGlzX3RpdGxlX2NwXCIpLnNwZWN0cnVtKHtcclxuICB0eXBlOiBcImNvbG9yXCIsXHJcbiAgcHJlZmVycmVkRm9ybWF0OiBcInJnYlwiLFxyXG4gIHNob3dJbnB1dDogdHJ1ZSxcclxuICBzaG93QnV0dG9uczogZmFsc2UsXHJcbiAgYWxsb3dFbXB0eTogZmFsc2UsXHJcbiAgbW92ZTogZnVuY3Rpb24gKGNvbG9yKSB7XHJcbiAgICBiYXJWYWx1ZXMueEF4aXNUaXRsZUNQID0gY29sb3IudG9SZ2JTdHJpbmcoKTtcclxuXHJcbiAgICBkMy5zZWxlY3QoXCIjYmFyX3hheGlzX3RpdGxlXCIpLnN0eWxlKFwiZmlsbFwiLCBiYXJWYWx1ZXMueEF4aXNUaXRsZUNQKTtcclxuXHJcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImJhcl94X3RpdGxlX2NwX3NwYW5cIikuaW5uZXJIVE1MID1cclxuICAgICAgYmFyVmFsdWVzLnhBeGlzVGl0bGVDUDtcclxuICB9LFxyXG59KTtcclxuJChcIiNiYXJfeWF4aXNfdGl0bGVfY3BcIikuc3BlY3RydW0oe1xyXG4gIHR5cGU6IFwiY29sb3JcIixcclxuICBwcmVmZXJyZWRGb3JtYXQ6IFwicmdiXCIsXHJcbiAgc2hvd0lucHV0OiB0cnVlLFxyXG4gIHNob3dCdXR0b25zOiBmYWxzZSxcclxuICBhbGxvd0VtcHR5OiBmYWxzZSxcclxuICBtb3ZlOiBmdW5jdGlvbiAoY29sb3IpIHtcclxuICAgIGJhclZhbHVlcy55QXhpc1RpdGxlQ1AgPSBjb2xvci50b1JnYlN0cmluZygpO1xyXG5cclxuICAgIGQzLnNlbGVjdChcIiNiYXJfeWF4aXNfdGl0bGVcIikuc3R5bGUoXCJmaWxsXCIsIGJhclZhbHVlcy55QXhpc1RpdGxlQ1ApO1xyXG5cclxuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYmFyX3lfdGl0bGVfY3Bfc3BhblwiKS5pbm5lckhUTUwgPVxyXG4gICAgICBiYXJWYWx1ZXMueUF4aXNUaXRsZUNQO1xyXG4gIH0sXHJcbn0pO1xyXG4kKFwiI2Jhcl9ncmlkX2NwXCIpLnNwZWN0cnVtKHtcclxuICB0eXBlOiBcImNvbG9yXCIsXHJcbiAgcHJlZmVycmVkRm9ybWF0OiBcInJnYlwiLFxyXG4gIHNob3dJbnB1dDogdHJ1ZSxcclxuICBzaG93QnV0dG9uczogZmFsc2UsXHJcbiAgYWxsb3dFbXB0eTogZmFsc2UsXHJcbiAgbW92ZTogZnVuY3Rpb24gKGNvbG9yKSB7XHJcbiAgICBiYXJWYWx1ZXMuZ3JpZENQID0gY29sb3IudG9SZ2JTdHJpbmcoKTtcclxuXHJcbiAgICBkMy5zZWxlY3RBbGwoXCIuYmFyX2dyaWRcIikuc3R5bGUoXCJjb2xvclwiLCBiYXJWYWx1ZXMuZ3JpZENQKTtcclxuXHJcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImJhcl9ncmlkX2NwX3NwYW5cIikuaW5uZXJIVE1MID0gYmFyVmFsdWVzLmdyaWRDUDtcclxuICB9LFxyXG59KTtcclxuJChcIiNiYXJfeGF4aXNfbGluZV9jcFwiKS5zcGVjdHJ1bSh7XHJcbiAgdHlwZTogXCJjb2xvclwiLFxyXG4gIHByZWZlcnJlZEZvcm1hdDogXCJyZ2JcIixcclxuICBzaG93SW5wdXQ6IHRydWUsXHJcbiAgc2hvd0J1dHRvbnM6IGZhbHNlLFxyXG4gIGFsbG93RW1wdHk6IGZhbHNlLFxyXG4gIG1vdmU6IGZ1bmN0aW9uIChjb2xvcikge1xyXG4gICAgYmFyVmFsdWVzLnhBeGlzTGluZUNQID0gY29sb3IudG9SZ2JTdHJpbmcoKTtcclxuXHJcbiAgICBkMy5zZWxlY3QoXCIjYmFyX3hfYXhpcyA+IHBhdGhcIikuc3R5bGUoXCJzdHJva2VcIiwgYmFyVmFsdWVzLnhBeGlzTGluZUNQKTtcclxuXHJcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImJhcl94X2xpbmVfY3Bfc3BhblwiKS5pbm5lckhUTUwgPVxyXG4gICAgICBiYXJWYWx1ZXMueEF4aXNMaW5lQ1A7XHJcbiAgfSxcclxufSk7XHJcbiQoXCIjYmFyX3lheGlzX2xpbmVfY3BcIikuc3BlY3RydW0oe1xyXG4gIHR5cGU6IFwiY29sb3JcIixcclxuICBwcmVmZXJyZWRGb3JtYXQ6IFwicmdiXCIsXHJcbiAgc2hvd0lucHV0OiB0cnVlLFxyXG4gIHNob3dCdXR0b25zOiBmYWxzZSxcclxuICBhbGxvd0VtcHR5OiBmYWxzZSxcclxuICBtb3ZlOiBmdW5jdGlvbiAoY29sb3IpIHtcclxuICAgIGJhclZhbHVlcy55QXhpc0xpbmVDUCA9IGNvbG9yLnRvUmdiU3RyaW5nKCk7XHJcblxyXG4gICAgZDMuc2VsZWN0KFwiI2Jhcl95X2F4aXMgPiBwYXRoXCIpLnN0eWxlKFwic3Ryb2tlXCIsIGJhclZhbHVlcy55QXhpc0xpbmVDUCk7XHJcblxyXG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJiYXJfeV9saW5lX2NwX3NwYW5cIikuaW5uZXJIVE1MID1cclxuICAgICAgYmFyVmFsdWVzLnlBeGlzTGluZUNQO1xyXG4gIH0sXHJcbn0pO1xyXG4kKFwiI2Jhcl9ib3JkZXJfY3BcIikuc3BlY3RydW0oe1xyXG4gIHR5cGU6IFwiY29sb3JcIixcclxuICBwcmVmZXJyZWRGb3JtYXQ6IFwicmdiXCIsXHJcbiAgc2hvd0lucHV0OiB0cnVlLFxyXG4gIHNob3dCdXR0b25zOiBmYWxzZSxcclxuICBhbGxvd0VtcHR5OiBmYWxzZSxcclxuICBtb3ZlOiBmdW5jdGlvbiAoY29sb3IpIHtcclxuICAgIGJhclZhbHVlcy5ib3JkZXJDUCA9IGNvbG9yLnRvUmdiU3RyaW5nKCk7XHJcblxyXG4gICAgZDMuc2VsZWN0QWxsKFwiLmJhcnNcIikuc3R5bGUoXCJzdHJva2VcIiwgYmFyVmFsdWVzLmJvcmRlckNQKTtcclxuXHJcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImJhcl9ib3JkZXJfY3Bfc3BhblwiKS5pbm5lckhUTUwgPVxyXG4gICAgICBiYXJWYWx1ZXMuYm9yZGVyQ1A7XHJcbiAgfSxcclxufSk7XHJcbiIsImltcG9ydCB7IGJhclZhbHVlcyB9IGZyb20gXCIuL2Jhcl9jaGFydF92YWx1ZXMuanNcIjtcclxuXHJcbmltcG9ydCB7IHNlbGVjdCwgc2VsZWN0QWxsIH0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xyXG5pbXBvcnQgeyBzY2FsZUJhbmQsIHNjYWxlTGluZWFyIH0gZnJvbSBcImQzLXNjYWxlXCI7XHJcbmltcG9ydCB7IGF4aXNCb3R0b20sIGF4aXNMZWZ0IH0gZnJvbSBcImQzLWF4aXNcIjtcclxuaW1wb3J0IHsgcmFuZ2UsIG1heCB9IGZyb20gXCJkMy1hcnJheVwiO1xyXG5pbXBvcnQgeyBldmVudCBhcyBjdXJyZW50RXZlbnQgfSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XHJcblxyXG5jb25zdCBkMyA9IHtcclxuICBzZWxlY3QsXHJcbiAgc2VsZWN0QWxsLFxyXG4gIHNjYWxlQmFuZCxcclxuICBzY2FsZUxpbmVhcixcclxuICBheGlzQm90dG9tLFxyXG4gIGF4aXNMZWZ0LFxyXG4gIHJhbmdlLFxyXG4gIG1heCxcclxufTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBiYXJDaGFydChcclxuICBkaXJlY3Rpb24sXHJcbiAgYmFyVGl0bGVJbnB1dFZhbHVlLFxyXG4gIGJhclhBeGlzVGl0bGVJbnB1dFZhbHVlLFxyXG4gIGJhcllBeGlzVGl0bGVJbnB1dFZhbHVlLFxyXG4gIGJhclRpdGxlU2xpZGVyVmFsdWUsXHJcbiAgYmFyWEF4aXNUaXRsZVNsaWRlclZhbHVlLFxyXG4gIGJhcllBeGlzVGl0bGVTbGlkZXJWYWx1ZSxcclxuICBiYXJYQXhpc0dyaWRDaGVja2JveFZhbHVlLFxyXG4gIGJhcllBeGlzR3JpZENoZWNrYm94VmFsdWUsXHJcbiAgYmFySG92ZXJDaGVja2JveFZhbHVlLFxyXG4gIGJhclhBeGlzTGluZUNoZWNrYm94VmFsdWUsXHJcbiAgYmFyWUF4aXNMaW5lQ2hlY2tib3hWYWx1ZSxcclxuICBiYXJUb29sdGlwQ2hlY2tib3hWYWx1ZSxcclxuICBiYXJCYWNrZ3JvdWRDUFZhbHVlLFxyXG4gIGJhckJhcnNDUFZhbHVlLFxyXG4gIGJhclRpY2tDUFZhbHVlLFxyXG4gIGJhclRpdGxlQ1BWYWx1ZSxcclxuICBiYXJYQXhpc1RpdGxlQ1BWYWx1ZSxcclxuICBiYXJZQXhpc1RpdGxlQ1BWYWx1ZSxcclxuICBiYXJHcmlkQ1BWYWx1ZSxcclxuICBiYXJYQXhpc0xpbmVDUFZhbHVlLFxyXG4gIGJhcllBeGlzTGluZUNQVmFsdWUsXHJcbiAgYmFyQm9yZGVyQ1BWYWx1ZVxyXG4pIHtcclxuICBsZXQgY2hhcnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImJhcl9jaGFydFwiKTtcclxuXHJcbiAgaWYgKGNoYXJ0KSB7XHJcbiAgICBjaGFydC5yZW1vdmUoKTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGNyZWF0ZURhdGEoeCwgeSwgbnVtKSB7XHJcbiAgICBsZXQgYXJyID0gW107XHJcbiAgICBsZXQgb2JqTnVtID0gbnVtICsgMTtcclxuICAgIGZvciAobGV0IGkgPSAxOyBpIDwgb2JqTnVtOyBpKyspIHtcclxuICAgICAgbGV0IG9iaiA9IHtcclxuICAgICAgICBbeF06IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDExICsgMSksXHJcbiAgICAgICAgW3ldOiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAxMSArIDEpLFxyXG4gICAgICB9O1xyXG4gICAgICBhcnIucHVzaChvYmopO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGFycjtcclxuICB9XHJcblxyXG4gIGNvbnN0IGRhdGEgPSBjcmVhdGVEYXRhKFwieFwiLCBcInlcIiwgMTApO1xyXG5cclxuICBjb25zdCBtYXJnaW4gPSB7IHRvcDogODAsIHJpZ2h0OiA1MCwgYm90dG9tOiA4MCwgbGVmdDogNzAgfTtcclxuXHJcbiAgY29uc3Qgc3ZnID0gZDNcclxuICAgIC5zZWxlY3QoXCIjYmFyX2RpdlwiKVxyXG4gICAgLmFwcGVuZChcInN2Z1wiKVxyXG4gICAgLmF0dHIoXCJpZFwiLCBcImJhcl9jaGFydFwiKVxyXG4gICAgLmF0dHIoXCJ3aWR0aFwiLCBcIjEwMCVcIilcclxuICAgIC5hdHRyKFwiaGVpZ2h0XCIsIFwiMTAwJVwiKTtcclxuXHJcbiAgY29uc3QgZyA9IHN2Z1xyXG4gICAgLmFwcGVuZChcImdcIilcclxuICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIFwidHJhbnNsYXRlKFwiICsgbWFyZ2luLmxlZnQgKyBcIixcIiArIG1hcmdpbi50b3AgKyBcIilcIik7XHJcblxyXG4gIGNvbnN0IHVzYWJsZUJvdW5kcyA9IHN2Zy5ub2RlKCkuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksXHJcbiAgICB1c2FibGVCb3VuZFdpZHRoID0gdXNhYmxlQm91bmRzLndpZHRoIC0gbWFyZ2luLmxlZnQgLSBtYXJnaW4ucmlnaHQ7XHJcblxyXG4gIGNvbnN0IHRpdGxlID0gZy5hcHBlbmQoXCJ0ZXh0XCIpLmF0dHIoXCJpZFwiLCBcImJhcl90aXRsZVwiKS50ZXh0KFwiV2VhdGhlclwiKTtcclxuXHJcbiAgY29uc3QgeEF4aXNUaXRsZSA9IGdcclxuICAgIC5hcHBlbmQoXCJ0ZXh0XCIpXHJcbiAgICAuYXR0cihcImlkXCIsIFwiYmFyX3hheGlzX3RpdGxlXCIpXHJcbiAgICAudGV4dChcIkRheXNcIik7XHJcblxyXG4gIGNvbnN0IHlBeGlzVGl0bGUgPSBnXHJcbiAgICAuYXBwZW5kKFwidGV4dFwiKVxyXG4gICAgLmF0dHIoXCJpZFwiLCBcImJhcl95YXhpc190aXRsZVwiKVxyXG4gICAgLnRleHQoXCJUZW1wZXJhdHVyZVwiKTtcclxuXHJcbiAgY29uc3QgeEF4aXMgPSBnLmFwcGVuZChcImdcIikuYXR0cihcImlkXCIsIFwiYmFyX3hfYXhpc1wiKTtcclxuXHJcbiAgY29uc3QgeUF4aXMgPSBnLmFwcGVuZChcImdcIikuYXR0cihcImlkXCIsIFwiYmFyX3lfYXhpc1wiKTtcclxuXHJcbiAgY29uc3QgeEdyaWQgPSBnXHJcbiAgICAuYXBwZW5kKFwiZ1wiKVxyXG4gICAgLmF0dHIoXCJjbGFzc1wiLCBcImJhcl9ncmlkXCIpXHJcbiAgICAuYXR0cihcImlkXCIsIFwiYmFyX3hfZ3JpZFwiKTtcclxuXHJcbiAgY29uc3QgeUdyaWQgPSBnXHJcbiAgICAuYXBwZW5kKFwiZ1wiKVxyXG4gICAgLmF0dHIoXCJjbGFzc1wiLCBcImJhcl9ncmlkXCIpXHJcbiAgICAuYXR0cihcImlkXCIsIFwiYmFyX3lfZ3JpZFwiKTtcclxuXHJcbiAgaWYgKGRpcmVjdGlvbiA9PSBcImhvcml6b250YWxcIikge1xyXG4gICAgY29uc3QgeFNjYWxlID0gZDMuc2NhbGVMaW5lYXIoKTtcclxuXHJcbiAgICBjb25zdCB5U2NhbGUgPSBkMy5zY2FsZUJhbmQoKS5wYWRkaW5nKDAuMyk7XHJcblxyXG4gICAgZnVuY3Rpb24gbWFrZV94X2dyaWRsaW5lcygpIHtcclxuICAgICAgcmV0dXJuIGQzLmF4aXNCb3R0b20oeFNjYWxlKS50aWNrcygpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIG1ha2VfeV9ncmlkbGluZXMoKSB7XHJcbiAgICAgIHJldHVybiBkMy5heGlzTGVmdCh5U2NhbGUpLnRpY2tzKCk7XHJcbiAgICB9XHJcblxyXG4gICAgbGV0IGJhclRpdGxlU2xpZGVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJiYXJfdGl0bGVfc2xpZGVyXCIpO1xyXG4gICAgbGV0IGJhclhBeGlzVGl0bGVTbGlkZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImJhcl94YXhpc190aXRsZV9zbGlkZXJcIik7XHJcbiAgICBsZXQgYmFyV2lkdGhTcGFuID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJiYXJfd2lkdGhfc3BhblwiKTtcclxuXHJcbiAgICBmdW5jdGlvbiBkcmF3KCkge1xyXG4gICAgICBjb25zdCBib3VuZHMgPSBzdmcubm9kZSgpLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLFxyXG4gICAgICAgIHdpZHRoID0gYm91bmRzLndpZHRoIC0gbWFyZ2luLmxlZnQgLSBtYXJnaW4ucmlnaHQsXHJcbiAgICAgICAgd2lkdGgyID0gYm91bmRzLndpZHRoLFxyXG4gICAgICAgIGhlaWdodCA9IGJvdW5kcy5oZWlnaHQgLSBtYXJnaW4udG9wIC0gbWFyZ2luLmJvdHRvbTtcclxuXHJcbiAgICAgIGJhclRpdGxlU2xpZGVyLm1heCA9IHdpZHRoO1xyXG4gICAgICBiYXJYQXhpc1RpdGxlU2xpZGVyLm1heCA9IHdpZHRoO1xyXG5cclxuICAgICAgYmFyVGl0bGVTbGlkZXIudmFsdWUgPSB3aWR0aCAvIDI7XHJcbiAgICAgIGJhclhBeGlzVGl0bGVTbGlkZXIudmFsdWUgPSB3aWR0aCAvIDI7XHJcblxyXG4gICAgICBiYXJXaWR0aFNwYW4uaW5uZXJIVE1MID0gTWF0aC5yb3VuZCh3aWR0aDIpIC0gMjA7XHJcblxyXG4gICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImJhcl90aXRsZV9zbGlkZXJfc3BhblwiKS5pbm5lckhUTUwgPSB3aWR0aCAvIDI7XHJcbiAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYmFyX3hfdGl0bGVfc2xpZGVyX3NwYW5cIikuaW5uZXJIVE1MID0gd2lkdGggLyAyO1xyXG5cclxuICAgICAgYmFyVmFsdWVzLnRpdGxlU2xpZGVyID0gd2lkdGggLyAyO1xyXG4gICAgICBiYXJWYWx1ZXMueEF4aXNUaXRsZVNsaWRlciA9IHdpZHRoIC8gMjtcclxuXHJcbiAgICAgIHhTY2FsZS5yYW5nZVJvdW5kKFswLCB3aWR0aF0pO1xyXG4gICAgICB5U2NhbGUucmFuZ2VSb3VuZChbaGVpZ2h0LCAwXSk7XHJcblxyXG4gICAgICB4QXhpc1xyXG4gICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIFwidHJhbnNsYXRlKDAsXCIgKyBoZWlnaHQgKyBcIilcIilcclxuICAgICAgICAuY2FsbChkMy5heGlzQm90dG9tKHhTY2FsZSkudGlja3MoKSk7XHJcblxyXG4gICAgICB5QXhpcy5jYWxsKGQzLmF4aXNMZWZ0KHlTY2FsZSkudGlja3MoKSk7XHJcblxyXG4gICAgICBjb25zdCB4QXhpc0xpbmUgPSBkMy5zZWxlY3QoXCIjYmFyX2NoYXJ0ID4gZyA+IGcueEF4aXMgPiBwYXRoXCIpO1xyXG4gICAgICBjb25zdCB5QXhpc0xpbmUgPSBkMy5zZWxlY3QoXCIjYmFyX2NoYXJ0ID4gZyA+IGcueUF4aXMgPiBwYXRoXCIpO1xyXG5cclxuICAgICAgeEF4aXNMaW5lLmF0dHIoXCJpZFwiLCBcImJhcl94X2F4aXNfbGluZVwiKTtcclxuICAgICAgeUF4aXNMaW5lLmF0dHIoXCJpZFwiLCBcImJhcl95X2F4aXNfbGluZVwiKTtcclxuXHJcbiAgICAgIHhHcmlkXHJcbiAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgXCJ0cmFuc2xhdGUoMCxcIiArIGhlaWdodCArIFwiKVwiKVxyXG4gICAgICAgIC5jYWxsKG1ha2VfeF9ncmlkbGluZXMoKS50aWNrU2l6ZSgtaGVpZ2h0KS50aWNrRm9ybWF0KFwiXCIpKTtcclxuXHJcbiAgICAgIHlHcmlkLmNhbGwobWFrZV95X2dyaWRsaW5lcygpLnRpY2tTaXplKC13aWR0aCkudGlja0Zvcm1hdChcIlwiKSk7XHJcblxyXG4gICAgICB0aXRsZVxyXG4gICAgICAgIC5hdHRyKFwieFwiLCB3aWR0aCAvIDIpXHJcbiAgICAgICAgLmF0dHIoXCJ5XCIsIC00MClcclxuICAgICAgICAuYXR0cihcImZvbnQtc2l6ZVwiLCBcIjEuMWVtXCIpXHJcbiAgICAgICAgLmF0dHIoXCJ0ZXh0LWFuY2hvclwiLCBcIm1pZGRsZVwiKTtcclxuXHJcbiAgICAgIHhBeGlzVGl0bGVcclxuICAgICAgICAuYXR0cihcInhcIiwgd2lkdGggLyAyKVxyXG4gICAgICAgIC5hdHRyKFwieVwiLCBoZWlnaHQgKyBtYXJnaW4udG9wIC0gMzApXHJcbiAgICAgICAgLmF0dHIoXCJmb250LXNpemVcIiwgXCIwLjllbVwiKVxyXG4gICAgICAgIC5hdHRyKFwidGV4dC1hbmNob3JcIiwgXCJtaWRkbGVcIik7XHJcblxyXG4gICAgICB5QXhpc1RpdGxlXHJcbiAgICAgICAgLy8uYXR0cihcInhcIiwgNSAqIC0yOClcclxuICAgICAgICAuYXR0cihcInlcIiwgLTQwKVxyXG4gICAgICAgIC5hdHRyKFwiZm9udC1zaXplXCIsIFwiMC45ZW1cIilcclxuICAgICAgICAuYXR0cihcInRleHQtYW5jaG9yXCIsIFwibWlkZGxlXCIpXHJcbiAgICAgICAgLnN0eWxlKFwidHJhbnNmb3JtXCIsIFwicm90YXRlKDI3MGRlZylcIik7XHJcblxyXG4gICAgICBjb25zdCBiYXJzID0gZy5zZWxlY3RBbGwoXCJyZWN0XCIpLmRhdGEoZGF0YSk7XHJcblxyXG4gICAgICBiYXJzLmV4aXQoKS5yZW1vdmUoKTtcclxuXHJcbiAgICAgIGJhcnNcclxuICAgICAgICAuZW50ZXIoKVxyXG4gICAgICAgIC5hcHBlbmQoXCJyZWN0XCIpXHJcbiAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcImJhcnNcIilcclxuXHJcbiAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCBmdW5jdGlvbiAoZCwgaSkge1xyXG4gICAgICAgICAgcmV0dXJuIHhTY2FsZShkLngpO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLmF0dHIoXCJ5XCIsIGZ1bmN0aW9uIChkLCBpKSB7XHJcbiAgICAgICAgICByZXR1cm4geVNjYWxlKGkpO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgeVNjYWxlLmJhbmR3aWR0aCgpKVxyXG4gICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIFwidHJhbnNsYXRlKFwiICsgMCArIFwiLDApXCIpO1xyXG5cclxuICAgICAgYmFyc1xyXG4gICAgICAgIC5hdHRyKFwid2lkdGhcIiwgZnVuY3Rpb24gKGQsIGkpIHtcclxuICAgICAgICAgIHJldHVybiB4U2NhbGUoZC54KTtcclxuICAgICAgICB9KVxyXG4gICAgICAgIC5hdHRyKFwieVwiLCBmdW5jdGlvbiAoZCwgaSkge1xyXG4gICAgICAgICAgcmV0dXJuIHlTY2FsZShpKTtcclxuICAgICAgICB9KVxyXG4gICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIHlTY2FsZS5iYW5kd2lkdGgoKSlcclxuICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBcInRyYW5zbGF0ZShcIiArIDAgKiAxICsgXCIsMClcIik7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gbG9hZERhdGEoKSB7XHJcbiAgICAgIHlTY2FsZS5kb21haW4oZDMucmFuZ2UoMCwgZGF0YS5sZW5ndGgpKTtcclxuICAgICAgeFNjYWxlLmRvbWFpbihbXHJcbiAgICAgICAgMCxcclxuICAgICAgICBkMy5tYXgoZGF0YSwgZnVuY3Rpb24gKGQpIHtcclxuICAgICAgICAgIHJldHVybiBkLng7XHJcbiAgICAgICAgfSksXHJcbiAgICAgIF0pO1xyXG5cclxuICAgICAgZHJhdygpO1xyXG4gICAgfVxyXG5cclxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwicmVzaXplXCIsIGRyYXcpO1xyXG4gICAgbG9hZERhdGEoKTtcclxuXHJcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2Jhcl94X2dyaWQgPiBnOm50aC1jaGlsZCgyKSA+IGxpbmVcIikucmVtb3ZlKCk7XHJcblxyXG4gICAgbGV0IGJhckhvcml6b250YWxDaGVja2JveCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXHJcbiAgICAgIFwiI2Jhcl9ob3Jpem9udGFsX2NoZWNrYm94XCJcclxuICAgICk7XHJcbiAgICBsZXQgYmFyVmVydGljYWxDaGVja2JveCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjYmFyX3ZlcnRpY2FsX2NoZWNrYm94XCIpO1xyXG5cclxuICAgIGJhclZlcnRpY2FsQ2hlY2tib3guYWRkRXZlbnRMaXN0ZW5lcihcImNoYW5nZVwiLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwicmVzaXplXCIsIGRyYXcpO1xyXG4gICAgfSk7XHJcbiAgICBiYXJIb3Jpem9udGFsQ2hlY2tib3guYWRkRXZlbnRMaXN0ZW5lcihcImNoYW5nZVwiLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwicmVzaXplXCIsIGRyYXcpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgY29uc3QgbmF2QmFyQnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNuYXZfYmFyX2J1dHRvblwiKTtcclxuICAgIGNvbnN0IG5hdkxpbmVCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI25hdl9saW5lX2J1dHRvblwiKTtcclxuICAgIGNvbnN0IG5hdlBpZUJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjbmF2X3BpZV9idXR0b25cIik7XHJcblxyXG4gICAgbmF2TGluZUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZnVuY3Rpb24gKCkge1xyXG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLCBkcmF3KTtcclxuICAgIH0pO1xyXG4gICAgbmF2UGllQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwicmVzaXplXCIsIGRyYXcpO1xyXG4gICAgfSk7XHJcbiAgfSBlbHNlIGlmIChkaXJlY3Rpb24gPT0gXCJ2ZXJ0aWNhbFwiKSB7XHJcbiAgICBjb25zdCB4U2NhbGUgPSBkMy5zY2FsZUJhbmQoKS5wYWRkaW5nKDAuMyk7XHJcblxyXG4gICAgY29uc3QgeVNjYWxlID0gZDMuc2NhbGVMaW5lYXIoKTtcclxuXHJcbiAgICBmdW5jdGlvbiBtYWtlX3hfZ3JpZGxpbmVzKCkge1xyXG4gICAgICByZXR1cm4gZDMuYXhpc0JvdHRvbSh4U2NhbGUpLnRpY2tzKCk7XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBtYWtlX3lfZ3JpZGxpbmVzKCkge1xyXG4gICAgICByZXR1cm4gZDMuYXhpc0xlZnQoeVNjYWxlKS50aWNrcygpO1xyXG4gICAgfVxyXG5cclxuICAgIGxldCBiYXJUaXRsZVNsaWRlciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYmFyX3RpdGxlX3NsaWRlclwiKTtcclxuICAgIGxldCBiYXJYQXhpc1RpdGxlU2xpZGVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJiYXJfeGF4aXNfdGl0bGVfc2xpZGVyXCIpO1xyXG4gICAgbGV0IGJhcldpZHRoU3BhbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYmFyX3dpZHRoX3NwYW5cIik7XHJcblxyXG4gICAgZnVuY3Rpb24gZHJhdygpIHtcclxuICAgICAgY29uc3QgYm91bmRzID0gc3ZnLm5vZGUoKS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSxcclxuICAgICAgICB3aWR0aCA9IGJvdW5kcy53aWR0aCAtIG1hcmdpbi5sZWZ0IC0gbWFyZ2luLnJpZ2h0LFxyXG4gICAgICAgIHdpZHRoMiA9IGJvdW5kcy53aWR0aCxcclxuICAgICAgICBoZWlnaHQgPSBib3VuZHMuaGVpZ2h0IC0gbWFyZ2luLnRvcCAtIG1hcmdpbi5ib3R0b207XHJcblxyXG4gICAgICBiYXJUaXRsZVNsaWRlci5tYXggPSB3aWR0aDtcclxuICAgICAgYmFyWEF4aXNUaXRsZVNsaWRlci5tYXggPSB3aWR0aDtcclxuXHJcbiAgICAgIGJhclRpdGxlU2xpZGVyLnZhbHVlID0gd2lkdGggLyAyO1xyXG4gICAgICBiYXJYQXhpc1RpdGxlU2xpZGVyLnZhbHVlID0gd2lkdGggLyAyO1xyXG5cclxuICAgICAgYmFyV2lkdGhTcGFuLmlubmVySFRNTCA9IE1hdGgucm91bmQod2lkdGgyKSAtIDIwO1xyXG5cclxuICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJiYXJfdGl0bGVfc2xpZGVyX3NwYW5cIikuaW5uZXJIVE1MID0gd2lkdGggLyAyO1xyXG4gICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImJhcl94X3RpdGxlX3NsaWRlcl9zcGFuXCIpLmlubmVySFRNTCA9IHdpZHRoIC8gMjtcclxuXHJcbiAgICAgIGJhclZhbHVlcy50aXRsZVNsaWRlciA9IHdpZHRoIC8gMjtcclxuICAgICAgYmFyVmFsdWVzLnhBeGlzVGl0bGVTbGlkZXIgPSB3aWR0aCAvIDI7XHJcblxyXG4gICAgICB4U2NhbGUucmFuZ2VSb3VuZChbMCwgd2lkdGhdKTtcclxuICAgICAgeVNjYWxlLnJhbmdlUm91bmQoW2hlaWdodCwgMF0pO1xyXG5cclxuICAgICAgeEF4aXNcclxuICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBcInRyYW5zbGF0ZSgwLFwiICsgaGVpZ2h0ICsgXCIpXCIpXHJcbiAgICAgICAgLmNhbGwoZDMuYXhpc0JvdHRvbSh4U2NhbGUpLnRpY2tzKCkpO1xyXG5cclxuICAgICAgeUF4aXMuY2FsbChkMy5heGlzTGVmdCh5U2NhbGUpLnRpY2tzKCkpO1xyXG5cclxuICAgICAgY29uc3QgeEF4aXNMaW5lID0gZDMuc2VsZWN0KFwiI2Jhcl9jaGFydCA+IGcgPiBnLnhBeGlzID4gcGF0aFwiKTtcclxuICAgICAgY29uc3QgeUF4aXNMaW5lID0gZDMuc2VsZWN0KFwiI2Jhcl9jaGFydCA+IGcgPiBnLnlBeGlzID4gcGF0aFwiKTtcclxuXHJcbiAgICAgIHhBeGlzTGluZS5hdHRyKFwiaWRcIiwgXCJiYXJfeF9heGlzX2xpbmVcIik7XHJcbiAgICAgIHlBeGlzTGluZS5hdHRyKFwiaWRcIiwgXCJiYXJfeV9heGlzX2xpbmVcIik7XHJcblxyXG4gICAgICB4R3JpZFxyXG4gICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIFwidHJhbnNsYXRlKDAsXCIgKyBoZWlnaHQgKyBcIilcIilcclxuICAgICAgICAuY2FsbChtYWtlX3hfZ3JpZGxpbmVzKCkudGlja1NpemUoLWhlaWdodCkudGlja0Zvcm1hdChcIlwiKSk7XHJcblxyXG4gICAgICB5R3JpZC5jYWxsKG1ha2VfeV9ncmlkbGluZXMoKS50aWNrU2l6ZSgtd2lkdGgpLnRpY2tGb3JtYXQoXCJcIikpO1xyXG5cclxuICAgICAgdGl0bGVcclxuICAgICAgICAuYXR0cihcInhcIiwgd2lkdGggLyAyKVxyXG4gICAgICAgIC5hdHRyKFwieVwiLCAtNDApXHJcbiAgICAgICAgLmF0dHIoXCJ0ZXh0LWFuY2hvclwiLCBcIm1pZGRsZVwiKVxyXG4gICAgICAgIC5hdHRyKFwiZm9udC1zaXplXCIsIFwiMS4xZW1cIik7XHJcblxyXG4gICAgICB4QXhpc1RpdGxlXHJcbiAgICAgICAgLmF0dHIoXCJ4XCIsIHdpZHRoIC8gMilcclxuICAgICAgICAuYXR0cihcInlcIiwgaGVpZ2h0ICsgbWFyZ2luLnRvcCAtIDMwKVxyXG4gICAgICAgIC5hdHRyKFwiZm9udC1zaXplXCIsIFwiMC45ZW1cIilcclxuICAgICAgICAuYXR0cihcInRleHQtYW5jaG9yXCIsIFwibWlkZGxlXCIpO1xyXG5cclxuICAgICAgeUF4aXNUaXRsZVxyXG4gICAgICAgIC8vLmF0dHIoXCJ4XCIsIDUgKiAtMjgpXHJcbiAgICAgICAgLmF0dHIoXCJ5XCIsIC00MClcclxuICAgICAgICAuYXR0cihcImZvbnQtc2l6ZVwiLCBcIjAuOWVtXCIpXHJcbiAgICAgICAgLmF0dHIoXCJ0ZXh0LWFuY2hvclwiLCBcIm1pZGRsZVwiKVxyXG4gICAgICAgIC5zdHlsZShcInRyYW5zZm9ybVwiLCBcInJvdGF0ZSgyNzBkZWcpXCIpO1xyXG5cclxuICAgICAgY29uc3QgYmFycyA9IGcuc2VsZWN0QWxsKFwicmVjdFwiKS5kYXRhKGRhdGEpO1xyXG5cclxuICAgICAgYmFycy5leGl0KCkucmVtb3ZlKCk7XHJcblxyXG4gICAgICBiYXJzXHJcbiAgICAgICAgLmVudGVyKClcclxuICAgICAgICAuYXBwZW5kKFwicmVjdFwiKVxyXG4gICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJiYXJzXCIpXHJcbiAgICAgICAgLmF0dHIoXCJ4XCIsIGZ1bmN0aW9uIChkLCBpKSB7XHJcbiAgICAgICAgICByZXR1cm4geFNjYWxlKGkpO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCB4U2NhbGUuYmFuZHdpZHRoKCkgKiAoMTggKiAwLjA1KSlcclxuICAgICAgICAuYXR0cihcInlcIiwgZnVuY3Rpb24gKGQpIHtcclxuICAgICAgICAgIHJldHVybiB5U2NhbGUoZC55KTtcclxuICAgICAgICB9KVxyXG4gICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIGZ1bmN0aW9uIChkKSB7XHJcbiAgICAgICAgICByZXR1cm4gaGVpZ2h0IC0geVNjYWxlKGQueSk7XHJcbiAgICAgICAgfSlcclxuICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBcInRyYW5zbGF0ZShcIiArIDAgKyBcIiwwKVwiKTtcclxuXHJcbiAgICAgIGJhcnNcclxuICAgICAgICAuYXR0cihcInhcIiwgZnVuY3Rpb24gKGQsIGkpIHtcclxuICAgICAgICAgIHJldHVybiB4U2NhbGUoaSk7XHJcbiAgICAgICAgfSlcclxuICAgICAgICAuYXR0cihcIndpZHRoXCIsIHhTY2FsZS5iYW5kd2lkdGgoKSAqICgxOCAqIDAuMDUpKVxyXG4gICAgICAgIC5hdHRyKFwieVwiLCBmdW5jdGlvbiAoZCkge1xyXG4gICAgICAgICAgcmV0dXJuIHlTY2FsZShkLnkpO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgZnVuY3Rpb24gKGQpIHtcclxuICAgICAgICAgIHJldHVybiBoZWlnaHQgLSB5U2NhbGUoZC55KTtcclxuICAgICAgICB9KVxyXG4gICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIFwidHJhbnNsYXRlKFwiICsgMCArIFwiLDApXCIpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGxvYWREYXRhKCkge1xyXG4gICAgICB4U2NhbGUuZG9tYWluKGQzLnJhbmdlKDAsIGRhdGEubGVuZ3RoKSk7XHJcbiAgICAgIHlTY2FsZS5kb21haW4oW1xyXG4gICAgICAgIDAsXHJcbiAgICAgICAgZDMubWF4KGRhdGEsIGZ1bmN0aW9uIChkKSB7XHJcbiAgICAgICAgICByZXR1cm4gZC55O1xyXG4gICAgICAgIH0pLFxyXG4gICAgICBdKTtcclxuXHJcbiAgICAgIGRyYXcoKTtcclxuICAgIH1cclxuXHJcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLCBkcmF3KTtcclxuICAgIGxvYWREYXRhKCk7XHJcblxyXG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNiYXJfeV9ncmlkID4gZzpudGgtY2hpbGQoMikgPiBsaW5lXCIpLnJlbW92ZSgpO1xyXG5cclxuICAgIGxldCBiYXJIb3Jpem9udGFsQ2hlY2tib3ggPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFxyXG4gICAgICBcIiNiYXJfaG9yaXpvbnRhbF9jaGVja2JveFwiXHJcbiAgICApO1xyXG4gICAgbGV0IGJhclZlcnRpY2FsQ2hlY2tib3ggPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2Jhcl92ZXJ0aWNhbF9jaGVja2JveFwiKTtcclxuXHJcbiAgICBiYXJWZXJ0aWNhbENoZWNrYm94LmFkZEV2ZW50TGlzdGVuZXIoXCJjaGFuZ2VcIiwgZnVuY3Rpb24gKCkge1xyXG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLCBkcmF3KTtcclxuICAgIH0pO1xyXG5cclxuICAgIGJhckhvcml6b250YWxDaGVja2JveC5hZGRFdmVudExpc3RlbmVyKFwiY2hhbmdlXCIsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIiwgZHJhdyk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBjb25zdCBuYXZCYXJCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI25hdl9iYXJfYnV0dG9uXCIpO1xyXG4gICAgY29uc3QgbmF2TGluZUJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjbmF2X2xpbmVfYnV0dG9uXCIpO1xyXG4gICAgY29uc3QgbmF2UGllQnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNuYXZfcGllX2J1dHRvblwiKTtcclxuXHJcbiAgICBuYXZMaW5lQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwicmVzaXplXCIsIGRyYXcpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgbmF2UGllQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwicmVzaXplXCIsIGRyYXcpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBpZiAoYmFyVGl0bGVJbnB1dFZhbHVlICE9IHVuZGVmaW5lZCkge1xyXG4gICAgaWYgKGJhclRpdGxlSW5wdXRWYWx1ZSAhPSBcIlwiKSB7XHJcbiAgICAgIGQzLnNlbGVjdChcIiNiYXJfdGl0bGVcIikudGV4dChiYXJUaXRsZUlucHV0VmFsdWUpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgaWYgKGJhclhBeGlzVGl0bGVJbnB1dFZhbHVlICE9IHVuZGVmaW5lZCkge1xyXG4gICAgaWYgKGJhclhBeGlzVGl0bGVJbnB1dFZhbHVlICE9IFwiXCIpIHtcclxuICAgICAgZDMuc2VsZWN0KFwiI2Jhcl94YXhpc190aXRsZVwiKS50ZXh0KGJhclhBeGlzVGl0bGVJbnB1dFZhbHVlKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGlmIChiYXJZQXhpc1RpdGxlSW5wdXRWYWx1ZSAhPSB1bmRlZmluZWQpIHtcclxuICAgIGlmIChiYXJZQXhpc1RpdGxlSW5wdXRWYWx1ZSAhPSBcIlwiKSB7XHJcbiAgICAgIGQzLnNlbGVjdChcIiNiYXJfeWF4aXNfdGl0bGVcIikudGV4dChiYXJZQXhpc1RpdGxlSW5wdXRWYWx1ZSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBpZiAoYmFyVGl0bGVTbGlkZXJWYWx1ZSAhPSB1bmRlZmluZWQpIHtcclxuICAgIGQzLnNlbGVjdChcIiNiYXJfdGl0bGVcIikuYXR0cihcInhcIiwgdXNhYmxlQm91bmRXaWR0aCAvIDIpO1xyXG4gIH1cclxuXHJcbiAgaWYgKGJhclhBeGlzVGl0bGVTbGlkZXJWYWx1ZSAhPSB1bmRlZmluZWQpIHtcclxuICAgIGQzLnNlbGVjdChcIiNiYXJfeGF4aXNfdGl0bGVcIikuYXR0cihcInhcIiwgdXNhYmxlQm91bmRXaWR0aCAvIDIpO1xyXG4gIH1cclxuXHJcbiAgaWYgKGJhcllBeGlzVGl0bGVTbGlkZXJWYWx1ZSAhPSB1bmRlZmluZWQpIHtcclxuICAgIGQzLnNlbGVjdChcIiNiYXJfeWF4aXNfdGl0bGVcIikuYXR0cihcInhcIiwgYmFyWUF4aXNUaXRsZVNsaWRlclZhbHVlICogMjApO1xyXG4gIH1cclxuXHJcbiAgaWYgKGJhclhBeGlzR3JpZENoZWNrYm94VmFsdWUgIT0gdW5kZWZpbmVkKSB7XHJcbiAgICBpZiAoYmFyWEF4aXNHcmlkQ2hlY2tib3hWYWx1ZSA9PSBcImNoZWNrZWRcIikge1xyXG4gICAgICBkMy5zZWxlY3QoXCIjYmFyX3hfZ3JpZFwiKS5hdHRyKFwiZGlzcGxheVwiLCBcIlwiKTtcclxuICAgIH0gZWxzZSBpZiAoYmFyWEF4aXNHcmlkQ2hlY2tib3hWYWx1ZSA9PSBcInVuY2hlY2tlZFwiKSB7XHJcbiAgICAgIGQzLnNlbGVjdChcIiNiYXJfeF9ncmlkXCIpLmF0dHIoXCJkaXNwbGF5XCIsIFwibm9uZVwiKTtcclxuICAgIH1cclxuICB9XHJcbiAgaWYgKGJhcllBeGlzR3JpZENoZWNrYm94VmFsdWUgIT0gdW5kZWZpbmVkKSB7XHJcbiAgICBpZiAoYmFyWUF4aXNHcmlkQ2hlY2tib3hWYWx1ZSA9PSBcImNoZWNrZWRcIikge1xyXG4gICAgICBkMy5zZWxlY3QoXCIjYmFyX3lfZ3JpZFwiKS5hdHRyKFwiZGlzcGxheVwiLCBcIlwiKTtcclxuICAgIH0gZWxzZSBpZiAoYmFyWUF4aXNHcmlkQ2hlY2tib3hWYWx1ZSA9PSBcInVuY2hlY2tlZFwiKSB7XHJcbiAgICAgIGQzLnNlbGVjdChcIiNiYXJfeV9ncmlkXCIpLmF0dHIoXCJkaXNwbGF5XCIsIFwibm9uZVwiKTtcclxuICAgIH1cclxuICB9XHJcbiAgaWYgKGJhckhvdmVyQ2hlY2tib3hWYWx1ZSAhPSB1bmRlZmluZWQpIHtcclxuICAgIGlmIChiYXJIb3ZlckNoZWNrYm94VmFsdWUgPT0gXCJjaGVja2VkXCIpIHtcclxuICAgICAgZDMuc2VsZWN0QWxsKFwicmVjdFwiKS5jbGFzc2VkKFwiaG92ZXJlZFwiLCB0cnVlKTtcclxuICAgIH0gZWxzZSBpZiAoYmFySG92ZXJDaGVja2JveFZhbHVlID09IFwidW5jaGVja2VkXCIpIHtcclxuICAgICAgZDMuc2VsZWN0QWxsKFwicmVjdFwiKS5jbGFzc2VkKFwiaG92ZXJlZFwiLCBmYWxzZSk7XHJcbiAgICB9XHJcbiAgfVxyXG4gIGlmIChiYXJYQXhpc0xpbmVDaGVja2JveFZhbHVlICE9IHVuZGVmaW5lZCkge1xyXG4gICAgaWYgKGJhclhBeGlzTGluZUNoZWNrYm94VmFsdWUgPT0gXCJjaGVja2VkXCIpIHtcclxuICAgICAgZDMuc2VsZWN0KFwiI2Jhcl94X2F4aXMgPiBwYXRoXCIpLmF0dHIoXCJkaXNwbGF5XCIsIFwiXCIpO1xyXG4gICAgfSBlbHNlIGlmIChiYXJYQXhpc0xpbmVDaGVja2JveFZhbHVlID09IFwidW5jaGVja2VkXCIpIHtcclxuICAgICAgZDMuc2VsZWN0KFwiI2Jhcl94X2F4aXMgPiBwYXRoXCIpLmF0dHIoXCJkaXNwbGF5XCIsIFwibm9uZVwiKTtcclxuICAgIH1cclxuICB9XHJcbiAgaWYgKGJhcllBeGlzTGluZUNoZWNrYm94VmFsdWUgIT0gdW5kZWZpbmVkKSB7XHJcbiAgICBpZiAoYmFyWUF4aXNMaW5lQ2hlY2tib3hWYWx1ZSA9PSBcImNoZWNrZWRcIikge1xyXG4gICAgICBkMy5zZWxlY3QoXCIjYmFyX3lfYXhpcyA+IHBhdGhcIikuYXR0cihcImRpc3BsYXlcIiwgXCJcIik7XHJcbiAgICB9IGVsc2UgaWYgKGJhcllBeGlzTGluZUNoZWNrYm94VmFsdWUgPT0gXCJ1bmNoZWNrZWRcIikge1xyXG4gICAgICBkMy5zZWxlY3QoXCIjYmFyX3lfYXhpcyA+IHBhdGhcIikuYXR0cihcImRpc3BsYXlcIiwgXCJub25lXCIpO1xyXG4gICAgfVxyXG4gIH1cclxuICBpZiAoYmFyVG9vbHRpcENoZWNrYm94VmFsdWUgIT0gdW5kZWZpbmVkKSB7XHJcbiAgICBpZiAoYmFyVG9vbHRpcENoZWNrYm94VmFsdWUgPT0gXCJjaGVja2VkXCIpIHtcclxuICAgICAgbGV0IHRvb2x0aXAgPSBkM1xyXG4gICAgICAgIC5zZWxlY3QoXCJib2R5XCIpXHJcbiAgICAgICAgLmFwcGVuZChcImRpdlwiKVxyXG4gICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJiYXJfdG9vbHRpcFwiKTtcclxuXHJcbiAgICAgIGxldCBiYXJzID0gZDMuc2VsZWN0QWxsKFwiLmJhcnNcIik7XHJcbiAgICAgIGJhcnNcclxuICAgICAgICAub24oXCJtb3VzZW1vdmVcIiwgZnVuY3Rpb24gKGQpIHtcclxuICAgICAgICAgIHRvb2x0aXBcclxuICAgICAgICAgICAgLnN0eWxlKFwibGVmdFwiLCBjdXJyZW50RXZlbnQucGFnZVggKyAxMCArIFwicHhcIilcclxuICAgICAgICAgICAgLnN0eWxlKFwidG9wXCIsIGN1cnJlbnRFdmVudC5wYWdlWSArIDEwICsgXCJweFwiKVxyXG4gICAgICAgICAgICAuc3R5bGUoXCJkaXNwbGF5XCIsIFwiaW5saW5lLWJsb2NrXCIpO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLm9uKFwibW91c2VvdXRcIiwgZnVuY3Rpb24gKGQpIHtcclxuICAgICAgICAgIHRvb2x0aXAuc3R5bGUoXCJkaXNwbGF5XCIsIFwibm9uZVwiKTtcclxuICAgICAgICB9KTtcclxuICAgIH0gZWxzZSBpZiAoYmFyVG9vbHRpcENoZWNrYm94VmFsdWUgPT0gXCJ1bmNoZWNrZWRcIikge1xyXG4gICAgICBkMy5zZWxlY3QoXCIuYmFyX3Rvb2x0aXBcIikucmVtb3ZlKCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBpZiAoYmFyQmFja2dyb3VkQ1BWYWx1ZSAhPSB1bmRlZmluZWQpIHtcclxuICAgIGlmIChiYXJCYWNrZ3JvdWRDUFZhbHVlICE9IFwiXCIpIHtcclxuICAgICAgZDMuc2VsZWN0KFwiI2Jhcl9jaGFydFwiKS5zdHlsZShcImJhY2tncm91bmQtY29sb3JcIiwgYmFyQmFja2dyb3VkQ1BWYWx1ZSk7XHJcbiAgICB9XHJcbiAgfVxyXG4gIGlmIChiYXJCYXJzQ1BWYWx1ZSAhPSB1bmRlZmluZWQpIHtcclxuICAgIGlmIChiYXJCYXJzQ1BWYWx1ZSAhPSBcIlwiKSB7XHJcbiAgICAgIGQzLnNlbGVjdEFsbChcIi5iYXJzXCIpLnN0eWxlKFwiZmlsbFwiLCBiYXJCYXJzQ1BWYWx1ZSk7XHJcbiAgICB9XHJcbiAgfVxyXG4gIGlmIChiYXJUaWNrQ1BWYWx1ZSAhPSB1bmRlZmluZWQpIHtcclxuICAgIGlmIChiYXJUaWNrQ1BWYWx1ZSAhPSBcIlwiKSB7XHJcbiAgICAgIGQzLnNlbGVjdEFsbChcIiNiYXJfY2hhcnQgPiBnID4gZyA+IC50aWNrID4gdGV4dFwiKS5zdHlsZShcclxuICAgICAgICBcImZpbGxcIixcclxuICAgICAgICBiYXJUaWNrQ1BWYWx1ZVxyXG4gICAgICApO1xyXG4gICAgfVxyXG4gIH1cclxuICBpZiAoYmFyVGl0bGVDUFZhbHVlICE9IHVuZGVmaW5lZCkge1xyXG4gICAgaWYgKGJhclRpdGxlQ1BWYWx1ZSAhPSBcIlwiKSB7XHJcbiAgICAgIGQzLnNlbGVjdChcIiNiYXJfdGl0bGVcIikuc3R5bGUoXCJmaWxsXCIsIGJhclRpdGxlQ1BWYWx1ZSk7XHJcbiAgICB9XHJcbiAgfVxyXG4gIGlmIChiYXJYQXhpc1RpdGxlQ1BWYWx1ZSAhPSB1bmRlZmluZWQpIHtcclxuICAgIGlmIChiYXJYQXhpc1RpdGxlQ1BWYWx1ZSAhPSBcIlwiKSB7XHJcbiAgICAgIGQzLnNlbGVjdChcIiNiYXJfeGF4aXNfdGl0bGVcIikuc3R5bGUoXCJmaWxsXCIsIGJhclhBeGlzVGl0bGVDUFZhbHVlKTtcclxuICAgIH1cclxuICB9XHJcbiAgaWYgKGJhcllBeGlzVGl0bGVDUFZhbHVlICE9IHVuZGVmaW5lZCkge1xyXG4gICAgaWYgKGJhcllBeGlzVGl0bGVDUFZhbHVlICE9IFwiXCIpIHtcclxuICAgICAgZDMuc2VsZWN0KFwiI2Jhcl95YXhpc190aXRsZVwiKS5zdHlsZShcImZpbGxcIiwgYmFyWUF4aXNUaXRsZUNQVmFsdWUpO1xyXG4gICAgfVxyXG4gIH1cclxuICBpZiAoYmFyR3JpZENQVmFsdWUgIT0gdW5kZWZpbmVkKSB7XHJcbiAgICBpZiAoYmFyR3JpZENQVmFsdWUgIT0gXCJcIikge1xyXG4gICAgICBkMy5zZWxlY3RBbGwoXCIuYmFyX2dyaWRcIikuc3R5bGUoXCJjb2xvclwiLCBiYXJHcmlkQ1BWYWx1ZSk7XHJcbiAgICB9XHJcbiAgfVxyXG4gIGlmIChiYXJYQXhpc0xpbmVDUFZhbHVlICE9IHVuZGVmaW5lZCkge1xyXG4gICAgaWYgKGJhclhBeGlzTGluZUNQVmFsdWUgIT0gXCJcIikge1xyXG4gICAgICBkMy5zZWxlY3QoXCIjYmFyX3hfYXhpcyA+IHBhdGhcIikuc3R5bGUoXCJzdHJva2VcIiwgYmFyWEF4aXNMaW5lQ1BWYWx1ZSk7XHJcbiAgICB9XHJcbiAgfVxyXG4gIGlmIChiYXJZQXhpc0xpbmVDUFZhbHVlICE9IHVuZGVmaW5lZCkge1xyXG4gICAgaWYgKGJhcllBeGlzTGluZUNQVmFsdWUgIT0gXCJcIikge1xyXG4gICAgICBkMy5zZWxlY3QoXCIjYmFyX3lfYXhpcyA+IHBhdGhcIikuc3R5bGUoXCJzdHJva2VcIiwgYmFyWUF4aXNMaW5lQ1BWYWx1ZSk7XHJcbiAgICB9XHJcbiAgfVxyXG4gIGlmIChiYXJCb3JkZXJDUFZhbHVlICE9IHVuZGVmaW5lZCkge1xyXG4gICAgaWYgKGJhckJvcmRlckNQVmFsdWUgIT0gXCJcIikge1xyXG4gICAgICBkMy5zZWxlY3RBbGwoXCJyZWN0XCIpLmF0dHIoXCJzdHJva2VcIiwgYmFyQm9yZGVyQ1BWYWx1ZSk7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiIsImV4cG9ydCBjb25zdCBiYXJUaXRsZUlucHV0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNiYXJfdGl0bGVfaW5wdXRcIik7XHJcblxyXG5leHBvcnQgY29uc3QgYmFyWEF4aXNUaXRsZUlucHV0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcclxuICBcIiNiYXJfeGF4aXNfdGl0bGVfaW5wdXRcIlxyXG4pO1xyXG5leHBvcnQgY29uc3QgYmFyWUF4aXNUaXRsZUlucHV0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcclxuICBcIiNiYXJfeWF4aXNfdGl0bGVfaW5wdXRcIlxyXG4pO1xyXG5leHBvcnQgY29uc3QgYmFyVGl0bGVTbGlkZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2Jhcl90aXRsZV9zbGlkZXJcIik7XHJcblxyXG5leHBvcnQgY29uc3QgYmFyWEF4aXNUaXRsZVNsaWRlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXHJcbiAgXCIjYmFyX3hheGlzX3RpdGxlX3NsaWRlclwiXHJcbik7XHJcbmV4cG9ydCBjb25zdCBiYXJZQXhpc1RpdGxlU2xpZGVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcclxuICBcIiNiYXJfeWF4aXNfdGl0bGVfc2xpZGVyXCJcclxuKTtcclxuZXhwb3J0IGNvbnN0IGJhclRvb2x0aXBDaGVja2JveCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXHJcbiAgXCIjYmFyX3Rvb2x0aXBfY2hlY2tib3hcIlxyXG4pO1xyXG5leHBvcnQgY29uc3QgYmFySG9yaXpvbnRhbENoZWNrYm94ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcclxuICBcIiNiYXJfaG9yaXpvbnRhbF9jaGVja2JveFwiXHJcbik7XHJcbmV4cG9ydCBjb25zdCBiYXJWZXJ0aWNhbENoZWNrYm94ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcclxuICBcIiNiYXJfdmVydGljYWxfY2hlY2tib3hcIlxyXG4pO1xyXG5leHBvcnQgY29uc3QgYmFyWEF4aXNHcmlkQ2hlY2tib3ggPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFxyXG4gIFwiI2Jhcl94YXhpc19ncmlkX2NoZWNrYm94XCJcclxuKTtcclxuZXhwb3J0IGNvbnN0IGJhcllBeGlzR3JpZENoZWNrYm94ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcclxuICBcIiNiYXJfeWF4aXNfZ3JpZF9jaGVja2JveFwiXHJcbik7XHJcbmV4cG9ydCBjb25zdCBiYXJYQXhpc0xpbmVDaGVja2JveCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXHJcbiAgXCIjYmFyX3hheGlzX2xpbmVfY2hlY2tib3hcIlxyXG4pO1xyXG5leHBvcnQgY29uc3QgYmFyWUF4aXNMaW5lQ2hlY2tib3ggPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFxyXG4gIFwiI2Jhcl95YXhpc19saW5lX2NoZWNrYm94XCJcclxuKTtcclxuXHJcbmV4cG9ydCBjb25zdCBiYXJIb3ZlckNoZWNrYm94ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNiYXJfaG92ZXJfY2hlY2tib3hcIik7XHJcbiIsImltcG9ydCB7IGJhckNoYXJ0IH0gZnJvbSBcIi4vYmFyX2NoYXJ0X2dyYXBoLmpzXCI7XHJcblxyXG5pbXBvcnQge1xyXG4gIGJhclRpdGxlSW5wdXQsXHJcbiAgYmFyWEF4aXNUaXRsZUlucHV0LFxyXG4gIGJhcllBeGlzVGl0bGVJbnB1dCxcclxuICBiYXJUaXRsZVNsaWRlcixcclxuICBiYXJYQXhpc1RpdGxlU2xpZGVyLFxyXG4gIGJhcllBeGlzVGl0bGVTbGlkZXIsXHJcbiAgYmFyVG9vbHRpcENoZWNrYm94LFxyXG4gIGJhckhvcml6b250YWxDaGVja2JveCxcclxuICBiYXJWZXJ0aWNhbENoZWNrYm94LFxyXG4gIGJhclhBeGlzR3JpZENoZWNrYm94LFxyXG4gIGJhcllBeGlzR3JpZENoZWNrYm94LFxyXG4gIGJhclhBeGlzTGluZUNoZWNrYm94LFxyXG4gIGJhcllBeGlzTGluZUNoZWNrYm94LFxyXG4gIGJhckhvdmVyQ2hlY2tib3gsXHJcbn0gZnJvbSBcIi4vYmFyX2NoYXJ0X2lucHV0cy5qc1wiO1xyXG5cclxuaW1wb3J0IHsgYmFyVmFsdWVzIH0gZnJvbSBcIi4vYmFyX2NoYXJ0X3ZhbHVlcy5qc1wiO1xyXG5pbXBvcnQgeyBzZWxlY3QsIHNlbGVjdEFsbCB9IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcclxuaW1wb3J0IHsgZXZlbnQgYXMgY3VycmVudEV2ZW50IH0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xyXG5cclxuY29uc3QgZDMgPSB7IHNlbGVjdCwgc2VsZWN0QWxsIH07XHJcblxyXG5iYXJUaXRsZUlucHV0LmFkZEV2ZW50TGlzdGVuZXIoXCJpbnB1dFwiLCAoKSA9PiB7XHJcbiAgYmFyVmFsdWVzLnRpdGxlSW5wdXQgPSBiYXJUaXRsZUlucHV0LnZhbHVlO1xyXG4gIGQzLnNlbGVjdChcIiNiYXJfdGl0bGVcIikudGV4dChiYXJWYWx1ZXMudGl0bGVJbnB1dCk7XHJcbiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJiYXJfdGl0bGVfc3BhblwiKS5pbm5lckhUTUwgPSBiYXJWYWx1ZXMudGl0bGVJbnB1dDtcclxufSk7XHJcblxyXG5iYXJYQXhpc1RpdGxlSW5wdXQuYWRkRXZlbnRMaXN0ZW5lcihcImlucHV0XCIsICgpID0+IHtcclxuICBiYXJWYWx1ZXMueEF4aXNUaXRsZUlucHV0ID0gYmFyWEF4aXNUaXRsZUlucHV0LnZhbHVlO1xyXG4gIGQzLnNlbGVjdChcIiNiYXJfeGF4aXNfdGl0bGVcIikudGV4dChiYXJWYWx1ZXMueEF4aXNUaXRsZUlucHV0KTtcclxuICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImJhcl94X3RpdGxlX3NwYW5cIikuaW5uZXJIVE1MID1cclxuICAgIGJhclZhbHVlcy54QXhpc1RpdGxlSW5wdXQ7XHJcbn0pO1xyXG5cclxuYmFyWUF4aXNUaXRsZUlucHV0LmFkZEV2ZW50TGlzdGVuZXIoXCJpbnB1dFwiLCAoKSA9PiB7XHJcbiAgYmFyVmFsdWVzLnlBeGlzVGl0bGVJbnB1dCA9IGJhcllBeGlzVGl0bGVJbnB1dC52YWx1ZTtcclxuICBkMy5zZWxlY3QoXCIjYmFyX3lheGlzX3RpdGxlXCIpLnRleHQoYmFyVmFsdWVzLnlBeGlzVGl0bGVJbnB1dCk7XHJcbiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJiYXJfeV90aXRsZV9zcGFuXCIpLmlubmVySFRNTCA9XHJcbiAgICBiYXJWYWx1ZXMueUF4aXNUaXRsZUlucHV0O1xyXG59KTtcclxuXHJcbmJhclRpdGxlU2xpZGVyLmFkZEV2ZW50TGlzdGVuZXIoXCJpbnB1dFwiLCBmdW5jdGlvbiAoKSB7XHJcbiAgYmFyVmFsdWVzLnRpdGxlU2xpZGVyID0gYmFyVGl0bGVTbGlkZXIudmFsdWU7XHJcbiAgZDMuc2VsZWN0KFwiI2Jhcl90aXRsZVwiKS5hdHRyKFwieFwiLCBiYXJWYWx1ZXMudGl0bGVTbGlkZXIpO1xyXG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYmFyX3RpdGxlX3NsaWRlcl9zcGFuXCIpLmlubmVySFRNTCA9XHJcbiAgICBiYXJWYWx1ZXMudGl0bGVTbGlkZXI7XHJcbn0pO1xyXG5cclxuYmFyWEF4aXNUaXRsZVNsaWRlci5hZGRFdmVudExpc3RlbmVyKFwiaW5wdXRcIiwgZnVuY3Rpb24gKCkge1xyXG4gIGJhclZhbHVlcy54QXhpc1RpdGxlU2xpZGVyID0gYmFyWEF4aXNUaXRsZVNsaWRlci52YWx1ZTtcclxuICBkMy5zZWxlY3QoXCIjYmFyX3hheGlzX3RpdGxlXCIpLmF0dHIoXCJ4XCIsIGJhclZhbHVlcy54QXhpc1RpdGxlU2xpZGVyKTtcclxuICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImJhcl94X3RpdGxlX3NsaWRlcl9zcGFuXCIpLmlubmVySFRNTCA9XHJcbiAgICBiYXJWYWx1ZXMueEF4aXNUaXRsZVNsaWRlcjtcclxufSk7XHJcblxyXG5iYXJZQXhpc1RpdGxlU2xpZGVyLmFkZEV2ZW50TGlzdGVuZXIoXCJpbnB1dFwiLCBmdW5jdGlvbiAoKSB7XHJcbiAgYmFyVmFsdWVzLnlBeGlzVGl0bGVTbGlkZXIgPSBiYXJZQXhpc1RpdGxlU2xpZGVyLnZhbHVlO1xyXG4gIGQzLnNlbGVjdChcIiNiYXJfeWF4aXNfdGl0bGVcIikuYXR0cihcInhcIiwgYmFyVmFsdWVzLnlBeGlzVGl0bGVTbGlkZXIgKiAyMCk7XHJcbiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJiYXJfeV90aXRsZV9zbGlkZXJfc3BhblwiKS5pbm5lckhUTUwgPVxyXG4gICAgYmFyVmFsdWVzLnlBeGlzVGl0bGVTbGlkZXI7XHJcbn0pO1xyXG5cclxuYmFyVG9vbHRpcENoZWNrYm94LmFkZEV2ZW50TGlzdGVuZXIoXCJjaGFuZ2VcIiwgZnVuY3Rpb24gKCkge1xyXG4gIGlmICh0aGlzLmNoZWNrZWQpIHtcclxuICAgIGxldCB0b29sdGlwID0gZDMuc2VsZWN0KFwiYm9keVwiKS5hcHBlbmQoXCJkaXZcIikuYXR0cihcImNsYXNzXCIsIFwiYmFyX3Rvb2x0aXBcIik7XHJcblxyXG4gICAgbGV0IGJhcnMgPSBkMy5zZWxlY3RBbGwoXCIuYmFyc1wiKTtcclxuXHJcbiAgICBiYXJzXHJcbiAgICAgIC5vbihcIm1vdXNlbW92ZVwiLCBmdW5jdGlvbiAoZCkge1xyXG4gICAgICAgIHRvb2x0aXBcclxuICAgICAgICAgIC5zdHlsZShcImxlZnRcIiwgY3VycmVudEV2ZW50LnBhZ2VYICsgMTAgKyBcInB4XCIpXHJcbiAgICAgICAgICAuc3R5bGUoXCJ0b3BcIiwgY3VycmVudEV2ZW50LnBhZ2VZICsgMTAgKyBcInB4XCIpXHJcbiAgICAgICAgICAuc3R5bGUoXCJkaXNwbGF5XCIsIFwiaW5saW5lLWJsb2NrXCIpO1xyXG4gICAgICB9KVxyXG4gICAgICAub24oXCJtb3VzZW91dFwiLCBmdW5jdGlvbiAoZCkge1xyXG4gICAgICAgIHRvb2x0aXAuc3R5bGUoXCJkaXNwbGF5XCIsIFwibm9uZVwiKTtcclxuICAgICAgfSk7XHJcblxyXG4gICAgYmFyVmFsdWVzLnRvb2x0aXBDaGVja2JveCA9IFwiY2hlY2tlZFwiO1xyXG4gICAgZDMuc2VsZWN0KFwiI2Jhcl90b29sdGlwX2xvZ2ljX3NwYW5cIikuY2xhc3NlZChcImhpZGVcIiwgZmFsc2UpO1xyXG4gIH0gZWxzZSBpZiAodGhpcy5jaGVja2VkID09PSBmYWxzZSkge1xyXG4gICAgYmFyVmFsdWVzLnRvb2x0aXBDaGVja2JveCA9IFwidW5jaGVja2VkXCI7XHJcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiYm9keSA+IGRpdi5iYXJfdG9vbHRpcFwiKS5yZW1vdmUoKTtcclxuICAgIGQzLnNlbGVjdChcIiNiYXJfdG9vbHRpcF9sb2dpY19zcGFuXCIpLmNsYXNzZWQoXCJoaWRlXCIsIHRydWUpO1xyXG4gIH1cclxufSk7XHJcblxyXG5iYXJIb3Jpem9udGFsQ2hlY2tib3guYWRkRXZlbnRMaXN0ZW5lcihcImNoYW5nZVwiLCBmdW5jdGlvbiAoKSB7XHJcbiAgaWYgKHRoaXMuY2hlY2tlZCkge1xyXG4gICAgLy8gIHR1cm5zIG9mZiB0b29sdGlwXHJcbiAgICBiYXJWYWx1ZXMudG9vbHRpcENoZWNrYm94ID0gXCJ1bmNoZWNrZWRcIjtcclxuICAgIGJhclRvb2x0aXBDaGVja2JveC5jaGVja2VkID0gZmFsc2U7XHJcbiAgICBkMy5zZWxlY3QoXCIjYmFyX3Rvb2x0aXBfbG9naWNfc3BhblwiKS5jbGFzc2VkKFwiaGlkZVwiLCB0cnVlKTtcclxuXHJcbiAgICBiYXJWYWx1ZXMuZGlyZWN0aW9uID0gXCJob3Jpem9udGFsXCI7XHJcblxyXG4gICAgLy8gIGNhbGxzIGZ1bmN0aW9uIHRvIGhvcml6b250YWwgLyB0dXJucyBvbiBuZWNlc3NhcnkgZGl2c1xyXG4gICAgYmFyQ2hhcnQoXHJcbiAgICAgIGJhclZhbHVlcy5kaXJlY3Rpb24sXHJcbiAgICAgIGJhclZhbHVlcy50aXRsZUlucHV0LFxyXG4gICAgICBiYXJWYWx1ZXMueEF4aXNUaXRsZUlucHV0LFxyXG4gICAgICBiYXJWYWx1ZXMueUF4aXNUaXRsZUlucHV0LFxyXG4gICAgICBiYXJWYWx1ZXMudGl0bGVTbGlkZXIsXHJcbiAgICAgIGJhclZhbHVlcy54QXhpc1RpdGxlU2xpZGVyLFxyXG4gICAgICBiYXJWYWx1ZXMueUF4aXNUaXRsZVNsaWRlcixcclxuICAgICAgYmFyVmFsdWVzLnhBeGlzR3JpZENoZWNrYm94LFxyXG4gICAgICBiYXJWYWx1ZXMueUF4aXNHcmlkQ2hlY2tib3gsXHJcbiAgICAgIGJhclZhbHVlcy5ob3ZlckNoZWNrYm94LFxyXG4gICAgICBiYXJWYWx1ZXMueEF4aXNMaW5lQ2hlY2tib3gsXHJcbiAgICAgIGJhclZhbHVlcy55QXhpc0xpbmVDaGVja2JveCxcclxuICAgICAgYmFyVmFsdWVzLnRvb2x0aXBDaGVja2JveCxcclxuICAgICAgYmFyVmFsdWVzLmJhY2tncm91ZENQLFxyXG4gICAgICBiYXJWYWx1ZXMuYmFyc0NQLFxyXG4gICAgICBiYXJWYWx1ZXMudGlja0NQLFxyXG4gICAgICBiYXJWYWx1ZXMudGl0bGVDUCxcclxuICAgICAgYmFyVmFsdWVzLnhBeGlzVGl0bGVDUCxcclxuICAgICAgYmFyVmFsdWVzLnlBeGlzVGl0bGVDUCxcclxuICAgICAgYmFyVmFsdWVzLmdyaWRDUCxcclxuICAgICAgYmFyVmFsdWVzLnhBeGlzTGluZUNQLFxyXG4gICAgICBiYXJWYWx1ZXMueUF4aXNMaW5lQ1AsXHJcbiAgICAgIGJhclZhbHVlcy5ib3JkZXJDUFxyXG4gICAgKTtcclxuICAgIGQzLnNlbGVjdChcIiNiYXJfaG9yaXpvbnRhbF9zY2FsZV9zcGFuXCIpLmNsYXNzZWQoXCJoaWRlXCIsIGZhbHNlKTtcclxuICAgIGQzLnNlbGVjdChcIiNiYXJfaG9yaXpvbnRhbF9iYXJfbG9naWNfc3BhblwiKS5jbGFzc2VkKFwiaGlkZVwiLCBmYWxzZSk7XHJcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImJhcl9nbnRoX2NoaWxkX3NwYW5feFwiKS5pbm5lckhUTUwgPSBcIjJcIjtcclxuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYmFyX2dudGhfY2hpbGRfc3Bhbl95XCIpLmlubmVySFRNTCA9IFwiMVwiO1xyXG5cclxuICAgIC8vICB0dXJucyBvZmYgdmVydGljYWxcclxuICAgIGJhclZlcnRpY2FsQ2hlY2tib3guY2hlY2tlZCA9IGZhbHNlO1xyXG4gICAgZDMuc2VsZWN0KFwiI2Jhcl92ZXJ0aWNhbF9zY2FsZV9zcGFuXCIpLmNsYXNzZWQoXCJoaWRlXCIsIHRydWUpO1xyXG4gICAgZDMuc2VsZWN0KFwiI2Jhcl92ZXJ0aWNhbF9iYXJfbG9naWNfc3BhblwiKS5jbGFzc2VkKFwiaGlkZVwiLCB0cnVlKTtcclxuICB9IGVsc2UgaWYgKHRoaXMuY2hlY2tlZCA9PT0gZmFsc2UpIHtcclxuICAgIGJhclZhbHVlcy50b29sdGlwQ2hlY2tib3ggPSBcInVuY2hlY2tlZFwiO1xyXG4gICAgYmFyVG9vbHRpcENoZWNrYm94LmNoZWNrZWQgPSBmYWxzZTtcclxuICAgIGQzLnNlbGVjdChcIiNiYXJfdG9vbHRpcF9sb2dpY19zcGFuXCIpLmNsYXNzZWQoXCJoaWRlXCIsIHRydWUpO1xyXG5cclxuICAgIGJhclZhbHVlcy5kaXJlY3Rpb24gPSBcInZlcnRpY2FsXCI7XHJcblxyXG4gICAgYmFyQ2hhcnQoXHJcbiAgICAgIGJhclZhbHVlcy5kaXJlY3Rpb24sXHJcbiAgICAgIGJhclZhbHVlcy50aXRsZUlucHV0LFxyXG4gICAgICBiYXJWYWx1ZXMueEF4aXNUaXRsZUlucHV0LFxyXG4gICAgICBiYXJWYWx1ZXMueUF4aXNUaXRsZUlucHV0LFxyXG4gICAgICBiYXJWYWx1ZXMudGl0bGVTbGlkZXIsXHJcbiAgICAgIGJhclZhbHVlcy54QXhpc1RpdGxlU2xpZGVyLFxyXG4gICAgICBiYXJWYWx1ZXMueUF4aXNUaXRsZVNsaWRlcixcclxuICAgICAgYmFyVmFsdWVzLnhBeGlzR3JpZENoZWNrYm94LFxyXG4gICAgICBiYXJWYWx1ZXMueUF4aXNHcmlkQ2hlY2tib3gsXHJcbiAgICAgIGJhclZhbHVlcy5ob3ZlckNoZWNrYm94LFxyXG4gICAgICBiYXJWYWx1ZXMueEF4aXNMaW5lQ2hlY2tib3gsXHJcbiAgICAgIGJhclZhbHVlcy55QXhpc0xpbmVDaGVja2JveCxcclxuICAgICAgYmFyVmFsdWVzLnRvb2x0aXBDaGVja2JveCxcclxuICAgICAgYmFyVmFsdWVzLmJhY2tncm91ZENQLFxyXG4gICAgICBiYXJWYWx1ZXMuYmFyc0NQLFxyXG4gICAgICBiYXJWYWx1ZXMudGlja0NQLFxyXG4gICAgICBiYXJWYWx1ZXMudGl0bGVDUCxcclxuICAgICAgYmFyVmFsdWVzLnhBeGlzVGl0bGVDUCxcclxuICAgICAgYmFyVmFsdWVzLnlBeGlzVGl0bGVDUCxcclxuICAgICAgYmFyVmFsdWVzLmdyaWRDUCxcclxuICAgICAgYmFyVmFsdWVzLnhBeGlzTGluZUNQLFxyXG4gICAgICBiYXJWYWx1ZXMueUF4aXNMaW5lQ1AsXHJcbiAgICAgIGJhclZhbHVlcy5ib3JkZXJDUFxyXG4gICAgKTtcclxuXHJcbiAgICBkMy5zZWxlY3QoXCIjYmFyX2hvcml6b250YWxfc2NhbGVfc3BhblwiKS5jbGFzc2VkKFwiaGlkZVwiLCB0cnVlKTtcclxuICAgIGQzLnNlbGVjdChcIiNiYXJfaG9yaXpvbnRhbF9iYXJfbG9naWNfc3BhblwiKS5jbGFzc2VkKFwiaGlkZVwiLCB0cnVlKTtcclxuXHJcbiAgICBiYXJWZXJ0aWNhbENoZWNrYm94LmNoZWNrZWQgPSB0cnVlO1xyXG4gICAgZDMuc2VsZWN0KFwiI2Jhcl92ZXJ0aWNhbF9zY2FsZV9zcGFuXCIpLmNsYXNzZWQoXCJoaWRlXCIsIGZhbHNlKTtcclxuICAgIGQzLnNlbGVjdChcIiNiYXJfdmVydGljYWxfYmFyX2xvZ2ljX3NwYW5cIikuY2xhc3NlZChcImhpZGVcIiwgZmFsc2UpO1xyXG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJiYXJfZ250aF9jaGlsZF9zcGFuX3hcIikuaW5uZXJIVE1MID0gXCIxXCI7XHJcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImJhcl9nbnRoX2NoaWxkX3NwYW5feVwiKS5pbm5lckhUTUwgPSBcIjJcIjtcclxuICB9XHJcbn0pO1xyXG5cclxuYmFyVmVydGljYWxDaGVja2JveC5hZGRFdmVudExpc3RlbmVyKFwiY2hhbmdlXCIsIGZ1bmN0aW9uICgpIHtcclxuICBpZiAodGhpcy5jaGVja2VkKSB7XHJcbiAgICBiYXJWYWx1ZXMudG9vbHRpcENoZWNrYm94ID0gXCJ1bmNoZWNrZWRcIjtcclxuICAgIGJhclRvb2x0aXBDaGVja2JveC5jaGVja2VkID0gZmFsc2U7XHJcbiAgICBkMy5zZWxlY3QoXCIjYmFyX3Rvb2x0aXBfbG9naWNfc3BhblwiKS5jbGFzc2VkKFwiaGlkZVwiLCB0cnVlKTtcclxuXHJcbiAgICBiYXJWYWx1ZXMuZGlyZWN0aW9uID0gXCJ2ZXJ0aWNhbFwiO1xyXG5cclxuICAgIGJhckNoYXJ0KFxyXG4gICAgICBiYXJWYWx1ZXMuZGlyZWN0aW9uLFxyXG4gICAgICBiYXJWYWx1ZXMudGl0bGVJbnB1dCxcclxuICAgICAgYmFyVmFsdWVzLnhBeGlzVGl0bGVJbnB1dCxcclxuICAgICAgYmFyVmFsdWVzLnlBeGlzVGl0bGVJbnB1dCxcclxuICAgICAgYmFyVmFsdWVzLnRpdGxlU2xpZGVyLFxyXG4gICAgICBiYXJWYWx1ZXMueEF4aXNUaXRsZVNsaWRlcixcclxuICAgICAgYmFyVmFsdWVzLnlBeGlzVGl0bGVTbGlkZXIsXHJcbiAgICAgIGJhclZhbHVlcy54QXhpc0dyaWRDaGVja2JveCxcclxuICAgICAgYmFyVmFsdWVzLnlBeGlzR3JpZENoZWNrYm94LFxyXG4gICAgICBiYXJWYWx1ZXMuaG92ZXJDaGVja2JveCxcclxuICAgICAgYmFyVmFsdWVzLnhBeGlzTGluZUNoZWNrYm94LFxyXG4gICAgICBiYXJWYWx1ZXMueUF4aXNMaW5lQ2hlY2tib3gsXHJcbiAgICAgIGJhclZhbHVlcy50b29sdGlwQ2hlY2tib3gsXHJcbiAgICAgIGJhclZhbHVlcy5iYWNrZ3JvdWRDUCxcclxuICAgICAgYmFyVmFsdWVzLmJhcnNDUCxcclxuICAgICAgYmFyVmFsdWVzLnRpY2tDUCxcclxuICAgICAgYmFyVmFsdWVzLnRpdGxlQ1AsXHJcbiAgICAgIGJhclZhbHVlcy54QXhpc1RpdGxlQ1AsXHJcbiAgICAgIGJhclZhbHVlcy55QXhpc1RpdGxlQ1AsXHJcbiAgICAgIGJhclZhbHVlcy5ncmlkQ1AsXHJcbiAgICAgIGJhclZhbHVlcy54QXhpc0xpbmVDUCxcclxuICAgICAgYmFyVmFsdWVzLnlBeGlzTGluZUNQLFxyXG4gICAgICBiYXJWYWx1ZXMuYm9yZGVyQ1BcclxuICAgICk7XHJcblxyXG4gICAgYmFySG9yaXpvbnRhbENoZWNrYm94LmNoZWNrZWQgPSBmYWxzZTtcclxuICAgIGQzLnNlbGVjdChcIiNiYXJfaG9yaXpvbnRhbF9zY2FsZV9zcGFuXCIpLmNsYXNzZWQoXCJoaWRlXCIsIHRydWUpO1xyXG4gICAgZDMuc2VsZWN0KFwiI2Jhcl9ob3Jpem9udGFsX2Jhcl9sb2dpY19zcGFuXCIpLmNsYXNzZWQoXCJoaWRlXCIsIHRydWUpO1xyXG5cclxuICAgIGQzLnNlbGVjdChcIiNiYXJfdmVydGljYWxfc2NhbGVfc3BhblwiKS5jbGFzc2VkKFwiaGlkZVwiLCBmYWxzZSk7XHJcbiAgICBkMy5zZWxlY3QoXCIjYmFyX3ZlcnRpY2FsX2Jhcl9sb2dpY19zcGFuXCIpLmNsYXNzZWQoXCJoaWRlXCIsIGZhbHNlKTtcclxuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYmFyX2dudGhfY2hpbGRfc3Bhbl94XCIpLmlubmVySFRNTCA9IFwiMVwiO1xyXG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJiYXJfZ250aF9jaGlsZF9zcGFuX3lcIikuaW5uZXJIVE1MID0gXCIyXCI7XHJcbiAgfSBlbHNlIGlmICh0aGlzLmNoZWNrZWQgPT09IGZhbHNlKSB7XHJcbiAgICBiYXJWYWx1ZXMudG9vbHRpcENoZWNrYm94ID0gXCJ1bmNoZWNrZWRcIjtcclxuICAgIGJhclRvb2x0aXBDaGVja2JveC5jaGVja2VkID0gZmFsc2U7XHJcbiAgICBkMy5zZWxlY3QoXCIjYmFyX3Rvb2x0aXBfbG9naWNfc3BhblwiKS5jbGFzc2VkKFwiaGlkZVwiLCB0cnVlKTtcclxuXHJcbiAgICBiYXJWYWx1ZXMuZGlyZWN0aW9uID0gXCJob3Jpem9udGFsXCI7XHJcblxyXG4gICAgYmFyQ2hhcnQoXHJcbiAgICAgIGJhclZhbHVlcy5kaXJlY3Rpb24sXHJcbiAgICAgIGJhclZhbHVlcy50aXRsZUlucHV0LFxyXG4gICAgICBiYXJWYWx1ZXMueEF4aXNUaXRsZUlucHV0LFxyXG4gICAgICBiYXJWYWx1ZXMueUF4aXNUaXRsZUlucHV0LFxyXG4gICAgICBiYXJWYWx1ZXMudGl0bGVTbGlkZXIsXHJcbiAgICAgIGJhclZhbHVlcy54QXhpc1RpdGxlU2xpZGVyLFxyXG4gICAgICBiYXJWYWx1ZXMueUF4aXNUaXRsZVNsaWRlcixcclxuICAgICAgYmFyVmFsdWVzLnhBeGlzR3JpZENoZWNrYm94LFxyXG4gICAgICBiYXJWYWx1ZXMueUF4aXNHcmlkQ2hlY2tib3gsXHJcbiAgICAgIGJhclZhbHVlcy5ob3ZlckNoZWNrYm94LFxyXG4gICAgICBiYXJWYWx1ZXMueEF4aXNMaW5lQ2hlY2tib3gsXHJcbiAgICAgIGJhclZhbHVlcy55QXhpc0xpbmVDaGVja2JveCxcclxuICAgICAgYmFyVmFsdWVzLnRvb2x0aXBDaGVja2JveCxcclxuICAgICAgYmFyVmFsdWVzLmJhY2tncm91ZENQLFxyXG4gICAgICBiYXJWYWx1ZXMuYmFyc0NQLFxyXG4gICAgICBiYXJWYWx1ZXMudGlja0NQLFxyXG4gICAgICBiYXJWYWx1ZXMudGl0bGVDUCxcclxuICAgICAgYmFyVmFsdWVzLnhBeGlzVGl0bGVDUCxcclxuICAgICAgYmFyVmFsdWVzLnlBeGlzVGl0bGVDUCxcclxuICAgICAgYmFyVmFsdWVzLmdyaWRDUCxcclxuICAgICAgYmFyVmFsdWVzLnhBeGlzTGluZUNQLFxyXG4gICAgICBiYXJWYWx1ZXMueUF4aXNMaW5lQ1AsXHJcbiAgICAgIGJhclZhbHVlcy5ib3JkZXJDUFxyXG4gICAgKTtcclxuXHJcbiAgICBiYXJIb3Jpem9udGFsQ2hlY2tib3guY2hlY2tlZCA9IHRydWU7XHJcbiAgICBkMy5zZWxlY3QoXCIjYmFyX2hvcml6b250YWxfc2NhbGVfc3BhblwiKS5jbGFzc2VkKFwiaGlkZVwiLCBmYWxzZSk7XHJcbiAgICBkMy5zZWxlY3QoXCIjYmFyX2hvcml6b250YWxfYmFyX2xvZ2ljX3NwYW5cIikuY2xhc3NlZChcImhpZGVcIiwgZmFsc2UpO1xyXG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJiYXJfZ250aF9jaGlsZF9zcGFuX3hcIikuaW5uZXJIVE1MID0gXCIyXCI7XHJcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImJhcl9nbnRoX2NoaWxkX3NwYW5feVwiKS5pbm5lckhUTUwgPSBcIjFcIjtcclxuXHJcbiAgICBkMy5zZWxlY3QoXCIjYmFyX3ZlcnRpY2FsX3NjYWxlX3NwYW5cIikuY2xhc3NlZChcImhpZGVcIiwgdHJ1ZSk7XHJcbiAgICBkMy5zZWxlY3QoXCIjYmFyX3ZlcnRpY2FsX2Jhcl9sb2dpY19zcGFuXCIpLmNsYXNzZWQoXCJoaWRlXCIsIHRydWUpO1xyXG4gIH1cclxufSk7XHJcblxyXG5iYXJYQXhpc0dyaWRDaGVja2JveC5hZGRFdmVudExpc3RlbmVyKFwiY2hhbmdlXCIsIGZ1bmN0aW9uICgpIHtcclxuICBpZiAodGhpcy5jaGVja2VkKSB7XHJcbiAgICBiYXJWYWx1ZXMueEF4aXNHcmlkQ2hlY2tib3ggPSBcImNoZWNrZWRcIjtcclxuICAgIGQzLnNlbGVjdChcIiNiYXJfeF9ncmlkXCIpLmF0dHIoXCJkaXNwbGF5XCIsIFwiXCIpO1xyXG4gICAgZDMuc2VsZWN0KFwiI2Jhcl94X2dyaWRfc3BhblwiKS5jbGFzc2VkKFwiaGlkZVwiLCBmYWxzZSk7XHJcbiAgfSBlbHNlIGlmICh0aGlzLmNoZWNrZWQgPT09IGZhbHNlKSB7XHJcbiAgICBiYXJWYWx1ZXMueEF4aXNHcmlkQ2hlY2tib3ggPSBcInVuY2hlY2tlZFwiO1xyXG4gICAgZDMuc2VsZWN0KFwiI2Jhcl94X2dyaWRcIikuYXR0cihcImRpc3BsYXlcIiwgXCJub25lXCIpO1xyXG4gICAgZDMuc2VsZWN0KFwiI2Jhcl94X2dyaWRfc3BhblwiKS5jbGFzc2VkKFwiaGlkZVwiLCB0cnVlKTtcclxuICB9XHJcbn0pO1xyXG5cclxuYmFyWUF4aXNHcmlkQ2hlY2tib3guYWRkRXZlbnRMaXN0ZW5lcihcImNoYW5nZVwiLCBmdW5jdGlvbiAoKSB7XHJcbiAgaWYgKHRoaXMuY2hlY2tlZCkge1xyXG4gICAgYmFyVmFsdWVzLnlBeGlzR3JpZENoZWNrYm94ID0gXCJjaGVja2VkXCI7XHJcbiAgICBkMy5zZWxlY3QoXCIjYmFyX3lfZ3JpZFwiKS5hdHRyKFwiZGlzcGxheVwiLCBcIlwiKTtcclxuICAgIGQzLnNlbGVjdChcIiNiYXJfeV9ncmlkX3NwYW5cIikuY2xhc3NlZChcImhpZGVcIiwgZmFsc2UpO1xyXG4gIH0gZWxzZSBpZiAodGhpcy5jaGVja2VkID09PSBmYWxzZSkge1xyXG4gICAgYmFyVmFsdWVzLnlBeGlzR3JpZENoZWNrYm94ID0gXCJ1bmNoZWNrZWRcIjtcclxuICAgIGQzLnNlbGVjdChcIiNiYXJfeV9ncmlkXCIpLmF0dHIoXCJkaXNwbGF5XCIsIFwibm9uZVwiKTtcclxuICAgIGQzLnNlbGVjdChcIiNiYXJfeV9ncmlkX3NwYW5cIikuY2xhc3NlZChcImhpZGVcIiwgdHJ1ZSk7XHJcbiAgfVxyXG59KTtcclxuXHJcbmJhckhvdmVyQ2hlY2tib3guYWRkRXZlbnRMaXN0ZW5lcihcImNoYW5nZVwiLCBmdW5jdGlvbiAoKSB7XHJcbiAgaWYgKHRoaXMuY2hlY2tlZCkge1xyXG4gICAgYmFyVmFsdWVzLmhvdmVyQ2hlY2tib3ggPSBcImNoZWNrZWRcIjtcclxuICAgIGQzLnNlbGVjdEFsbChcInJlY3RcIikuY2xhc3NlZChcImhvdmVyZWRcIiwgdHJ1ZSk7XHJcbiAgICBkMy5zZWxlY3QoXCIjYmFyX2hvdmVyX3NwYW5cIikuY2xhc3NlZChcImhpZGVcIiwgZmFsc2UpO1xyXG4gICAgZDMuc2VsZWN0KFwiI2Jhcl9ob3Zlcl9zcGFuMlwiKS5jbGFzc2VkKFwiaGlkZVwiLCBmYWxzZSk7XHJcbiAgfSBlbHNlIGlmICh0aGlzLmNoZWNrZWQgPT09IGZhbHNlKSB7XHJcbiAgICBiYXJWYWx1ZXMuaG92ZXJDaGVja2JveCA9IFwidW5jaGVja2VkXCI7XHJcbiAgICBkMy5zZWxlY3RBbGwoXCJyZWN0XCIpLmNsYXNzZWQoXCJob3ZlcmVkXCIsIGZhbHNlKTtcclxuICAgIGQzLnNlbGVjdChcIiNiYXJfaG92ZXJfc3BhblwiKS5jbGFzc2VkKFwiaGlkZVwiLCB0cnVlKTtcclxuICAgIGQzLnNlbGVjdChcIiNiYXJfaG92ZXJfc3BhbjJcIikuY2xhc3NlZChcImhpZGVcIiwgdHJ1ZSk7XHJcbiAgfVxyXG59KTtcclxuXHJcbmJhclhBeGlzTGluZUNoZWNrYm94LmFkZEV2ZW50TGlzdGVuZXIoXCJjaGFuZ2VcIiwgZnVuY3Rpb24gKCkge1xyXG4gIGlmICh0aGlzLmNoZWNrZWQpIHtcclxuICAgIGJhclZhbHVlcy54QXhpc0xpbmVDaGVja2JveCA9IFwiY2hlY2tlZFwiO1xyXG4gICAgZDMuc2VsZWN0KFwiI2Jhcl94X2F4aXMgPiBwYXRoXCIpLmF0dHIoXCJkaXNwbGF5XCIsIFwiXCIpO1xyXG4gICAgZDMuc2VsZWN0KFwiI2Jhcl94X2xpbmVfc3BhblwiKS5jbGFzc2VkKFwiaGlkZVwiLCB0cnVlKTtcclxuICB9IGVsc2UgaWYgKHRoaXMuY2hlY2tlZCA9PT0gZmFsc2UpIHtcclxuICAgIGJhclZhbHVlcy54QXhpc0xpbmVDaGVja2JveCA9IFwidW5jaGVja2VkXCI7XHJcbiAgICBkMy5zZWxlY3QoXCIjYmFyX3hfYXhpcyA+IHBhdGhcIikuYXR0cihcImRpc3BsYXlcIiwgXCJub25lXCIpO1xyXG4gICAgZDMuc2VsZWN0KFwiI2Jhcl94X2xpbmVfc3BhblwiKS5jbGFzc2VkKFwiaGlkZVwiLCBmYWxzZSk7XHJcbiAgfVxyXG59KTtcclxuXHJcbmJhcllBeGlzTGluZUNoZWNrYm94LmFkZEV2ZW50TGlzdGVuZXIoXCJjaGFuZ2VcIiwgZnVuY3Rpb24gKCkge1xyXG4gIGlmICh0aGlzLmNoZWNrZWQpIHtcclxuICAgIGJhclZhbHVlcy55QXhpc0xpbmVDaGVja2JveCA9IFwiY2hlY2tlZFwiO1xyXG4gICAgZDMuc2VsZWN0KFwiI2Jhcl95X2F4aXMgPiBwYXRoXCIpLmF0dHIoXCJkaXNwbGF5XCIsIFwiXCIpO1xyXG4gICAgZDMuc2VsZWN0KFwiI2Jhcl95X2xpbmVfc3BhblwiKS5jbGFzc2VkKFwiaGlkZVwiLCB0cnVlKTtcclxuICB9IGVsc2UgaWYgKHRoaXMuY2hlY2tlZCA9PT0gZmFsc2UpIHtcclxuICAgIGJhclZhbHVlcy55QXhpc0xpbmVDaGVja2JveCA9IFwidW5jaGVja2VkXCI7XHJcbiAgICBkMy5zZWxlY3QoXCIjYmFyX3lfYXhpcyA+IHBhdGhcIikuYXR0cihcImRpc3BsYXlcIiwgXCJub25lXCIpO1xyXG4gICAgZDMuc2VsZWN0KFwiI2Jhcl95X2xpbmVfc3BhblwiKS5jbGFzc2VkKFwiaGlkZVwiLCBmYWxzZSk7XHJcbiAgfVxyXG59KTtcclxuIiwiaW1wb3J0IHsgYmFyQ2hhcnQgfSBmcm9tIFwiLi9iYXJfY2hhcnRfZ3JhcGguanNcIjtcclxuaW1wb3J0IHsgYmFyVmFsdWVzIH0gZnJvbSBcIi4vYmFyX2NoYXJ0X3ZhbHVlcy5qc1wiO1xyXG5pbXBvcnQgXCIuL2Jhcl9jaGFydF9saXN0ZW5lcnMuanNcIjtcclxuaW1wb3J0IFwiLi9iYXJfY2hhcnRfY29sb3JfcGlja2VyLmpzXCI7XHJcblxyXG5pbXBvcnQgeyBzZWxlY3QgfSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XHJcblxyXG5jb25zdCBkMyA9IHsgc2VsZWN0IH07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaW5pdEJhckNoYXJ0KCkge1xyXG4gIGJhckNoYXJ0KFxyXG4gICAgYmFyVmFsdWVzLmRpcmVjdGlvbixcclxuICAgIGJhclZhbHVlcy50aXRsZUlucHV0LFxyXG4gICAgYmFyVmFsdWVzLnhBeGlzVGl0bGVJbnB1dCxcclxuICAgIGJhclZhbHVlcy55QXhpc1RpdGxlSW5wdXQsXHJcbiAgICBiYXJWYWx1ZXMudGl0bGVTbGlkZXIsXHJcbiAgICBiYXJWYWx1ZXMueEF4aXNUaXRsZVNsaWRlcixcclxuICAgIGJhclZhbHVlcy55QXhpc1RpdGxlU2xpZGVyLFxyXG4gICAgYmFyVmFsdWVzLnhBeGlzR3JpZENoZWNrYm94LFxyXG4gICAgYmFyVmFsdWVzLnlBeGlzR3JpZENoZWNrYm94LFxyXG4gICAgYmFyVmFsdWVzLmhvdmVyQ2hlY2tib3gsXHJcbiAgICBiYXJWYWx1ZXMueEF4aXNMaW5lQ2hlY2tib3gsXHJcbiAgICBiYXJWYWx1ZXMueUF4aXNMaW5lQ2hlY2tib3gsXHJcbiAgICBiYXJWYWx1ZXMudG9vbHRpcENoZWNrYm94LFxyXG4gICAgYmFyVmFsdWVzLmJhY2tncm91ZENQLFxyXG4gICAgYmFyVmFsdWVzLmJhcnNDUCxcclxuICAgIGJhclZhbHVlcy50aWNrQ1AsXHJcbiAgICBiYXJWYWx1ZXMudGl0bGVDUCxcclxuICAgIGJhclZhbHVlcy54QXhpc1RpdGxlQ1AsXHJcbiAgICBiYXJWYWx1ZXMueUF4aXNUaXRsZUNQLFxyXG4gICAgYmFyVmFsdWVzLmdyaWRDUCxcclxuICAgIGJhclZhbHVlcy54QXhpc0xpbmVDUCxcclxuICAgIGJhclZhbHVlcy55QXhpc0xpbmVDUCxcclxuICAgIGJhclZhbHVlcy5ib3JkZXJDUFxyXG4gICk7XHJcblxyXG4gIC8vdG8gc2V0IG5ldyBkZWZhdWx0LCBzZXQgRkFMU0UgdG8gVFJVRSwgYW5kIFwiMVwiIHRvIFwiMlwiIHRvIHdvcmsgcHJvcGVybHlcclxuICBkMy5zZWxlY3QoXCIjYmFyX3ZlcnRpY2FsX3NjYWxlX3NwYW5cIikuY2xhc3NlZChcImhpZGVcIiwgZmFsc2UpO1xyXG4gIGQzLnNlbGVjdChcIiNiYXJfdmVydGljYWxfYmFyX2xvZ2ljX3NwYW5cIikuY2xhc3NlZChcImhpZGVcIiwgZmFsc2UpO1xyXG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYmFyX2dudGhfY2hpbGRfc3Bhbl94XCIpLmlubmVySFRNTCA9IFwiMVwiO1xyXG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYmFyX2dudGhfY2hpbGRfc3Bhbl95XCIpLmlubmVySFRNTCA9IFwiMlwiO1xyXG4gIGQzLnNlbGVjdChcIiNiYXJfaG9yaXpvbnRhbF9zY2FsZV9zcGFuXCIpLmNsYXNzZWQoXCJoaWRlXCIsIHRydWUpO1xyXG4gIGQzLnNlbGVjdChcIiNiYXJfaG9yaXpvbnRhbF9iYXJfbG9naWNfc3BhblwiKS5jbGFzc2VkKFwiaGlkZVwiLCB0cnVlKTtcclxuXHJcbiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJiYXJfdGl0bGVfc3BhblwiKS5pbm5lckhUTUwgPSBiYXJWYWx1ZXMudGl0bGVJbnB1dDtcclxuICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImJhcl94X3RpdGxlX3NwYW5cIikuaW5uZXJIVE1MID1cclxuICAgIGJhclZhbHVlcy54QXhpc1RpdGxlSW5wdXQ7XHJcbiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJiYXJfeV90aXRsZV9zcGFuXCIpLmlubmVySFRNTCA9XHJcbiAgICBiYXJWYWx1ZXMueUF4aXNUaXRsZUlucHV0O1xyXG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYmFyX3RpdGxlX3NsaWRlcl9zcGFuXCIpLmlubmVySFRNTCA9XHJcbiAgICBiYXJWYWx1ZXMudGl0bGVTbGlkZXI7XHJcbiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJiYXJfeF90aXRsZV9zbGlkZXJfc3BhblwiKS5pbm5lckhUTUwgPVxyXG4gICAgYmFyVmFsdWVzLnhBeGlzVGl0bGVTbGlkZXI7XHJcbiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJiYXJfeV90aXRsZV9zbGlkZXJfc3BhblwiKS5pbm5lckhUTUwgPVxyXG4gICAgYmFyVmFsdWVzLnlBeGlzVGl0bGVTbGlkZXI7XHJcblxyXG4gIGQzLnNlbGVjdChcIiNiYXJfeF9heGlzID4gcGF0aFwiKS5hdHRyKFwiZGlzcGxheVwiLCBcIlwiKTtcclxuICBkMy5zZWxlY3QoXCIjYmFyX3hfbGluZV9zcGFuXCIpLmNsYXNzZWQoXCJoaWRlXCIsIHRydWUpO1xyXG4gIGQzLnNlbGVjdChcIiNiYXJfeV9heGlzID4gcGF0aFwiKS5hdHRyKFwiZGlzcGxheVwiLCBcIm5vbmVcIik7XHJcbiAgZDMuc2VsZWN0KFwiI2Jhcl95X2xpbmVfc3BhblwiKS5jbGFzc2VkKFwiaGlkZVwiLCBmYWxzZSk7XHJcbiAgZDMuc2VsZWN0KFwiI2Jhcl94X2dyaWRcIikuYXR0cihcImRpc3BsYXlcIiwgXCJub25lXCIpO1xyXG4gIGQzLnNlbGVjdChcIiNiYXJfeF9ncmlkX3NwYW5cIikuY2xhc3NlZChcImhpZGVcIiwgdHJ1ZSk7XHJcbiAgZDMuc2VsZWN0KFwiI2Jhcl9ob3Zlcl9zcGFuXCIpLmNsYXNzZWQoXCJoaWRlXCIsIHRydWUpO1xyXG4gIGQzLnNlbGVjdChcIiNiYXJfaG92ZXJfc3BhbjJcIikuY2xhc3NlZChcImhpZGVcIiwgdHJ1ZSk7XHJcblxyXG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYmFyX2JhY2tncm91bmRfY3Bfc3BhblwiKS5pbm5lckhUTUwgPVxyXG4gICAgYmFyVmFsdWVzLmJhY2tncm91ZENQO1xyXG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYmFyX2NwX3NwYW5cIikuaW5uZXJIVE1MID0gYmFyVmFsdWVzLmJhcnNDUDtcclxuICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImJhcl9ib3JkZXJfY3Bfc3BhblwiKS5pbm5lckhUTUwgPSBiYXJWYWx1ZXMuYm9yZGVyQ1A7XHJcbiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJiYXJfdGl0bGVfY3Bfc3BhblwiKS5pbm5lckhUTUwgPSBiYXJWYWx1ZXMudGl0bGVDUDtcclxuICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImJhcl94X3RpdGxlX2NwX3NwYW5cIikuaW5uZXJIVE1MID1cclxuICAgIGJhclZhbHVlcy54QXhpc1RpdGxlQ1A7XHJcbiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJiYXJfeV90aXRsZV9jcF9zcGFuXCIpLmlubmVySFRNTCA9XHJcbiAgICBiYXJWYWx1ZXMueUF4aXNUaXRsZUNQO1xyXG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYmFyX2dyaWRfY3Bfc3BhblwiKS5pbm5lckhUTUwgPSBiYXJWYWx1ZXMuZ3JpZENQO1xyXG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYmFyX3hfbGluZV9jcF9zcGFuXCIpLmlubmVySFRNTCA9XHJcbiAgICBiYXJWYWx1ZXMueEF4aXNMaW5lQ1A7XHJcbiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJiYXJfeV9saW5lX2NwX3NwYW5cIikuaW5uZXJIVE1MID1cclxuICAgIGJhclZhbHVlcy55QXhpc0xpbmVDUDtcclxuICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImJhcl90aWNrX2NwX3NwYW5cIikuaW5uZXJIVE1MID0gYmFyVmFsdWVzLnRpY2tDUDtcclxufVxyXG4iLCJpbXBvcnQge1xyXG4gIGJhclRpdGxlSW5wdXQsXHJcbiAgYmFyWEF4aXNUaXRsZUlucHV0LFxyXG4gIGJhcllBeGlzVGl0bGVJbnB1dCxcclxuICBiYXJUaXRsZVNsaWRlcixcclxuICBiYXJYQXhpc1RpdGxlU2xpZGVyLFxyXG4gIGJhcllBeGlzVGl0bGVTbGlkZXIsXHJcbn0gZnJvbSBcIi4vYmFyX2NoYXJ0X2lucHV0cy5qc1wiO1xyXG5cclxuZXhwb3J0IGxldCBiYXJWYWx1ZXMgPSB7XHJcbiAgdGl0bGVJbnB1dDogYmFyVGl0bGVJbnB1dC52YWx1ZSxcclxuICB4QXhpc1RpdGxlSW5wdXQ6IGJhclhBeGlzVGl0bGVJbnB1dC52YWx1ZSxcclxuICB5QXhpc1RpdGxlSW5wdXQ6IGJhcllBeGlzVGl0bGVJbnB1dC52YWx1ZSxcclxuXHJcbiAgdGl0bGVTbGlkZXI6IGJhclRpdGxlU2xpZGVyLnZhbHVlLFxyXG4gIHhBeGlzVGl0bGVTbGlkZXI6IGJhclhBeGlzVGl0bGVTbGlkZXIudmFsdWUsXHJcbiAgeUF4aXNUaXRsZVNsaWRlcjogYmFyWUF4aXNUaXRsZVNsaWRlci52YWx1ZSxcclxuXHJcbiAgdG9vbHRpcENoZWNrYm94OiBcInVuY2hlY2tlZFwiLFxyXG4gIHhBeGlzR3JpZENoZWNrYm94OiBcInVuY2hlY2tlZFwiLFxyXG4gIHlBeGlzR3JpZENoZWNrYm94OiBcImNoZWNrZWRcIixcclxuICBob3ZlckNoZWNrYm94OiBcInVuY2hlY2tlZFwiLFxyXG4gIHhBeGlzTGluZUNoZWNrYm94OiBcImNoZWNrZWRcIixcclxuICB5QXhpc0xpbmVDaGVja2JveDogXCJ1bmNoZWNrZWRcIixcclxuXHJcbiAgYmFja2dyb3VkQ1A6IFwicmdiYSgyNTUsMjU1LDI1NSwxKVwiLFxyXG4gIGJhcnNDUDogXCJyZ2JhKDIyNiwgMTYxLCAyOCwgMC4zKVwiLFxyXG4gIHRpY2tDUDogXCJyZ2IoMTUzLCAxNTMsIDE1MylcIixcclxuICB0aXRsZUNQOiBcInJnYigxMDMsIDEwMywgMTAzKVwiLFxyXG4gIHhBeGlzVGl0bGVDUDogXCJyZ2IoMTAzLCAxMDMsIDEwMylcIixcclxuICB5QXhpc1RpdGxlQ1A6IFwicmdiKDEwMywgMTAzLCAxMDMpXCIsXHJcbiAgZ3JpZENQOiBcInJnYmEoMCwgMCwgMCwgMC4wNilcIixcclxuICB4QXhpc0xpbmVDUDogXCJyZ2IoMTUzLCAxNTMsIDE1MylcIixcclxuICB5QXhpc0xpbmVDUDogXCJyZ2IoMjExLCAyMTEsIDIxMSlcIixcclxuICBib3JkZXJDUDogXCJyZ2JhKDAsIDAsIDAsIDAuMSlcIixcclxuXHJcbiAgZGlyZWN0aW9uOiBcInZlcnRpY2FsXCIsXHJcbn07XHJcbiIsImltcG9ydCB7IGxpbmVWYWx1ZXMgfSBmcm9tIFwiLi9saW5lX2NoYXJ0X3ZhbHVlcy5qc1wiO1xyXG5pbXBvcnQgeyBzZWxlY3QsIHNlbGVjdEFsbCB9IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcclxuXHJcbmNvbnN0IGQzID0geyBzZWxlY3QsIHNlbGVjdEFsbCB9O1xyXG5cclxuJChcIiNsaW5lX2JhY2tncm91bmRfY3BcIikuc3BlY3RydW0oe1xyXG4gIHR5cGU6IFwiY29sb3JcIixcclxuICBwcmVmZXJyZWRGb3JtYXQ6IFwicmdiXCIsXHJcbiAgc2hvd0lucHV0OiB0cnVlLFxyXG4gIHNob3dCdXR0b25zOiBmYWxzZSxcclxuICBhbGxvd0VtcHR5OiBmYWxzZSxcclxuICBtb3ZlOiBmdW5jdGlvbiAoY29sb3IpIHtcclxuICAgIGxpbmVWYWx1ZXMuYmFja2dyb3VuZENQID0gY29sb3IudG9SZ2JTdHJpbmcoKTtcclxuXHJcbiAgICBkMy5zZWxlY3QoXCIjbGluZV9jaGFydFwiKS5zdHlsZShcImJhY2tncm91bmQtY29sb3JcIiwgbGluZVZhbHVlcy5iYWNrZ3JvdW5kQ1ApO1xyXG5cclxuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFxyXG4gICAgICBcImxpbmVfYmFja2dyb3VuZF9jcF9zcGFuXCJcclxuICAgICkuaW5uZXJIVE1MID0gY29sb3IudG9SZ2JTdHJpbmcoKTtcclxuICB9LFxyXG59KTtcclxuXHJcbiQoXCIjbGluZV9jb2xvcl9jcDFcIikuc3BlY3RydW0oe1xyXG4gIHR5cGU6IFwiY29sb3JcIixcclxuICBwcmVmZXJyZWRGb3JtYXQ6IFwicmdiXCIsXHJcbiAgc2hvd0lucHV0OiB0cnVlLFxyXG4gIHNob3dCdXR0b25zOiBmYWxzZSxcclxuICBhbGxvd0VtcHR5OiBmYWxzZSxcclxuICBtb3ZlOiBmdW5jdGlvbiAoY29sb3IpIHtcclxuICAgIGxpbmVWYWx1ZXMubGluZUNQMSA9IGNvbG9yLnRvUmdiU3RyaW5nKCk7XHJcblxyXG4gICAgZDMuc2VsZWN0KFwiI2xpbmUxXCIpLnN0eWxlKFwic3Ryb2tlXCIsIGxpbmVWYWx1ZXMubGluZUNQMSk7XHJcblxyXG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJsaW5lXzFfY3Bfc3BhblwiKS5pbm5lckhUTUwgPSBjb2xvci50b1JnYlN0cmluZygpO1xyXG4gIH0sXHJcbn0pO1xyXG5cclxuJChcIiNsaW5lX2NvbG9yX2NwMlwiKS5zcGVjdHJ1bSh7XHJcbiAgdHlwZTogXCJjb2xvclwiLFxyXG4gIHByZWZlcnJlZEZvcm1hdDogXCJyZ2JcIixcclxuICBzaG93SW5wdXQ6IHRydWUsXHJcbiAgc2hvd0J1dHRvbnM6IGZhbHNlLFxyXG4gIGFsbG93RW1wdHk6IGZhbHNlLFxyXG4gIG1vdmU6IGZ1bmN0aW9uIChjb2xvcikge1xyXG4gICAgbGluZVZhbHVlcy5saW5lQ1AyID0gY29sb3IudG9SZ2JTdHJpbmcoKTtcclxuXHJcbiAgICBkMy5zZWxlY3QoXCIjbGluZTJcIikuc3R5bGUoXCJzdHJva2VcIiwgbGluZVZhbHVlcy5saW5lQ1AyKTtcclxuXHJcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImxpbmVfMl9jcF9zcGFuXCIpLmlubmVySFRNTCA9IGNvbG9yLnRvUmdiU3RyaW5nKCk7XHJcbiAgfSxcclxufSk7XHJcblxyXG4kKFwiI2xpbmVfY29sb3JfY3AzXCIpLnNwZWN0cnVtKHtcclxuICB0eXBlOiBcImNvbG9yXCIsXHJcbiAgcHJlZmVycmVkRm9ybWF0OiBcInJnYlwiLFxyXG4gIHNob3dJbnB1dDogdHJ1ZSxcclxuICBzaG93QnV0dG9uczogZmFsc2UsXHJcbiAgYWxsb3dFbXB0eTogZmFsc2UsXHJcbiAgbW92ZTogZnVuY3Rpb24gKGNvbG9yKSB7XHJcbiAgICBsaW5lVmFsdWVzLmxpbmVDUDMgPSBjb2xvci50b1JnYlN0cmluZygpO1xyXG5cclxuICAgIGQzLnNlbGVjdChcIiNsaW5lM1wiKS5zdHlsZShcInN0cm9rZVwiLCBsaW5lVmFsdWVzLmxpbmVDUDMpO1xyXG5cclxuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibGluZV8zX2NwX3NwYW5cIikuaW5uZXJIVE1MID0gY29sb3IudG9SZ2JTdHJpbmcoKTtcclxuICB9LFxyXG59KTtcclxuXHJcbiQoXCIjbGluZV90aWNrX2NwXCIpLnNwZWN0cnVtKHtcclxuICB0eXBlOiBcImNvbG9yXCIsXHJcbiAgcHJlZmVycmVkRm9ybWF0OiBcInJnYlwiLFxyXG4gIHNob3dJbnB1dDogdHJ1ZSxcclxuICBzaG93QnV0dG9uczogZmFsc2UsXHJcbiAgYWxsb3dFbXB0eTogZmFsc2UsXHJcbiAgbW92ZTogZnVuY3Rpb24gKGNvbG9yKSB7XHJcbiAgICBsaW5lVmFsdWVzLnRpY2tDUCA9IGNvbG9yLnRvUmdiU3RyaW5nKCk7XHJcblxyXG4gICAgZDMuc2VsZWN0QWxsKFwiI2xpbmVfY2hhcnQgPiBnID4gZyA+IC50aWNrID4gdGV4dFwiKS5zdHlsZShcclxuICAgICAgXCJmaWxsXCIsXHJcbiAgICAgIGxpbmVWYWx1ZXMudGlja0NQXHJcbiAgICApO1xyXG5cclxuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFxyXG4gICAgICBcImxpbmVfdGlja19jcF9zcGFuXCJcclxuICAgICkuaW5uZXJIVE1MID0gY29sb3IudG9SZ2JTdHJpbmcoKTtcclxuICB9LFxyXG59KTtcclxuXHJcbiQoXCIjbGluZV90aXRsZV9jcFwiKS5zcGVjdHJ1bSh7XHJcbiAgdHlwZTogXCJjb2xvclwiLFxyXG4gIHByZWZlcnJlZEZvcm1hdDogXCJyZ2JcIixcclxuICBzaG93SW5wdXQ6IHRydWUsXHJcbiAgc2hvd0J1dHRvbnM6IGZhbHNlLFxyXG4gIGFsbG93RW1wdHk6IGZhbHNlLFxyXG4gIG1vdmU6IGZ1bmN0aW9uIChjb2xvcikge1xyXG4gICAgbGluZVZhbHVlcy50aXRsZUNQID0gY29sb3IudG9SZ2JTdHJpbmcoKTtcclxuXHJcbiAgICBkMy5zZWxlY3QoXCIjbGluZV90aXRsZVwiKS5zdHlsZShcImZpbGxcIiwgbGluZVZhbHVlcy50aXRsZUNQKTtcclxuXHJcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcclxuICAgICAgXCJsaW5lX3RpdGxlX2NwX3NwYW5cIlxyXG4gICAgKS5pbm5lckhUTUwgPSBjb2xvci50b1JnYlN0cmluZygpO1xyXG4gIH0sXHJcbn0pO1xyXG5cclxuJChcIiNsaW5lX3hheGlzX3RpdGxlX2NwXCIpLnNwZWN0cnVtKHtcclxuICB0eXBlOiBcImNvbG9yXCIsXHJcbiAgcHJlZmVycmVkRm9ybWF0OiBcInJnYlwiLFxyXG4gIHNob3dJbnB1dDogdHJ1ZSxcclxuICBzaG93QnV0dG9uczogZmFsc2UsXHJcbiAgYWxsb3dFbXB0eTogZmFsc2UsXHJcbiAgbW92ZTogZnVuY3Rpb24gKGNvbG9yKSB7XHJcbiAgICBsaW5lVmFsdWVzLnhBeGlzVGl0bGVDUCA9IGNvbG9yLnRvUmdiU3RyaW5nKCk7XHJcblxyXG4gICAgZDMuc2VsZWN0KFwiI2xpbmVfeGF4aXNfdGl0bGVcIikuc3R5bGUoXCJmaWxsXCIsIGxpbmVWYWx1ZXMueEF4aXNUaXRsZUNQKTtcclxuXHJcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcclxuICAgICAgXCJsaW5lX3hfdGl0bGVfY3Bfc3BhblwiXHJcbiAgICApLmlubmVySFRNTCA9IGNvbG9yLnRvUmdiU3RyaW5nKCk7XHJcbiAgfSxcclxufSk7XHJcblxyXG4kKFwiI2xpbmVfeWF4aXNfdGl0bGVfY3BcIikuc3BlY3RydW0oe1xyXG4gIHR5cGU6IFwiY29sb3JcIixcclxuICBwcmVmZXJyZWRGb3JtYXQ6IFwicmdiXCIsXHJcbiAgc2hvd0lucHV0OiB0cnVlLFxyXG4gIHNob3dCdXR0b25zOiBmYWxzZSxcclxuICBhbGxvd0VtcHR5OiBmYWxzZSxcclxuICBtb3ZlOiBmdW5jdGlvbiAoY29sb3IpIHtcclxuICAgIGxpbmVWYWx1ZXMueUF4aXNUaXRsZUNQID0gY29sb3IudG9SZ2JTdHJpbmcoKTtcclxuXHJcbiAgICBkMy5zZWxlY3QoXCIjbGluZV95YXhpc190aXRsZVwiKS5zdHlsZShcImZpbGxcIiwgbGluZVZhbHVlcy55QXhpc1RpdGxlQ1ApO1xyXG5cclxuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFxyXG4gICAgICBcImxpbmVfeV90aXRsZV9jcF9zcGFuXCJcclxuICAgICkuaW5uZXJIVE1MID0gY29sb3IudG9SZ2JTdHJpbmcoKTtcclxuICB9LFxyXG59KTtcclxuXHJcbiQoXCIjbGluZV9ncmlkX2NwXCIpLnNwZWN0cnVtKHtcclxuICB0eXBlOiBcImNvbG9yXCIsXHJcbiAgcHJlZmVycmVkRm9ybWF0OiBcInJnYlwiLFxyXG4gIHNob3dJbnB1dDogdHJ1ZSxcclxuICBzaG93QnV0dG9uczogZmFsc2UsXHJcbiAgYWxsb3dFbXB0eTogZmFsc2UsXHJcbiAgbW92ZTogZnVuY3Rpb24gKGNvbG9yKSB7XHJcbiAgICBsaW5lVmFsdWVzLmdyaWRDUCA9IGNvbG9yLnRvUmdiU3RyaW5nKCk7XHJcblxyXG4gICAgZDMuc2VsZWN0QWxsKFwiLmxpbmVfZ3JpZFwiKS5zdHlsZShcImNvbG9yXCIsIGxpbmVWYWx1ZXMuZ3JpZENQKTtcclxuXHJcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcclxuICAgICAgXCJsaW5lX2dyaWRfY3Bfc3BhblwiXHJcbiAgICApLmlubmVySFRNTCA9IGNvbG9yLnRvUmdiU3RyaW5nKCk7XHJcbiAgfSxcclxufSk7XHJcblxyXG4kKFwiI2xpbmVfeGF4aXNfbGluZV9jcFwiKS5zcGVjdHJ1bSh7XHJcbiAgdHlwZTogXCJjb2xvclwiLFxyXG4gIHByZWZlcnJlZEZvcm1hdDogXCJyZ2JcIixcclxuICBzaG93SW5wdXQ6IHRydWUsXHJcbiAgc2hvd0J1dHRvbnM6IGZhbHNlLFxyXG4gIGFsbG93RW1wdHk6IGZhbHNlLFxyXG4gIG1vdmU6IGZ1bmN0aW9uIChjb2xvcikge1xyXG4gICAgbGluZVZhbHVlcy54QXhpc0xpbmVDUCA9IGNvbG9yLnRvUmdiU3RyaW5nKCk7XHJcblxyXG4gICAgZDMuc2VsZWN0KFwiI2xpbmVfeF9heGlzID4gcGF0aFwiKS5zdHlsZShcInN0cm9rZVwiLCBsaW5lVmFsdWVzLnhBeGlzTGluZUNQKTtcclxuXHJcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcclxuICAgICAgXCJsaW5lX3hfbGluZV9jcF9zcGFuXCJcclxuICAgICkuaW5uZXJIVE1MID0gY29sb3IudG9SZ2JTdHJpbmcoKTtcclxuICB9LFxyXG59KTtcclxuXHJcbiQoXCIjbGluZV95YXhpc19saW5lX2NwXCIpLnNwZWN0cnVtKHtcclxuICB0eXBlOiBcImNvbG9yXCIsXHJcbiAgcHJlZmVycmVkRm9ybWF0OiBcInJnYlwiLFxyXG4gIHNob3dJbnB1dDogdHJ1ZSxcclxuICBzaG93QnV0dG9uczogZmFsc2UsXHJcbiAgYWxsb3dFbXB0eTogZmFsc2UsXHJcbiAgbW92ZTogZnVuY3Rpb24gKGNvbG9yKSB7XHJcbiAgICBsaW5lVmFsdWVzLnlBeGlzTGluZUNQID0gY29sb3IudG9SZ2JTdHJpbmcoKTtcclxuXHJcbiAgICBkMy5zZWxlY3QoXCIjbGluZV95X2F4aXMgPiBwYXRoXCIpLnN0eWxlKFwic3Ryb2tlXCIsIGxpbmVWYWx1ZXMueUF4aXNMaW5lQ1ApO1xyXG5cclxuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibGluZV95X2xpbmVfY3Bfc3BhblwiKS5pbm5lckhUTUwgPVxyXG4gICAgICBsaW5lVmFsdWVzLnlBeGlzTGluZUNQO1xyXG4gIH0sXHJcbn0pO1xyXG5cclxuJChcIiNsaW5lX2RhdGFwb2ludF9jcFwiKS5zcGVjdHJ1bSh7XHJcbiAgdHlwZTogXCJjb2xvclwiLFxyXG4gIHByZWZlcnJlZEZvcm1hdDogXCJyZ2JcIixcclxuICBzaG93SW5wdXQ6IHRydWUsXHJcbiAgc2hvd0J1dHRvbnM6IGZhbHNlLFxyXG4gIGFsbG93RW1wdHk6IGZhbHNlLFxyXG4gIG1vdmU6IGZ1bmN0aW9uIChjb2xvcikge1xyXG4gICAgbGluZVZhbHVlcy5kYXRhcG9pbnRDUCA9IGNvbG9yLnRvUmdiU3RyaW5nKCk7XHJcblxyXG4gICAgZDMuc2VsZWN0QWxsKFwiLmNpcmNsZXNfbGluZVwiKS5zdHlsZShcImZpbGxcIiwgbGluZVZhbHVlcy5kYXRhcG9pbnRDUCk7XHJcbiAgICBkMy5zZWxlY3RBbGwoXCIuY2lyY2xlc19saW5lMlwiKS5zdHlsZShcImZpbGxcIiwgbGluZVZhbHVlcy5kYXRhcG9pbnRDUCk7XHJcbiAgICBkMy5zZWxlY3RBbGwoXCIuY2lyY2xlc19saW5lM1wiKS5zdHlsZShcImZpbGxcIiwgbGluZVZhbHVlcy5kYXRhcG9pbnRDUCk7XHJcblxyXG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXHJcbiAgICAgIFwibGluZV9kYXRhcG9pbnRfY3Bfc3BhblwiXHJcbiAgICApLmlubmVySFRNTCA9IGNvbG9yLnRvUmdiU3RyaW5nKCk7XHJcblxyXG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXHJcbiAgICAgIFwibGluZV9kYXRhcG9pbnQyX2NwX3NwYW5cIlxyXG4gICAgKS5pbm5lckhUTUwgPSBjb2xvci50b1JnYlN0cmluZygpO1xyXG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXHJcbiAgICAgIFwibGluZV9kYXRhcG9pbnQzX2NwX3NwYW5cIlxyXG4gICAgKS5pbm5lckhUTUwgPSBjb2xvci50b1JnYlN0cmluZygpO1xyXG4gIH0sXHJcbn0pO1xyXG5cclxuJChcIiNsaW5lX2RhdGFwb2ludF9ib3JkZXJfY3BcIikuc3BlY3RydW0oe1xyXG4gIHR5cGU6IFwiY29sb3JcIixcclxuICBwcmVmZXJyZWRGb3JtYXQ6IFwicmdiXCIsXHJcbiAgc2hvd0lucHV0OiB0cnVlLFxyXG4gIHNob3dCdXR0b25zOiBmYWxzZSxcclxuICBhbGxvd0VtcHR5OiBmYWxzZSxcclxuICBtb3ZlOiBmdW5jdGlvbiAoY29sb3IpIHtcclxuICAgIGxpbmVWYWx1ZXMuZGF0YXBvaW50Qm9yZGVyQ1AgPSBjb2xvci50b1JnYlN0cmluZygpO1xyXG5cclxuICAgIGQzLnNlbGVjdEFsbChcIi5jaXJjbGVzX2xpbmVcIikuc3R5bGUoXCJzdHJva2VcIiwgbGluZVZhbHVlcy5kYXRhcG9pbnRCb3JkZXJDUCk7XHJcbiAgICBkMy5zZWxlY3RBbGwoXCIuY2lyY2xlc19saW5lMlwiKS5zdHlsZShcclxuICAgICAgXCJzdHJva2VcIixcclxuICAgICAgbGluZVZhbHVlcy5kYXRhcG9pbnRCb3JkZXJDUFxyXG4gICAgKTtcclxuICAgIGQzLnNlbGVjdEFsbChcIi5jaXJjbGVzX2xpbmUzXCIpLnN0eWxlKFxyXG4gICAgICBcInN0cm9rZVwiLFxyXG4gICAgICBsaW5lVmFsdWVzLmRhdGFwb2ludEJvcmRlckNQXHJcbiAgICApO1xyXG5cclxuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFxyXG4gICAgICBcImxpbmVfZGF0YXBvaW50X2JvcmRlcl9jcF9zcGFuXCJcclxuICAgICkuaW5uZXJIVE1MID0gY29sb3IudG9SZ2JTdHJpbmcoKTtcclxuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFxyXG4gICAgICBcImxpbmVfZGF0YXBvaW50Ml9ib3JkZXJfY3Bfc3BhblwiXHJcbiAgICApLmlubmVySFRNTCA9IGNvbG9yLnRvUmdiU3RyaW5nKCk7XHJcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcclxuICAgICAgXCJsaW5lX2RhdGFwb2ludDNfYm9yZGVyX2NwX3NwYW5cIlxyXG4gICAgKS5pbm5lckhUTUwgPSBjb2xvci50b1JnYlN0cmluZygpO1xyXG4gIH0sXHJcbn0pO1xyXG5cclxuJChcIiNsaW5lX2FyZWFfY3BcIikuc3BlY3RydW0oe1xyXG4gIHR5cGU6IFwiY29sb3JcIixcclxuICBwcmVmZXJyZWRGb3JtYXQ6IFwicmdiXCIsXHJcbiAgc2hvd0lucHV0OiB0cnVlLFxyXG4gIHNob3dCdXR0b25zOiBmYWxzZSxcclxuICBhbGxvd0VtcHR5OiBmYWxzZSxcclxuICBtb3ZlOiBmdW5jdGlvbiAoY29sb3IpIHtcclxuICAgIGxpbmVWYWx1ZXMuYXJlYUNQID0gY29sb3IudG9SZ2JTdHJpbmcoKTtcclxuXHJcbiAgICBkMy5zZWxlY3QoXCIjbGluZV9hcmVhXCIpLnN0eWxlKFwiZmlsbFwiLCBsaW5lVmFsdWVzLmFyZWFDUCk7XHJcblxyXG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXHJcbiAgICAgIFwibGluZV9hcmVhX2NwX3NwYW5cIlxyXG4gICAgKS5pbm5lckhUTUwgPSBjb2xvci50b1JnYlN0cmluZygpO1xyXG4gIH0sXHJcbn0pO1xyXG4iLCJpbXBvcnQgeyBsaW5lVmFsdWVzIH0gZnJvbSBcIi4vbGluZV9jaGFydF92YWx1ZXMuanNcIjtcclxuaW1wb3J0IHsgc2VsZWN0LCBzZWxlY3RBbGwgfSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XHJcbmltcG9ydCB7IHNjYWxlVGltZSwgc2NhbGVMaW5lYXIgfSBmcm9tIFwiZDMtc2NhbGVcIjtcclxuaW1wb3J0IHsgYXhpc0JvdHRvbSwgYXhpc0xlZnQgfSBmcm9tIFwiZDMtYXhpc1wiO1xyXG5pbXBvcnQgeyByYW5nZSwgbWF4LCBleHRlbnQgfSBmcm9tIFwiZDMtYXJyYXlcIjtcclxuaW1wb3J0IHsgbGluZSwgYXJlYSB9IGZyb20gXCJkMy1zaGFwZVwiO1xyXG5pbXBvcnQgeyB0aW1lRm9ybWF0IH0gZnJvbSBcImQzLXRpbWUtZm9ybWF0XCI7XHJcbmltcG9ydCB7IGV2ZW50IGFzIGN1cnJlbnRFdmVudCB9IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcclxuXHJcbmNvbnN0IGQzID0ge1xyXG4gIHNlbGVjdCxcclxuICBzZWxlY3RBbGwsXHJcbiAgc2NhbGVUaW1lLFxyXG4gIHNjYWxlTGluZWFyLFxyXG4gIGF4aXNCb3R0b20sXHJcbiAgYXhpc0xlZnQsXHJcbiAgcmFuZ2UsXHJcbiAgbWF4LFxyXG4gIGV4dGVudCxcclxuICBsaW5lLFxyXG4gIGFyZWEsXHJcbiAgdGltZUZvcm1hdCxcclxufTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBsaW5lQ2hhcnQoXHJcbiAgbGluZVRpdGxlSW5wdXRWYWx1ZSxcclxuICBsaW5lWEF4aXNUaXRsZUlucHV0VmFsdWUsXHJcbiAgbGluZVlBeGlzVGl0bGVJbnB1dFZhbHVlLFxyXG4gIGxpbmVUaXRsZVNsaWRlclZhbHVlLFxyXG4gIGxpbmVYQXhpc1RpdGxlU2xpZGVyVmFsdWUsXHJcbiAgbGluZVlBeGlzVGl0bGVTbGlkZXJWYWx1ZSxcclxuICBsaW5lV2lkdGhTbGlkZXJWYWx1ZSxcclxuICBsaW5lUG9pbnRSYWRpdXNTbGlkZXJWYWx1ZSxcclxuICBsaW5lVG9vbHRpcENoZWNrYm94VmFsdWUsXHJcbiAgbGluZURhdGFwb2ludENoZWNrYm94VmFsdWUsXHJcbiAgbGluZVhBeGlzR3JpZENoZWNrYm94VmFsdWUsXHJcbiAgbGluZVlBeGlzR3JpZENoZWNrYm94VmFsdWUsXHJcbiAgbGluZVhBeGlzTGluZUNoZWNrYm94VmFsdWUsXHJcbiAgbGluZVlBeGlzTGluZUNoZWNrYm94VmFsdWUsXHJcbiAgbGluZUhvdmVyQ2hlY2tib3hWYWx1ZSxcclxuICBsaW5lQmFja2dyb3VuZENQVmFsdWUsXHJcbiAgbGluZUNQVmFsdWUxLFxyXG4gIGxpbmVDUFZhbHVlMixcclxuICBsaW5lQ1BWYWx1ZTMsXHJcbiAgbGluZVRpY2tDUFZhbHVlLFxyXG4gIGxpbmVUaXRsZUNQVmFsdWUsXHJcbiAgbGluZVhBeGlzVGl0bGVDUFZhbHVlLFxyXG4gIGxpbmVZQXhpc1RpdGxlQ1BWYWx1ZSxcclxuICBsaW5lR3JpZENQVmFsdWUsXHJcbiAgbGluZVhBeGlzTGluZUNQVmFsdWUsXHJcbiAgbGluZVlBeGlzTGluZUNQVmFsdWUsXHJcbiAgbGluZURhdGFwb2ludENQVmFsdWUsXHJcbiAgbGluZURhdGFwb2ludEJvcmRlckNQVmFsdWUsXHJcbiAgbGluZUFyZWFDUFZhbHVlXHJcbikge1xyXG4gIGZ1bmN0aW9uIG1ha2VEYXRlQXJyYXkoKSB7XHJcbiAgICBsZXQgYXJyID0gW10sXHJcbiAgICAgIHN0YXJ0RGF0ZSA9IG5ldyBEYXRlKFwiMDEvMDIvMjAyMFwiKSxcclxuICAgICAgZW5kRGF0ZSA9IG5ldyBEYXRlKFwiMDEvMjIvMjAyMFwiKTtcclxuXHJcbiAgICB3aGlsZSAoc3RhcnREYXRlIDw9IGVuZERhdGUpIHtcclxuICAgICAgYXJyLnB1c2gobmV3IERhdGUoc3RhcnREYXRlKSk7XHJcbiAgICAgIHN0YXJ0RGF0ZS5zZXREYXRlKHN0YXJ0RGF0ZS5nZXREYXRlKCkgKyAxKTtcclxuICAgIH1cclxuICAgIHJldHVybiBhcnI7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBjcmVhdGVEYXRhKCkge1xyXG4gICAgbGV0IGRhdGVzID0gbWFrZURhdGVBcnJheSgpO1xyXG4gICAgbGV0IGkgPSAxO1xyXG4gICAgbGV0IGRhdGEgPSBkYXRlcy5tYXAoZnVuY3Rpb24gKHgpIHtcclxuICAgICAgaSArPSAzMDtcclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICBkYXRlOiB4LFxyXG4gICAgICAgIG51bTE6IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwMSArIGkrKyksXHJcbiAgICAgICAgbnVtMjogTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTAxICsgaSsrKSxcclxuICAgICAgICBudW0zOiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAxMDEgKyBpKyspLFxyXG4gICAgICB9O1xyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gZGF0YTtcclxuICB9XHJcblxyXG4gIGNvbnN0IGRhdGEgPSBjcmVhdGVEYXRhKCk7XHJcblxyXG4gIGNvbnN0IG1hcmdpbiA9IHsgdG9wOiA4MCwgcmlnaHQ6IDQwLCBib3R0b206IDgwLCBsZWZ0OiA4MCB9O1xyXG5cclxuICBjb25zdCBzdmcgPSBkM1xyXG4gICAgLnNlbGVjdChcIiNsaW5lX2RpdlwiKVxyXG4gICAgLmFwcGVuZChcInN2Z1wiKVxyXG4gICAgLmF0dHIoXCJpZFwiLCBcImxpbmVfY2hhcnRcIilcclxuICAgIC5hdHRyKFwid2lkdGhcIiwgXCIxMDAlXCIpXHJcbiAgICAuYXR0cihcImhlaWdodFwiLCBcIjEwMCVcIik7XHJcblxyXG4gIGNvbnN0IGcgPSBzdmdcclxuICAgIC5hcHBlbmQoXCJnXCIpXHJcbiAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBgdHJhbnNsYXRlKCR7bWFyZ2luLmxlZnR9LCR7bWFyZ2luLnRvcH0pYCk7XHJcblxyXG4gIGNvbnN0IHVzYWJsZUJvdW5kcyA9IHN2Zy5ub2RlKCkuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksXHJcbiAgICB1c2FibGVCb3VuZFdpZHRoID0gdXNhYmxlQm91bmRzLndpZHRoIC0gbWFyZ2luLmxlZnQgLSBtYXJnaW4ucmlnaHQ7XHJcblxyXG4gIGNvbnN0IHRpdGxlID0gZy5hcHBlbmQoXCJ0ZXh0XCIpLmF0dHIoXCJpZFwiLCBcImxpbmVfdGl0bGVcIikudGV4dChcIldlYXRoZXJcIik7XHJcblxyXG4gIGNvbnN0IHhBeGlzVGl0bGUgPSBnXHJcbiAgICAuYXBwZW5kKFwidGV4dFwiKVxyXG4gICAgLmF0dHIoXCJpZFwiLCBcImxpbmVfeGF4aXNfdGl0bGVcIilcclxuICAgIC50ZXh0KFwiRGF5c1wiKTtcclxuXHJcbiAgY29uc3QgeUF4aXNUaXRsZSA9IGdcclxuICAgIC5hcHBlbmQoXCJ0ZXh0XCIpXHJcbiAgICAuYXR0cihcImlkXCIsIFwibGluZV95YXhpc190aXRsZVwiKVxyXG4gICAgLnRleHQoXCJUZW1wZXJhdHVyZVwiKTtcclxuXHJcbiAgY29uc3QgeFNjYWxlID0gZDMuc2NhbGVUaW1lKCk7XHJcbiAgY29uc3QgeVNjYWxlID0gZDMuc2NhbGVMaW5lYXIoKTtcclxuXHJcbiAgY29uc3QgeEF4aXMgPSBnLmFwcGVuZChcImdcIikuYXR0cihcImlkXCIsIFwibGluZV94X2F4aXNcIik7XHJcbiAgY29uc3QgeUF4aXMgPSBnLmFwcGVuZChcImdcIikuYXR0cihcImlkXCIsIFwibGluZV95X2F4aXNcIik7XHJcblxyXG4gIGNvbnN0IHhHcmlkID0gZ1xyXG4gICAgLmFwcGVuZChcImdcIilcclxuICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJsaW5lX2dyaWRcIilcclxuICAgIC5hdHRyKFwiaWRcIiwgXCJsaW5lX3hfZ3JpZFwiKTtcclxuXHJcbiAgY29uc3QgeUdyaWQgPSBnXHJcbiAgICAuYXBwZW5kKFwiZ1wiKVxyXG4gICAgLmF0dHIoXCJjbGFzc1wiLCBcImxpbmVfZ3JpZFwiKVxyXG4gICAgLmF0dHIoXCJpZFwiLCBcImxpbmVfeV9ncmlkXCIpO1xyXG5cclxuICBmdW5jdGlvbiBtYWtlX3hfZ3JpZGxpbmVzKCkge1xyXG4gICAgcmV0dXJuIGQzLmF4aXNCb3R0b20oeFNjYWxlKS50aWNrcygpO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gbWFrZV95X2dyaWRsaW5lcygpIHtcclxuICAgIHJldHVybiBkMy5heGlzTGVmdCh5U2NhbGUpLnRpY2tzKCk7XHJcbiAgfVxyXG5cclxuICBjb25zdCBsaW5lMSA9IGQzXHJcbiAgICAubGluZSgpXHJcbiAgICAueChmdW5jdGlvbiAoZCkge1xyXG4gICAgICByZXR1cm4geFNjYWxlKGQuZGF0ZSk7XHJcbiAgICB9KVxyXG4gICAgLnkoZnVuY3Rpb24gKGQpIHtcclxuICAgICAgcmV0dXJuIHlTY2FsZShkLm51bTEpO1xyXG4gICAgfSk7XHJcblxyXG4gIGNvbnN0IGxpbmUyID0gZDNcclxuICAgIC5saW5lKClcclxuICAgIC54KGZ1bmN0aW9uIChkKSB7XHJcbiAgICAgIHJldHVybiB4U2NhbGUoZC5kYXRlKTtcclxuICAgIH0pXHJcbiAgICAueShmdW5jdGlvbiAoZCkge1xyXG4gICAgICByZXR1cm4geVNjYWxlKGQubnVtMik7XHJcbiAgICB9KTtcclxuXHJcbiAgY29uc3QgbGluZTMgPSBkM1xyXG4gICAgLmxpbmUoKVxyXG4gICAgLngoZnVuY3Rpb24gKGQpIHtcclxuICAgICAgcmV0dXJuIHhTY2FsZShkLmRhdGUpO1xyXG4gICAgfSlcclxuICAgIC55KGZ1bmN0aW9uIChkKSB7XHJcbiAgICAgIHJldHVybiB5U2NhbGUoZC5udW0zKTtcclxuICAgIH0pO1xyXG5cclxuICBjb25zdCBsaW5lUGF0aDEgPSBnLmFwcGVuZChcInBhdGhcIik7XHJcbiAgY29uc3QgbGluZVBhdGgyID0gZy5hcHBlbmQoXCJwYXRoXCIpO1xyXG4gIGNvbnN0IGxpbmVQYXRoMyA9IGcuYXBwZW5kKFwicGF0aFwiKTtcclxuXHJcbiAgY29uc3QgbGluZUFyZWEgPSBnLmFwcGVuZChcInBhdGhcIik7XHJcblxyXG4gIGNvbnN0IGFyZWEgPSBkMy5hcmVhKCk7XHJcblxyXG4gIGxldCBsaW5lVGl0bGVTbGlkZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImxpbmVfdGl0bGVfc2xpZGVyXCIpO1xyXG4gIGxldCBsaW5lWEF4aXNUaXRsZVNsaWRlciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibGluZV94YXhpc190aXRsZV9zbGlkZXJcIik7XHJcbiAgbGV0IGxpbmVXaWR0aFNwYW4gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImxpbmVfd2lkdGhfc3BhblwiKTtcclxuXHJcbiAgZnVuY3Rpb24gZHJhdygpIHtcclxuICAgIGNvbnN0IGJvdW5kcyA9IHN2Zy5ub2RlKCkuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksXHJcbiAgICAgIHdpZHRoID0gYm91bmRzLndpZHRoIC0gbWFyZ2luLmxlZnQgLSBtYXJnaW4ucmlnaHQsXHJcbiAgICAgIHdpZHRoMiA9IGJvdW5kcy53aWR0aCxcclxuICAgICAgaGVpZ2h0ID0gYm91bmRzLmhlaWdodCAtIG1hcmdpbi50b3AgLSBtYXJnaW4uYm90dG9tO1xyXG5cclxuICAgIGxpbmVUaXRsZVNsaWRlci5tYXggPSB3aWR0aDtcclxuICAgIGxpbmVYQXhpc1RpdGxlU2xpZGVyLm1heCA9IHdpZHRoO1xyXG5cclxuICAgIGxpbmVUaXRsZVNsaWRlci52YWx1ZSA9IHdpZHRoIC8gMjtcclxuICAgIGxpbmVYQXhpc1RpdGxlU2xpZGVyLnZhbHVlID0gd2lkdGggLyAyO1xyXG5cclxuICAgIGxpbmVXaWR0aFNwYW4uaW5uZXJIVE1MID0gd2lkdGgyIC0gMjA7XHJcblxyXG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJsaW5lX3RpdGxlX3NsaWRlcl9zcGFuXCIpLmlubmVySFRNTCA9IHdpZHRoIC8gMjtcclxuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibGluZV94X3RpdGxlX3NsaWRlcl9zcGFuXCIpLmlubmVySFRNTCA9IHdpZHRoIC8gMjtcclxuXHJcbiAgICBsaW5lVmFsdWVzLnRpdGxlU2xpZGVyID0gd2lkdGggLyAyO1xyXG4gICAgbGluZVZhbHVlcy54QXhpc1RpdGxlU2xpZGVyID0gd2lkdGggLyAyO1xyXG5cclxuICAgIHhTY2FsZS5yYW5nZShbMCwgd2lkdGhdKTtcclxuICAgIHlTY2FsZS5yYW5nZShbaGVpZ2h0LCAwXSk7XHJcblxyXG4gICAgeEF4aXNcclxuICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgXCJ0cmFuc2xhdGUoMCxcIiArIGhlaWdodCArIFwiKVwiKVxyXG4gICAgICAuY2FsbChkMy5heGlzQm90dG9tKHhTY2FsZSkudGlja3MoKS50aWNrRm9ybWF0KGQzLnRpbWVGb3JtYXQoXCIlYiAlZVwiKSkpO1xyXG5cclxuICAgIHlBeGlzLmNhbGwoZDMuYXhpc0xlZnQoeVNjYWxlKSk7XHJcblxyXG4gICAgeEdyaWRcclxuXHJcbiAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIFwidHJhbnNsYXRlKDAsXCIgKyBoZWlnaHQgKyBcIilcIilcclxuICAgICAgLmNhbGwobWFrZV94X2dyaWRsaW5lcygpLnRpY2tTaXplKC1oZWlnaHQpLnRpY2tGb3JtYXQoXCJcIikpO1xyXG5cclxuICAgIHlHcmlkLmNhbGwobWFrZV95X2dyaWRsaW5lcygpLnRpY2tTaXplKC13aWR0aCkudGlja0Zvcm1hdChcIlwiKSk7XHJcblxyXG4gICAgdGl0bGVcclxuICAgICAgLmF0dHIoXCJ4XCIsIHdpZHRoIC8gMilcclxuICAgICAgLmF0dHIoXCJ5XCIsIC00MClcclxuICAgICAgLmF0dHIoXCJmb250LXNpemVcIiwgXCIxLjFlbVwiKVxyXG4gICAgICAuYXR0cihcInRleHQtYW5jaG9yXCIsIFwibWlkZGxlXCIpO1xyXG5cclxuICAgIHhBeGlzVGl0bGVcclxuICAgICAgLmF0dHIoXCJ4XCIsIHdpZHRoIC8gMilcclxuICAgICAgLmF0dHIoXCJ5XCIsIGhlaWdodCArIG1hcmdpbi50b3AgLSAzMClcclxuICAgICAgLmF0dHIoXCJmb250LXNpemVcIiwgXCIwLjllbVwiKVxyXG4gICAgICAuYXR0cihcInRleHQtYW5jaG9yXCIsIFwibWlkZGxlXCIpO1xyXG5cclxuICAgIHlBeGlzVGl0bGVcclxuICAgICAgLy8uYXR0cihcInhcIiwgNSAqIC0yOClcclxuICAgICAgLmF0dHIoXCJ5XCIsIC01MClcclxuICAgICAgLmF0dHIoXCJmb250LXNpemVcIiwgXCIwLjllbVwiKVxyXG4gICAgICAuYXR0cihcInRleHQtYW5jaG9yXCIsIFwibWlkZGxlXCIpXHJcbiAgICAgIC5zdHlsZShcInRyYW5zZm9ybVwiLCBcInJvdGF0ZSgyNzBkZWcpXCIpO1xyXG5cclxuICAgIGFyZWFcclxuICAgICAgLngoKGQpID0+IHhTY2FsZShkLmRhdGUpKVxyXG4gICAgICAueTAoeVNjYWxlKDApKVxyXG4gICAgICAueTEoKGQpID0+IHlTY2FsZShkLm51bTEpKTtcclxuXHJcbiAgICBsaW5lQXJlYVxyXG4gICAgICAuZGF0dW0oZGF0YSlcclxuICAgICAgLmF0dHIoXCJpZFwiLCBcImxpbmVfYXJlYVwiKVxyXG4gICAgICAuYXR0cihcImZpbGxcIiwgXCJyZ2JhKDE1OSwgMTk3LCAyMzIsIDAuMjIyKVwiKVxyXG4gICAgICAuYXR0cihcImRcIiwgYXJlYSk7XHJcblxyXG4gICAgbGluZVBhdGgxXHJcbiAgICAgIC5kYXRhKFtkYXRhXSlcclxuICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcImxpbmVcIilcclxuICAgICAgLmF0dHIoXCJpZFwiLCBcImxpbmUxXCIpXHJcbiAgICAgIC5hdHRyKFwiZFwiLCBsaW5lMSlcclxuICAgICAgLmF0dHIoXCJzdHJva2VcIiwgXCJyZWRcIilcclxuICAgICAgLmF0dHIoXCJzdHJva2Utd2lkdGhcIiwgXCIwLjVweFwiKVxyXG4gICAgICAuYXR0cihcImZpbGxcIiwgXCJub25lXCIpO1xyXG5cclxuICAgIGxpbmVQYXRoMlxyXG4gICAgICAuZGF0YShbZGF0YV0pXHJcbiAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJsaW5lXCIpXHJcbiAgICAgIC5hdHRyKFwiaWRcIiwgXCJsaW5lMlwiKVxyXG4gICAgICAuYXR0cihcImRcIiwgbGluZTIpXHJcbiAgICAgIC5hdHRyKFwic3Ryb2tlXCIsIFwiYmx1ZVwiKVxyXG4gICAgICAuYXR0cihcInN0cm9rZS13aWR0aFwiLCBcIjAuNXB4XCIpXHJcbiAgICAgIC5hdHRyKFwiZmlsbFwiLCBcIm5vbmVcIik7XHJcblxyXG4gICAgbGluZVBhdGgzXHJcbiAgICAgIC5kYXRhKFtkYXRhXSlcclxuICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcImxpbmVcIilcclxuICAgICAgLmF0dHIoXCJpZFwiLCBcImxpbmUzXCIpXHJcbiAgICAgIC5hdHRyKFwiZFwiLCBsaW5lMylcclxuICAgICAgLmF0dHIoXCJzdHJva2VcIiwgXCJncmVlblwiKVxyXG4gICAgICAuYXR0cihcInN0cm9rZS13aWR0aFwiLCBcIjAuNXB4XCIpXHJcbiAgICAgIC5hdHRyKFwiZmlsbFwiLCBcIm5vbmVcIik7XHJcblxyXG4gICAgY29uc3QgY2lyY2xlcyA9IGcuc2VsZWN0QWxsKFwiLmNpcmNsZXNfbGluZVwiKS5kYXRhKGRhdGEpO1xyXG4gICAgY29uc3QgY2lyY2xlczIgPSBnLnNlbGVjdEFsbChcIi5jaXJjbGVzX2xpbmUyXCIpLmRhdGEoZGF0YSk7XHJcbiAgICBjb25zdCBjaXJjbGVzMyA9IGcuc2VsZWN0QWxsKFwiLmNpcmNsZXNfbGluZTNcIikuZGF0YShkYXRhKTtcclxuXHJcbiAgICBjaXJjbGVzLmV4aXQoKS5yZW1vdmUoKTtcclxuXHJcbiAgICBjaXJjbGVzXHJcbiAgICAgIC5lbnRlcigpXHJcbiAgICAgIC5hcHBlbmQoXCJjaXJjbGVcIilcclxuICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcImNpcmNsZXNfbGluZVwiKVxyXG4gICAgICAuYXR0cihcInJcIiwgMylcclxuICAgICAgLmF0dHIoXCJjeFwiLCBmdW5jdGlvbiAoZCwgaSkge1xyXG4gICAgICAgIHJldHVybiB4U2NhbGUoZC5kYXRlKTtcclxuICAgICAgfSlcclxuICAgICAgLmF0dHIoXCJjeVwiLCBmdW5jdGlvbiAoZCwgaSkge1xyXG4gICAgICAgIHJldHVybiB5U2NhbGUoZC5udW0xKTtcclxuICAgICAgfSlcclxuICAgICAgLmF0dHIoXCJmaWxsXCIsIFwid2hpdGVcIilcclxuICAgICAgLmF0dHIoXCJzdHJva2VcIiwgXCJibGFja1wiKVxyXG4gICAgICAuYXR0cihcInN0cm9rZS13aWR0aFwiLCBcIjFweFwiKTtcclxuXHJcbiAgICBjaXJjbGVzMlxyXG4gICAgICAuZW50ZXIoKVxyXG4gICAgICAuYXBwZW5kKFwiY2lyY2xlXCIpXHJcbiAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJjaXJjbGVzX2xpbmUyXCIpXHJcbiAgICAgIC5hdHRyKFwiclwiLCAzKVxyXG4gICAgICAuYXR0cihcImN4XCIsIGZ1bmN0aW9uIChkLCBpKSB7XHJcbiAgICAgICAgcmV0dXJuIHhTY2FsZShkLmRhdGUpO1xyXG4gICAgICB9KVxyXG4gICAgICAuYXR0cihcImN5XCIsIGZ1bmN0aW9uIChkLCBpKSB7XHJcbiAgICAgICAgcmV0dXJuIHlTY2FsZShkLm51bTIpO1xyXG4gICAgICB9KVxyXG4gICAgICAuYXR0cihcImZpbGxcIiwgXCJ3aGl0ZVwiKVxyXG4gICAgICAuYXR0cihcInN0cm9rZVwiLCBcImJsYWNrXCIpXHJcbiAgICAgIC5hdHRyKFwic3Ryb2tlLXdpZHRoXCIsIFwiMXB4XCIpO1xyXG5cclxuICAgIGNpcmNsZXMzXHJcbiAgICAgIC5lbnRlcigpXHJcbiAgICAgIC5hcHBlbmQoXCJjaXJjbGVcIilcclxuICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcImNpcmNsZXNfbGluZTNcIilcclxuICAgICAgLmF0dHIoXCJyXCIsIDMpXHJcbiAgICAgIC5hdHRyKFwiY3hcIiwgZnVuY3Rpb24gKGQsIGkpIHtcclxuICAgICAgICByZXR1cm4geFNjYWxlKGQuZGF0ZSk7XHJcbiAgICAgIH0pXHJcbiAgICAgIC5hdHRyKFwiY3lcIiwgZnVuY3Rpb24gKGQsIGkpIHtcclxuICAgICAgICByZXR1cm4geVNjYWxlKGQubnVtMyk7XHJcbiAgICAgIH0pXHJcbiAgICAgIC5hdHRyKFwiZmlsbFwiLCBcIndoaXRlXCIpXHJcbiAgICAgIC5hdHRyKFwic3Ryb2tlXCIsIFwiYmxhY2tcIilcclxuICAgICAgLmF0dHIoXCJzdHJva2Utd2lkdGhcIiwgXCIxcHhcIik7XHJcblxyXG4gICAgY2lyY2xlc1xyXG4gICAgICAuYXR0cihcInJcIiwgMylcclxuICAgICAgLmF0dHIoXCJjeFwiLCBmdW5jdGlvbiAoZCwgaSkge1xyXG4gICAgICAgIHJldHVybiB4U2NhbGUoZC5kYXRlKTtcclxuICAgICAgfSlcclxuICAgICAgLmF0dHIoXCJjeVwiLCBmdW5jdGlvbiAoZCwgaSkge1xyXG4gICAgICAgIHJldHVybiB5U2NhbGUoZC5udW0xKTtcclxuICAgICAgfSlcclxuICAgICAgLmF0dHIoXCJmaWxsXCIsIFwid2hpdGVcIilcclxuICAgICAgLmF0dHIoXCJzdHJva2VcIiwgXCJibGFja1wiKVxyXG4gICAgICAuYXR0cihcInN0cm9rZS13aWR0aFwiLCBcIjFweFwiKTtcclxuXHJcbiAgICBjaXJjbGVzMlxyXG4gICAgICAuYXR0cihcInJcIiwgMylcclxuICAgICAgLmF0dHIoXCJjeFwiLCBmdW5jdGlvbiAoZCwgaSkge1xyXG4gICAgICAgIHJldHVybiB4U2NhbGUoZC5kYXRlKTtcclxuICAgICAgfSlcclxuICAgICAgLmF0dHIoXCJjeVwiLCBmdW5jdGlvbiAoZCwgaSkge1xyXG4gICAgICAgIHJldHVybiB5U2NhbGUoZC5udW0yKTtcclxuICAgICAgfSlcclxuICAgICAgLmF0dHIoXCJmaWxsXCIsIFwid2hpdGVcIilcclxuICAgICAgLmF0dHIoXCJzdHJva2VcIiwgXCJibGFja1wiKVxyXG4gICAgICAuYXR0cihcInN0cm9rZS13aWR0aFwiLCBcIjFweFwiKTtcclxuXHJcbiAgICBjaXJjbGVzM1xyXG4gICAgICAuYXR0cihcInJcIiwgMylcclxuICAgICAgLmF0dHIoXCJjeFwiLCBmdW5jdGlvbiAoZCwgaSkge1xyXG4gICAgICAgIHJldHVybiB4U2NhbGUoZC5kYXRlKTtcclxuICAgICAgfSlcclxuICAgICAgLmF0dHIoXCJjeVwiLCBmdW5jdGlvbiAoZCwgaSkge1xyXG4gICAgICAgIHJldHVybiB5U2NhbGUoZC5udW0zKTtcclxuICAgICAgfSlcclxuICAgICAgLmF0dHIoXCJmaWxsXCIsIFwid2hpdGVcIilcclxuICAgICAgLmF0dHIoXCJzdHJva2VcIiwgXCJibGFja1wiKVxyXG4gICAgICAuYXR0cihcInN0cm9rZS13aWR0aFwiLCBcIjFweFwiKTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGxvYWREYXRhKCkge1xyXG4gICAgeFNjYWxlLmRvbWFpbihcclxuICAgICAgZDMuZXh0ZW50KGRhdGEsIGZ1bmN0aW9uIChkKSB7XHJcbiAgICAgICAgcmV0dXJuIGQuZGF0ZTtcclxuICAgICAgfSlcclxuICAgICk7XHJcbiAgICB5U2NhbGUuZG9tYWluKFtcclxuICAgICAgMCxcclxuICAgICAgZDMubWF4KGRhdGEsIGZ1bmN0aW9uIChkKSB7XHJcbiAgICAgICAgcmV0dXJuIGQubnVtMTtcclxuICAgICAgfSksXHJcbiAgICBdKTtcclxuXHJcbiAgICBkcmF3KCk7XHJcbiAgfVxyXG5cclxuICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLCBkcmF3KTtcclxuICBsb2FkRGF0YSgpO1xyXG5cclxuICBkMy5zZWxlY3QoXCIjbGluZV95X2dyaWQgPiBnOm50aC1jaGlsZCgyKSA+IGxpbmVcIikucmVtb3ZlKCk7XHJcblxyXG4gIGlmIChsaW5lVGl0bGVJbnB1dFZhbHVlICE9IHVuZGVmaW5lZCkge1xyXG4gICAgaWYgKGxpbmVUaXRsZUlucHV0VmFsdWUgIT0gXCJcIikge1xyXG4gICAgICBkMy5zZWxlY3QoXCIjbGluZV90aXRsZVwiKS50ZXh0KGxpbmVUaXRsZUlucHV0VmFsdWUpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgaWYgKGxpbmVYQXhpc1RpdGxlSW5wdXRWYWx1ZSAhPSB1bmRlZmluZWQpIHtcclxuICAgIGlmIChsaW5lWEF4aXNUaXRsZUlucHV0VmFsdWUgIT0gXCJcIikge1xyXG4gICAgICBkMy5zZWxlY3QoXCIjbGluZV94YXhpc190aXRsZVwiKS50ZXh0KGxpbmVYQXhpc1RpdGxlSW5wdXRWYWx1ZSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBpZiAobGluZVlBeGlzVGl0bGVJbnB1dFZhbHVlICE9IHVuZGVmaW5lZCkge1xyXG4gICAgaWYgKGxpbmVZQXhpc1RpdGxlSW5wdXRWYWx1ZSAhPSBcIlwiKSB7XHJcbiAgICAgIGQzLnNlbGVjdChcIiNsaW5lX3lheGlzX3RpdGxlXCIpLnRleHQobGluZVlBeGlzVGl0bGVJbnB1dFZhbHVlKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGlmIChsaW5lVGl0bGVTbGlkZXJWYWx1ZSAhPSB1bmRlZmluZWQpIHtcclxuICAgIGQzLnNlbGVjdChcIiNsaW5lX3RpdGxlXCIpLmF0dHIoXCJ4XCIsIHVzYWJsZUJvdW5kV2lkdGggLyAyKTtcclxuICB9XHJcblxyXG4gIGlmIChsaW5lWEF4aXNUaXRsZVNsaWRlclZhbHVlICE9IHVuZGVmaW5lZCkge1xyXG4gICAgZDMuc2VsZWN0KFwiI2xpbmVfeGF4aXNfdGl0bGVcIikuYXR0cihcInhcIiwgdXNhYmxlQm91bmRXaWR0aCAvIDIpO1xyXG4gIH1cclxuXHJcbiAgaWYgKGxpbmVZQXhpc1RpdGxlU2xpZGVyVmFsdWUgIT0gdW5kZWZpbmVkKSB7XHJcbiAgICBkMy5zZWxlY3QoXCIjbGluZV95YXhpc190aXRsZVwiKS5hdHRyKFwieFwiLCBsaW5lWUF4aXNUaXRsZVNsaWRlclZhbHVlICogMjApO1xyXG4gIH1cclxuXHJcbiAgaWYgKGxpbmVXaWR0aFNsaWRlclZhbHVlICE9IHVuZGVmaW5lZCkge1xyXG4gICAgZDMuc2VsZWN0KFwiI2xpbmUxXCIpLmF0dHIoXCJzdHJva2Utd2lkdGhcIiwgbGluZVdpZHRoU2xpZGVyVmFsdWUgKiAwLjUpO1xyXG4gICAgZDMuc2VsZWN0KFwiI2xpbmUyXCIpLmF0dHIoXCJzdHJva2Utd2lkdGhcIiwgbGluZVdpZHRoU2xpZGVyVmFsdWUgKiAwLjUpO1xyXG4gICAgZDMuc2VsZWN0KFwiI2xpbmUzXCIpLmF0dHIoXCJzdHJva2Utd2lkdGhcIiwgbGluZVdpZHRoU2xpZGVyVmFsdWUgKiAwLjUpO1xyXG4gIH1cclxuXHJcbiAgaWYgKGxpbmVQb2ludFJhZGl1c1NsaWRlclZhbHVlICE9IHVuZGVmaW5lZCkge1xyXG4gICAgZDMuc2VsZWN0KFwiLmNpcmNsZXNfbGluZVwiKS5hdHRyKFwiclwiLCBsaW5lUG9pbnRSYWRpdXNTbGlkZXJWYWx1ZSAqIDAuNSk7XHJcbiAgICBkMy5zZWxlY3QoXCIuY2lyY2xlc19saW5lMlwiKS5hdHRyKFwiclwiLCBsaW5lUG9pbnRSYWRpdXNTbGlkZXJWYWx1ZSAqIDAuNSk7XHJcbiAgICBkMy5zZWxlY3QoXCIuY2lyY2xlc19saW5lM1wiKS5hdHRyKFwiclwiLCBsaW5lUG9pbnRSYWRpdXNTbGlkZXJWYWx1ZSAqIDAuNSk7XHJcbiAgfVxyXG5cclxuICBpZiAobGluZVRvb2x0aXBDaGVja2JveFZhbHVlICE9IHVuZGVmaW5lZCkge1xyXG4gICAgaWYgKGxpbmVUb29sdGlwQ2hlY2tib3hWYWx1ZSA9PSBcImNoZWNrZWRcIikge1xyXG4gICAgICBsZXQgdG9vbHRpcCA9IGQzXHJcbiAgICAgICAgLnNlbGVjdChcImJvZHlcIilcclxuICAgICAgICAuYXBwZW5kKFwiZGl2XCIpXHJcbiAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcImxpbmVfdG9vbHRpcFwiKTtcclxuXHJcbiAgICAgIGxldCBjaXJjbGVzID0gZDMuc2VsZWN0QWxsKFwiLmNpcmNsZXNfbGluZVwiKTtcclxuICAgICAgbGV0IGNpcmNsZXMyID0gZDMuc2VsZWN0QWxsKFwiLmNpcmNsZXNfbGluZTJcIik7XHJcbiAgICAgIGxldCBjaXJjbGVzMyA9IGQzLnNlbGVjdEFsbChcIi5jaXJjbGVzX2xpbmUzXCIpO1xyXG4gICAgICBjaXJjbGVzXHJcbiAgICAgICAgLm9uKFwibW91c2Vtb3ZlXCIsIGZ1bmN0aW9uIChkKSB7XHJcbiAgICAgICAgICB0b29sdGlwXHJcbiAgICAgICAgICAgIC5zdHlsZShcImxlZnRcIiwgY3VycmVudEV2ZW50LnBhZ2VYICsgMTAgKyBcInB4XCIpXHJcbiAgICAgICAgICAgIC5zdHlsZShcInRvcFwiLCBjdXJyZW50RXZlbnQucGFnZVkgKyAxMCArIFwicHhcIilcclxuICAgICAgICAgICAgLnN0eWxlKFwiZGlzcGxheVwiLCBcImlubGluZS1ibG9ja1wiKTtcclxuICAgICAgICB9KVxyXG4gICAgICAgIC5vbihcIm1vdXNlb3V0XCIsIGZ1bmN0aW9uIChkKSB7XHJcbiAgICAgICAgICB0b29sdGlwLnN0eWxlKFwiZGlzcGxheVwiLCBcIm5vbmVcIik7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICBjaXJjbGVzMlxyXG4gICAgICAgIC5vbihcIm1vdXNlbW92ZVwiLCBmdW5jdGlvbiAoZCkge1xyXG4gICAgICAgICAgdG9vbHRpcFxyXG4gICAgICAgICAgICAuc3R5bGUoXCJsZWZ0XCIsIGN1cnJlbnRFdmVudC5wYWdlWCArIDEwICsgXCJweFwiKVxyXG4gICAgICAgICAgICAuc3R5bGUoXCJ0b3BcIiwgY3VycmVudEV2ZW50LnBhZ2VZICsgMTAgKyBcInB4XCIpXHJcbiAgICAgICAgICAgIC5zdHlsZShcImRpc3BsYXlcIiwgXCJpbmxpbmUtYmxvY2tcIik7XHJcbiAgICAgICAgfSlcclxuICAgICAgICAub24oXCJtb3VzZW91dFwiLCBmdW5jdGlvbiAoZCkge1xyXG4gICAgICAgICAgdG9vbHRpcC5zdHlsZShcImRpc3BsYXlcIiwgXCJub25lXCIpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgY2lyY2xlczNcclxuICAgICAgICAub24oXCJtb3VzZW1vdmVcIiwgZnVuY3Rpb24gKGQpIHtcclxuICAgICAgICAgIHRvb2x0aXBcclxuICAgICAgICAgICAgLnN0eWxlKFwibGVmdFwiLCBjdXJyZW50RXZlbnQucGFnZVggKyAxMCArIFwicHhcIilcclxuICAgICAgICAgICAgLnN0eWxlKFwidG9wXCIsIGN1cnJlbnRFdmVudC5wYWdlWSArIDEwICsgXCJweFwiKVxyXG4gICAgICAgICAgICAuc3R5bGUoXCJkaXNwbGF5XCIsIFwiaW5saW5lLWJsb2NrXCIpO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLm9uKFwibW91c2VvdXRcIiwgZnVuY3Rpb24gKGQpIHtcclxuICAgICAgICAgIHRvb2x0aXAuc3R5bGUoXCJkaXNwbGF5XCIsIFwibm9uZVwiKTtcclxuICAgICAgICB9KTtcclxuICAgIH0gZWxzZSBpZiAobGluZVRvb2x0aXBDaGVja2JveFZhbHVlID09IFwidW5jaGVja2VkXCIpIHtcclxuICAgICAgbGV0IGkgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiYm9keSA+IGRpdi5saW5lX3Rvb2x0aXBcIik7XHJcbiAgICAgIGlmIChpICE9IG51bGwpIHtcclxuICAgICAgICBpLnJlbW92ZSgpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBpZiAobGluZURhdGFwb2ludENoZWNrYm94VmFsdWUgIT0gdW5kZWZpbmVkKSB7XHJcbiAgICBpZiAobGluZURhdGFwb2ludENoZWNrYm94VmFsdWUgPT0gXCJjaGVja2VkXCIpIHtcclxuICAgICAgZDMuc2VsZWN0QWxsKFwiLmNpcmNsZXNfbGluZVwiKS5hdHRyKFwiZGlzcGxheVwiLCBcIlwiKTtcclxuICAgICAgZDMuc2VsZWN0QWxsKFwiLmNpcmNsZXNfbGluZTJcIikuYXR0cihcImRpc3BsYXlcIiwgXCJcIik7XHJcbiAgICAgIGQzLnNlbGVjdEFsbChcIi5jaXJjbGVzX2xpbmUzXCIpLmF0dHIoXCJkaXNwbGF5XCIsIFwiXCIpO1xyXG4gICAgfSBlbHNlIGlmIChsaW5lRGF0YXBvaW50Q2hlY2tib3hWYWx1ZSA9PSBcInVuY2hlY2tlZFwiKSB7XHJcbiAgICAgIGQzLnNlbGVjdEFsbChcIi5jaXJjbGVzX2xpbmVcIikuYXR0cihcImRpc3BsYXlcIiwgXCJub25lXCIpO1xyXG4gICAgICBkMy5zZWxlY3RBbGwoXCIuY2lyY2xlc19saW5lMlwiKS5hdHRyKFwiZGlzcGxheVwiLCBcIm5vbmVcIik7XHJcbiAgICAgIGQzLnNlbGVjdEFsbChcIi5jaXJjbGVzX2xpbmUzXCIpLmF0dHIoXCJkaXNwbGF5XCIsIFwibm9uZVwiKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGlmIChsaW5lWEF4aXNHcmlkQ2hlY2tib3hWYWx1ZSAhPSB1bmRlZmluZWQpIHtcclxuICAgIGlmIChsaW5lWEF4aXNHcmlkQ2hlY2tib3hWYWx1ZSA9PSBcImNoZWNrZWRcIikge1xyXG4gICAgICBkMy5zZWxlY3QoXCIjbGluZV94X2dyaWRcIikuYXR0cihcImRpc3BsYXlcIiwgXCJcIik7XHJcbiAgICB9IGVsc2UgaWYgKGxpbmVYQXhpc0dyaWRDaGVja2JveFZhbHVlID09IFwidW5jaGVja2VkXCIpIHtcclxuICAgICAgZDMuc2VsZWN0KFwiI2xpbmVfeF9ncmlkXCIpLmF0dHIoXCJkaXNwbGF5XCIsIFwibm9uZVwiKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGlmIChsaW5lWUF4aXNHcmlkQ2hlY2tib3hWYWx1ZSAhPSB1bmRlZmluZWQpIHtcclxuICAgIGlmIChsaW5lWUF4aXNHcmlkQ2hlY2tib3hWYWx1ZSA9PSBcImNoZWNrZWRcIikge1xyXG4gICAgICBkMy5zZWxlY3QoXCIjbGluZV95X2dyaWRcIikuYXR0cihcImRpc3BsYXlcIiwgXCJcIik7XHJcbiAgICB9IGVsc2UgaWYgKGxpbmVZQXhpc0dyaWRDaGVja2JveFZhbHVlID09IFwidW5jaGVja2VkXCIpIHtcclxuICAgICAgZDMuc2VsZWN0KFwiI2xpbmVfeV9ncmlkXCIpLmF0dHIoXCJkaXNwbGF5XCIsIFwibm9uZVwiKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGlmIChsaW5lWEF4aXNMaW5lQ2hlY2tib3hWYWx1ZSAhPSB1bmRlZmluZWQpIHtcclxuICAgIGlmIChsaW5lWEF4aXNMaW5lQ2hlY2tib3hWYWx1ZSA9PSBcImNoZWNrZWRcIikge1xyXG4gICAgICBkMy5zZWxlY3QoXCIjbGluZV94X2F4aXMgPiBwYXRoXCIpLmF0dHIoXCJkaXNwbGF5XCIsIFwiXCIpO1xyXG4gICAgfSBlbHNlIGlmIChsaW5lWEF4aXNMaW5lQ2hlY2tib3hWYWx1ZSA9PSBcInVuY2hlY2tlZFwiKSB7XHJcbiAgICAgIGQzLnNlbGVjdChcIiNsaW5lX3hfYXhpcyA+IHBhdGhcIikuYXR0cihcImRpc3BsYXlcIiwgXCJub25lXCIpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgaWYgKGxpbmVZQXhpc0xpbmVDaGVja2JveFZhbHVlICE9IHVuZGVmaW5lZCkge1xyXG4gICAgaWYgKGxpbmVZQXhpc0xpbmVDaGVja2JveFZhbHVlID09IFwiY2hlY2tlZFwiKSB7XHJcbiAgICAgIGQzLnNlbGVjdChcIiNsaW5lX3lfYXhpcyA+IHBhdGhcIikuYXR0cihcImRpc3BsYXlcIiwgXCJcIik7XHJcbiAgICB9IGVsc2UgaWYgKGxpbmVZQXhpc0xpbmVDaGVja2JveFZhbHVlID09IFwidW5jaGVja2VkXCIpIHtcclxuICAgICAgZDMuc2VsZWN0KFwiI2xpbmVfeV9heGlzID4gcGF0aFwiKS5hdHRyKFwiZGlzcGxheVwiLCBcIm5vbmVcIik7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBpZiAobGluZUhvdmVyQ2hlY2tib3hWYWx1ZSAhPSB1bmRlZmluZWQpIHtcclxuICAgIGlmIChsaW5lSG92ZXJDaGVja2JveFZhbHVlID09IFwiY2hlY2tlZFwiKSB7XHJcbiAgICAgIGQzLnNlbGVjdEFsbChcIi5jaXJjbGVzX2xpbmVcIikuY2xhc3NlZChcImNpcmNsZV9ob3ZlcmVkXCIsIHRydWUpO1xyXG4gICAgICBkMy5zZWxlY3RBbGwoXCIuY2lyY2xlc19saW5lMlwiKS5jbGFzc2VkKFwiY2lyY2xlX2hvdmVyZWRcIiwgdHJ1ZSk7XHJcbiAgICAgIGQzLnNlbGVjdEFsbChcIi5jaXJjbGVzX2xpbmUzXCIpLmNsYXNzZWQoXCJjaXJjbGVfaG92ZXJlZFwiLCB0cnVlKTtcclxuICAgIH0gZWxzZSBpZiAobGluZUhvdmVyQ2hlY2tib3hWYWx1ZSA9PSBcInVuY2hlY2tlZFwiKSB7XHJcbiAgICAgIGQzLnNlbGVjdEFsbChcIi5jaXJjbGVzX2xpbmVcIikuY2xhc3NlZChcImNpcmNsZV9ob3ZlcmVkXCIsIGZhbHNlKTtcclxuICAgICAgZDMuc2VsZWN0QWxsKFwiLmNpcmNsZXNfbGluZTJcIikuY2xhc3NlZChcImNpcmNsZV9ob3ZlcmVkXCIsIGZhbHNlKTtcclxuICAgICAgZDMuc2VsZWN0QWxsKFwiLmNpcmNsZXNfbGluZTNcIikuY2xhc3NlZChcImNpcmNsZV9ob3ZlcmVkXCIsIGZhbHNlKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGlmIChsaW5lQmFja2dyb3VuZENQVmFsdWUgIT0gdW5kZWZpbmVkKSB7XHJcbiAgICBpZiAobGluZUJhY2tncm91bmRDUFZhbHVlICE9IFwiXCIpIHtcclxuICAgICAgZDMuc2VsZWN0KFwiI2xpbmVfY2hhcnRcIikuc3R5bGUoXCJiYWNrZ3JvdW5kLWNvbG9yXCIsIGxpbmVCYWNrZ3JvdW5kQ1BWYWx1ZSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBpZiAobGluZUNQVmFsdWUxICE9IHVuZGVmaW5lZCkge1xyXG4gICAgaWYgKGxpbmVDUFZhbHVlMSAhPSBcIlwiKSB7XHJcbiAgICAgIGQzLnNlbGVjdChcIiNsaW5lMVwiKS5zdHlsZShcInN0cm9rZVwiLCBsaW5lQ1BWYWx1ZTEpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgaWYgKGxpbmVDUFZhbHVlMiAhPSB1bmRlZmluZWQpIHtcclxuICAgIGlmIChsaW5lQ1BWYWx1ZTIgIT0gXCJcIikge1xyXG4gICAgICBkMy5zZWxlY3QoXCIjbGluZTJcIikuc3R5bGUoXCJzdHJva2VcIiwgbGluZUNQVmFsdWUyKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGlmIChsaW5lQ1BWYWx1ZTMgIT0gdW5kZWZpbmVkKSB7XHJcbiAgICBpZiAobGluZUNQVmFsdWUzICE9IFwiXCIpIHtcclxuICAgICAgZDMuc2VsZWN0KFwiI2xpbmUzXCIpLnN0eWxlKFwic3Ryb2tlXCIsIGxpbmVDUFZhbHVlMyk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBpZiAobGluZVRpY2tDUFZhbHVlICE9IHVuZGVmaW5lZCkge1xyXG4gICAgaWYgKGxpbmVUaWNrQ1BWYWx1ZSAhPSBcIlwiKSB7XHJcbiAgICAgIGQzLnNlbGVjdEFsbChcIiNsaW5lX2NoYXJ0ID4gZyA+IGcgPiAudGljayA+IHRleHRcIikuc3R5bGUoXHJcbiAgICAgICAgXCJmaWxsXCIsXHJcbiAgICAgICAgbGluZVRpY2tDUFZhbHVlXHJcbiAgICAgICk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBpZiAobGluZVRpdGxlQ1BWYWx1ZSAhPSB1bmRlZmluZWQpIHtcclxuICAgIGlmIChsaW5lVGl0bGVDUFZhbHVlICE9IFwiXCIpIHtcclxuICAgICAgZDMuc2VsZWN0KFwiI2xpbmVfdGl0bGVcIikuc3R5bGUoXCJmaWxsXCIsIGxpbmVUaXRsZUNQVmFsdWUpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgaWYgKGxpbmVYQXhpc1RpdGxlQ1BWYWx1ZSAhPSB1bmRlZmluZWQpIHtcclxuICAgIGlmIChsaW5lWEF4aXNUaXRsZUNQVmFsdWUgIT0gXCJcIikge1xyXG4gICAgICBkMy5zZWxlY3QoXCIjbGluZV94YXhpc190aXRsZVwiKS5zdHlsZShcImZpbGxcIiwgbGluZVhBeGlzVGl0bGVDUFZhbHVlKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGlmIChsaW5lWUF4aXNUaXRsZUNQVmFsdWUgIT0gdW5kZWZpbmVkKSB7XHJcbiAgICBpZiAobGluZVlBeGlzVGl0bGVDUFZhbHVlICE9IFwiXCIpIHtcclxuICAgICAgZDMuc2VsZWN0KFwiI2xpbmVfeWF4aXNfdGl0bGVcIikuc3R5bGUoXCJmaWxsXCIsIGxpbmVZQXhpc1RpdGxlQ1BWYWx1ZSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBpZiAobGluZUdyaWRDUFZhbHVlICE9IHVuZGVmaW5lZCkge1xyXG4gICAgaWYgKGxpbmVHcmlkQ1BWYWx1ZSAhPSBcIlwiKSB7XHJcbiAgICAgIGQzLnNlbGVjdEFsbChcIi5saW5lX2dyaWRcIikuc3R5bGUoXCJjb2xvclwiLCBsaW5lR3JpZENQVmFsdWUpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgaWYgKGxpbmVYQXhpc0xpbmVDUFZhbHVlICE9IHVuZGVmaW5lZCkge1xyXG4gICAgaWYgKGxpbmVYQXhpc0xpbmVDUFZhbHVlICE9IFwiXCIpIHtcclxuICAgICAgZDMuc2VsZWN0KFwiI2xpbmVfeF9heGlzID4gcGF0aFwiKS5zdHlsZShcInN0cm9rZVwiLCBsaW5lWEF4aXNMaW5lQ1BWYWx1ZSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBpZiAobGluZVlBeGlzTGluZUNQVmFsdWUgIT0gdW5kZWZpbmVkKSB7XHJcbiAgICBpZiAobGluZVlBeGlzTGluZUNQVmFsdWUgIT0gXCJcIikge1xyXG4gICAgICBkMy5zZWxlY3QoXCIjbGluZV95X2F4aXMgPiBwYXRoXCIpLnN0eWxlKFwic3Ryb2tlXCIsIGxpbmVZQXhpc0xpbmVDUFZhbHVlKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGlmIChsaW5lRGF0YXBvaW50Q1BWYWx1ZSAhPSB1bmRlZmluZWQpIHtcclxuICAgIGlmIChsaW5lRGF0YXBvaW50Q1BWYWx1ZSAhPSBcIlwiKSB7XHJcbiAgICAgIGQzLnNlbGVjdEFsbChcIi5jaXJjbGVzX2xpbmVcIikuc3R5bGUoXCJmaWxsXCIsIGxpbmVEYXRhcG9pbnRDUFZhbHVlKTtcclxuICAgICAgZDMuc2VsZWN0QWxsKFwiLmNpcmNsZXNfbGluZTJcIikuc3R5bGUoXCJmaWxsXCIsIGxpbmVEYXRhcG9pbnRDUFZhbHVlKTtcclxuICAgICAgZDMuc2VsZWN0QWxsKFwiLmNpcmNsZXNfbGluZTNcIikuc3R5bGUoXCJmaWxsXCIsIGxpbmVEYXRhcG9pbnRDUFZhbHVlKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGlmIChsaW5lRGF0YXBvaW50Qm9yZGVyQ1BWYWx1ZSAhPSB1bmRlZmluZWQpIHtcclxuICAgIGlmIChsaW5lRGF0YXBvaW50Qm9yZGVyQ1BWYWx1ZSAhPSBcIlwiKSB7XHJcbiAgICAgIGQzLnNlbGVjdEFsbChcIi5jaXJjbGVzX2xpbmVcIikuc3R5bGUoXCJzdHJva2VcIiwgbGluZURhdGFwb2ludEJvcmRlckNQVmFsdWUpO1xyXG4gICAgICBkMy5zZWxlY3RBbGwoXCIuY2lyY2xlc19saW5lMlwiKS5zdHlsZShcclxuICAgICAgICBcInN0cm9rZVwiLFxyXG4gICAgICAgIGxpbmVEYXRhcG9pbnRCb3JkZXJDUFZhbHVlXHJcbiAgICAgICk7XHJcbiAgICAgIGQzLnNlbGVjdEFsbChcIi5jaXJjbGVzX2xpbmUzXCIpLnN0eWxlKFxyXG4gICAgICAgIFwic3Ryb2tlXCIsXHJcbiAgICAgICAgbGluZURhdGFwb2ludEJvcmRlckNQVmFsdWVcclxuICAgICAgKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGlmIChsaW5lQXJlYUNQVmFsdWUgIT0gdW5kZWZpbmVkKSB7XHJcbiAgICBpZiAobGluZUFyZWFDUFZhbHVlICE9IFwiXCIpIHtcclxuICAgICAgZDMuc2VsZWN0KFwiI2xpbmVfYXJlYVwiKS5zdHlsZShcImZpbGxcIiwgbGluZUFyZWFDUFZhbHVlKTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuIiwiY29uc3QgbGluZVRpdGxlSW5wdXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2xpbmVfdGl0bGVfaW5wdXRcIik7XHJcbmNvbnN0IGxpbmVYQXhpc1RpdGxlSW5wdXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2xpbmVfeGF4aXNfdGl0bGVfaW5wdXRcIik7XHJcbmNvbnN0IGxpbmVZQXhpc1RpdGxlSW5wdXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2xpbmVfeWF4aXNfdGl0bGVfaW5wdXRcIik7XHJcblxyXG5jb25zdCBsaW5lVGl0bGVTbGlkZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2xpbmVfdGl0bGVfc2xpZGVyXCIpO1xyXG5jb25zdCBsaW5lWEF4aXNUaXRsZVNsaWRlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjbGluZV94YXhpc190aXRsZV9zbGlkZXJcIik7XHJcbmNvbnN0IGxpbmVZQXhpc1RpdGxlU2xpZGVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNsaW5lX3lheGlzX3RpdGxlX3NsaWRlclwiKTtcclxuY29uc3QgbGluZVdpZHRoU2xpZGVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNsaW5lX3dpZHRoX3NsaWRlclwiKTtcclxuY29uc3QgbGluZVBvaW50UmFkaXVzU2xpZGVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcclxuICBcIiNsaW5lX3BvaW50X3JhZGl1c19zbGlkZXJcIlxyXG4pO1xyXG5cclxuY29uc3QgbGluZVRvb2x0aXBDaGVja2JveCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjbGluZV90b29sdGlwX2NoZWNrYm94XCIpO1xyXG5jb25zdCBsaW5lRGF0YXBvaW50Q2hlY2tib3ggPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFxyXG4gIFwiI2xpbmVfZGF0YXBvaW50X2NoZWNrYm94XCJcclxuKTtcclxuY29uc3QgbGluZVhBeGlzR3JpZENoZWNrYm94ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcclxuICBcIiNsaW5lX3hheGlzX2dyaWRfY2hlY2tib3hcIlxyXG4pO1xyXG5jb25zdCBsaW5lWUF4aXNHcmlkQ2hlY2tib3ggPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFxyXG4gIFwiI2xpbmVfeWF4aXNfZ3JpZF9jaGVja2JveFwiXHJcbik7XHJcbmNvbnN0IGxpbmVYQXhpc0xpbmVDaGVja2JveCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXHJcbiAgXCIjbGluZV94YXhpc19saW5lX2NoZWNrYm94XCJcclxuKTtcclxuY29uc3QgbGluZVlBeGlzTGluZUNoZWNrYm94ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcclxuICBcIiNsaW5lX3lheGlzX2xpbmVfY2hlY2tib3hcIlxyXG4pO1xyXG5jb25zdCBsaW5lSG92ZXJDaGVja2JveCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjbGluZV9ob3Zlcl9jaGVja2JveFwiKTtcclxuXHJcbmNvbnN0IGxpbmVBcmVhQ2hlY2tib3ggPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2xpbmVfYXJlYV9jaGVja2JveFwiKTtcclxuY29uc3QgbGluZUFtb3VudElucHV0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNsaW5lX2Ftb3VudF9pbnB1dFwiKTtcclxuXHJcbmV4cG9ydCB7XHJcbiAgbGluZVRpdGxlSW5wdXQsXHJcbiAgbGluZVhBeGlzVGl0bGVJbnB1dCxcclxuICBsaW5lWUF4aXNUaXRsZUlucHV0LFxyXG4gIGxpbmVUaXRsZVNsaWRlcixcclxuICBsaW5lWEF4aXNUaXRsZVNsaWRlcixcclxuICBsaW5lWUF4aXNUaXRsZVNsaWRlcixcclxuICBsaW5lV2lkdGhTbGlkZXIsXHJcbiAgbGluZVBvaW50UmFkaXVzU2xpZGVyLFxyXG4gIGxpbmVUb29sdGlwQ2hlY2tib3gsXHJcbiAgbGluZURhdGFwb2ludENoZWNrYm94LFxyXG4gIGxpbmVYQXhpc0dyaWRDaGVja2JveCxcclxuICBsaW5lWUF4aXNHcmlkQ2hlY2tib3gsXHJcbiAgbGluZVhBeGlzTGluZUNoZWNrYm94LFxyXG4gIGxpbmVZQXhpc0xpbmVDaGVja2JveCxcclxuICBsaW5lSG92ZXJDaGVja2JveCxcclxuICBsaW5lQXJlYUNoZWNrYm94LFxyXG4gIGxpbmVBbW91bnRJbnB1dCxcclxufTtcclxuIiwiaW1wb3J0IHtcclxuICBsaW5lVGl0bGVJbnB1dCxcclxuICBsaW5lWEF4aXNUaXRsZUlucHV0LFxyXG4gIGxpbmVZQXhpc1RpdGxlSW5wdXQsXHJcbiAgbGluZVRpdGxlU2xpZGVyLFxyXG4gIGxpbmVYQXhpc1RpdGxlU2xpZGVyLFxyXG4gIGxpbmVZQXhpc1RpdGxlU2xpZGVyLFxyXG4gIGxpbmVXaWR0aFNsaWRlcixcclxuICBsaW5lUG9pbnRSYWRpdXNTbGlkZXIsXHJcbiAgbGluZVRvb2x0aXBDaGVja2JveCxcclxuICBsaW5lRGF0YXBvaW50Q2hlY2tib3gsXHJcbiAgbGluZVhBeGlzR3JpZENoZWNrYm94LFxyXG4gIGxpbmVZQXhpc0dyaWRDaGVja2JveCxcclxuICBsaW5lWEF4aXNMaW5lQ2hlY2tib3gsXHJcbiAgbGluZVlBeGlzTGluZUNoZWNrYm94LFxyXG4gIGxpbmVIb3ZlckNoZWNrYm94LFxyXG4gIGxpbmVBcmVhQ2hlY2tib3gsXHJcbiAgbGluZUFtb3VudElucHV0LFxyXG59IGZyb20gXCIuL2xpbmVfY2hhcnRfaW5wdXRzLmpzXCI7XHJcblxyXG5pbXBvcnQgeyBsaW5lVmFsdWVzIH0gZnJvbSBcIi4vbGluZV9jaGFydF92YWx1ZXMuanNcIjtcclxuXHJcbmltcG9ydCB7IHNlbGVjdCwgc2VsZWN0QWxsIH0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xyXG5pbXBvcnQgeyBldmVudCBhcyBjdXJyZW50RXZlbnQgfSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XHJcblxyXG5jb25zdCBkMyA9IHsgc2VsZWN0LCBzZWxlY3RBbGwgfTtcclxuXHJcbmxpbmVUaXRsZUlucHV0LmFkZEV2ZW50TGlzdGVuZXIoXCJpbnB1dFwiLCBmdW5jdGlvbiAoKSB7XHJcbiAgbGluZVZhbHVlcy50aXRsZUlucHV0ID0gbGluZVRpdGxlSW5wdXQudmFsdWU7XHJcbiAgZDMuc2VsZWN0KFwiI2xpbmVfdGl0bGVcIikudGV4dChsaW5lVmFsdWVzLnRpdGxlSW5wdXQpO1xyXG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibGluZV90aXRsZV9zcGFuXCIpLmlubmVySFRNTCA9IGxpbmVWYWx1ZXMudGl0bGVJbnB1dDtcclxufSk7XHJcblxyXG5saW5lWEF4aXNUaXRsZUlucHV0LmFkZEV2ZW50TGlzdGVuZXIoXCJpbnB1dFwiLCBmdW5jdGlvbiAoKSB7XHJcbiAgbGluZVZhbHVlcy54QXhpc1RpdGxlSW5wdXQgPSBsaW5lWEF4aXNUaXRsZUlucHV0LnZhbHVlO1xyXG4gIGQzLnNlbGVjdChcIiNsaW5lX3hheGlzX3RpdGxlXCIpLnRleHQobGluZVZhbHVlcy54QXhpc1RpdGxlSW5wdXQpO1xyXG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibGluZV94X3RpdGxlX3NwYW5cIikuaW5uZXJIVE1MID1cclxuICAgIGxpbmVWYWx1ZXMueEF4aXNUaXRsZUlucHV0O1xyXG59KTtcclxuXHJcbmxpbmVZQXhpc1RpdGxlSW5wdXQuYWRkRXZlbnRMaXN0ZW5lcihcImlucHV0XCIsIGZ1bmN0aW9uICgpIHtcclxuICBsaW5lVmFsdWVzLnlBeGlzVGl0bGVJbnB1dCA9IGxpbmVZQXhpc1RpdGxlSW5wdXQudmFsdWU7XHJcbiAgZDMuc2VsZWN0KFwiI2xpbmVfeWF4aXNfdGl0bGVcIikudGV4dChsaW5lVmFsdWVzLnlBeGlzVGl0bGVJbnB1dCk7XHJcbiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJsaW5lX3lfdGl0bGVfc3BhblwiKS5pbm5lckhUTUwgPVxyXG4gICAgbGluZVZhbHVlcy55QXhpc1RpdGxlSW5wdXQ7XHJcbn0pO1xyXG5cclxubGluZVRpdGxlU2xpZGVyLmFkZEV2ZW50TGlzdGVuZXIoXCJpbnB1dFwiLCBmdW5jdGlvbiAoKSB7XHJcbiAgbGluZVZhbHVlcy50aXRsZVNsaWRlciA9IGxpbmVUaXRsZVNsaWRlci52YWx1ZTtcclxuICBkMy5zZWxlY3QoXCIjbGluZV90aXRsZVwiKS5hdHRyKFwieFwiLCBsaW5lVmFsdWVzLnRpdGxlU2xpZGVyKTtcclxuICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImxpbmVfdGl0bGVfc2xpZGVyX3NwYW5cIikuaW5uZXJIVE1MID1cclxuICAgIGxpbmVWYWx1ZXMudGl0bGVTbGlkZXI7XHJcbn0pO1xyXG5cclxubGluZVhBeGlzVGl0bGVTbGlkZXIuYWRkRXZlbnRMaXN0ZW5lcihcImlucHV0XCIsIGZ1bmN0aW9uICgpIHtcclxuICBsaW5lVmFsdWVzLnhBeGlzVGl0bGVTbGlkZXIgPSBsaW5lWEF4aXNUaXRsZVNsaWRlci52YWx1ZTtcclxuICBkMy5zZWxlY3QoXCIjbGluZV94YXhpc190aXRsZVwiKS5hdHRyKFwieFwiLCBsaW5lVmFsdWVzLnhBeGlzVGl0bGVTbGlkZXIpO1xyXG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibGluZV94X3RpdGxlX3NsaWRlcl9zcGFuXCIpLmlubmVySFRNTCA9XHJcbiAgICBsaW5lVmFsdWVzLnhBeGlzVGl0bGVTbGlkZXI7XHJcbn0pO1xyXG5cclxubGluZVlBeGlzVGl0bGVTbGlkZXIuYWRkRXZlbnRMaXN0ZW5lcihcImlucHV0XCIsIGZ1bmN0aW9uICgpIHtcclxuICBsaW5lVmFsdWVzLnlBeGlzVGl0bGVTbGlkZXIgPSBsaW5lWUF4aXNUaXRsZVNsaWRlci52YWx1ZTtcclxuICBkMy5zZWxlY3QoXCIjbGluZV95YXhpc190aXRsZVwiKS5hdHRyKFwieFwiLCBsaW5lVmFsdWVzLnlBeGlzVGl0bGVTbGlkZXIgKiAyMCk7XHJcbiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJsaW5lX3lfdGl0bGVfc2xpZGVyX3NwYW5cIikuaW5uZXJIVE1MID1cclxuICAgIGxpbmVWYWx1ZXMueUF4aXNUaXRsZVNsaWRlcjtcclxufSk7XHJcblxyXG5saW5lV2lkdGhTbGlkZXIuYWRkRXZlbnRMaXN0ZW5lcihcImlucHV0XCIsIGZ1bmN0aW9uICgpIHtcclxuICBsaW5lVmFsdWVzLndpZHRoU2xpZGVyID0gbGluZVdpZHRoU2xpZGVyLnZhbHVlO1xyXG5cclxuICBkMy5zZWxlY3RBbGwoXCIubGluZVwiKS5hdHRyKFxyXG4gICAgXCJzdHJva2Utd2lkdGhcIixcclxuICAgIGAke2xpbmVWYWx1ZXMud2lkdGhTbGlkZXIgKiAwLjV9cHhgXHJcbiAgKTtcclxuICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImxpbmVfMV93aWR0aF9zbGlkZXJfc3BhblwiKS5pbm5lckhUTUwgPVxyXG4gICAgbGluZVZhbHVlcy53aWR0aFNsaWRlcjtcclxuICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImxpbmVfMl93aWR0aF9zbGlkZXJfc3BhblwiKS5pbm5lckhUTUwgPVxyXG4gICAgbGluZVZhbHVlcy53aWR0aFNsaWRlcjtcclxuICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImxpbmVfM193aWR0aF9zbGlkZXJfc3BhblwiKS5pbm5lckhUTUwgPVxyXG4gICAgbGluZVZhbHVlcy53aWR0aFNsaWRlcjtcclxufSk7XHJcblxyXG5saW5lUG9pbnRSYWRpdXNTbGlkZXIuYWRkRXZlbnRMaXN0ZW5lcihcImlucHV0XCIsIGZ1bmN0aW9uICgpIHtcclxuICBsaW5lVmFsdWVzLnBvaW50UmFkaXVzU2xpZGVyID0gbGluZVBvaW50UmFkaXVzU2xpZGVyLnZhbHVlO1xyXG4gIGQzLnNlbGVjdEFsbChcIi5jaXJjbGVzX2xpbmVcIikuYXR0cihcInJcIiwgbGluZVZhbHVlcy5wb2ludFJhZGl1c1NsaWRlciAqIDAuNSk7XHJcbiAgZDMuc2VsZWN0QWxsKFwiLmNpcmNsZXNfbGluZTJcIikuYXR0cihcInJcIiwgbGluZVZhbHVlcy5wb2ludFJhZGl1c1NsaWRlciAqIDAuNSk7XHJcbiAgZDMuc2VsZWN0QWxsKFwiLmNpcmNsZXNfbGluZTNcIikuYXR0cihcInJcIiwgbGluZVZhbHVlcy5wb2ludFJhZGl1c1NsaWRlciAqIDAuNSk7XHJcbiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJsaW5lX3BvaW50X3JhZGl1c19zbGlkZXJfc3BhblwiKS5pbm5lckhUTUwgPVxyXG4gICAgbGluZVZhbHVlcy5wb2ludFJhZGl1c1NsaWRlcjtcclxuICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImxpbmVfcG9pbnQyX3JhZGl1c19zbGlkZXJfc3BhblwiKS5pbm5lckhUTUwgPVxyXG4gICAgbGluZVZhbHVlcy5wb2ludFJhZGl1c1NsaWRlcjtcclxuICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImxpbmVfcG9pbnQzX3JhZGl1c19zbGlkZXJfc3BhblwiKS5pbm5lckhUTUwgPVxyXG4gICAgbGluZVZhbHVlcy5wb2ludFJhZGl1c1NsaWRlcjtcclxufSk7XHJcblxyXG5saW5lWEF4aXNHcmlkQ2hlY2tib3guYWRkRXZlbnRMaXN0ZW5lcihcImNoYW5nZVwiLCBmdW5jdGlvbiAoKSB7XHJcbiAgaWYgKHRoaXMuY2hlY2tlZCkge1xyXG4gICAgbGluZVZhbHVlcy54QXhpc0dyaWRDaGVja2JveCA9IFwiY2hlY2tlZFwiO1xyXG4gICAgZDMuc2VsZWN0KFwiI2xpbmVfeF9ncmlkXCIpLmF0dHIoXCJkaXNwbGF5XCIsIFwiXCIpO1xyXG4gICAgZDMuc2VsZWN0KFwiI2xpbmVfeF9ncmlkX2NoZWNrYm94X3NwYW5cIikuY2xhc3NlZChcImhpZGVcIiwgZmFsc2UpO1xyXG4gIH0gZWxzZSBpZiAodGhpcy5jaGVja2VkID09PSBmYWxzZSkge1xyXG4gICAgZDMuc2VsZWN0KFwiI2xpbmVfeF9ncmlkXCIpLmF0dHIoXCJkaXNwbGF5XCIsIFwibm9uZVwiKTtcclxuICAgIGxpbmVWYWx1ZXMueEF4aXNHcmlkQ2hlY2tib3ggPSBcInVuY2hlY2tlZFwiO1xyXG4gICAgZDMuc2VsZWN0KFwiI2xpbmVfeF9ncmlkX2NoZWNrYm94X3NwYW5cIikuY2xhc3NlZChcImhpZGVcIiwgdHJ1ZSk7XHJcbiAgfVxyXG59KTtcclxuXHJcbmxpbmVZQXhpc0dyaWRDaGVja2JveC5hZGRFdmVudExpc3RlbmVyKFwiY2hhbmdlXCIsIGZ1bmN0aW9uICgpIHtcclxuICBpZiAodGhpcy5jaGVja2VkKSB7XHJcbiAgICBsaW5lVmFsdWVzLnlBeGlzR3JpZENoZWNrYm94ID0gXCJjaGVja2VkXCI7XHJcbiAgICBkMy5zZWxlY3QoXCIjbGluZV95X2dyaWRcIikuYXR0cihcImRpc3BsYXlcIiwgXCJcIik7XHJcbiAgICBkMy5zZWxlY3QoXCIjbGluZV95X2dyaWRfY2hlY2tib3hfc3BhblwiKS5jbGFzc2VkKFwiaGlkZVwiLCBmYWxzZSk7XHJcbiAgfSBlbHNlIGlmICh0aGlzLmNoZWNrZWQgPT09IGZhbHNlKSB7XHJcbiAgICBsaW5lVmFsdWVzLnlBeGlzR3JpZENoZWNrYm94ID0gXCJ1bmNoZWNrZWRcIjtcclxuICAgIGQzLnNlbGVjdChcIiNsaW5lX3lfZ3JpZFwiKS5hdHRyKFwiZGlzcGxheVwiLCBcIm5vbmVcIik7XHJcbiAgICBkMy5zZWxlY3QoXCIjbGluZV95X2dyaWRfY2hlY2tib3hfc3BhblwiKS5jbGFzc2VkKFwiaGlkZVwiLCB0cnVlKTtcclxuICB9XHJcbn0pO1xyXG5cclxubGluZVhBeGlzTGluZUNoZWNrYm94LmFkZEV2ZW50TGlzdGVuZXIoXCJjaGFuZ2VcIiwgZnVuY3Rpb24gKCkge1xyXG4gIGlmICh0aGlzLmNoZWNrZWQpIHtcclxuICAgIGxpbmVWYWx1ZXMueEF4aXNMaW5lQ2hlY2tib3ggPSBcImNoZWNrZWRcIjtcclxuICAgIGQzLnNlbGVjdChcIiNsaW5lX3hfYXhpcyA+IHBhdGhcIikuYXR0cihcImRpc3BsYXlcIiwgXCJcIik7XHJcbiAgICBkMy5zZWxlY3QoXCIjbGluZV94X2xpbmVfY2hlY2tib3hfc3BhblwiKS5jbGFzc2VkKFwiaGlkZVwiLCB0cnVlKTtcclxuICB9IGVsc2UgaWYgKHRoaXMuY2hlY2tlZCA9PT0gZmFsc2UpIHtcclxuICAgIGxpbmVWYWx1ZXMueEF4aXNMaW5lQ2hlY2tib3ggPSBcInVuY2hlY2tlZFwiO1xyXG4gICAgZDMuc2VsZWN0KFwiI2xpbmVfeF9heGlzID4gcGF0aFwiKS5hdHRyKFwiZGlzcGxheVwiLCBcIm5vbmVcIik7XHJcbiAgICBkMy5zZWxlY3QoXCIjbGluZV94X2xpbmVfY2hlY2tib3hfc3BhblwiKS5jbGFzc2VkKFwiaGlkZVwiLCBmYWxzZSk7XHJcbiAgfVxyXG59KTtcclxuXHJcbmxpbmVZQXhpc0xpbmVDaGVja2JveC5hZGRFdmVudExpc3RlbmVyKFwiY2hhbmdlXCIsIGZ1bmN0aW9uICgpIHtcclxuICBpZiAodGhpcy5jaGVja2VkKSB7XHJcbiAgICBsaW5lVmFsdWVzLnlBeGlzTGluZUNoZWNrYm94ID0gXCJjaGVja2VkXCI7XHJcbiAgICBkMy5zZWxlY3QoXCIjbGluZV95X2F4aXMgPiBwYXRoXCIpLmF0dHIoXCJkaXNwbGF5XCIsIFwiXCIpO1xyXG4gICAgZDMuc2VsZWN0KFwiI2xpbmVfeV9saW5lX2NoZWNrYm94X3NwYW5cIikuY2xhc3NlZChcImhpZGVcIiwgdHJ1ZSk7XHJcbiAgfSBlbHNlIGlmICh0aGlzLmNoZWNrZWQgPT09IGZhbHNlKSB7XHJcbiAgICBsaW5lVmFsdWVzLnlBeGlzTGluZUNoZWNrYm94ID0gXCJ1bmNoZWNrZWRcIjtcclxuICAgIGQzLnNlbGVjdChcIiNsaW5lX3lfYXhpcyA+IHBhdGhcIikuYXR0cihcImRpc3BsYXlcIiwgXCJub25lXCIpO1xyXG4gICAgZDMuc2VsZWN0KFwiI2xpbmVfeV9saW5lX2NoZWNrYm94X3NwYW5cIikuY2xhc3NlZChcImhpZGVcIiwgZmFsc2UpO1xyXG4gIH1cclxufSk7XHJcblxyXG5saW5lSG92ZXJDaGVja2JveC5hZGRFdmVudExpc3RlbmVyKFwiY2hhbmdlXCIsIGZ1bmN0aW9uICgpIHtcclxuICBpZiAodGhpcy5jaGVja2VkKSB7XHJcbiAgICBsaW5lVmFsdWVzLmhvdmVyQ2hlY2tib3ggPSBcImNoZWNrZWRcIjtcclxuICAgIGQzLnNlbGVjdEFsbChcIi5jaXJjbGVzX2xpbmVcIikuY2xhc3NlZChcImNpcmNsZV9ob3ZlcmVkXCIsIHRydWUpO1xyXG4gICAgZDMuc2VsZWN0QWxsKFwiLmNpcmNsZXNfbGluZTJcIikuY2xhc3NlZChcImNpcmNsZV9ob3ZlcmVkXCIsIHRydWUpO1xyXG4gICAgZDMuc2VsZWN0QWxsKFwiLmNpcmNsZXNfbGluZTNcIikuY2xhc3NlZChcImNpcmNsZV9ob3ZlcmVkXCIsIHRydWUpO1xyXG4gICAgZDMuc2VsZWN0KFwiI2xpbmVfaG92ZXJfY2hlY2tib3hfc3BhblwiKS5jbGFzc2VkKFwiaGlkZVwiLCBmYWxzZSk7XHJcbiAgICBkMy5zZWxlY3QoXCIjbGluZV90ZW1wbGF0ZV9ob3Zlcl9zcGFuMVwiKS5jbGFzc2VkKFwiaGlkZVwiLCBmYWxzZSk7XHJcbiAgICBkMy5zZWxlY3QoXCIjbGluZV90ZW1wbGF0ZV9ob3Zlcl9zcGFuMlwiKS5jbGFzc2VkKFwiaGlkZVwiLCBmYWxzZSk7XHJcbiAgICBkMy5zZWxlY3QoXCIjbGluZV90ZW1wbGF0ZV9ob3Zlcl9zcGFuMlwiKS5jbGFzc2VkKFwiaGlkZVwiLCBmYWxzZSk7XHJcbiAgfSBlbHNlIGlmICh0aGlzLmNoZWNrZWQgPT09IGZhbHNlKSB7XHJcbiAgICBsaW5lVmFsdWVzLmhvdmVyQ2hlY2tib3ggPSBcInVuY2hlY2tlZFwiO1xyXG4gICAgZDMuc2VsZWN0QWxsKFwiLmNpcmNsZXNfbGluZVwiKS5jbGFzc2VkKFwiY2lyY2xlX2hvdmVyZWRcIiwgZmFsc2UpO1xyXG4gICAgZDMuc2VsZWN0QWxsKFwiLmNpcmNsZXNfbGluZTJcIikuY2xhc3NlZChcImNpcmNsZV9ob3ZlcmVkXCIsIGZhbHNlKTtcclxuICAgIGQzLnNlbGVjdEFsbChcIi5jaXJjbGVzX2xpbmUzXCIpLmNsYXNzZWQoXCJjaXJjbGVfaG92ZXJlZFwiLCBmYWxzZSk7XHJcbiAgICBkMy5zZWxlY3QoXCIjbGluZV9ob3Zlcl9jaGVja2JveF9zcGFuXCIpLmNsYXNzZWQoXCJoaWRlXCIsIHRydWUpO1xyXG4gICAgZDMuc2VsZWN0KFwiI2xpbmVfdGVtcGxhdGVfaG92ZXJfc3BhbjFcIikuY2xhc3NlZChcImhpZGVcIiwgdHJ1ZSk7XHJcbiAgICBkMy5zZWxlY3QoXCIjbGluZV90ZW1wbGF0ZV9ob3Zlcl9zcGFuMlwiKS5jbGFzc2VkKFwiaGlkZVwiLCB0cnVlKTtcclxuICAgIGQzLnNlbGVjdChcIiNsaW5lX3RlbXBsYXRlX2hvdmVyX3NwYW4zXCIpLmNsYXNzZWQoXCJoaWRlXCIsIHRydWUpO1xyXG4gIH1cclxufSk7XHJcblxyXG5saW5lQXJlYUNoZWNrYm94LmFkZEV2ZW50TGlzdGVuZXIoXCJjaGFuZ2VcIiwgZnVuY3Rpb24gKCkge1xyXG4gIGlmICh0aGlzLmNoZWNrZWQpIHtcclxuICAgIGxpbmVWYWx1ZXMuYW1vdW50SW5wdXQgPSAxO1xyXG4gICAgbGluZUFtb3VudElucHV0LnZhbHVlID0gMTtcclxuICAgIGxpbmVBbW91bnRJbnB1dC5kaXNhYmxlZCA9IHRydWU7XHJcblxyXG4gICAgZDMuc2VsZWN0KFwiI2xpbmVfb2JqX251bTJfc3BhblwiKS5jbGFzc2VkKFwiaGlkZVwiLCB0cnVlKTtcclxuICAgIGQzLnNlbGVjdChcIiNsaW5lX29ial9udW0zX3NwYW5cIikuY2xhc3NlZChcImhpZGVcIiwgdHJ1ZSk7XHJcblxyXG4gICAgZDMuc2VsZWN0KFwiI2xpbmUyXCIpLmF0dHIoXCJkaXNwbGF5XCIsIFwibm9uZVwiKTtcclxuICAgIGQzLnNlbGVjdChcIiNsaW5lM1wiKS5hdHRyKFwiZGlzcGxheVwiLCBcIm5vbmVcIik7XHJcblxyXG4gICAgZDMuc2VsZWN0QWxsKFwiLmNpcmNsZXNfbGluZTJcIikuYXR0cihcImRpc3BsYXlcIiwgXCJub25lXCIpO1xyXG4gICAgZDMuc2VsZWN0QWxsKFwiLmNpcmNsZXNfbGluZTNcIikuYXR0cihcImRpc3BsYXlcIiwgXCJub25lXCIpO1xyXG5cclxuICAgIGQzLnNlbGVjdChcIiNsaW5lXzFfc2VsZWN0X3NwYW5cIikuY2xhc3NlZChcImhpZGVcIiwgZmFsc2UpO1xyXG4gICAgZDMuc2VsZWN0KFwiI2xpbmVfMl9zZWxlY3Rfc3BhblwiKS5jbGFzc2VkKFwiaGlkZVwiLCB0cnVlKTtcclxuICAgIGQzLnNlbGVjdChcIiNsaW5lXzNfc2VsZWN0X3NwYW5cIikuY2xhc3NlZChcImhpZGVcIiwgdHJ1ZSk7XHJcblxyXG4gICAgZDMuc2VsZWN0KFwiI2xpbmVfZGF0YXBvaW50X2NoZWNrYm94X3NwYW5cIikuY2xhc3NlZChcImhpZGVcIiwgZmFsc2UpO1xyXG4gICAgZDMuc2VsZWN0KFwiI2xpbmVfZGF0YXBvaW50Ml9jaGVja2JveF9zcGFuXCIpLmNsYXNzZWQoXCJoaWRlXCIsIHRydWUpO1xyXG4gICAgZDMuc2VsZWN0KFwiI2xpbmVfZGF0YXBvaW50M19jaGVja2JveF9zcGFuXCIpLmNsYXNzZWQoXCJoaWRlXCIsIHRydWUpO1xyXG5cclxuICAgIGQzLnNlbGVjdChcIiNsaW5lX2FyZWFcIikuYXR0cihcImRpc3BsYXlcIiwgXCJcIik7XHJcbiAgICBkMy5zZWxlY3QoXCIjbGluZV9hcmVhX2NoZWNrYm94X3NwYW5cIikuY2xhc3NlZChcImhpZGVcIiwgZmFsc2UpO1xyXG4gIH1cclxuICBpZiAodGhpcy5jaGVja2VkID09PSBmYWxzZSkge1xyXG4gICAgZDMuc2VsZWN0KFwiI2xpbmVfYXJlYVwiKS5hdHRyKFwiZGlzcGxheVwiLCBcIm5vbmVcIik7XHJcbiAgICBsaW5lQW1vdW50SW5wdXQuZGlzYWJsZWQgPSBmYWxzZTtcclxuICAgIGQzLnNlbGVjdChcIiNsaW5lX2FyZWFfY2hlY2tib3hfc3BhblwiKS5jbGFzc2VkKFwiaGlkZVwiLCB0cnVlKTtcclxuICB9XHJcbn0pO1xyXG5cclxubGluZVRvb2x0aXBDaGVja2JveC5hZGRFdmVudExpc3RlbmVyKFwiY2hhbmdlXCIsIGZ1bmN0aW9uICgpIHtcclxuICBpZiAodGhpcy5jaGVja2VkKSB7XHJcbiAgICBpZiAobGluZUFtb3VudElucHV0LnZhbHVlID09IDEpIHtcclxuICAgICAgbGV0IHRvb2x0aXAgPSBkM1xyXG4gICAgICAgIC5zZWxlY3QoXCJib2R5XCIpXHJcbiAgICAgICAgLmFwcGVuZChcImRpdlwiKVxyXG4gICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJsaW5lX3Rvb2x0aXBcIik7XHJcblxyXG4gICAgICBsZXQgY2lyY2xlcyA9IGQzLnNlbGVjdEFsbChcIi5jaXJjbGVzX2xpbmVcIik7XHJcbiAgICAgIGNpcmNsZXNcclxuICAgICAgICAub24oXCJtb3VzZW1vdmVcIiwgZnVuY3Rpb24gKGQpIHtcclxuICAgICAgICAgIHRvb2x0aXBcclxuICAgICAgICAgICAgLnN0eWxlKFwibGVmdFwiLCBjdXJyZW50RXZlbnQucGFnZVggKyAxMCArIFwicHhcIilcclxuICAgICAgICAgICAgLnN0eWxlKFwidG9wXCIsIGN1cnJlbnRFdmVudC5wYWdlWSArIDEwICsgXCJweFwiKVxyXG4gICAgICAgICAgICAuc3R5bGUoXCJkaXNwbGF5XCIsIFwiaW5saW5lLWJsb2NrXCIpO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLm9uKFwibW91c2VvdXRcIiwgZnVuY3Rpb24gKGQpIHtcclxuICAgICAgICAgIHRvb2x0aXAuc3R5bGUoXCJkaXNwbGF5XCIsIFwibm9uZVwiKTtcclxuICAgICAgICB9KTtcclxuICAgICAgZDMuc2VsZWN0KFwiI2xpbmVfdG9vbHRpcF9jaXJjbGVfY2hlY2tib3hfc3BhblwiKS5jbGFzc2VkKFwiaGlkZVwiLCBmYWxzZSk7XHJcbiAgICAgIGQzLnNlbGVjdChcIiNsaW5lX3Rvb2x0aXAyX2NpcmNsZV9jaGVja2JveF9zcGFuXCIpLmNsYXNzZWQoXCJoaWRlXCIsIHRydWUpO1xyXG4gICAgICBkMy5zZWxlY3QoXCIjbGluZV90b29sdGlwM19jaXJjbGVfY2hlY2tib3hfc3BhblwiKS5jbGFzc2VkKFwiaGlkZVwiLCB0cnVlKTtcclxuICAgIH1cclxuICAgIGlmIChsaW5lQW1vdW50SW5wdXQudmFsdWUgPT0gMikge1xyXG4gICAgICBsZXQgdG9vbHRpcCA9IGQzXHJcbiAgICAgICAgLnNlbGVjdChcImJvZHlcIilcclxuICAgICAgICAuYXBwZW5kKFwiZGl2XCIpXHJcbiAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcImxpbmVfdG9vbHRpcFwiKTtcclxuXHJcbiAgICAgIGxldCBjaXJjbGVzID0gZDMuc2VsZWN0QWxsKFwiLmNpcmNsZXNfbGluZVwiKTtcclxuICAgICAgY2lyY2xlc1xyXG4gICAgICAgIC5vbihcIm1vdXNlbW92ZVwiLCBmdW5jdGlvbiAoZCkge1xyXG4gICAgICAgICAgdG9vbHRpcFxyXG4gICAgICAgICAgICAuc3R5bGUoXCJsZWZ0XCIsIGN1cnJlbnRFdmVudC5wYWdlWCArIDEwICsgXCJweFwiKVxyXG4gICAgICAgICAgICAuc3R5bGUoXCJ0b3BcIiwgY3VycmVudEV2ZW50LnBhZ2VZICsgMTAgKyBcInB4XCIpXHJcbiAgICAgICAgICAgIC5zdHlsZShcImRpc3BsYXlcIiwgXCJpbmxpbmUtYmxvY2tcIik7XHJcbiAgICAgICAgfSlcclxuICAgICAgICAub24oXCJtb3VzZW91dFwiLCBmdW5jdGlvbiAoZCkge1xyXG4gICAgICAgICAgdG9vbHRpcC5zdHlsZShcImRpc3BsYXlcIiwgXCJub25lXCIpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICBsZXQgY2lyY2xlczIgPSBkMy5zZWxlY3RBbGwoXCIuY2lyY2xlc19saW5lMlwiKTtcclxuICAgICAgY2lyY2xlczJcclxuICAgICAgICAub24oXCJtb3VzZW1vdmVcIiwgZnVuY3Rpb24gKGQpIHtcclxuICAgICAgICAgIHRvb2x0aXBcclxuICAgICAgICAgICAgLnN0eWxlKFwibGVmdFwiLCBjdXJyZW50RXZlbnQucGFnZVggKyAxMCArIFwicHhcIilcclxuICAgICAgICAgICAgLnN0eWxlKFwidG9wXCIsIGN1cnJlbnRFdmVudC5wYWdlWSArIDEwICsgXCJweFwiKVxyXG4gICAgICAgICAgICAuc3R5bGUoXCJkaXNwbGF5XCIsIFwiaW5saW5lLWJsb2NrXCIpO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLm9uKFwibW91c2VvdXRcIiwgZnVuY3Rpb24gKGQpIHtcclxuICAgICAgICAgIHRvb2x0aXAuc3R5bGUoXCJkaXNwbGF5XCIsIFwibm9uZVwiKTtcclxuICAgICAgICB9KTtcclxuICAgICAgZDMuc2VsZWN0KFwiI2xpbmVfdG9vbHRpcF9jaXJjbGVfY2hlY2tib3hfc3BhblwiKS5jbGFzc2VkKFwiaGlkZVwiLCBmYWxzZSk7XHJcbiAgICAgIGQzLnNlbGVjdChcIiNsaW5lX3Rvb2x0aXAyX2NpcmNsZV9jaGVja2JveF9zcGFuXCIpLmNsYXNzZWQoXCJoaWRlXCIsIGZhbHNlKTtcclxuICAgICAgZDMuc2VsZWN0KFwiI2xpbmVfdG9vbHRpcDNfY2lyY2xlX2NoZWNrYm94X3NwYW5cIikuY2xhc3NlZChcImhpZGVcIiwgdHJ1ZSk7XHJcbiAgICB9XHJcbiAgICBpZiAobGluZUFtb3VudElucHV0LnZhbHVlID09IDMpIHtcclxuICAgICAgbGV0IHRvb2x0aXAgPSBkM1xyXG4gICAgICAgIC5zZWxlY3QoXCJib2R5XCIpXHJcbiAgICAgICAgLmFwcGVuZChcImRpdlwiKVxyXG4gICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJsaW5lX3Rvb2x0aXBcIik7XHJcblxyXG4gICAgICBsZXQgY2lyY2xlcyA9IGQzLnNlbGVjdEFsbChcIi5jaXJjbGVzX2xpbmVcIik7XHJcbiAgICAgIGNpcmNsZXNcclxuICAgICAgICAub24oXCJtb3VzZW1vdmVcIiwgZnVuY3Rpb24gKGQpIHtcclxuICAgICAgICAgIHRvb2x0aXBcclxuICAgICAgICAgICAgLnN0eWxlKFwibGVmdFwiLCBjdXJyZW50RXZlbnQucGFnZVggKyAxMCArIFwicHhcIilcclxuICAgICAgICAgICAgLnN0eWxlKFwidG9wXCIsIGN1cnJlbnRFdmVudC5wYWdlWSArIDEwICsgXCJweFwiKVxyXG4gICAgICAgICAgICAuc3R5bGUoXCJkaXNwbGF5XCIsIFwiaW5saW5lLWJsb2NrXCIpO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLm9uKFwibW91c2VvdXRcIiwgZnVuY3Rpb24gKGQpIHtcclxuICAgICAgICAgIHRvb2x0aXAuc3R5bGUoXCJkaXNwbGF5XCIsIFwibm9uZVwiKTtcclxuICAgICAgICB9KTtcclxuICAgICAgbGV0IGNpcmNsZXMyID0gZDMuc2VsZWN0QWxsKFwiLmNpcmNsZXNfbGluZTJcIik7XHJcbiAgICAgIGNpcmNsZXMyXHJcbiAgICAgICAgLm9uKFwibW91c2Vtb3ZlXCIsIGZ1bmN0aW9uIChkKSB7XHJcbiAgICAgICAgICB0b29sdGlwXHJcbiAgICAgICAgICAgIC5zdHlsZShcImxlZnRcIiwgY3VycmVudEV2ZW50LnBhZ2VYICsgMTAgKyBcInB4XCIpXHJcbiAgICAgICAgICAgIC5zdHlsZShcInRvcFwiLCBjdXJyZW50RXZlbnQucGFnZVkgKyAxMCArIFwicHhcIilcclxuICAgICAgICAgICAgLnN0eWxlKFwiZGlzcGxheVwiLCBcImlubGluZS1ibG9ja1wiKTtcclxuICAgICAgICB9KVxyXG4gICAgICAgIC5vbihcIm1vdXNlb3V0XCIsIGZ1bmN0aW9uIChkKSB7XHJcbiAgICAgICAgICB0b29sdGlwLnN0eWxlKFwiZGlzcGxheVwiLCBcIm5vbmVcIik7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIGxldCBjaXJjbGVzMyA9IGQzLnNlbGVjdEFsbChcIi5jaXJjbGVzX2xpbmUzXCIpO1xyXG4gICAgICBjaXJjbGVzM1xyXG4gICAgICAgIC5vbihcIm1vdXNlbW92ZVwiLCBmdW5jdGlvbiAoZCkge1xyXG4gICAgICAgICAgdG9vbHRpcFxyXG4gICAgICAgICAgICAuc3R5bGUoXCJsZWZ0XCIsIGN1cnJlbnRFdmVudC5wYWdlWCArIDEwICsgXCJweFwiKVxyXG4gICAgICAgICAgICAuc3R5bGUoXCJ0b3BcIiwgY3VycmVudEV2ZW50LnBhZ2VZICsgMTAgKyBcInB4XCIpXHJcbiAgICAgICAgICAgIC5zdHlsZShcImRpc3BsYXlcIiwgXCJpbmxpbmUtYmxvY2tcIik7XHJcbiAgICAgICAgfSlcclxuICAgICAgICAub24oXCJtb3VzZW91dFwiLCBmdW5jdGlvbiAoZCkge1xyXG4gICAgICAgICAgdG9vbHRpcC5zdHlsZShcImRpc3BsYXlcIiwgXCJub25lXCIpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICBkMy5zZWxlY3QoXCIjbGluZV90b29sdGlwX2NpcmNsZV9jaGVja2JveF9zcGFuXCIpLmNsYXNzZWQoXCJoaWRlXCIsIGZhbHNlKTtcclxuICAgICAgZDMuc2VsZWN0KFwiI2xpbmVfdG9vbHRpcDJfY2lyY2xlX2NoZWNrYm94X3NwYW5cIikuY2xhc3NlZChcImhpZGVcIiwgZmFsc2UpO1xyXG4gICAgICBkMy5zZWxlY3QoXCIjbGluZV90b29sdGlwM19jaXJjbGVfY2hlY2tib3hfc3BhblwiKS5jbGFzc2VkKFwiaGlkZVwiLCBmYWxzZSk7XHJcbiAgICB9XHJcblxyXG4gICAgZDMuc2VsZWN0KFwiI2xpbmVfdG9vbHRpcF9jaGVja2JveF9zcGFuXCIpLmNsYXNzZWQoXCJoaWRlXCIsIGZhbHNlKTtcclxuXHJcbiAgICBsaW5lVmFsdWVzLnRvb2x0aXBDaGVja2JveCA9IFwiY2hlY2tlZFwiO1xyXG4gIH1cclxuICBpZiAodGhpcy5jaGVja2VkID09PSBmYWxzZSkge1xyXG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcImJvZHkgPiBkaXYubGluZV90b29sdGlwXCIpLnJlbW92ZSgpO1xyXG4gICAgZDMuc2VsZWN0KFwiI2xpbmVfdG9vbHRpcF9jaGVja2JveF9zcGFuXCIpLmNsYXNzZWQoXCJoaWRlXCIsIHRydWUpO1xyXG4gICAgZDMuc2VsZWN0KFwiI2xpbmVfdG9vbHRpcF9jaXJjbGVfY2hlY2tib3hfc3BhblwiKS5jbGFzc2VkKFwiaGlkZVwiLCB0cnVlKTtcclxuICAgIGQzLnNlbGVjdChcIiNsaW5lX3Rvb2x0aXAyX2NpcmNsZV9jaGVja2JveF9zcGFuXCIpLmNsYXNzZWQoXCJoaWRlXCIsIHRydWUpO1xyXG4gICAgZDMuc2VsZWN0KFwiI2xpbmVfdG9vbHRpcDNfY2lyY2xlX2NoZWNrYm94X3NwYW5cIikuY2xhc3NlZChcImhpZGVcIiwgdHJ1ZSk7XHJcbiAgICBsaW5lVmFsdWVzLnRvb2x0aXBDaGVja2JveCA9IFwidW5jaGVja2VkXCI7XHJcbiAgfVxyXG59KTtcclxuXHJcbmxpbmVBbW91bnRJbnB1dC5hZGRFdmVudExpc3RlbmVyKFwiY2hhbmdlXCIsIGZ1bmN0aW9uICgpIHtcclxuICBpZiAobGluZUFtb3VudElucHV0LnZhbHVlID09IDEpIHtcclxuICAgIGlmIChsaW5lRGF0YXBvaW50Q2hlY2tib3guY2hlY2tlZCkge1xyXG4gICAgICBkMy5zZWxlY3RBbGwoXCIuY2lyY2xlc19saW5lXCIpLmF0dHIoXCJkaXNwbGF5XCIsIFwiXCIpO1xyXG4gICAgICBkMy5zZWxlY3RBbGwoXCIuY2lyY2xlc19saW5lMlwiKS5hdHRyKFwiZGlzcGxheVwiLCBcIm5vbmVcIik7XHJcbiAgICAgIGQzLnNlbGVjdEFsbChcIi5jaXJjbGVzX2xpbmUzXCIpLmF0dHIoXCJkaXNwbGF5XCIsIFwibm9uZVwiKTtcclxuXHJcbiAgICAgIGQzLnNlbGVjdChcIiNsaW5lX2RhdGFwb2ludF9jaGVja2JveF9zcGFuXCIpLmNsYXNzZWQoXCJoaWRlXCIsIGZhbHNlKTtcclxuICAgICAgZDMuc2VsZWN0KFwiI2xpbmVfZGF0YXBvaW50Ml9jaGVja2JveF9zcGFuXCIpLmNsYXNzZWQoXCJoaWRlXCIsIHRydWUpO1xyXG4gICAgICBkMy5zZWxlY3QoXCIjbGluZV9kYXRhcG9pbnQzX2NoZWNrYm94X3NwYW5cIikuY2xhc3NlZChcImhpZGVcIiwgdHJ1ZSk7XHJcbiAgICB9XHJcbiAgICBpZiAobGluZVRvb2x0aXBDaGVja2JveC5jaGVja2VkKSB7XHJcbiAgICAgIGxldCB0b29sdGlwID0gZDNcclxuICAgICAgICAuc2VsZWN0KFwiYm9keVwiKVxyXG4gICAgICAgIC5hcHBlbmQoXCJkaXZcIilcclxuICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwibGluZV90b29sdGlwXCIpO1xyXG5cclxuICAgICAgbGV0IGNpcmNsZXMgPSBkMy5zZWxlY3RBbGwoXCIuY2lyY2xlc19saW5lXCIpO1xyXG4gICAgICBjaXJjbGVzXHJcbiAgICAgICAgLm9uKFwibW91c2Vtb3ZlXCIsIGZ1bmN0aW9uIChkKSB7XHJcbiAgICAgICAgICB0b29sdGlwXHJcbiAgICAgICAgICAgIC5zdHlsZShcImxlZnRcIiwgY3VycmVudEV2ZW50LnBhZ2VYICsgMTAgKyBcInB4XCIpXHJcbiAgICAgICAgICAgIC5zdHlsZShcInRvcFwiLCBjdXJyZW50RXZlbnQucGFnZVkgKyAxMCArIFwicHhcIilcclxuICAgICAgICAgICAgLnN0eWxlKFwiZGlzcGxheVwiLCBcImlubGluZS1ibG9ja1wiKTtcclxuICAgICAgICB9KVxyXG4gICAgICAgIC5vbihcIm1vdXNlb3V0XCIsIGZ1bmN0aW9uIChkKSB7XHJcbiAgICAgICAgICB0b29sdGlwLnN0eWxlKFwiZGlzcGxheVwiLCBcIm5vbmVcIik7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIGQzLnNlbGVjdChcIiNsaW5lX3Rvb2x0aXBfY2lyY2xlX2NoZWNrYm94X3NwYW5cIikuY2xhc3NlZChcImhpZGVcIiwgZmFsc2UpO1xyXG4gICAgICBkMy5zZWxlY3QoXCIjbGluZV90b29sdGlwMl9jaXJjbGVfY2hlY2tib3hfc3BhblwiKS5jbGFzc2VkKFwiaGlkZVwiLCB0cnVlKTtcclxuICAgICAgZDMuc2VsZWN0KFwiI2xpbmVfdG9vbHRpcDNfY2lyY2xlX2NoZWNrYm94X3NwYW5cIikuY2xhc3NlZChcImhpZGVcIiwgdHJ1ZSk7XHJcbiAgICB9XHJcbiAgICBkMy5zZWxlY3QoXCIjbGluZTFcIikuYXR0cihcImRpc3BsYXlcIiwgXCJcIik7XHJcbiAgICBkMy5zZWxlY3QoXCIjbGluZTJcIikuYXR0cihcImRpc3BsYXlcIiwgXCJub25lXCIpO1xyXG4gICAgZDMuc2VsZWN0KFwiI2xpbmUzXCIpLmF0dHIoXCJkaXNwbGF5XCIsIFwibm9uZVwiKTtcclxuXHJcbiAgICBkMy5zZWxlY3QoXCIjbGluZV8xX3NlbGVjdF9zcGFuXCIpLmNsYXNzZWQoXCJoaWRlXCIsIGZhbHNlKTtcclxuICAgIGQzLnNlbGVjdChcIiNsaW5lXzJfc2VsZWN0X3NwYW5cIikuY2xhc3NlZChcImhpZGVcIiwgdHJ1ZSk7XHJcbiAgICBkMy5zZWxlY3QoXCIjbGluZV8zX3NlbGVjdF9zcGFuXCIpLmNsYXNzZWQoXCJoaWRlXCIsIHRydWUpO1xyXG5cclxuICAgIGQzLnNlbGVjdChcIiNsaW5lX29ial9udW0yX3NwYW5cIikuY2xhc3NlZChcImhpZGVcIiwgdHJ1ZSk7XHJcbiAgICBkMy5zZWxlY3QoXCIjbGluZV9vYmpfbnVtM19zcGFuXCIpLmNsYXNzZWQoXCJoaWRlXCIsIHRydWUpO1xyXG5cclxuICAgIGxpbmVWYWx1ZXMuYW1vdW50SW5wdXQgPSBsaW5lQW1vdW50SW5wdXQudmFsdWU7XHJcbiAgfVxyXG4gIGlmIChsaW5lQW1vdW50SW5wdXQudmFsdWUgPT0gMikge1xyXG4gICAgaWYgKGxpbmVEYXRhcG9pbnRDaGVja2JveC5jaGVja2VkKSB7XHJcbiAgICAgIGQzLnNlbGVjdEFsbChcIi5jaXJjbGVzX2xpbmVcIikuYXR0cihcImRpc3BsYXlcIiwgXCJcIik7XHJcbiAgICAgIGQzLnNlbGVjdEFsbChcIi5jaXJjbGVzX2xpbmUyXCIpLmF0dHIoXCJkaXNwbGF5XCIsIFwiXCIpO1xyXG4gICAgICBkMy5zZWxlY3RBbGwoXCIuY2lyY2xlc19saW5lM1wiKS5hdHRyKFwiZGlzcGxheVwiLCBcIm5vbmVcIik7XHJcblxyXG4gICAgICBkMy5zZWxlY3QoXCIjbGluZV9kYXRhcG9pbnRfY2hlY2tib3hfc3BhblwiKS5jbGFzc2VkKFwiaGlkZVwiLCBmYWxzZSk7XHJcbiAgICAgIGQzLnNlbGVjdChcIiNsaW5lX2RhdGFwb2ludDJfY2hlY2tib3hfc3BhblwiKS5jbGFzc2VkKFwiaGlkZVwiLCBmYWxzZSk7XHJcbiAgICAgIGQzLnNlbGVjdChcIiNsaW5lX2RhdGFwb2ludDNfY2hlY2tib3hfc3BhblwiKS5jbGFzc2VkKFwiaGlkZVwiLCB0cnVlKTtcclxuICAgIH1cclxuICAgIGlmIChsaW5lVG9vbHRpcENoZWNrYm94LmNoZWNrZWQpIHtcclxuICAgICAgbGV0IHRvb2x0aXAgPSBkM1xyXG4gICAgICAgIC5zZWxlY3QoXCJib2R5XCIpXHJcbiAgICAgICAgLmFwcGVuZChcImRpdlwiKVxyXG4gICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJsaW5lX3Rvb2x0aXBcIik7XHJcblxyXG4gICAgICBsZXQgY2lyY2xlcyA9IGQzLnNlbGVjdEFsbChcIi5jaXJjbGVzX2xpbmVcIik7XHJcbiAgICAgIGNpcmNsZXNcclxuICAgICAgICAub24oXCJtb3VzZW1vdmVcIiwgZnVuY3Rpb24gKGQpIHtcclxuICAgICAgICAgIHRvb2x0aXBcclxuICAgICAgICAgICAgLnN0eWxlKFwibGVmdFwiLCBjdXJyZW50RXZlbnQucGFnZVggKyAxMCArIFwicHhcIilcclxuICAgICAgICAgICAgLnN0eWxlKFwidG9wXCIsIGN1cnJlbnRFdmVudC5wYWdlWSArIDEwICsgXCJweFwiKVxyXG4gICAgICAgICAgICAuc3R5bGUoXCJkaXNwbGF5XCIsIFwiaW5saW5lLWJsb2NrXCIpO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLm9uKFwibW91c2VvdXRcIiwgZnVuY3Rpb24gKGQpIHtcclxuICAgICAgICAgIHRvb2x0aXAuc3R5bGUoXCJkaXNwbGF5XCIsIFwibm9uZVwiKTtcclxuICAgICAgICB9KTtcclxuICAgICAgbGV0IGNpcmNsZXMyID0gZDMuc2VsZWN0QWxsKFwiLmNpcmNsZXNfbGluZTJcIik7XHJcbiAgICAgIGNpcmNsZXMyXHJcbiAgICAgICAgLm9uKFwibW91c2Vtb3ZlXCIsIGZ1bmN0aW9uIChkKSB7XHJcbiAgICAgICAgICB0b29sdGlwXHJcbiAgICAgICAgICAgIC5zdHlsZShcImxlZnRcIiwgY3VycmVudEV2ZW50LnBhZ2VYICsgMTAgKyBcInB4XCIpXHJcbiAgICAgICAgICAgIC5zdHlsZShcInRvcFwiLCBjdXJyZW50RXZlbnQucGFnZVkgKyAxMCArIFwicHhcIilcclxuICAgICAgICAgICAgLnN0eWxlKFwiZGlzcGxheVwiLCBcImlubGluZS1ibG9ja1wiKTtcclxuICAgICAgICB9KVxyXG4gICAgICAgIC5vbihcIm1vdXNlb3V0XCIsIGZ1bmN0aW9uIChkKSB7XHJcbiAgICAgICAgICB0b29sdGlwLnN0eWxlKFwiZGlzcGxheVwiLCBcIm5vbmVcIik7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIGQzLnNlbGVjdChcIiNsaW5lX3Rvb2x0aXBfY2lyY2xlX2NoZWNrYm94X3NwYW5cIikuY2xhc3NlZChcImhpZGVcIiwgZmFsc2UpO1xyXG4gICAgICBkMy5zZWxlY3QoXCIjbGluZV90b29sdGlwMl9jaXJjbGVfY2hlY2tib3hfc3BhblwiKS5jbGFzc2VkKFwiaGlkZVwiLCBmYWxzZSk7XHJcbiAgICAgIGQzLnNlbGVjdChcIiNsaW5lX3Rvb2x0aXAzX2NpcmNsZV9jaGVja2JveF9zcGFuXCIpLmNsYXNzZWQoXCJoaWRlXCIsIHRydWUpO1xyXG4gICAgfVxyXG4gICAgZDMuc2VsZWN0KFwiI2xpbmUxXCIpLmF0dHIoXCJkaXNwbGF5XCIsIFwiXCIpO1xyXG4gICAgZDMuc2VsZWN0KFwiI2xpbmUyXCIpLmF0dHIoXCJkaXNwbGF5XCIsIFwiXCIpO1xyXG4gICAgZDMuc2VsZWN0KFwiI2xpbmUzXCIpLmF0dHIoXCJkaXNwbGF5XCIsIFwibm9uZVwiKTtcclxuXHJcbiAgICBkMy5zZWxlY3QoXCIjbGluZV8xX3NlbGVjdF9zcGFuXCIpLmNsYXNzZWQoXCJoaWRlXCIsIGZhbHNlKTtcclxuICAgIGQzLnNlbGVjdChcIiNsaW5lXzJfc2VsZWN0X3NwYW5cIikuY2xhc3NlZChcImhpZGVcIiwgZmFsc2UpO1xyXG4gICAgZDMuc2VsZWN0KFwiI2xpbmVfM19zZWxlY3Rfc3BhblwiKS5jbGFzc2VkKFwiaGlkZVwiLCB0cnVlKTtcclxuXHJcbiAgICBkMy5zZWxlY3QoXCIjbGluZV9vYmpfbnVtMl9zcGFuXCIpLmNsYXNzZWQoXCJoaWRlXCIsIGZhbHNlKTtcclxuICAgIGQzLnNlbGVjdChcIiNsaW5lX29ial9udW0zX3NwYW5cIikuY2xhc3NlZChcImhpZGVcIiwgdHJ1ZSk7XHJcblxyXG4gICAgbGluZVZhbHVlcy5hbW91bnRJbnB1dCA9IGxpbmVBbW91bnRJbnB1dC52YWx1ZTtcclxuICB9XHJcbiAgaWYgKGxpbmVBbW91bnRJbnB1dC52YWx1ZSA9PSAzKSB7XHJcbiAgICBpZiAobGluZURhdGFwb2ludENoZWNrYm94LmNoZWNrZWQpIHtcclxuICAgICAgZDMuc2VsZWN0QWxsKFwiLmNpcmNsZXNfbGluZVwiKS5hdHRyKFwiZGlzcGxheVwiLCBcIlwiKTtcclxuICAgICAgZDMuc2VsZWN0QWxsKFwiLmNpcmNsZXNfbGluZTJcIikuYXR0cihcImRpc3BsYXlcIiwgXCJcIik7XHJcbiAgICAgIGQzLnNlbGVjdEFsbChcIi5jaXJjbGVzX2xpbmUzXCIpLmF0dHIoXCJkaXNwbGF5XCIsIFwiXCIpO1xyXG5cclxuICAgICAgZDMuc2VsZWN0KFwiI2xpbmVfZGF0YXBvaW50X2NoZWNrYm94X3NwYW5cIikuY2xhc3NlZChcImhpZGVcIiwgZmFsc2UpO1xyXG4gICAgICBkMy5zZWxlY3QoXCIjbGluZV9kYXRhcG9pbnQyX2NoZWNrYm94X3NwYW5cIikuY2xhc3NlZChcImhpZGVcIiwgZmFsc2UpO1xyXG4gICAgICBkMy5zZWxlY3QoXCIjbGluZV9kYXRhcG9pbnQzX2NoZWNrYm94X3NwYW5cIikuY2xhc3NlZChcImhpZGVcIiwgZmFsc2UpO1xyXG4gICAgfVxyXG4gICAgaWYgKGxpbmVUb29sdGlwQ2hlY2tib3guY2hlY2tlZCkge1xyXG4gICAgICBsZXQgdG9vbHRpcCA9IGQzXHJcbiAgICAgICAgLnNlbGVjdChcImJvZHlcIilcclxuICAgICAgICAuYXBwZW5kKFwiZGl2XCIpXHJcbiAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcImxpbmVfdG9vbHRpcFwiKTtcclxuXHJcbiAgICAgIGxldCBjaXJjbGVzID0gZDMuc2VsZWN0QWxsKFwiLmNpcmNsZXNfbGluZVwiKTtcclxuICAgICAgY2lyY2xlc1xyXG4gICAgICAgIC5vbihcIm1vdXNlbW92ZVwiLCBmdW5jdGlvbiAoZCkge1xyXG4gICAgICAgICAgdG9vbHRpcFxyXG4gICAgICAgICAgICAuc3R5bGUoXCJsZWZ0XCIsIGN1cnJlbnRFdmVudC5wYWdlWCArIDEwICsgXCJweFwiKVxyXG4gICAgICAgICAgICAuc3R5bGUoXCJ0b3BcIiwgY3VycmVudEV2ZW50LnBhZ2VZICsgMTAgKyBcInB4XCIpXHJcbiAgICAgICAgICAgIC5zdHlsZShcImRpc3BsYXlcIiwgXCJpbmxpbmUtYmxvY2tcIik7XHJcbiAgICAgICAgfSlcclxuICAgICAgICAub24oXCJtb3VzZW91dFwiLCBmdW5jdGlvbiAoZCkge1xyXG4gICAgICAgICAgdG9vbHRpcC5zdHlsZShcImRpc3BsYXlcIiwgXCJub25lXCIpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICBsZXQgY2lyY2xlczIgPSBkMy5zZWxlY3RBbGwoXCIuY2lyY2xlc19saW5lMlwiKTtcclxuICAgICAgY2lyY2xlczJcclxuICAgICAgICAub24oXCJtb3VzZW1vdmVcIiwgZnVuY3Rpb24gKGQpIHtcclxuICAgICAgICAgIHRvb2x0aXBcclxuICAgICAgICAgICAgLnN0eWxlKFwibGVmdFwiLCBjdXJyZW50RXZlbnQucGFnZVggKyAxMCArIFwicHhcIilcclxuICAgICAgICAgICAgLnN0eWxlKFwidG9wXCIsIGN1cnJlbnRFdmVudC5wYWdlWSArIDEwICsgXCJweFwiKVxyXG4gICAgICAgICAgICAuc3R5bGUoXCJkaXNwbGF5XCIsIFwiaW5saW5lLWJsb2NrXCIpO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLm9uKFwibW91c2VvdXRcIiwgZnVuY3Rpb24gKGQpIHtcclxuICAgICAgICAgIHRvb2x0aXAuc3R5bGUoXCJkaXNwbGF5XCIsIFwibm9uZVwiKTtcclxuICAgICAgICB9KTtcclxuICAgICAgbGV0IGNpcmNsZXMzID0gZDMuc2VsZWN0QWxsKFwiLmNpcmNsZXNfbGluZTNcIik7XHJcbiAgICAgIGNpcmNsZXMzXHJcbiAgICAgICAgLm9uKFwibW91c2Vtb3ZlXCIsIGZ1bmN0aW9uIChkKSB7XHJcbiAgICAgICAgICB0b29sdGlwXHJcbiAgICAgICAgICAgIC5zdHlsZShcImxlZnRcIiwgY3VycmVudEV2ZW50LnBhZ2VYICsgMTAgKyBcInB4XCIpXHJcbiAgICAgICAgICAgIC5zdHlsZShcInRvcFwiLCBjdXJyZW50RXZlbnQucGFnZVkgKyAxMCArIFwicHhcIilcclxuICAgICAgICAgICAgLnN0eWxlKFwiZGlzcGxheVwiLCBcImlubGluZS1ibG9ja1wiKTtcclxuICAgICAgICB9KVxyXG4gICAgICAgIC5vbihcIm1vdXNlb3V0XCIsIGZ1bmN0aW9uIChkKSB7XHJcbiAgICAgICAgICB0b29sdGlwLnN0eWxlKFwiZGlzcGxheVwiLCBcIm5vbmVcIik7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIGQzLnNlbGVjdChcIiNsaW5lX3Rvb2x0aXBfY2lyY2xlX2NoZWNrYm94X3NwYW5cIikuY2xhc3NlZChcImhpZGVcIiwgZmFsc2UpO1xyXG4gICAgICBkMy5zZWxlY3QoXCIjbGluZV90b29sdGlwMl9jaXJjbGVfY2hlY2tib3hfc3BhblwiKS5jbGFzc2VkKFwiaGlkZVwiLCBmYWxzZSk7XHJcbiAgICAgIGQzLnNlbGVjdChcIiNsaW5lX3Rvb2x0aXAzX2NpcmNsZV9jaGVja2JveF9zcGFuXCIpLmNsYXNzZWQoXCJoaWRlXCIsIGZhbHNlKTtcclxuICAgIH1cclxuICAgIGQzLnNlbGVjdChcIiNsaW5lMVwiKS5hdHRyKFwiZGlzcGxheVwiLCBcIlwiKTtcclxuICAgIGQzLnNlbGVjdChcIiNsaW5lMlwiKS5hdHRyKFwiZGlzcGxheVwiLCBcIlwiKTtcclxuICAgIGQzLnNlbGVjdChcIiNsaW5lM1wiKS5hdHRyKFwiZGlzcGxheVwiLCBcIlwiKTtcclxuXHJcbiAgICBkMy5zZWxlY3QoXCIjbGluZV8xX3NlbGVjdF9zcGFuXCIpLmNsYXNzZWQoXCJoaWRlXCIsIGZhbHNlKTtcclxuICAgIGQzLnNlbGVjdChcIiNsaW5lXzJfc2VsZWN0X3NwYW5cIikuY2xhc3NlZChcImhpZGVcIiwgZmFsc2UpO1xyXG4gICAgZDMuc2VsZWN0KFwiI2xpbmVfM19zZWxlY3Rfc3BhblwiKS5jbGFzc2VkKFwiaGlkZVwiLCBmYWxzZSk7XHJcblxyXG4gICAgZDMuc2VsZWN0KFwiI2xpbmVfb2JqX251bTJfc3BhblwiKS5jbGFzc2VkKFwiaGlkZVwiLCBmYWxzZSk7XHJcbiAgICBkMy5zZWxlY3QoXCIjbGluZV9vYmpfbnVtM19zcGFuXCIpLmNsYXNzZWQoXCJoaWRlXCIsIGZhbHNlKTtcclxuXHJcbiAgICBsaW5lVmFsdWVzLmFtb3VudElucHV0ID0gbGluZUFtb3VudElucHV0LnZhbHVlO1xyXG4gIH1cclxufSk7XHJcblxyXG5saW5lRGF0YXBvaW50Q2hlY2tib3guYWRkRXZlbnRMaXN0ZW5lcihcImNoYW5nZVwiLCBmdW5jdGlvbiAoKSB7XHJcbiAgaWYgKHRoaXMuY2hlY2tlZCA9PSB0cnVlKSB7XHJcbiAgICBpZiAobGluZUFtb3VudElucHV0LnZhbHVlID09IDEpIHtcclxuICAgICAgZDMuc2VsZWN0QWxsKFwiLmNpcmNsZXNfbGluZVwiKS5hdHRyKFwiZGlzcGxheVwiLCBcIlwiKTtcclxuICAgICAgZDMuc2VsZWN0QWxsKFwiLmNpcmNsZXNfbGluZTJcIikuYXR0cihcImRpc3BsYXlcIiwgXCJub25lXCIpO1xyXG4gICAgICBkMy5zZWxlY3RBbGwoXCIuY2lyY2xlc19saW5lM1wiKS5hdHRyKFwiZGlzcGxheVwiLCBcIm5vbmVcIik7XHJcbiAgICAgIGQzLnNlbGVjdChcIiNsaW5lX2RhdGFwb2ludF9jaGVja2JveF9zcGFuXCIpLmNsYXNzZWQoXCJoaWRlXCIsIGZhbHNlKTtcclxuICAgICAgZDMuc2VsZWN0KFwiI2xpbmVfZGF0YXBvaW50Ml9jaGVja2JveF9zcGFuXCIpLmNsYXNzZWQoXCJoaWRlXCIsIHRydWUpO1xyXG4gICAgICBkMy5zZWxlY3QoXCIjbGluZV9kYXRhcG9pbnQzX2NoZWNrYm94X3NwYW5cIikuY2xhc3NlZChcImhpZGVcIiwgdHJ1ZSk7XHJcbiAgICAgIGQzLnNlbGVjdChcIiNsaW5lMVwiKS5hdHRyKFwiZGlzcGxheVwiLCBcIlwiKTtcclxuICAgICAgZDMuc2VsZWN0KFwiI2xpbmUyXCIpLmF0dHIoXCJkaXNwbGF5XCIsIFwibm9uZVwiKTtcclxuICAgICAgZDMuc2VsZWN0KFwiI2xpbmUzXCIpLmF0dHIoXCJkaXNwbGF5XCIsIFwibm9uZVwiKTtcclxuICAgICAgZDMuc2VsZWN0KFwiI2xpbmVfMV9zZWxlY3Rfc3BhblwiKS5jbGFzc2VkKFwiaGlkZVwiLCBmYWxzZSk7XHJcbiAgICAgIGQzLnNlbGVjdChcIiNsaW5lXzJfc2VsZWN0X3NwYW5cIikuY2xhc3NlZChcImhpZGVcIiwgdHJ1ZSk7XHJcbiAgICAgIGQzLnNlbGVjdChcIiNsaW5lXzNfc2VsZWN0X3NwYW5cIikuY2xhc3NlZChcImhpZGVcIiwgdHJ1ZSk7XHJcbiAgICB9XHJcbiAgICBpZiAobGluZUFtb3VudElucHV0LnZhbHVlID09IDIpIHtcclxuICAgICAgZDMuc2VsZWN0QWxsKFwiLmNpcmNsZXNfbGluZVwiKS5hdHRyKFwiZGlzcGxheVwiLCBcIlwiKTtcclxuICAgICAgZDMuc2VsZWN0QWxsKFwiLmNpcmNsZXNfbGluZTJcIikuYXR0cihcImRpc3BsYXlcIiwgXCJcIik7XHJcbiAgICAgIGQzLnNlbGVjdEFsbChcIi5jaXJjbGVzX2xpbmUzXCIpLmF0dHIoXCJkaXNwbGF5XCIsIFwibm9uZVwiKTtcclxuICAgICAgZDMuc2VsZWN0KFwiI2xpbmVfZGF0YXBvaW50X2NoZWNrYm94X3NwYW5cIikuY2xhc3NlZChcImhpZGVcIiwgZmFsc2UpO1xyXG4gICAgICBkMy5zZWxlY3QoXCIjbGluZV9kYXRhcG9pbnQyX2NoZWNrYm94X3NwYW5cIikuY2xhc3NlZChcImhpZGVcIiwgZmFsc2UpO1xyXG4gICAgICBkMy5zZWxlY3QoXCIjbGluZV9kYXRhcG9pbnQzX2NoZWNrYm94X3NwYW5cIikuY2xhc3NlZChcImhpZGVcIiwgdHJ1ZSk7XHJcbiAgICAgIGQzLnNlbGVjdChcIiNsaW5lMVwiKS5hdHRyKFwiZGlzcGxheVwiLCBcIlwiKTtcclxuICAgICAgZDMuc2VsZWN0KFwiI2xpbmUyXCIpLmF0dHIoXCJkaXNwbGF5XCIsIFwiXCIpO1xyXG4gICAgICBkMy5zZWxlY3QoXCIjbGluZTNcIikuYXR0cihcImRpc3BsYXlcIiwgXCJub25lXCIpO1xyXG4gICAgICBkMy5zZWxlY3QoXCIjbGluZV8xX3NlbGVjdF9zcGFuXCIpLmNsYXNzZWQoXCJoaWRlXCIsIGZhbHNlKTtcclxuICAgICAgZDMuc2VsZWN0KFwiI2xpbmVfMl9zZWxlY3Rfc3BhblwiKS5jbGFzc2VkKFwiaGlkZVwiLCBmYWxzZSk7XHJcbiAgICAgIGQzLnNlbGVjdChcIiNsaW5lXzNfc2VsZWN0X3NwYW5cIikuY2xhc3NlZChcImhpZGVcIiwgdHJ1ZSk7XHJcbiAgICB9XHJcbiAgICBpZiAobGluZUFtb3VudElucHV0LnZhbHVlID09IDMpIHtcclxuICAgICAgZDMuc2VsZWN0QWxsKFwiLmNpcmNsZXNfbGluZVwiKS5hdHRyKFwiZGlzcGxheVwiLCBcIlwiKTtcclxuICAgICAgZDMuc2VsZWN0QWxsKFwiLmNpcmNsZXNfbGluZTJcIikuYXR0cihcImRpc3BsYXlcIiwgXCJcIik7XHJcbiAgICAgIGQzLnNlbGVjdEFsbChcIi5jaXJjbGVzX2xpbmUzXCIpLmF0dHIoXCJkaXNwbGF5XCIsIFwiXCIpO1xyXG4gICAgICBkMy5zZWxlY3QoXCIjbGluZV9kYXRhcG9pbnRfY2hlY2tib3hfc3BhblwiKS5jbGFzc2VkKFwiaGlkZVwiLCBmYWxzZSk7XHJcbiAgICAgIGQzLnNlbGVjdChcIiNsaW5lX2RhdGFwb2ludDJfY2hlY2tib3hfc3BhblwiKS5jbGFzc2VkKFwiaGlkZVwiLCBmYWxzZSk7XHJcbiAgICAgIGQzLnNlbGVjdChcIiNsaW5lX2RhdGFwb2ludDNfY2hlY2tib3hfc3BhblwiKS5jbGFzc2VkKFwiaGlkZVwiLCBmYWxzZSk7XHJcbiAgICAgIGQzLnNlbGVjdChcIiNsaW5lMVwiKS5hdHRyKFwiZGlzcGxheVwiLCBcIlwiKTtcclxuICAgICAgZDMuc2VsZWN0KFwiI2xpbmUyXCIpLmF0dHIoXCJkaXNwbGF5XCIsIFwiXCIpO1xyXG4gICAgICBkMy5zZWxlY3QoXCIjbGluZTNcIikuYXR0cihcImRpc3BsYXlcIiwgXCJcIik7XHJcbiAgICAgIGQzLnNlbGVjdChcIiNsaW5lXzFfc2VsZWN0X3NwYW5cIikuY2xhc3NlZChcImhpZGVcIiwgZmFsc2UpO1xyXG4gICAgICBkMy5zZWxlY3QoXCIjbGluZV8yX3NlbGVjdF9zcGFuXCIpLmNsYXNzZWQoXCJoaWRlXCIsIGZhbHNlKTtcclxuICAgICAgZDMuc2VsZWN0KFwiI2xpbmVfM19zZWxlY3Rfc3BhblwiKS5jbGFzc2VkKFwiaGlkZVwiLCBmYWxzZSk7XHJcbiAgICB9XHJcbiAgICBsaW5lVmFsdWVzLmRhdGFwb2ludENoZWNrYm94ID0gXCJjaGVja2VkXCI7XHJcbiAgfVxyXG4gIGlmICh0aGlzLmNoZWNrZWQgPT0gZmFsc2UpIHtcclxuICAgIGQzLnNlbGVjdEFsbChcIi5jaXJjbGVzX2xpbmVcIikuYXR0cihcImRpc3BsYXlcIiwgXCJub25lXCIpO1xyXG4gICAgZDMuc2VsZWN0QWxsKFwiLmNpcmNsZXNfbGluZTJcIikuYXR0cihcImRpc3BsYXlcIiwgXCJub25lXCIpO1xyXG4gICAgZDMuc2VsZWN0QWxsKFwiLmNpcmNsZXNfbGluZTNcIikuYXR0cihcImRpc3BsYXlcIiwgXCJub25lXCIpO1xyXG4gICAgZDMuc2VsZWN0KFwiI2xpbmVfZGF0YXBvaW50X2NoZWNrYm94X3NwYW5cIikuY2xhc3NlZChcImhpZGVcIiwgdHJ1ZSk7XHJcbiAgICBkMy5zZWxlY3QoXCIjbGluZV9kYXRhcG9pbnQyX2NoZWNrYm94X3NwYW5cIikuY2xhc3NlZChcImhpZGVcIiwgdHJ1ZSk7XHJcbiAgICBkMy5zZWxlY3QoXCIjbGluZV9kYXRhcG9pbnQzX2NoZWNrYm94X3NwYW5cIikuY2xhc3NlZChcImhpZGVcIiwgdHJ1ZSk7XHJcbiAgICBsaW5lVmFsdWVzLmRhdGFwb2ludENoZWNrYm94ID0gXCJ1bmNoZWNrZWRcIjtcclxuICAgIGQzLnNlbGVjdChcIiNsaW5lX2RhdGFwb2ludF9jaGVja2JveF9zcGFuXCIpLmNsYXNzZWQoXCJoaWRlXCIsIHRydWUpO1xyXG4gIH1cclxufSk7XHJcbiIsImltcG9ydCB7IGxpbmVDaGFydCB9IGZyb20gXCIuL2xpbmVfY2hhcnRfZ3JhcGguanNcIjtcclxuaW1wb3J0IHsgbGluZVZhbHVlcyB9IGZyb20gXCIuL2xpbmVfY2hhcnRfdmFsdWVzLmpzXCI7XHJcbmltcG9ydCBcIi4vbGluZV9jaGFydF9saXN0ZW5lcnMuanNcIjtcclxuaW1wb3J0IFwiLi9saW5lX2NoYXJ0X2NvbG9yX3BpY2tlci5qc1wiO1xyXG5pbXBvcnQgeyBzZWxlY3QsIHNlbGVjdEFsbCB9IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcclxuXHJcbmNvbnN0IGQzID0geyBzZWxlY3QsIHNlbGVjdEFsbCB9O1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGluaXRMaW5lQ2hhcnQoKSB7XHJcbiAgbGluZUNoYXJ0KFxyXG4gICAgbGluZVZhbHVlcy50aXRsZUlucHV0LFxyXG4gICAgbGluZVZhbHVlcy54QXhpc1RpdGxlSW5wdXQsXHJcbiAgICBsaW5lVmFsdWVzLnlBeGlzVGl0bGVJbnB1dCxcclxuICAgIGxpbmVWYWx1ZXMudGl0bGVTbGlkZXIsXHJcbiAgICBsaW5lVmFsdWVzLnhBeGlzVGl0bGVTbGlkZXIsXHJcbiAgICBsaW5lVmFsdWVzLnlBeGlzVGl0bGVTbGlkZXIsXHJcbiAgICBsaW5lVmFsdWVzLndpZHRoU2xpZGVyLFxyXG4gICAgbGluZVZhbHVlcy5wb2ludFJhZGl1c1NsaWRlcixcclxuICAgIGxpbmVWYWx1ZXMudG9vbHRpcENoZWNrYm94LFxyXG4gICAgbGluZVZhbHVlcy5kYXRhcG9pbnRDaGVja2JveCxcclxuICAgIGxpbmVWYWx1ZXMueEF4aXNHcmlkQ2hlY2tib3gsXHJcbiAgICBsaW5lVmFsdWVzLnlBeGlzR3JpZENoZWNrYm94LFxyXG4gICAgbGluZVZhbHVlcy54QXhpc0xpbmVDaGVja2JveCxcclxuICAgIGxpbmVWYWx1ZXMueUF4aXNMaW5lQ2hlY2tib3gsXHJcbiAgICBsaW5lVmFsdWVzLmhvdmVyQ2hlY2tib3gsXHJcbiAgICBsaW5lVmFsdWVzLmJhY2tncm91bmRDUCxcclxuICAgIGxpbmVWYWx1ZXMubGluZUNQMSxcclxuICAgIGxpbmVWYWx1ZXMubGluZUNQMixcclxuICAgIGxpbmVWYWx1ZXMubGluZUNQMyxcclxuICAgIGxpbmVWYWx1ZXMudGlja0NQLFxyXG4gICAgbGluZVZhbHVlcy50aXRsZUNQLFxyXG4gICAgbGluZVZhbHVlcy54QXhpc1RpdGxlQ1AsXHJcbiAgICBsaW5lVmFsdWVzLnlBeGlzVGl0bGVDUCxcclxuICAgIGxpbmVWYWx1ZXMuZ3JpZENQLFxyXG4gICAgbGluZVZhbHVlcy54QXhpc0xpbmVDUCxcclxuICAgIGxpbmVWYWx1ZXMueUF4aXNMaW5lQ1AsXHJcbiAgICBsaW5lVmFsdWVzLmRhdGFwb2ludENQLFxyXG4gICAgbGluZVZhbHVlcy5kYXRhcG9pbnRCb3JkZXJDUCxcclxuICAgIGxpbmVWYWx1ZXMuYXJlYUNQXHJcbiAgKTtcclxuXHJcbiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJsaW5lX3RpdGxlX3NwYW5cIikuaW5uZXJIVE1MID0gbGluZVZhbHVlcy50aXRsZUlucHV0O1xyXG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibGluZV94X3RpdGxlX3NwYW5cIikuaW5uZXJIVE1MID1cclxuICAgIGxpbmVWYWx1ZXMueEF4aXNUaXRsZUlucHV0O1xyXG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibGluZV95X3RpdGxlX3NwYW5cIikuaW5uZXJIVE1MID1cclxuICAgIGxpbmVWYWx1ZXMueUF4aXNUaXRsZUlucHV0O1xyXG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibGluZV90aXRsZV9zbGlkZXJfc3BhblwiKS5pbm5lckhUTUwgPVxyXG4gICAgbGluZVZhbHVlcy50aXRsZVNsaWRlcjtcclxuICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImxpbmVfeF90aXRsZV9zbGlkZXJfc3BhblwiKS5pbm5lckhUTUwgPVxyXG4gICAgbGluZVZhbHVlcy54QXhpc1RpdGxlU2xpZGVyO1xyXG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibGluZV95X3RpdGxlX3NsaWRlcl9zcGFuXCIpLmlubmVySFRNTCA9XHJcbiAgICBsaW5lVmFsdWVzLnlBeGlzVGl0bGVTbGlkZXI7XHJcbiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJsaW5lXzFfd2lkdGhfc2xpZGVyX3NwYW5cIikuaW5uZXJIVE1MID1cclxuICAgIGxpbmVWYWx1ZXMud2lkdGhTbGlkZXI7XHJcbiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJsaW5lXzJfd2lkdGhfc2xpZGVyX3NwYW5cIikuaW5uZXJIVE1MID1cclxuICAgIGxpbmVWYWx1ZXMud2lkdGhTbGlkZXI7XHJcbiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJsaW5lXzNfd2lkdGhfc2xpZGVyX3NwYW5cIikuaW5uZXJIVE1MID1cclxuICAgIGxpbmVWYWx1ZXMud2lkdGhTbGlkZXI7XHJcbiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJsaW5lX3BvaW50X3JhZGl1c19zbGlkZXJfc3BhblwiKS5pbm5lckhUTUwgPVxyXG4gICAgbGluZVZhbHVlcy5wb2ludFJhZGl1c1NsaWRlcjtcclxuICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImxpbmVfcG9pbnQyX3JhZGl1c19zbGlkZXJfc3BhblwiKS5pbm5lckhUTUwgPVxyXG4gICAgbGluZVZhbHVlcy5wb2ludFJhZGl1c1NsaWRlcjtcclxuICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImxpbmVfcG9pbnQzX3JhZGl1c19zbGlkZXJfc3BhblwiKS5pbm5lckhUTUwgPVxyXG4gICAgbGluZVZhbHVlcy5wb2ludFJhZGl1c1NsaWRlcjtcclxuXHJcbiAgZDMuc2VsZWN0KFwiI2xpbmVfdG9vbHRpcF9jaGVja2JveF9zcGFuXCIpLmNsYXNzZWQoXCJoaWRlXCIsIHRydWUpO1xyXG4gIGQzLnNlbGVjdChcIiNsaW5lX3Rvb2x0aXBfY2lyY2xlX2NoZWNrYm94X3NwYW5cIikuY2xhc3NlZChcImhpZGVcIiwgdHJ1ZSk7XHJcbiAgZDMuc2VsZWN0KFwiI2xpbmVfdG9vbHRpcDJfY2lyY2xlX2NoZWNrYm94X3NwYW5cIikuY2xhc3NlZChcImhpZGVcIiwgdHJ1ZSk7XHJcbiAgZDMuc2VsZWN0KFwiI2xpbmVfdG9vbHRpcDNfY2lyY2xlX2NoZWNrYm94X3NwYW5cIikuY2xhc3NlZChcImhpZGVcIiwgdHJ1ZSk7XHJcbiAgZDMuc2VsZWN0KFwiI2xpbmVfZGF0YXBvaW50X2NoZWNrYm94X3NwYW5cIikuY2xhc3NlZChcImhpZGVcIiwgZmFsc2UpO1xyXG4gIGQzLnNlbGVjdChcIiNsaW5lX2RhdGFwb2ludDJfY2hlY2tib3hfc3BhblwiKS5jbGFzc2VkKFwiaGlkZVwiLCB0cnVlKTtcclxuICBkMy5zZWxlY3QoXCIjbGluZV9kYXRhcG9pbnQzX2NoZWNrYm94X3NwYW5cIikuY2xhc3NlZChcImhpZGVcIiwgdHJ1ZSk7XHJcbiAgZDMuc2VsZWN0KFwiI2xpbmVfeF9ncmlkX2NoZWNrYm94X3NwYW5cIikuY2xhc3NlZChcImhpZGVcIiwgdHJ1ZSk7XHJcbiAgZDMuc2VsZWN0KFwiI2xpbmVfeV9ncmlkX2NoZWNrYm94X3NwYW5cIikuY2xhc3NlZChcImhpZGVcIiwgZmFsc2UpO1xyXG4gIGQzLnNlbGVjdChcIiNsaW5lX3hfbGluZV9jaGVja2JveF9zcGFuXCIpLmNsYXNzZWQoXCJoaWRlXCIsIHRydWUpO1xyXG4gIGQzLnNlbGVjdChcIiNsaW5lX3lfbGluZV9jaGVja2JveF9zcGFuXCIpLmNsYXNzZWQoXCJoaWRlXCIsIGZhbHNlKTtcclxuICBkMy5zZWxlY3QoXCIjbGluZV9ob3Zlcl9jaGVja2JveF9zcGFuXCIpLmNsYXNzZWQoXCJoaWRlXCIsIHRydWUpO1xyXG4gIGQzLnNlbGVjdChcIiNsaW5lX3RlbXBsYXRlX2hvdmVyX3NwYW4xXCIpLmNsYXNzZWQoXCJoaWRlXCIsIHRydWUpO1xyXG4gIGQzLnNlbGVjdChcIiNsaW5lX3RlbXBsYXRlX2hvdmVyX3NwYW4yXCIpLmNsYXNzZWQoXCJoaWRlXCIsIHRydWUpO1xyXG4gIGQzLnNlbGVjdChcIiNsaW5lX3RlbXBsYXRlX2hvdmVyX3NwYW4zXCIpLmNsYXNzZWQoXCJoaWRlXCIsIHRydWUpO1xyXG5cclxuICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImxpbmVfYmFja2dyb3VuZF9jcF9zcGFuXCIpLmlubmVySFRNTCA9XHJcbiAgICBsaW5lVmFsdWVzLmJhY2tncm91bmRDUDtcclxuICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImxpbmVfdGlja19jcF9zcGFuXCIpLmlubmVySFRNTCA9IGxpbmVWYWx1ZXMudGlja0NQO1xyXG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibGluZV90aXRsZV9jcF9zcGFuXCIpLmlubmVySFRNTCA9IGxpbmVWYWx1ZXMudGl0bGVDUDtcclxuICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImxpbmVfeF90aXRsZV9jcF9zcGFuXCIpLmlubmVySFRNTCA9XHJcbiAgICBsaW5lVmFsdWVzLnhBeGlzVGl0bGVDUDtcclxuICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImxpbmVfeV90aXRsZV9jcF9zcGFuXCIpLmlubmVySFRNTCA9XHJcbiAgICBsaW5lVmFsdWVzLnlBeGlzVGl0bGVDUDtcclxuICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImxpbmVfZ3JpZF9jcF9zcGFuXCIpLmlubmVySFRNTCA9IGxpbmVWYWx1ZXMuZ3JpZENQO1xyXG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibGluZV94X2xpbmVfY3Bfc3BhblwiKS5pbm5lckhUTUwgPVxyXG4gICAgbGluZVZhbHVlcy54QXhpc0xpbmVDUDtcclxuICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImxpbmVfeV9saW5lX2NwX3NwYW5cIikuaW5uZXJIVE1MID1cclxuICAgIGxpbmVWYWx1ZXMueUF4aXNMaW5lQ1A7XHJcbiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJsaW5lX2RhdGFwb2ludF9jcF9zcGFuXCIpLmlubmVySFRNTCA9XHJcbiAgICBsaW5lVmFsdWVzLmRhdGFwb2ludENQO1xyXG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibGluZV9kYXRhcG9pbnQyX2NwX3NwYW5cIikuaW5uZXJIVE1MID1cclxuICAgIGxpbmVWYWx1ZXMuZGF0YXBvaW50Q1A7XHJcbiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJsaW5lX2RhdGFwb2ludDNfY3Bfc3BhblwiKS5pbm5lckhUTUwgPVxyXG4gICAgbGluZVZhbHVlcy5kYXRhcG9pbnRDUDtcclxuICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImxpbmVfZGF0YXBvaW50X2JvcmRlcl9jcF9zcGFuXCIpLmlubmVySFRNTCA9XHJcbiAgICBsaW5lVmFsdWVzLmRhdGFwb2ludEJvcmRlckNQO1xyXG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibGluZV9kYXRhcG9pbnQyX2JvcmRlcl9jcF9zcGFuXCIpLmlubmVySFRNTCA9XHJcbiAgICBsaW5lVmFsdWVzLmRhdGFwb2ludEJvcmRlckNQO1xyXG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibGluZV9kYXRhcG9pbnQzX2JvcmRlcl9jcF9zcGFuXCIpLmlubmVySFRNTCA9XHJcbiAgICBsaW5lVmFsdWVzLmRhdGFwb2ludEJvcmRlckNQO1xyXG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibGluZV9hcmVhX2NwX3NwYW5cIikuaW5uZXJIVE1MID0gbGluZVZhbHVlcy5hcmVhQ1A7XHJcbiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJsaW5lXzFfY3Bfc3BhblwiKS5pbm5lckhUTUwgPSBsaW5lVmFsdWVzLmxpbmVDUDE7XHJcbiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJsaW5lXzJfY3Bfc3BhblwiKS5pbm5lckhUTUwgPSBsaW5lVmFsdWVzLmxpbmVDUDI7XHJcbiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJsaW5lXzNfY3Bfc3BhblwiKS5pbm5lckhUTUwgPSBsaW5lVmFsdWVzLmxpbmVDUDM7XHJcblxyXG4gIGQzLnNlbGVjdChcIiNsaW5lX2FyZWFfY2hlY2tib3hfc3BhblwiKS5jbGFzc2VkKFwiaGlkZVwiLCB0cnVlKTtcclxuICBkMy5zZWxlY3QoXCIjbGluZV8xX3NlbGVjdF9zcGFuXCIpLmNsYXNzZWQoXCJoaWRlXCIsIGZhbHNlKTtcclxuICBkMy5zZWxlY3QoXCIjbGluZV8yX3NlbGVjdF9zcGFuXCIpLmNsYXNzZWQoXCJoaWRlXCIsIHRydWUpO1xyXG4gIGQzLnNlbGVjdChcIiNsaW5lXzNfc2VsZWN0X3NwYW5cIikuY2xhc3NlZChcImhpZGVcIiwgdHJ1ZSk7XHJcblxyXG4gIGQzLnNlbGVjdChcIiNsaW5lX29ial9udW0yX3NwYW5cIikuY2xhc3NlZChcImhpZGVcIiwgdHJ1ZSk7XHJcbiAgZDMuc2VsZWN0KFwiI2xpbmVfb2JqX251bTNfc3BhblwiKS5jbGFzc2VkKFwiaGlkZVwiLCB0cnVlKTtcclxuXHJcbiAgZDMuc2VsZWN0KFwiI2xpbmVfYXJlYVwiKS5hdHRyKFwiZGlzcGxheVwiLCBcIm5vbmVcIik7XHJcbiAgZDMuc2VsZWN0KFwiI2xpbmUxXCIpLmF0dHIoXCJkaXNwbGF5XCIsIFwiXCIpO1xyXG4gIGQzLnNlbGVjdChcIiNsaW5lMlwiKS5hdHRyKFwiZGlzcGxheVwiLCBcIm5vbmVcIik7XHJcbiAgZDMuc2VsZWN0KFwiI2xpbmUzXCIpLmF0dHIoXCJkaXNwbGF5XCIsIFwibm9uZVwiKTtcclxuXHJcbiAgZDMuc2VsZWN0QWxsKFwiLmNpcmNsZXNfbGluZVwiKS5hdHRyKFwiZGlzcGxheVwiLCBcIlwiKTtcclxuICBkMy5zZWxlY3RBbGwoXCIuY2lyY2xlc19saW5lMlwiKS5hdHRyKFwiZGlzcGxheVwiLCBcIm5vbmVcIik7XHJcbiAgZDMuc2VsZWN0QWxsKFwiLmNpcmNsZXNfbGluZTNcIikuYXR0cihcImRpc3BsYXlcIiwgXCJub25lXCIpO1xyXG59XHJcbiIsImltcG9ydCB7XHJcbiAgbGluZVRpdGxlSW5wdXQsXHJcbiAgbGluZVhBeGlzVGl0bGVJbnB1dCxcclxuICBsaW5lWUF4aXNUaXRsZUlucHV0LFxyXG4gIGxpbmVUaXRsZVNsaWRlcixcclxuICBsaW5lWEF4aXNUaXRsZVNsaWRlcixcclxuICBsaW5lWUF4aXNUaXRsZVNsaWRlcixcclxuICBsaW5lV2lkdGhTbGlkZXIsXHJcbiAgbGluZVBvaW50UmFkaXVzU2xpZGVyLFxyXG4gIGxpbmVBbW91bnRJbnB1dCxcclxufSBmcm9tIFwiLi9saW5lX2NoYXJ0X2lucHV0cy5qc1wiO1xyXG5cclxuZXhwb3J0IGxldCBsaW5lVmFsdWVzID0ge1xyXG4gIHRpdGxlSW5wdXQ6IGxpbmVUaXRsZUlucHV0LnZhbHVlLFxyXG4gIHhBeGlzVGl0bGVJbnB1dDogbGluZVhBeGlzVGl0bGVJbnB1dC52YWx1ZSxcclxuICB5QXhpc1RpdGxlSW5wdXQ6IGxpbmVZQXhpc1RpdGxlSW5wdXQudmFsdWUsXHJcblxyXG4gIHRpdGxlU2xpZGVyOiBsaW5lVGl0bGVTbGlkZXIudmFsdWUsXHJcbiAgeEF4aXNUaXRsZVNsaWRlcjogbGluZVhBeGlzVGl0bGVTbGlkZXIudmFsdWUsXHJcbiAgeUF4aXNUaXRsZVNsaWRlcjogbGluZVlBeGlzVGl0bGVTbGlkZXIudmFsdWUsXHJcbiAgd2lkdGhTbGlkZXI6IGxpbmVXaWR0aFNsaWRlci52YWx1ZSxcclxuICBwb2ludFJhZGl1c1NsaWRlcjogbGluZVBvaW50UmFkaXVzU2xpZGVyLnZhbHVlLFxyXG5cclxuICB0b29sdGlwQ2hlY2tib3g6IFwidW5jaGVja2VkXCIsXHJcbiAgZGF0YXBvaW50Q2hlY2tib3g6IFwiY2hlY2tlZFwiLFxyXG4gIHhBeGlzR3JpZENoZWNrYm94OiBcInVuY2hlY2tlZFwiLFxyXG4gIHlBeGlzR3JpZENoZWNrYm94OiBcImNoZWNrZWRcIixcclxuICB4QXhpc0xpbmVDaGVja2JveDogXCJjaGVja2VkXCIsXHJcbiAgeUF4aXNMaW5lQ2hlY2tib3g6IFwidW5jaGVja2VkXCIsXHJcbiAgaG92ZXJDaGVja2JveDogXCJ1bmNoZWNrZWRcIixcclxuXHJcbiAgYmFja2dyb3VuZENQOiBcInJnYigyNTUsIDI1NSwgMjU1KVwiLFxyXG4gIGxpbmVDUDE6IFwicmdiKDE2NywgNzgsIDc4KVwiLFxyXG4gIGxpbmVDUDI6IFwicmdiKDIwNCwgMTQ5LCA0MSlcIixcclxuICBsaW5lQ1AzOiBcInJnYig0MSwgMTM0LCAyMDQpXCIsXHJcbiAgdGlja0NQOiBcInJnYigxNTMsIDE1MywgMTUzKVwiLFxyXG4gIHRpdGxlQ1A6IFwicmdiKDY4LCA2OCwgNjgpXCIsXHJcbiAgeEF4aXNUaXRsZUNQOiBcInJnYig2OCwgNjgsIDY4KVwiLFxyXG4gIHlBeGlzVGl0bGVDUDogXCJyZ2IoNjgsIDY4LCA2OClcIixcclxuICBncmlkQ1A6IFwicmdiYSgwLCAwLCAwLCAwLjEpXCIsXHJcbiAgeEF4aXNMaW5lQ1A6IFwicmdiKDE1MywgMTUzLCAxNTMpXCIsXHJcbiAgeUF4aXNMaW5lQ1A6IFwicmdiKDE1MywgMTUzLCAxNTMpXCIsXHJcbiAgZGF0YXBvaW50Q1A6IFwicmdiYSgyNTUsIDI1NSwgMjU1LCAwKVwiLFxyXG4gIGRhdGFwb2ludEJvcmRlckNQOiBcInJnYmEoMCwgMCwgMCwgMC4zKVwiLFxyXG4gIGFyZWFDUDogXCJyZ2JhKDEwNSwgMTA1LCAxMDUsIDAuMjUpXCIsXHJcblxyXG4gIGFyZWFDaGVja2JveDogXCJ1bmNoZWNrZWRcIixcclxuICBhbW91bnRJbnB1dDogbGluZUFtb3VudElucHV0LnZhbHVlLFxyXG59O1xyXG4iLCJpbXBvcnQgeyBpbml0TGluZUNoYXJ0IH0gZnJvbSBcIi4vbGluZV9jaGFydC9saW5lX2NoYXJ0X21haW4uanNcIjtcclxuaW1wb3J0IHsgaW5pdEJhckNoYXJ0IH0gZnJvbSBcIi4vYmFyX2NoYXJ0L2Jhcl9jaGFydF9tYWluLmpzXCI7XHJcbmltcG9ydCB7IGluaXRQaWVDaGFydCB9IGZyb20gXCIuL3BpZV9jaGFydC9waWVfY2hhcnRfbWFpbi5qc1wiO1xyXG5pbXBvcnQgeyBzZWxlY3QgfSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XHJcblxyXG5jb25zdCBkMyA9IHsgc2VsZWN0IH07XHJcblxyXG5jb25zdCBvdmVybGF5Q2xvc2VCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI292ZXJsYXlfY2xvc2VfYnV0dG9uXCIpO1xyXG5jb25zdCBvdmVybGF5Q2xvc2VCdXR0b24yID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNvdmVybGF5X2Nsb3NlX2J1dHRvbjJcIik7XHJcbmNvbnN0IG92ZXJsYXlDb3B5QnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNvdmVybGF5X2J1dHRvbl9jb3B5XCIpO1xyXG5jb25zdCBmb3JtU3VibWl0QnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNmb3JtX3N1Ym1pdF9idXR0b25cIik7XHJcbmNvbnN0IG5hdkxpbmVCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI25hdl9saW5lX2J1dHRvblwiKTtcclxuY29uc3QgbmF2QmFyQnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNuYXZfYmFyX2J1dHRvblwiKTtcclxuY29uc3QgbmF2UGllQnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNuYXZfcGllX2J1dHRvblwiKTtcclxuY29uc3QgcXVlc3Rpb25NYXJrQnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNxdWVzdGlvbl9tYXJrX2J1dHRvblwiKTtcclxuXHJcbmxldCBzZWxlY3RlZCA9IFwiYmFyX2NoYXJ0XCI7XHJcblxyXG4oZnVuY3Rpb24gcm93QnV0dG9ucygpIHtcclxuICAkKFwiI3RpdGxlX2Fycm93X3JpZ2h0X2ljb25cIikuaGlkZSgpO1xyXG4gICQoXCIjc2xpZGVyX2Fycm93X3JpZ2h0X2ljb25cIikuaGlkZSgpO1xyXG4gICQoXCIjY2hlY2tib3hfYXJyb3dfcmlnaHRfaWNvblwiKS5oaWRlKCk7XHJcbiAgJChcIiNjb2xvcl9hcnJvd19yaWdodF9pY29uXCIpLmhpZGUoKTtcclxuXHJcbiAgJChcIiN0aXRsZV9hcnJvd19kb3duX2ljb25cIikuY2xpY2soZnVuY3Rpb24gKCkge1xyXG4gICAgJChcIiN0aXRsZV9yb3dfZ3JvdXBcIikuc2xpZGVUb2dnbGUoXCJzbG93XCIpO1xyXG5cclxuICAgICQodGhpcykuaGlkZSgpO1xyXG4gICAgJChcIiN0aXRsZV9hcnJvd19yaWdodF9pY29uXCIpLnNob3coKTtcclxuICB9KTtcclxuICAkKFwiI3RpdGxlX2Fycm93X3JpZ2h0X2ljb25cIikuY2xpY2soZnVuY3Rpb24gKCkge1xyXG4gICAgJChcIiN0aXRsZV9yb3dfZ3JvdXBcIikuc2xpZGVUb2dnbGUoXCJzbG93XCIpO1xyXG5cclxuICAgICQodGhpcykuaGlkZSgpO1xyXG4gICAgJChcIiN0aXRsZV9hcnJvd19kb3duX2ljb25cIikuc2hvdygpO1xyXG4gIH0pO1xyXG5cclxuICAkKFwiI3NsaWRlcl9hcnJvd19kb3duX2ljb25cIikuY2xpY2soZnVuY3Rpb24gKCkge1xyXG4gICAgJChcIiNzbGlkZXJfcm93X2dyb3VwXCIpLnNsaWRlVG9nZ2xlKFwic2xvd1wiKTtcclxuXHJcbiAgICAkKHRoaXMpLmhpZGUoKTtcclxuICAgICQoXCIjc2xpZGVyX2Fycm93X3JpZ2h0X2ljb25cIikuc2hvdygpO1xyXG4gIH0pO1xyXG4gICQoXCIjc2xpZGVyX2Fycm93X3JpZ2h0X2ljb25cIikuY2xpY2soZnVuY3Rpb24gKCkge1xyXG4gICAgJChcIiNzbGlkZXJfcm93X2dyb3VwXCIpLnNsaWRlVG9nZ2xlKFwic2xvd1wiKTtcclxuXHJcbiAgICAkKHRoaXMpLmhpZGUoKTtcclxuICAgICQoXCIjc2xpZGVyX2Fycm93X2Rvd25faWNvblwiKS5zaG93KCk7XHJcbiAgfSk7XHJcblxyXG4gICQoXCIjY2hlY2tib3hfYXJyb3dfZG93bl9pY29uXCIpLmNsaWNrKGZ1bmN0aW9uICgpIHtcclxuICAgICQoXCIjY2hlY2tib3hfcm93X2dyb3VwXCIpLnNsaWRlVG9nZ2xlKFwic2xvd1wiKTtcclxuXHJcbiAgICAkKHRoaXMpLmhpZGUoKTtcclxuICAgICQoXCIjY2hlY2tib3hfYXJyb3dfcmlnaHRfaWNvblwiKS5zaG93KCk7XHJcbiAgfSk7XHJcbiAgJChcIiNjaGVja2JveF9hcnJvd19yaWdodF9pY29uXCIpLmNsaWNrKGZ1bmN0aW9uICgpIHtcclxuICAgICQoXCIjY2hlY2tib3hfcm93X2dyb3VwXCIpLnNsaWRlVG9nZ2xlKFwic2xvd1wiKTtcclxuXHJcbiAgICAkKHRoaXMpLmhpZGUoKTtcclxuICAgICQoXCIjY2hlY2tib3hfYXJyb3dfZG93bl9pY29uXCIpLnNob3coKTtcclxuICB9KTtcclxuXHJcbiAgJChcIiNjb2xvcl9hcnJvd19kb3duX2ljb25cIikuY2xpY2soZnVuY3Rpb24gKCkge1xyXG4gICAgJChcIiNjb2xvcl9yb3dfZ3JvdXBcIikuc2xpZGVUb2dnbGUoXCJzbG93XCIpO1xyXG5cclxuICAgICQodGhpcykuaGlkZSgpO1xyXG4gICAgJChcIiNjb2xvcl9hcnJvd19yaWdodF9pY29uXCIpLnNob3coKTtcclxuICB9KTtcclxuICAkKFwiI2NvbG9yX2Fycm93X3JpZ2h0X2ljb25cIikuY2xpY2soZnVuY3Rpb24gKCkge1xyXG4gICAgJChcIiNjb2xvcl9yb3dfZ3JvdXBcIikuc2xpZGVUb2dnbGUoXCJzbG93XCIpO1xyXG5cclxuICAgICQodGhpcykuaGlkZSgpO1xyXG4gICAgJChcIiNjb2xvcl9hcnJvd19kb3duX2ljb25cIikuc2hvdygpO1xyXG4gIH0pO1xyXG59KSgpO1xyXG5cclxuZnVuY3Rpb24gY29weUNoYXJ0VG9DbGlwYm9hcmQoY2hhcnQpIHtcclxuICB2YXIgcmFuZ2UgPSBkb2N1bWVudC5jcmVhdGVSYW5nZSgpO1xyXG4gIHJhbmdlLnNlbGVjdE5vZGUoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYCR7Y2hhcnR9X3RlbXBsYXRlYCkpO1xyXG5cclxuICB3aW5kb3cuZ2V0U2VsZWN0aW9uKCkucmVtb3ZlQWxsUmFuZ2VzKCk7XHJcbiAgd2luZG93LmdldFNlbGVjdGlvbigpLmFkZFJhbmdlKHJhbmdlKTtcclxuXHJcbiAgZG9jdW1lbnQuZXhlY0NvbW1hbmQoXCJjb3B5XCIpO1xyXG5cclxuICB3aW5kb3cuZ2V0U2VsZWN0aW9uKCkucmVtb3ZlQWxsUmFuZ2VzKCk7XHJcbiAgd2luZG93LmFsZXJ0KFwiQ29kZSBoYXMgYmVlbiBjb3BpZWQgdG8geW91ciBjbGlwYm9hcmQuXCIpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBjb3B5Q2hhcnRUb1ZhbHVlKGNoYXJ0KSB7XHJcbiAgJChcIiNvdmVybGF5XCIpLmZhZGVJbig2MDApO1xyXG5cclxuICB2YXIgcmFuZ2UgPSBkb2N1bWVudC5jcmVhdGVSYW5nZSgpO1xyXG5cclxuICByYW5nZS5zZWxlY3ROb2RlKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGAke2NoYXJ0fV90ZW1wbGF0ZWApKTtcclxuXHJcbiAgd2luZG93LmdldFNlbGVjdGlvbigpLnJlbW92ZUFsbFJhbmdlcygpOyAvLyBjbGVhciBjdXJyZW50IHNlbGVjdGlvblxyXG4gIHdpbmRvdy5nZXRTZWxlY3Rpb24oKS5hZGRSYW5nZShyYW5nZSk7IC8vIHRvIHNlbGVjdCB0ZXh0XHJcblxyXG4gIGxldCBmb3JtSGlkZGVuTGluZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYCMke2NoYXJ0fV9mb3JtX2lucHV0YCk7XHJcblxyXG4gIGZvcm1IaWRkZW5MaW5lLnNldEF0dHJpYnV0ZShcInZhbHVlXCIsIHdpbmRvdy5nZXRTZWxlY3Rpb24oKS50b1N0cmluZygpKTtcclxuICB3aW5kb3cuZ2V0U2VsZWN0aW9uKCkucmVtb3ZlQWxsUmFuZ2VzKCk7IC8vIGNsZWFyIGN1cnJlbnQgc2VsZWN0aW9uXHJcbn1cclxuXHJcbmZ1bmN0aW9uIHNob3dMaW5lKCkge1xyXG4gIHNlbGVjdGVkID0gXCJsaW5lX2NoYXJ0XCI7XHJcblxyXG4gICQoXCIjbWFpbl9yb3dcIikuc2hvdygpO1xyXG5cclxuICAkKFwiLmxpbmVfdGl0bGVfY29sX3Jvd1wiKS5zaG93KCk7XHJcbiAgJChcIi5saW5lX3NsaWRlcl9jb2xfcm93XCIpLnNob3coKTtcclxuICAkKFwiLmxpbmVfY2hlY2tib3hfY29sX3Jvd1wiKS5zaG93KCk7XHJcbiAgJChcIi5saW5lX2NvbG9yX2NvbF9yb3dcIikuc2hvdygpO1xyXG4gICQoXCIjbGluZV9jaGFydF90ZW1wbGF0ZVwiKS5zaG93KCk7XHJcbiAgJChcIiNsaW5lX2RpbWVuc2lvbl9kaXZcIikuc2hvdygpO1xyXG4gICQoXCIjbGluZV9kaXZcIikuc2hvdygpO1xyXG4gICQoXCIjbGluZV9mb3JtX2J1dHRvblwiKS5zaG93KCk7XHJcblxyXG4gICQoXCIuYmFyX3RpdGxlX2NvbF9yb3dcIikuaGlkZSgpO1xyXG4gICQoXCIuYmFyX3NsaWRlcl9jb2xfcm93XCIpLmhpZGUoKTtcclxuICAkKFwiLmJhcl9jaGVja2JveF9jb2xfcm93XCIpLmhpZGUoKTtcclxuICAkKFwiLmJhcl9jb2xvcl9jb2xfcm93XCIpLmhpZGUoKTtcclxuICAkKFwiI2Jhcl9jaGFydF90ZW1wbGF0ZVwiKS5oaWRlKCk7XHJcbiAgJChcIiNiYXJfZGltZW5zaW9uX2RpdlwiKS5oaWRlKCk7XHJcbiAgJChcIiNiYXJfZGl2XCIpLmhpZGUoKTtcclxuICAkKFwiI2Jhcl9mb3JtX2J1dHRvblwiKS5oaWRlKCk7XHJcblxyXG4gICQoXCIucGllX3RpdGxlX2NvbF9yb3dcIikuaGlkZSgpO1xyXG4gICQoXCIucGllX3NsaWRlcl9jb2xfcm93XCIpLmhpZGUoKTtcclxuICAkKFwiLnBpZV9jaGVja2JveF9jb2xfcm93XCIpLmhpZGUoKTtcclxuICAkKFwiLnBpZV9jb2xvcl9jb2xfcm93XCIpLmhpZGUoKTtcclxuICAkKFwiI3BpZV9jaGFydF90ZW1wbGF0ZVwiKS5oaWRlKCk7XHJcbiAgJChcIiNwaWVfZGltZW5zaW9uX2RpdlwiKS5oaWRlKCk7XHJcbiAgJChcIiNwaWVfZGl2XCIpLmhpZGUoKTtcclxuICAkKFwiI3BpZV9mb3JtX2J1dHRvblwiKS5oaWRlKCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHNob3dCYXIoKSB7XHJcbiAgc2VsZWN0ZWQgPSBcImJhcl9jaGFydFwiO1xyXG5cclxuICAkKFwiI21haW5fcm93XCIpLnNob3coKTtcclxuXHJcbiAgJChcIi5iYXJfdGl0bGVfY29sX3Jvd1wiKS5zaG93KCk7XHJcbiAgJChcIi5iYXJfc2xpZGVyX2NvbF9yb3dcIikuc2hvdygpO1xyXG4gICQoXCIuYmFyX2NoZWNrYm94X2NvbF9yb3dcIikuc2hvdygpO1xyXG4gICQoXCIuYmFyX2NvbG9yX2NvbF9yb3dcIikuc2hvdygpO1xyXG4gICQoXCIjYmFyX2NoYXJ0X3RlbXBsYXRlXCIpLnNob3coKTtcclxuICAkKFwiI2Jhcl9kaW1lbnNpb25fZGl2XCIpLnNob3coKTtcclxuICAkKFwiI2Jhcl9kaXZcIikuc2hvdygpO1xyXG4gICQoXCIjYmFyX2Zvcm1fYnV0dG9uXCIpLnNob3coKTtcclxuXHJcbiAgJChcIi5saW5lX3RpdGxlX2NvbF9yb3dcIikuaGlkZSgpO1xyXG4gICQoXCIubGluZV9zbGlkZXJfY29sX3Jvd1wiKS5oaWRlKCk7XHJcbiAgJChcIi5saW5lX2NoZWNrYm94X2NvbF9yb3dcIikuaGlkZSgpO1xyXG4gICQoXCIubGluZV9jb2xvcl9jb2xfcm93XCIpLmhpZGUoKTtcclxuICAkKFwiI2xpbmVfY2hhcnRfdGVtcGxhdGVcIikuaGlkZSgpO1xyXG4gICQoXCIjbGluZV9kaW1lbnNpb25fZGl2XCIpLmhpZGUoKTtcclxuICAkKFwiI2xpbmVfZGl2XCIpLmhpZGUoKTtcclxuICAkKFwiI2xpbmVfZm9ybV9idXR0b25cIikuaGlkZSgpO1xyXG5cclxuICAkKFwiLnBpZV90aXRsZV9jb2xfcm93XCIpLmhpZGUoKTtcclxuICAkKFwiLnBpZV9zbGlkZXJfY29sX3Jvd1wiKS5oaWRlKCk7XHJcbiAgJChcIi5waWVfY2hlY2tib3hfY29sX3Jvd1wiKS5oaWRlKCk7XHJcbiAgJChcIi5waWVfY29sb3JfY29sX3Jvd1wiKS5oaWRlKCk7XHJcbiAgJChcIiNwaWVfY2hhcnRfdGVtcGxhdGVcIikuaGlkZSgpO1xyXG4gICQoXCIjcGllX2RpbWVuc2lvbl9kaXZcIikuaGlkZSgpO1xyXG4gICQoXCIjcGllX2RpdlwiKS5oaWRlKCk7XHJcbiAgJChcIiNwaWVfZm9ybV9idXR0b25cIikuaGlkZSgpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBzaG93UGllKCkge1xyXG4gIHNlbGVjdGVkID0gXCJwaWVfY2hhcnRcIjtcclxuXHJcbiAgJChcIiNtYWluX3Jvd1wiKS5zaG93KCk7XHJcblxyXG4gICQoXCIucGllX3RpdGxlX2NvbF9yb3dcIikuc2hvdygpO1xyXG4gICQoXCIucGllX3NsaWRlcl9jb2xfcm93XCIpLnNob3coKTtcclxuICAkKFwiLnBpZV9jaGVja2JveF9jb2xfcm93XCIpLnNob3coKTtcclxuICAkKFwiLnBpZV9jb2xvcl9jb2xfcm93XCIpLnNob3coKTtcclxuICAkKFwiI3BpZV9jaGFydF90ZW1wbGF0ZVwiKS5zaG93KCk7XHJcbiAgJChcIiNwaWVfZGltZW5zaW9uX2RpdlwiKS5zaG93KCk7XHJcbiAgJChcIiNwaWVfZGl2XCIpLnNob3coKTtcclxuICAkKFwiI3BpZV9mb3JtX2J1dHRvblwiKS5zaG93KCk7XHJcblxyXG4gICQoXCIuYmFyX3RpdGxlX2NvbF9yb3dcIikuaGlkZSgpO1xyXG4gICQoXCIuYmFyX3NsaWRlcl9jb2xfcm93XCIpLmhpZGUoKTtcclxuICAkKFwiLmJhcl9jaGVja2JveF9jb2xfcm93XCIpLmhpZGUoKTtcclxuICAkKFwiLmJhcl9jb2xvcl9jb2xfcm93XCIpLmhpZGUoKTtcclxuICAkKFwiI2Jhcl9jaGFydF90ZW1wbGF0ZVwiKS5oaWRlKCk7XHJcbiAgJChcIiNiYXJfZGltZW5zaW9uX2RpdlwiKS5oaWRlKCk7XHJcbiAgJChcIiNiYXJfZGl2XCIpLmhpZGUoKTtcclxuICAkKFwiI2Jhcl9mb3JtX2J1dHRvblwiKS5oaWRlKCk7XHJcblxyXG4gICQoXCIubGluZV90aXRsZV9jb2xfcm93XCIpLmhpZGUoKTtcclxuICAkKFwiLmxpbmVfc2xpZGVyX2NvbF9yb3dcIikuaGlkZSgpO1xyXG4gICQoXCIubGluZV9jaGVja2JveF9jb2xfcm93XCIpLmhpZGUoKTtcclxuICAkKFwiLmxpbmVfY29sb3JfY29sX3Jvd1wiKS5oaWRlKCk7XHJcbiAgJChcIiNsaW5lX2NoYXJ0X3RlbXBsYXRlXCIpLmhpZGUoKTtcclxuICAkKFwiI2xpbmVfZGltZW5zaW9uX2RpdlwiKS5oaWRlKCk7XHJcbiAgJChcIiNsaW5lX2RpdlwiKS5oaWRlKCk7XHJcbiAgJChcIiNsaW5lX2Zvcm1fYnV0dG9uXCIpLmhpZGUoKTtcclxufVxyXG5cclxucXVlc3Rpb25NYXJrQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBmdW5jdGlvbiAoKSB7XHJcbiAgJChcIiNvdmVybGF5MlwiKS5mYWRlSW4oNjAwKTtcclxufSk7XHJcblxyXG5mb3JtU3VibWl0QnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBmdW5jdGlvbiAoKSB7XHJcbiAgaWYgKHNlbGVjdGVkID09IFwibGluZV9jaGFydFwiKSB7XHJcbiAgICBjb3B5Q2hhcnRUb1ZhbHVlKFwibGluZV9jaGFydFwiKTtcclxuICB9XHJcbiAgaWYgKHNlbGVjdGVkID09IFwiYmFyX2NoYXJ0XCIpIHtcclxuICAgIGNvcHlDaGFydFRvVmFsdWUoXCJiYXJfY2hhcnRcIik7XHJcbiAgfVxyXG4gIGlmIChzZWxlY3RlZCA9PSBcInBpZV9jaGFydFwiKSB7XHJcbiAgICBjb3B5Q2hhcnRUb1ZhbHVlKFwicGllX2NoYXJ0XCIpO1xyXG4gIH1cclxufSk7XHJcblxyXG5vdmVybGF5Q2xvc2VCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGZ1bmN0aW9uICgpIHtcclxuICAkKFwiI292ZXJsYXlcIikuZmFkZU91dCgpO1xyXG59KTtcclxub3ZlcmxheUNsb3NlQnV0dG9uMi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZnVuY3Rpb24gKCkge1xyXG4gICQoXCIjb3ZlcmxheTJcIikuZmFkZU91dCgpO1xyXG59KTtcclxuXHJcbm92ZXJsYXlDb3B5QnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBmdW5jdGlvbiAoKSB7XHJcbiAgaWYgKHNlbGVjdGVkID09IFwibGluZV9jaGFydFwiKSB7XHJcbiAgICBjb3B5Q2hhcnRUb0NsaXBib2FyZChcImxpbmVfY2hhcnRcIik7XHJcbiAgfVxyXG4gIGlmIChzZWxlY3RlZCA9PSBcImJhcl9jaGFydFwiKSB7XHJcbiAgICBjb3B5Q2hhcnRUb0NsaXBib2FyZChcImJhcl9jaGFydFwiKTtcclxuICB9XHJcbiAgaWYgKHNlbGVjdGVkID09IFwicGllX2NoYXJ0XCIpIHtcclxuICAgIGNvcHlDaGFydFRvQ2xpcGJvYXJkKFwicGllX2NoYXJ0XCIpO1xyXG4gIH1cclxufSk7XHJcblxyXG4kKGRvY3VtZW50KS5rZXl1cChmdW5jdGlvbiAoZSkge1xyXG4gIGlmIChlLmtleSA9PT0gXCJFc2NhcGVcIikge1xyXG4gICAgLy8gZXNjYXBlIGtleSBtYXBzIHRvIGtleWNvZGUgYDI3YFxyXG4gICAgJChcIiNvdmVybGF5XCIpLmZhZGVPdXQoKTtcclxuICAgICQoXCIjb3ZlcmxheTJcIikuZmFkZU91dCgpO1xyXG4gIH1cclxufSk7XHJcblxyXG4kKG5hdkxpbmVCdXR0b24pLmNsaWNrKGZ1bmN0aW9uIChlKSB7XHJcbiAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuICBpZiAoc2VsZWN0ZWQgIT0gXCJsaW5lX2NoYXJ0XCIpIHtcclxuICAgICQoXCIjZm9ybV9jb250YWluZXJcIikuZmFkZU91dCg5MDApO1xyXG4gICAgJChcIiNncmFwaF9jb250YWluZXJcIikuZmFkZU91dCg5MDApO1xyXG5cclxuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICBzaG93TGluZSgpO1xyXG5cclxuICAgICAgJChcIiNmb3JtX2NvbnRhaW5lclwiKS5mYWRlSW4oODUwKTtcclxuICAgICAgJChcIiNncmFwaF9jb250YWluZXJcIikuZmFkZUluKDg1MCk7XHJcblxyXG4gICAgICB2YXIgcmVzaXplRXZlbnQgPSBuZXcgRXZlbnQoXCJyZXNpemVcIik7XHJcbiAgICAgIHdpbmRvdy5kaXNwYXRjaEV2ZW50KHJlc2l6ZUV2ZW50KTtcclxuICAgIH0sIDg1MCk7XHJcbiAgfVxyXG5cclxuICBkMy5zZWxlY3QodGhpcykuY2xhc3NlZChcInNlbGVjdGVkXCIsIHRydWUpO1xyXG4gIGQzLnNlbGVjdChuYXZCYXJCdXR0b24pLmNsYXNzZWQoXCJzZWxlY3RlZFwiLCBmYWxzZSk7XHJcbiAgZDMuc2VsZWN0KG5hdlBpZUJ1dHRvbikuY2xhc3NlZChcInNlbGVjdGVkXCIsIGZhbHNlKTtcclxufSk7XHJcblxyXG4kKG5hdkJhckJ1dHRvbikuY2xpY2soZnVuY3Rpb24gKGUpIHtcclxuICBlLnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG4gIGlmIChzZWxlY3RlZCAhPSBcImJhcl9jaGFydFwiKSB7XHJcbiAgICAkKFwiI2Zvcm1fY29udGFpbmVyXCIpLmZhZGVPdXQoOTAwKTtcclxuICAgICQoXCIjZ3JhcGhfY29udGFpbmVyXCIpLmZhZGVPdXQoOTAwKTtcclxuXHJcbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgc2hvd0JhcigpO1xyXG5cclxuICAgICAgJChcIiNmb3JtX2NvbnRhaW5lclwiKS5mYWRlSW4oODUwKTtcclxuICAgICAgJChcIiNncmFwaF9jb250YWluZXJcIikuZmFkZUluKDg1MCk7XHJcblxyXG4gICAgICB2YXIgcmVzaXplRXZlbnQgPSBuZXcgRXZlbnQoXCJyZXNpemVcIik7XHJcbiAgICAgIHdpbmRvdy5kaXNwYXRjaEV2ZW50KHJlc2l6ZUV2ZW50KTtcclxuICAgIH0sIDg1MCk7XHJcbiAgfVxyXG5cclxuICBkMy5zZWxlY3QodGhpcykuY2xhc3NlZChcInNlbGVjdGVkXCIsIHRydWUpO1xyXG4gIGQzLnNlbGVjdChuYXZMaW5lQnV0dG9uKS5jbGFzc2VkKFwic2VsZWN0ZWRcIiwgZmFsc2UpO1xyXG4gIGQzLnNlbGVjdChuYXZQaWVCdXR0b24pLmNsYXNzZWQoXCJzZWxlY3RlZFwiLCBmYWxzZSk7XHJcbn0pO1xyXG5cclxuJChuYXZQaWVCdXR0b24pLmNsaWNrKGZ1bmN0aW9uIChlKSB7XHJcbiAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuICBpZiAoc2VsZWN0ZWQgIT0gXCJwaWVfY2hhcnRcIikge1xyXG4gICAgJChcIiNmb3JtX2NvbnRhaW5lclwiKS5mYWRlT3V0KDkwMCk7XHJcbiAgICAkKFwiI2dyYXBoX2NvbnRhaW5lclwiKS5mYWRlT3V0KDkwMCk7XHJcblxyXG4gICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgIHNob3dQaWUoKTtcclxuXHJcbiAgICAgICQoXCIjZm9ybV9jb250YWluZXJcIikuZmFkZUluKDg1MCk7XHJcbiAgICAgICQoXCIjZ3JhcGhfY29udGFpbmVyXCIpLmZhZGVJbig4NTApO1xyXG5cclxuICAgICAgdmFyIHJlc2l6ZUV2ZW50ID0gbmV3IEV2ZW50KFwicmVzaXplXCIpO1xyXG4gICAgICB3aW5kb3cuZGlzcGF0Y2hFdmVudChyZXNpemVFdmVudCk7XHJcbiAgICB9LCA4NTApO1xyXG4gIH1cclxuXHJcbiAgZDMuc2VsZWN0KHRoaXMpLmNsYXNzZWQoXCJzZWxlY3RlZFwiLCB0cnVlKTtcclxuICBkMy5zZWxlY3QobmF2TGluZUJ1dHRvbikuY2xhc3NlZChcInNlbGVjdGVkXCIsIGZhbHNlKTtcclxuICBkMy5zZWxlY3QobmF2QmFyQnV0dG9uKS5jbGFzc2VkKFwic2VsZWN0ZWRcIiwgZmFsc2UpO1xyXG59KTtcclxuXHJcbmluaXRCYXJDaGFydCgpO1xyXG5pbml0TGluZUNoYXJ0KCk7XHJcbmluaXRQaWVDaGFydCgpO1xyXG5cclxuc2hvd0JhcigpO1xyXG4vL3Nob3dMaW5lKCk7XHJcbi8vc2hvd1BpZSgpO1xyXG5cclxuZDMuc2VsZWN0KG5hdkJhckJ1dHRvbikuY2xhc3NlZChcInNlbGVjdGVkXCIsIHRydWUpO1xyXG4iLCJpbXBvcnQgeyBwaWVDYWxjIH0gZnJvbSBcIi4vcGllX2NoYXJ0X2dyYXBoLmpzXCI7XHJcbmltcG9ydCB7IHBpZVZhbHVlcyB9IGZyb20gXCIuL3BpZV9jaGFydF92YWx1ZXMuanNcIjtcclxuaW1wb3J0IHsgc2VsZWN0LCBzZWxlY3RBbGwgfSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XHJcblxyXG5jb25zdCBkMyA9IHsgc2VsZWN0LCBzZWxlY3RBbGwgfTtcclxuXHJcbiQoXCIjcGllX2JhY2tncm91bmRfY3BcIikuc3BlY3RydW0oe1xyXG4gIHR5cGU6IFwiY29sb3JcIixcclxuICBwcmVmZXJyZWRGb3JtYXQ6IFwicmdiXCIsXHJcbiAgc2hvd0lucHV0OiB0cnVlLFxyXG4gIHNob3dCdXR0b25zOiBmYWxzZSxcclxuICBhbGxvd0VtcHR5OiBmYWxzZSxcclxuICBtb3ZlOiBmdW5jdGlvbiAoY29sb3IpIHtcclxuICAgIHBpZVZhbHVlcy5iYWNrZ3JvdW5kQ1AgPSBjb2xvci50b1JnYlN0cmluZygpO1xyXG4gICAgZDMuc2VsZWN0KFwiI3BpZV9kaXZcIikuc3R5bGUoXCJiYWNrZ3JvdW5kLWNvbG9yXCIsIGNvbG9yLnRvUmdiU3RyaW5nKCkpO1xyXG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNwaWVfYmFja2dyb3VkX2NwX3NwYW5cIikuaW5uZXJIVE1MID1cclxuICAgICAgcGllVmFsdWVzLmJhY2tncm91bmRDUDtcclxuICB9LFxyXG59KTtcclxuXHJcbiQoXCIjcGllX2JvcmRlcl9jcFwiKS5zcGVjdHJ1bSh7XHJcbiAgdHlwZTogXCJjb2xvclwiLFxyXG4gIHByZWZlcnJlZEZvcm1hdDogXCJyZ2JcIixcclxuICBzaG93SW5wdXQ6IHRydWUsXHJcbiAgc2hvd0J1dHRvbnM6IGZhbHNlLFxyXG4gIGFsbG93RW1wdHk6IGZhbHNlLFxyXG4gIG1vdmU6IGZ1bmN0aW9uIChjb2xvcikge1xyXG4gICAgcGllVmFsdWVzLmJvcmRlckNQID0gY29sb3IudG9SZ2JTdHJpbmcoKTtcclxuICAgIGQzLnNlbGVjdEFsbChcIi5waWVfc3Ryb2tlXCIpLnN0eWxlKFwic3Ryb2tlXCIsIGNvbG9yLnRvUmdiU3RyaW5nKCkpO1xyXG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNwaWVfYm9yZGVyX2NwX3NwYW5cIikuaW5uZXJIVE1MID1cclxuICAgICAgcGllVmFsdWVzLmJvcmRlckNQO1xyXG4gIH0sXHJcbn0pO1xyXG5cclxuJChcIiNwaWVfZm9udF9jcFwiKS5zcGVjdHJ1bSh7XHJcbiAgdHlwZTogXCJjb2xvclwiLFxyXG4gIHByZWZlcnJlZEZvcm1hdDogXCJyZ2JcIixcclxuICBzaG93SW5wdXQ6IHRydWUsXHJcbiAgc2hvd0J1dHRvbnM6IGZhbHNlLFxyXG4gIGFsbG93RW1wdHk6IGZhbHNlLFxyXG4gIG1vdmU6IGZ1bmN0aW9uIChjb2xvcikge1xyXG4gICAgcGllVmFsdWVzLmZvbnRDUCA9IGNvbG9yLnRvUmdiU3RyaW5nKCk7XHJcbiAgICBkMy5zZWxlY3RBbGwoXCIucGllLWZvbnRcIikuc3R5bGUoXCJmaWxsXCIsIGNvbG9yLnRvUmdiU3RyaW5nKCkpO1xyXG4gICAgZDMuc2VsZWN0QWxsKFwiLnBpZS1mb250XCIpLnN0eWxlKFwiY29sb3JcIiwgY29sb3IudG9SZ2JTdHJpbmcoKSk7XHJcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3BpZV90aXRsZV9jcF9zcGFuXCIpLmlubmVySFRNTCA9IHBpZVZhbHVlcy5mb250Q1A7XHJcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3BpZV9sZWdlbmRfY3Bfc3BhblwiKS5pbm5lckhUTUwgPSBwaWVWYWx1ZXMuZm9udENQO1xyXG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNwaWVfdmFsdWVzX2NwX3NwYW5cIikuaW5uZXJIVE1MID0gcGllVmFsdWVzLmZvbnRDUDtcclxuICB9LFxyXG59KTtcclxuXHJcbiQoXCIjcGllX2NvbG9yMV9jcFwiKS5zcGVjdHJ1bSh7XHJcbiAgdHlwZTogXCJjb2xvclwiLFxyXG4gIHByZWZlcnJlZEZvcm1hdDogXCJoZXhcIixcclxuICBzaG93SW5wdXQ6IHRydWUsXHJcbiAgc2hvd0J1dHRvbnM6IGZhbHNlLFxyXG4gIGFsbG93RW1wdHk6IGZhbHNlLFxyXG4gIG1vdmU6IGZ1bmN0aW9uIChjb2xvcikge1xyXG4gICAgaWYgKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIucGllX3Rvb2x0aXBcIikpIHtcclxuICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5waWVfdG9vbHRpcFwiKS5yZW1vdmUoKTtcclxuICAgIH1cclxuICAgIHBpZVZhbHVlcy5jb2xvclNjYWxlQXJyYXlbMF0gPSBjb2xvci50b1N0cmluZyhcImhleFwiKTtcclxuICAgIHBpZUNhbGMoXHJcbiAgICAgIHBpZVZhbHVlcy5pbm5lclJhZGl1c1NsaWRlcixcclxuICAgICAgcGllVmFsdWVzLm91dGVyUmFkaXVzU2xpZGVyLFxyXG4gICAgICBwaWVWYWx1ZXMuYm9yZGVyU2xpZGVyLFxyXG4gICAgICBwaWVWYWx1ZXMubGFiZWxSYWRpdXNTbGlkZXIsXHJcbiAgICAgIHBpZVZhbHVlcy50b29sdGlwQ2hlY2tib3gsXHJcbiAgICAgIHBpZVZhbHVlcy5jb2xvclNjYWxlQXJyYXlcclxuICAgICk7XHJcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3BpZV9jb2xvcjFfY3Bfc3BhblwiKS5pbm5lckhUTUwgPVxyXG4gICAgICBwaWVWYWx1ZXMuY29sb3JTY2FsZUFycmF5WzBdO1xyXG4gIH0sXHJcbn0pO1xyXG5cclxuJChcIiNwaWVfY29sb3IyX2NwXCIpLnNwZWN0cnVtKHtcclxuICB0eXBlOiBcImNvbG9yXCIsXHJcbiAgcHJlZmVycmVkRm9ybWF0OiBcImhleFwiLFxyXG4gIHNob3dJbnB1dDogdHJ1ZSxcclxuICBzaG93QnV0dG9uczogZmFsc2UsXHJcbiAgYWxsb3dFbXB0eTogZmFsc2UsXHJcbiAgbW92ZTogZnVuY3Rpb24gKGNvbG9yKSB7XHJcbiAgICBpZiAoZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5waWVfdG9vbHRpcFwiKSkge1xyXG4gICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnBpZV90b29sdGlwXCIpLnJlbW92ZSgpO1xyXG4gICAgfVxyXG4gICAgcGllVmFsdWVzLmNvbG9yU2NhbGVBcnJheVsxXSA9IGNvbG9yLnRvU3RyaW5nKFwiaGV4XCIpO1xyXG4gICAgcGllQ2FsYyhcclxuICAgICAgcGllVmFsdWVzLmlubmVyUmFkaXVzU2xpZGVyLFxyXG4gICAgICBwaWVWYWx1ZXMub3V0ZXJSYWRpdXNTbGlkZXIsXHJcbiAgICAgIHBpZVZhbHVlcy5ib3JkZXJTbGlkZXIsXHJcbiAgICAgIHBpZVZhbHVlcy5sYWJlbFJhZGl1c1NsaWRlcixcclxuICAgICAgcGllVmFsdWVzLnRvb2x0aXBDaGVja2JveCxcclxuICAgICAgcGllVmFsdWVzLmNvbG9yU2NhbGVBcnJheVxyXG4gICAgKTtcclxuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjcGllX2NvbG9yMl9jcF9zcGFuXCIpLmlubmVySFRNTCA9XHJcbiAgICAgIHBpZVZhbHVlcy5jb2xvclNjYWxlQXJyYXlbMV07XHJcbiAgfSxcclxufSk7XHJcblxyXG4kKFwiI3BpZV9jb2xvcjNfY3BcIikuc3BlY3RydW0oe1xyXG4gIHR5cGU6IFwiY29sb3JcIixcclxuICBwcmVmZXJyZWRGb3JtYXQ6IFwiaGV4XCIsXHJcbiAgc2hvd0lucHV0OiB0cnVlLFxyXG4gIHNob3dCdXR0b25zOiBmYWxzZSxcclxuICBhbGxvd0VtcHR5OiBmYWxzZSxcclxuICBtb3ZlOiBmdW5jdGlvbiAoY29sb3IpIHtcclxuICAgIGlmIChkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnBpZV90b29sdGlwXCIpKSB7XHJcbiAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIucGllX3Rvb2x0aXBcIikucmVtb3ZlKCk7XHJcbiAgICB9XHJcbiAgICBwaWVWYWx1ZXMuY29sb3JTY2FsZUFycmF5WzJdID0gY29sb3IudG9TdHJpbmcoXCJoZXhcIik7XHJcbiAgICBwaWVDYWxjKFxyXG4gICAgICBwaWVWYWx1ZXMuaW5uZXJSYWRpdXNTbGlkZXIsXHJcbiAgICAgIHBpZVZhbHVlcy5vdXRlclJhZGl1c1NsaWRlcixcclxuICAgICAgcGllVmFsdWVzLmJvcmRlclNsaWRlcixcclxuICAgICAgcGllVmFsdWVzLmxhYmVsUmFkaXVzU2xpZGVyLFxyXG4gICAgICBwaWVWYWx1ZXMudG9vbHRpcENoZWNrYm94LFxyXG4gICAgICBwaWVWYWx1ZXMuY29sb3JTY2FsZUFycmF5XHJcbiAgICApO1xyXG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNwaWVfY29sb3IzX2NwX3NwYW5cIikuaW5uZXJIVE1MID1cclxuICAgICAgcGllVmFsdWVzLmNvbG9yU2NhbGVBcnJheVsyXTtcclxuICB9LFxyXG59KTtcclxuIiwiaW1wb3J0IHsgc2VsZWN0LCBzZWxlY3RBbGwgfSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XHJcbmltcG9ydCB7IHNjYWxlT3JkaW5hbCB9IGZyb20gXCJkMy1zY2FsZVwiO1xyXG5pbXBvcnQgeyBhcmMsIHBpZSB9IGZyb20gXCJkMy1zaGFwZVwiO1xyXG5pbXBvcnQgeyBldmVudCBhcyBjdXJyZW50RXZlbnQgfSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XHJcblxyXG5jb25zdCBkMyA9IHsgc2VsZWN0LCBzZWxlY3RBbGwsIHNjYWxlT3JkaW5hbCwgYXJjLCBwaWUgfTtcclxuXHJcbmNvbnN0IGRhdGEgPSBbNDAsIDI3LCAxMywgNjcsIDg4XTtcclxuXHJcbmNvbnN0IHdpZHRoID0gMzUwLFxyXG4gIGhlaWdodCA9IDQwMCxcclxuICByYWRpdXMgPSBNYXRoLm1pbih3aWR0aCwgaGVpZ2h0KSAvIDI7XHJcblxyXG5jb25zdCBzdmcgPSBkM1xyXG4gIC5zZWxlY3QoXCIjcGllX2RpdlwiKVxyXG4gIC5hcHBlbmQoXCJzdmdcIilcclxuICAuYXR0cihcImlkXCIsIFwicGllX2NoYXJ0XCIpXHJcbiAgLmF0dHIoXCJ3aWR0aFwiLCBcIjEwMCVcIilcclxuICAuYXR0cihcImhlaWdodFwiLCBoZWlnaHQpO1xyXG5cclxuY29uc3QgcGllQ2hhcnQgPSBzdmdcclxuICAuYXBwZW5kKFwiZ1wiKVxyXG4gIC5hdHRyKFwiaWRcIiwgXCJwaWVfY2hhcnRfZ1wiKVxyXG4gIC5hdHRyKFwidHJhbnNmb3JtXCIsIGB0cmFuc2xhdGUoMTc1LCAyMzApYCk7XHJcblxyXG5jb25zdCB0aXRsZSA9IHN2Z1xyXG4gIC5hcHBlbmQoXCJ0ZXh0XCIpXHJcbiAgLmF0dHIoXCJjbGFzc1wiLCBcInBpZS1mb250XCIpXHJcbiAgLmF0dHIoXCJ4XCIsIDMxMClcclxuICAuYXR0cihcInlcIiwgMjUpXHJcbiAgLmF0dHIoXCJpZFwiLCBcInBpZV90aXRsZVwiKVxyXG4gIC5hdHRyKFwidGV4dC1hbmNob3JcIiwgXCJtaWRkbGVcIilcclxuICAuc3R5bGUoXCJmb250LXNpemVcIiwgXCIxLjFlbVwiKVxyXG4gIC50ZXh0KFwiQ2xpZW50IERlbW9ncmFwaGljXCIpO1xyXG5cclxuZnVuY3Rpb24gc29ydHNMZWdlbmQoKSB7XHJcbiAgZGF0YS5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XHJcbiAgICByZXR1cm4gYSAtIGI7XHJcbiAgfSk7XHJcbn1cclxuXHJcbnNvcnRzTGVnZW5kKCk7XHJcblxyXG5sZXQgbGVnZW5kID0gZDNcclxuICAuc2VsZWN0KFwiI3BpZV9jaGFydFwiKVxyXG4gIC5hcHBlbmQoXCJnXCIpXHJcbiAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgYHRyYW5zbGF0ZSgke3dpZHRoICsgMTAwfSwgJHsxNDB9KWApXHJcbiAgLmF0dHIoXCJpZFwiLCBcImxlZ2VuZFwiKTtcclxuXHJcbmxldCBwYWlycyA9IGxlZ2VuZFxyXG4gIC5zZWxlY3RBbGwoXCIucGFpcnNcIilcclxuICAuZGF0YShkYXRhKVxyXG4gIC5lbnRlcigpXHJcbiAgLmFwcGVuZChcImdcIilcclxuICAuYXR0cihcImNsYXNzXCIsIFwicGFpcnNcIik7XHJcblxyXG5sZXQgaWNvbiA9IGQzLnNlbGVjdEFsbChcIi5wYWlyc1wiKS5hcHBlbmQoXCJyZWN0XCIpO1xyXG5cclxubGV0IG51bSA9IGQzXHJcbiAgLnNlbGVjdEFsbChcIi5wYWlyc1wiKVxyXG4gIC5hcHBlbmQoXCJ0ZXh0XCIpXHJcbiAgLmF0dHIoXCJjbGFzc1wiLCBcInBpZS1mb250XCIpXHJcbiAgLnRleHQoZnVuY3Rpb24gKGQpIHtcclxuICAgIHJldHVybiBkO1xyXG4gIH0pXHJcbiAgLmF0dHIoXCJ4XCIsIDIwKVxyXG4gIC5hdHRyKFwieVwiLCAxMCk7XHJcblxyXG5sZXQgaSA9IDA7XHJcbmxldCBwYWlyID0gZDMuc2VsZWN0QWxsKFwiLnBhaXJzXCIpO1xyXG5cclxucGFpci5lYWNoKGZ1bmN0aW9uIChwLCBqKSB7XHJcbiAgZDMuc2VsZWN0KHRoaXMpLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgYHRyYW5zbGF0ZSgkezB9LCAkeyhpICs9IDIwKX0pYCk7XHJcbn0pO1xyXG5cclxuY29uc3QgcGllU2NhbGUgPSBkMy5zY2FsZU9yZGluYWwoKTtcclxuXHJcbmNvbnN0IGFyYzEgPSBkMy5hcmMoKTtcclxuXHJcbmNvbnN0IGxhYmVsQXJjID0gZDMuYXJjKCk7XHJcblxyXG5jb25zdCBwaWUxID0gZDMucGllKCk7XHJcblxyXG5jb25zdCBzbGljZSA9IHBpZUNoYXJ0XHJcbiAgLnNlbGVjdEFsbChcIi5hcmNcIilcclxuICAuZGF0YShwaWUxKGRhdGEpKVxyXG4gIC5lbnRlcigpXHJcbiAgLmFwcGVuZChcImdcIilcclxuICAuYXR0cihcImNsYXNzXCIsIFwiYXJjXCIpO1xyXG5cclxuY29uc3Qgc2xpY2VzID0gc2xpY2UuYXBwZW5kKFwicGF0aFwiKS5hdHRyKFwiY2xhc3NcIiwgXCJwaWVfc3Ryb2tlIGhvdmVyZWRcIik7XHJcblxyXG5jb25zdCBsYWJlbFNsaWNlcyA9IHNsaWNlLmFwcGVuZChcInRleHRcIik7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcGllQ2FsYyhcclxuICBpbm5lclJhZGl1cyxcclxuICBvdXRlclJhZGl1cyxcclxuICBib3JkZXJXaWR0aCxcclxuICBsYWJlbFJhZGl1cyxcclxuICB0b29sdGlwQ2hlY2tib3gsXHJcbiAgY29sb3JTY2FsZUFycmF5XHJcbikge1xyXG4gIHBpZVNjYWxlLnJhbmdlKGNvbG9yU2NhbGVBcnJheSk7XHJcblxyXG4gIGljb25cclxuICAgIC5hdHRyKFwiaGVpZ2h0XCIsIFwiMTBweFwiKVxyXG4gICAgLmF0dHIoXCJ3aWR0aFwiLCBcIjEwcHhcIilcclxuICAgIC5zdHlsZShcImZpbGxcIiwgZnVuY3Rpb24gKGQpIHtcclxuICAgICAgcmV0dXJuIHBpZVNjYWxlKGQpO1xyXG4gICAgfSk7XHJcblxyXG4gIHBpZTEudmFsdWUoZnVuY3Rpb24gKGQpIHtcclxuICAgIHJldHVybiBkO1xyXG4gIH0pO1xyXG5cclxuICBhcmMxLm91dGVyUmFkaXVzKHJhZGl1cyAtIG91dGVyUmFkaXVzKS5pbm5lclJhZGl1cyhpbm5lclJhZGl1cyk7XHJcblxyXG4gIGxhYmVsQXJjLm91dGVyUmFkaXVzKHJhZGl1cyAtIDcwKS5pbm5lclJhZGl1cyhyYWRpdXMgLSBsYWJlbFJhZGl1cyk7XHJcblxyXG4gIHNsaWNlc1xyXG4gICAgLmF0dHIoXCJkXCIsIGFyYzEpXHJcbiAgICAuYXR0cihcInN0cm9rZVwiLCBcIndoaXRlXCIpXHJcbiAgICAuYXR0cihcInN0cm9rZS13aWR0aFwiLCBgJHtib3JkZXJXaWR0aH1weGApXHJcbiAgICAuc3R5bGUoXCJmaWxsXCIsIGZ1bmN0aW9uIChkKSB7XHJcbiAgICAgIHJldHVybiBwaWVTY2FsZShkLmRhdGEpO1xyXG4gICAgfSk7XHJcblxyXG4gIC8vIGxhYmVsIGFyY1xyXG4gIGxhYmVsU2xpY2VzXHJcbiAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBmdW5jdGlvbiAoZCkge1xyXG4gICAgICByZXR1cm4gXCJ0cmFuc2xhdGUoXCIgKyBsYWJlbEFyYy5jZW50cm9pZChkKSArIFwiKVwiO1xyXG4gICAgfSlcclxuICAgIC5hdHRyKFwiZHlcIiwgXCIuMzVlbVwiKVxyXG5cclxuICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJwaWUtZm9udCBzbGljZS1sYWJlbHNcIilcclxuICAgIC50ZXh0KGZ1bmN0aW9uIChkKSB7XHJcbiAgICAgIHJldHVybiBkLmRhdGE7XHJcbiAgICB9KTtcclxuXHJcbiAgaWYgKHRvb2x0aXBDaGVja2JveCA9PSBcImNoZWNrZWRcIikge1xyXG4gICAgY29uc3QgdG9vbHRpcCA9IGQzXHJcbiAgICAgIC5zZWxlY3QoXCJib2R5XCIpXHJcbiAgICAgIC5hcHBlbmQoXCJkaXZcIilcclxuICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcInBpZV90b29sdGlwXCIpO1xyXG5cclxuICAgIHNsaWNlc1xyXG4gICAgICAub24oXCJtb3VzZW1vdmVcIiwgZnVuY3Rpb24gKGQpIHtcclxuICAgICAgICB0b29sdGlwXHJcbiAgICAgICAgICAuc3R5bGUoXCJsZWZ0XCIsIGN1cnJlbnRFdmVudC5wYWdlWCArIDEwICsgXCJweFwiKVxyXG4gICAgICAgICAgLnN0eWxlKFwidG9wXCIsIGN1cnJlbnRFdmVudC5wYWdlWSArIDEwICsgXCJweFwiKVxyXG4gICAgICAgICAgLnN0eWxlKFwiZGlzcGxheVwiLCBcImlubGluZS1ibG9ja1wiKVxyXG4gICAgICAgICAgLmh0bWwoZC52YWx1ZSk7XHJcbiAgICAgIH0pXHJcbiAgICAgIC5vbihcIm1vdXNlb3V0XCIsIGZ1bmN0aW9uIChkKSB7XHJcbiAgICAgICAgdG9vbHRpcC5zdHlsZShcImRpc3BsYXlcIiwgXCJub25lXCIpO1xyXG4gICAgICB9KTtcclxuICB9XHJcbn1cclxuIiwiZXhwb3J0IGNvbnN0IHBpZVRpdGxlSW5wdXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3BpZV90aXRsZV9pbnB1dFwiKTtcclxuXHJcbmV4cG9ydCBjb25zdCBwaWVUaXRsZVNsaWRlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjcGllX3RpdGxlX3NsaWRlclwiKTtcclxuXHJcbmV4cG9ydCBjb25zdCBwaWVCb3JkZXJTbGlkZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3BpZV9ib3JkZXJfc2xpZGVyXCIpO1xyXG5cclxuZXhwb3J0IGNvbnN0IHBpZUlubmVyUmFkaXVzU2xpZGVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcclxuICBcIiNwaWVfaW5uZXJfcmFkaXVzX3NsaWRlclwiXHJcbik7XHJcblxyXG5leHBvcnQgY29uc3QgcGllT3V0ZXJSYWRpdXNTbGlkZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFxyXG4gIFwiI3BpZV9vdXRlcl9yYWRpdXNfc2xpZGVyXCJcclxuKTtcclxuXHJcbmV4cG9ydCBjb25zdCBwaWVMYWJlbFJhZGl1c1NsaWRlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXHJcbiAgXCIjcGllX2xhYmVsX3JhZGl1c19zbGlkZXJcIlxyXG4pO1xyXG5cclxuZXhwb3J0IGNvbnN0IHBpZVRvb2x0aXBDaGVja2JveCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXHJcbiAgXCIjcGllX3Rvb2x0aXBfY2hlY2tib3hcIlxyXG4pO1xyXG5cclxuZXhwb3J0IGNvbnN0IHBpZUxlZ2VuZENoZWNrYm94ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNwaWVfbGVnZW5kX2NoZWNrYm94XCIpO1xyXG5cclxuZXhwb3J0IGNvbnN0IHBpZUhvdmVyQ2hlY2tib3ggPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3BpZV9ob3Zlcl9jaGVja2JveFwiKTtcclxuXHJcbmV4cG9ydCBjb25zdCBwaWVWYWx1ZXNDaGVja2JveCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjcGllX3ZhbHVlc19jaGVja2JveFwiKTtcclxuIiwiaW1wb3J0IHsgcGllQ2FsYyB9IGZyb20gXCIuL3BpZV9jaGFydF9ncmFwaC5qc1wiO1xyXG5pbXBvcnQge1xyXG4gIHBpZVRpdGxlSW5wdXQsXHJcbiAgcGllVGl0bGVTbGlkZXIsXHJcbiAgcGllQm9yZGVyU2xpZGVyLFxyXG4gIHBpZUlubmVyUmFkaXVzU2xpZGVyLFxyXG4gIHBpZU91dGVyUmFkaXVzU2xpZGVyLFxyXG4gIHBpZUxhYmVsUmFkaXVzU2xpZGVyLFxyXG4gIHBpZVRvb2x0aXBDaGVja2JveCxcclxuICBwaWVMZWdlbmRDaGVja2JveCxcclxuICBwaWVIb3ZlckNoZWNrYm94LFxyXG4gIHBpZVZhbHVlc0NoZWNrYm94LFxyXG4gIHBpZVNvcnRlZENoZWNrYm94LFxyXG59IGZyb20gXCIuL3BpZV9jaGFydF9pbnB1dHMuanNcIjtcclxuaW1wb3J0IHsgcGllVmFsdWVzIH0gZnJvbSBcIi4vcGllX2NoYXJ0X3ZhbHVlcy5qc1wiO1xyXG5pbXBvcnQgeyBzZWxlY3QsIHNlbGVjdEFsbCB9IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcclxuXHJcbmNvbnN0IGQzID0geyBzZWxlY3QsIHNlbGVjdEFsbCB9O1xyXG5cclxucGllVGl0bGVJbnB1dC5hZGRFdmVudExpc3RlbmVyKFwia2V5dXBcIiwgZnVuY3Rpb24gKCkge1xyXG4gIHBpZVZhbHVlcy50aXRsZUlucHV0ID0gcGllVGl0bGVJbnB1dC52YWx1ZTtcclxuICBkMy5zZWxlY3QoXCIjcGllX3RpdGxlXCIpLnRleHQocGllVmFsdWVzLnRpdGxlSW5wdXQpO1xyXG4gIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjcGllX3RpdGxlX3NwYW5cIikuaW5uZXJIVE1MID0gcGllVmFsdWVzLnRpdGxlSW5wdXQ7XHJcbn0pO1xyXG5cclxucGllVGl0bGVTbGlkZXIuYWRkRXZlbnRMaXN0ZW5lcihcImlucHV0XCIsIGZ1bmN0aW9uICgpIHtcclxuICBwaWVWYWx1ZXMudGl0bGVTbGlkZXIgPSBwaWVUaXRsZVNsaWRlci52YWx1ZTtcclxuICBkMy5zZWxlY3QoXCIjcGllX3RpdGxlXCIpLmF0dHIoXCJ4XCIsIHBpZVZhbHVlcy50aXRsZVNsaWRlcik7XHJcbiAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNwaWVfdGl0bGVfc2xpZGVyX3NwYW5cIikuaW5uZXJIVE1MID1cclxuICAgIHBpZVZhbHVlcy50aXRsZVNsaWRlcjtcclxufSk7XHJcblxyXG5waWVCb3JkZXJTbGlkZXIuYWRkRXZlbnRMaXN0ZW5lcihcImlucHV0XCIsIGZ1bmN0aW9uICgpIHtcclxuICBwaWVWYWx1ZXMuYm9yZGVyU2xpZGVyID0gcGllQm9yZGVyU2xpZGVyLnZhbHVlO1xyXG4gIGQzLnNlbGVjdEFsbChcIi5waWVfc3Ryb2tlXCIpLmF0dHIoXHJcbiAgICBcInN0cm9rZS13aWR0aFwiLFxyXG4gICAgYCR7cGllVmFsdWVzLmJvcmRlclNsaWRlcn1weGBcclxuICApO1xyXG4gIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjcGllX3N0cm9rZV9zcGFuXCIpLmlubmVySFRNTCA9IHBpZVZhbHVlcy5ib3JkZXJTbGlkZXI7XHJcbn0pO1xyXG5cclxucGllSW5uZXJSYWRpdXNTbGlkZXIuYWRkRXZlbnRMaXN0ZW5lcihcImlucHV0XCIsIGZ1bmN0aW9uICgpIHtcclxuICBwaWVWYWx1ZXMuaW5uZXJSYWRpdXNTbGlkZXIgPSBwaWVJbm5lclJhZGl1c1NsaWRlci52YWx1ZTtcclxuICBwaWVDYWxjKFxyXG4gICAgcGllVmFsdWVzLmlubmVyUmFkaXVzU2xpZGVyLFxyXG4gICAgcGllVmFsdWVzLm91dGVyUmFkaXVzU2xpZGVyLFxyXG4gICAgcGllVmFsdWVzLmJvcmRlclNsaWRlcixcclxuICAgIHBpZVZhbHVlcy5sYWJlbFJhZGl1c1NsaWRlcixcclxuICAgIHBpZVZhbHVlcy50b29sdGlwQ2hlY2tib3gsXHJcbiAgICBwaWVWYWx1ZXMuY29sb3JTY2FsZUFycmF5XHJcbiAgKTtcclxuICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3BpZV9pbm5lcl9yYWRpdXNfc3BhblwiKS5pbm5lckhUTUwgPVxyXG4gICAgcGllVmFsdWVzLmlubmVyUmFkaXVzU2xpZGVyO1xyXG59KTtcclxuXHJcbnBpZU91dGVyUmFkaXVzU2xpZGVyLmFkZEV2ZW50TGlzdGVuZXIoXCJpbnB1dFwiLCBmdW5jdGlvbiAoKSB7XHJcbiAgcGllVmFsdWVzLm91dGVyUmFkaXVzU2xpZGVyID0gcGllT3V0ZXJSYWRpdXNTbGlkZXIudmFsdWU7XHJcbiAgcGllQ2FsYyhcclxuICAgIHBpZVZhbHVlcy5pbm5lclJhZGl1c1NsaWRlcixcclxuICAgIHBpZVZhbHVlcy5vdXRlclJhZGl1c1NsaWRlcixcclxuICAgIHBpZVZhbHVlcy5ib3JkZXJTbGlkZXIsXHJcbiAgICBwaWVWYWx1ZXMubGFiZWxSYWRpdXNTbGlkZXIsXHJcbiAgICBwaWVWYWx1ZXMudG9vbHRpcENoZWNrYm94LFxyXG4gICAgcGllVmFsdWVzLmNvbG9yU2NhbGVBcnJheVxyXG4gICk7XHJcbiAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNwaWVfb3V0ZXJfcmFkaXVzX3NwYW5cIikuaW5uZXJIVE1MID1cclxuICAgIHBpZVZhbHVlcy5vdXRlclJhZGl1c1NsaWRlcjtcclxufSk7XHJcblxyXG5waWVMYWJlbFJhZGl1c1NsaWRlci5hZGRFdmVudExpc3RlbmVyKFwiaW5wdXRcIiwgZnVuY3Rpb24gKCkge1xyXG4gIHBpZVZhbHVlcy5sYWJlbFJhZGl1c1NsaWRlciA9IHBpZUxhYmVsUmFkaXVzU2xpZGVyLnZhbHVlO1xyXG4gIHBpZUNhbGMoXHJcbiAgICBwaWVWYWx1ZXMuaW5uZXJSYWRpdXNTbGlkZXIsXHJcbiAgICBwaWVWYWx1ZXMub3V0ZXJSYWRpdXNTbGlkZXIsXHJcbiAgICBwaWVWYWx1ZXMuYm9yZGVyU2xpZGVyLFxyXG4gICAgcGllVmFsdWVzLmxhYmVsUmFkaXVzU2xpZGVyLFxyXG4gICAgcGllVmFsdWVzLnRvb2x0aXBDaGVja2JveCxcclxuICAgIHBpZVZhbHVlcy5jb2xvclNjYWxlQXJyYXlcclxuICApO1xyXG4gIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjcGllX2xhYmVsX3JhZGl1c19zcGFuXCIpLmlubmVySFRNTCA9XHJcbiAgICBwaWVWYWx1ZXMubGFiZWxSYWRpdXNTbGlkZXI7XHJcbn0pO1xyXG5cclxucGllVG9vbHRpcENoZWNrYm94LmFkZEV2ZW50TGlzdGVuZXIoXCJjaGFuZ2VcIiwgZnVuY3Rpb24gKCkge1xyXG4gIGlmICh0aGlzLmNoZWNrZWQpIHtcclxuICAgIHBpZVZhbHVlcy50b29sdGlwQ2hlY2tib3ggPSBcImNoZWNrZWRcIjtcclxuICAgIHBpZUNhbGMoXHJcbiAgICAgIHBpZVZhbHVlcy5pbm5lclJhZGl1c1NsaWRlcixcclxuICAgICAgcGllVmFsdWVzLm91dGVyUmFkaXVzU2xpZGVyLFxyXG4gICAgICBwaWVWYWx1ZXMuYm9yZGVyU2xpZGVyLFxyXG4gICAgICBwaWVWYWx1ZXMubGFiZWxSYWRpdXNTbGlkZXIsXHJcbiAgICAgIHBpZVZhbHVlcy50b29sdGlwQ2hlY2tib3gsXHJcbiAgICAgIHBpZVZhbHVlcy5jb2xvclNjYWxlQXJyYXlcclxuICAgICk7XHJcbiAgICBkMy5zZWxlY3QoXCIjcGllX3Rvb2x0aXBfY2hlY2tib3hfc3BhblwiKS5jbGFzc2VkKFwiaGlkZVwiLCBmYWxzZSk7XHJcbiAgfVxyXG5cclxuICBpZiAodGhpcy5jaGVja2VkID09IGZhbHNlKSB7XHJcbiAgICBwaWVWYWx1ZXMudG9vbHRpcENoZWNrYm94ID0gXCJ1bmNoZWNrZWRcIjtcclxuICAgIGlmIChkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnBpZV90b29sdGlwXCIpKSB7XHJcbiAgICAgIGQzLnNlbGVjdChcIi5waWVfdG9vbHRpcFwiKS5yZW1vdmUoKTtcclxuICAgIH1cclxuICAgIGQzLnNlbGVjdChcIiNwaWVfdG9vbHRpcF9jaGVja2JveF9zcGFuXCIpLmNsYXNzZWQoXCJoaWRlXCIsIHRydWUpO1xyXG4gIH1cclxufSk7XHJcblxyXG5waWVMZWdlbmRDaGVja2JveC5hZGRFdmVudExpc3RlbmVyKFwiY2hhbmdlXCIsIGZ1bmN0aW9uICgpIHtcclxuICBpZiAodGhpcy5jaGVja2VkKSB7XHJcbiAgICBwaWVWYWx1ZXMubGVnZW5kQ2hlY2tib3ggPSBcImNoZWNrZWRcIjtcclxuICAgIGQzLnNlbGVjdEFsbChcIi5wYWlyc1wiKS5zdHlsZShcImRpc3BsYXlcIiwgXCJmbGV4XCIpO1xyXG4gICAgZDMuc2VsZWN0KFwiI3BpZV9sZWdlbmRfY2hlY2tib3hfc3BhblwiKS5jbGFzc2VkKFwiaGlkZVwiLCBmYWxzZSk7XHJcbiAgICBkMy5zZWxlY3QoXCIjcGllX3RyYW5feF9zcGFuXCIpLmh0bWwoXCIxNzVcIik7XHJcblxyXG4gICAgZDMuc2VsZWN0KFwiI3BpZV9jaGFydF9nXCIpLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgYHRyYW5zbGF0ZSgxNzUsIDIzMClgKTtcclxuICB9XHJcbiAgaWYgKHRoaXMuY2hlY2tlZCA9PSBmYWxzZSkge1xyXG4gICAgcGllVmFsdWVzLmxlZ2VuZENoZWNrYm94ID0gXCJ1bmNoZWNrZWRcIjtcclxuICAgIGQzLnNlbGVjdEFsbChcIi5wYWlyc1wiKS5zdHlsZShcImRpc3BsYXlcIiwgXCJub25lXCIpO1xyXG4gICAgZDMuc2VsZWN0KFwiI3BpZV9sZWdlbmRfY2hlY2tib3hfc3BhblwiKS5jbGFzc2VkKFwiaGlkZVwiLCB0cnVlKTtcclxuICAgIGQzLnNlbGVjdChcIiNwaWVfdHJhbl94X3NwYW5cIikuaHRtbChcIjMxMFwiKTtcclxuXHJcbiAgICBkMy5zZWxlY3QoXCIjcGllX2NoYXJ0X2dcIikuYXR0cihcInRyYW5zZm9ybVwiLCBgdHJhbnNsYXRlKDMwMCwgMjMwKWApO1xyXG4gIH1cclxufSk7XHJcblxyXG5waWVIb3ZlckNoZWNrYm94LmFkZEV2ZW50TGlzdGVuZXIoXCJjaGFuZ2VcIiwgZnVuY3Rpb24gKCkge1xyXG4gIGlmICh0aGlzLmNoZWNrZWQpIHtcclxuICAgIHBpZVZhbHVlcy5ob3ZlckNoZWNrYm94ID0gXCJjaGVja2VkXCI7XHJcbiAgICBkMy5zZWxlY3RBbGwoXCIuYXJjID4gcGF0aFwiKS5jbGFzc2VkKFwiaG92ZXJlZFwiLCB0cnVlKTtcclxuICAgIGQzLnNlbGVjdChcIiNwaWVfaG92ZXJfY2hlY2tib3hfc3BhblwiKS5jbGFzc2VkKFwiaGlkZVwiLCBmYWxzZSk7XHJcbiAgfVxyXG4gIGlmICh0aGlzLmNoZWNrZWQgPT0gZmFsc2UpIHtcclxuICAgIHBpZVZhbHVlcy5ob3ZlckNoZWNrYm94ID0gXCJ1bmNoZWNrZWRcIjtcclxuICAgIGQzLnNlbGVjdEFsbChcIi5hcmMgPiBwYXRoXCIpLmNsYXNzZWQoXCJob3ZlcmVkXCIsIGZhbHNlKTtcclxuICAgIGQzLnNlbGVjdChcIiNwaWVfaG92ZXJfY2hlY2tib3hfc3BhblwiKS5jbGFzc2VkKFwiaGlkZVwiLCB0cnVlKTtcclxuICB9XHJcbn0pO1xyXG5cclxucGllVmFsdWVzQ2hlY2tib3guYWRkRXZlbnRMaXN0ZW5lcihcImNoYW5nZVwiLCBmdW5jdGlvbiAoKSB7XHJcbiAgaWYgKHRoaXMuY2hlY2tlZCkge1xyXG4gICAgcGllVmFsdWVzLnZhbHVlc0NoZWNrYm94ID0gXCJjaGVja2VkXCI7XHJcbiAgICBkMy5zZWxlY3RBbGwoXCIuc2xpY2UtbGFiZWxzXCIpLmF0dHIoXCJkaXNwbGF5XCIsIFwiXCIpO1xyXG4gICAgZDMuc2VsZWN0KFwiI3BpZV92YWx1ZXNfY2hlY2tib3hfc3BhblwiKS5jbGFzc2VkKFwiaGlkZVwiLCBmYWxzZSk7XHJcbiAgfVxyXG4gIGlmICh0aGlzLmNoZWNrZWQgPT0gZmFsc2UpIHtcclxuICAgIHBpZVZhbHVlcy52YWx1ZXNDaGVja2JveCA9IFwidW5jaGVja2VkXCI7XHJcbiAgICBkMy5zZWxlY3RBbGwoXCIuc2xpY2UtbGFiZWxzXCIpLmF0dHIoXCJkaXNwbGF5XCIsIFwibm9uZVwiKTtcclxuICAgIGQzLnNlbGVjdChcIiNwaWVfdmFsdWVzX2NoZWNrYm94X3NwYW5cIikuY2xhc3NlZChcImhpZGVcIiwgdHJ1ZSk7XHJcbiAgfVxyXG59KTtcclxuIiwiaW1wb3J0IHsgcGllQ2FsYyB9IGZyb20gXCIuL3BpZV9jaGFydF9ncmFwaC5qc1wiO1xyXG5pbXBvcnQgeyBwaWVWYWx1ZXMgfSBmcm9tIFwiLi9waWVfY2hhcnRfdmFsdWVzLmpzXCI7XHJcbmltcG9ydCBcIi4vcGllX2NoYXJ0X2xpc3RlbmVyc1wiO1xyXG5pbXBvcnQgXCIuL3BpZV9jaGFydF9jb2xvcl9waWNrZXIuanNcIjtcclxuaW1wb3J0IHsgc2VsZWN0LCBzZWxlY3RBbGwgfSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XHJcbmNvbnN0IGQzID0geyBzZWxlY3QsIHNlbGVjdEFsbCB9O1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGluaXRQaWVDaGFydCgpIHtcclxuICBwaWVDYWxjKFxyXG4gICAgcGllVmFsdWVzLmlubmVyUmFkaXVzU2xpZGVyLFxyXG4gICAgcGllVmFsdWVzLm91dGVyUmFkaXVzU2xpZGVyLFxyXG4gICAgcGllVmFsdWVzLmJvcmRlclNsaWRlcixcclxuICAgIHBpZVZhbHVlcy5sYWJlbFJhZGl1c1NsaWRlcixcclxuICAgIHBpZVZhbHVlcy50b29sdGlwQ2hlY2tib3gsXHJcbiAgICBwaWVWYWx1ZXMuY29sb3JTY2FsZUFycmF5XHJcbiAgKTtcclxuICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3BpZV90aXRsZV9zcGFuXCIpLmlubmVySFRNTCA9IHBpZVZhbHVlcy50aXRsZUlucHV0O1xyXG4gIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjcGllX3RpdGxlX3NsaWRlcl9zcGFuXCIpLmlubmVySFRNTCA9XHJcbiAgICBwaWVWYWx1ZXMudGl0bGVTbGlkZXI7XHJcbiAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNwaWVfc3Ryb2tlX3NwYW5cIikuaW5uZXJIVE1MID0gcGllVmFsdWVzLmJvcmRlclNsaWRlcjtcclxuICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3BpZV9pbm5lcl9yYWRpdXNfc3BhblwiKS5pbm5lckhUTUwgPVxyXG4gICAgcGllVmFsdWVzLmlubmVyUmFkaXVzU2xpZGVyO1xyXG4gIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjcGllX291dGVyX3JhZGl1c19zcGFuXCIpLmlubmVySFRNTCA9XHJcbiAgICBwaWVWYWx1ZXMub3V0ZXJSYWRpdXNTbGlkZXI7XHJcbiAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNwaWVfbGFiZWxfcmFkaXVzX3NwYW5cIikuaW5uZXJIVE1MID1cclxuICAgIHBpZVZhbHVlcy5sYWJlbFJhZGl1c1NsaWRlcjtcclxuXHJcbiAgZDMuc2VsZWN0KFwiI3BpZV90b29sdGlwX2NoZWNrYm94X3NwYW5cIikuY2xhc3NlZChcImhpZGVcIiwgZmFsc2UpO1xyXG4gIGQzLnNlbGVjdChcIiNwaWVfbGVnZW5kX2NoZWNrYm94X3NwYW5cIikuY2xhc3NlZChcImhpZGVcIiwgZmFsc2UpO1xyXG4gIGQzLnNlbGVjdChcIiNwaWVfaG92ZXJfY2hlY2tib3hfc3BhblwiKS5jbGFzc2VkKFwiaGlkZVwiLCBmYWxzZSk7XHJcbiAgZDMuc2VsZWN0KFwiI3BpZV92YWx1ZXNfY2hlY2tib3hfc3BhblwiKS5jbGFzc2VkKFwiaGlkZVwiLCBmYWxzZSk7XHJcblxyXG4gIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjcGllX2JhY2tncm91ZF9jcF9zcGFuXCIpLmlubmVySFRNTCA9XHJcbiAgICBwaWVWYWx1ZXMuYmFja2dyb3VuZENQO1xyXG4gIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjcGllX2JvcmRlcl9jcF9zcGFuXCIpLmlubmVySFRNTCA9IHBpZVZhbHVlcy5ib3JkZXJDUDtcclxuICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3BpZV90aXRsZV9jcF9zcGFuXCIpLmlubmVySFRNTCA9IHBpZVZhbHVlcy5mb250Q1A7XHJcbiAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNwaWVfbGVnZW5kX2NwX3NwYW5cIikuaW5uZXJIVE1MID0gcGllVmFsdWVzLmZvbnRDUDtcclxuICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3BpZV92YWx1ZXNfY3Bfc3BhblwiKS5pbm5lckhUTUwgPSBwaWVWYWx1ZXMuZm9udENQO1xyXG4gIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjcGllX2NvbG9yMV9jcF9zcGFuXCIpLmlubmVySFRNTCA9XHJcbiAgICBwaWVWYWx1ZXMuY29sb3JTY2FsZUFycmF5WzBdO1xyXG4gIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjcGllX2NvbG9yMl9jcF9zcGFuXCIpLmlubmVySFRNTCA9XHJcbiAgICBwaWVWYWx1ZXMuY29sb3JTY2FsZUFycmF5WzFdO1xyXG4gIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjcGllX2NvbG9yM19jcF9zcGFuXCIpLmlubmVySFRNTCA9XHJcbiAgICBwaWVWYWx1ZXMuY29sb3JTY2FsZUFycmF5WzJdO1xyXG5cclxuICBkMy5zZWxlY3QoXCIjcGllX3RyYW5feF9zcGFuXCIpLmh0bWwoXCIxNzVcIik7XHJcbn1cclxuIiwiaW1wb3J0IHtcclxuICBwaWVUaXRsZUlucHV0LFxyXG4gIHBpZVRpdGxlU2xpZGVyLFxyXG4gIHBpZUJvcmRlclNsaWRlcixcclxuICBwaWVJbm5lclJhZGl1c1NsaWRlcixcclxuICBwaWVPdXRlclJhZGl1c1NsaWRlcixcclxuICBwaWVMYWJlbFJhZGl1c1NsaWRlcixcclxufSBmcm9tIFwiLi9waWVfY2hhcnRfaW5wdXRzLmpzXCI7XHJcblxyXG5leHBvcnQgbGV0IHBpZVZhbHVlcyA9IHtcclxuICB0aXRsZUlucHV0OiBwaWVUaXRsZUlucHV0LnZhbHVlLFxyXG4gIHRpdGxlU2xpZGVyOiBwaWVUaXRsZVNsaWRlci52YWx1ZSxcclxuICBib3JkZXJTbGlkZXI6IHBpZUJvcmRlclNsaWRlci52YWx1ZSxcclxuICBpbm5lclJhZGl1c1NsaWRlcjogcGllSW5uZXJSYWRpdXNTbGlkZXIudmFsdWUsXHJcbiAgb3V0ZXJSYWRpdXNTbGlkZXI6IHBpZU91dGVyUmFkaXVzU2xpZGVyLnZhbHVlLFxyXG4gIGxhYmVsUmFkaXVzU2xpZGVyOiBwaWVMYWJlbFJhZGl1c1NsaWRlci52YWx1ZSxcclxuICB0b29sdGlwQ2hlY2tib3g6IFwiY2hlY2tlZFwiLFxyXG4gIGxlZ2VuZENoZWNrYm94OiBcImNoZWNrZWRcIixcclxuICBob3ZlckNoZWNrYm94OiBcImNoZWNrZWRcIixcclxuICB2YWx1ZXNDaGVja2JveDogXCJjaGVja2VkXCIsXHJcbiAgc29ydGVkQ2hlY2tib3g6IFwiY2hlY2tlZFwiLFxyXG4gIGJhY2tncm91bmRDUDogXCJyZ2JhKDI1NSwyNTUsMjU1LDEpXCIsXHJcbiAgYm9yZGVyQ1A6IFwicmdiYSgyNTUsMjU1LDI1NSwxKVwiLFxyXG4gIGZvbnRDUDogXCJyZ2JhKDcwLDcwLDcwLDEpXCIsXHJcbiAgY29sb3JTY2FsZUFycmF5OiBbXCIjOThhYmM1XCIsIFwiIzhhODlhNlwiLCBcIiM3YjY4ODhcIl0sXHJcbn07XHJcbiJdfQ==
